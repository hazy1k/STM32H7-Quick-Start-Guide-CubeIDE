
19.RNG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a68  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08007d08  08007d08  00008d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007db4  08007db4  00008db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007dbc  08007dbc  00008dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007dc0  08007dc0  00008dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  08007dc4  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000218  24000070  08007e34  00009070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000288  08007e34  00009288  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012c20  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002c3a  00000000  00000000  0001bcbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ce8  00000000  00000000  0001e8f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009c3  00000000  00000000  0001f5e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000388ba  00000000  00000000  0001ffa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017ad1  00000000  00000000  0005885d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bedd  00000000  00000000  0007032e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc20b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003a30  00000000  00000000  001cc250  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001cfc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08007cf0 	.word	0x08007cf0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08007cf0 	.word	0x08007cf0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006e4:	f001 fec0 	bl	8002468 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006e8:	2310      	movs	r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006fe:	f001 fceb 	bl	80020d8 <HAL_GPIO_Init>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58021000 	.word	0x58021000

08000714 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b086      	sub	sp, #24
 8000718:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800072a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800072e:	4a13      	ldr	r2, [pc, #76]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 8000730:	f043 0301 	orr.w	r3, r3, #1
 8000734:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000738:	4b10      	ldr	r3, [pc, #64]	@ (800077c <MX_KEY_GPIO_Init+0x68>)
 800073a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800073e:	f003 0301 	and.w	r3, r3, #1
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 8000746:	2301      	movs	r3, #1
 8000748:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800074a:	2300      	movs	r3, #0
 800074c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800074e:	2302      	movs	r3, #2
 8000750:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	4619      	mov	r1, r3
 8000756:	480a      	ldr	r0, [pc, #40]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000758:	f001 fcbe 	bl	80020d8 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 800075c:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000760:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000762:	2300      	movs	r3, #0
 8000764:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000766:	2301      	movs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_KEY_GPIO_Init+0x6c>)
 8000770:	f001 fcb2 	bl	80020d8 <HAL_GPIO_Init>
}
 8000774:	bf00      	nop
 8000776:	3718      	adds	r7, #24
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	58024400 	.word	0x58024400
 8000780:	58020000 	.word	0x58020000

08000784 <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 8000792:	79fb      	ldrb	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d002      	beq.n	800079e <key_scan+0x1a>
 8000798:	4b30      	ldr	r3, [pc, #192]	@ (800085c <key_scan+0xd8>)
 800079a:	2201      	movs	r2, #1
 800079c:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 800079e:	2102      	movs	r1, #2
 80007a0:	482f      	ldr	r0, [pc, #188]	@ (8000860 <key_scan+0xdc>)
 80007a2:	f001 fe49 	bl	8002438 <HAL_GPIO_ReadPin>
 80007a6:	4603      	mov	r3, r0
 80007a8:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80007aa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ae:	482c      	ldr	r0, [pc, #176]	@ (8000860 <key_scan+0xdc>)
 80007b0:	f001 fe42 	bl	8002438 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80007b8:	2101      	movs	r1, #1
 80007ba:	4829      	ldr	r0, [pc, #164]	@ (8000860 <key_scan+0xdc>)
 80007bc:	f001 fe3c 	bl	8002438 <HAL_GPIO_ReadPin>
 80007c0:	4603      	mov	r3, r0
 80007c2:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 80007c4:	4b25      	ldr	r3, [pc, #148]	@ (800085c <key_scan+0xd8>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d033      	beq.n	8000834 <key_scan+0xb0>
 80007cc:	7bbb      	ldrb	r3, [r7, #14]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d005      	beq.n	80007de <key_scan+0x5a>
 80007d2:	7b7b      	ldrb	r3, [r7, #13]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d002      	beq.n	80007de <key_scan+0x5a>
 80007d8:	7b3b      	ldrb	r3, [r7, #12]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d12a      	bne.n	8000834 <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 80007de:	200a      	movs	r0, #10
 80007e0:	f000 fd5e 	bl	80012a0 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 80007e4:	2102      	movs	r1, #2
 80007e6:	481e      	ldr	r0, [pc, #120]	@ (8000860 <key_scan+0xdc>)
 80007e8:	f001 fe26 	bl	8002438 <HAL_GPIO_ReadPin>
 80007ec:	4603      	mov	r3, r0
 80007ee:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80007f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f4:	481a      	ldr	r0, [pc, #104]	@ (8000860 <key_scan+0xdc>)
 80007f6:	f001 fe1f 	bl	8002438 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80007fe:	2101      	movs	r1, #1
 8000800:	4817      	ldr	r0, [pc, #92]	@ (8000860 <key_scan+0xdc>)
 8000802:	f001 fe19 	bl	8002438 <HAL_GPIO_ReadPin>
 8000806:	4603      	mov	r3, r0
 8000808:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 800080a:	4b14      	ldr	r3, [pc, #80]	@ (800085c <key_scan+0xd8>)
 800080c:	2200      	movs	r2, #0
 800080e:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 8000810:	7b3b      	ldrb	r3, [r7, #12]
 8000812:	2b01      	cmp	r3, #1
 8000814:	d102      	bne.n	800081c <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 8000816:	2303      	movs	r3, #3
 8000818:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 800081a:	e018      	b.n	800084e <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 800081c:	7b7b      	ldrb	r3, [r7, #13]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d102      	bne.n	8000828 <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 8000822:	2302      	movs	r3, #2
 8000824:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000826:	e012      	b.n	800084e <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 8000828:	7bbb      	ldrb	r3, [r7, #14]
 800082a:	2b00      	cmp	r3, #0
 800082c:	d10f      	bne.n	800084e <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 800082e:	2301      	movs	r3, #1
 8000830:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000832:	e00c      	b.n	800084e <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 8000834:	7bbb      	ldrb	r3, [r7, #14]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10a      	bne.n	8000850 <key_scan+0xcc>
 800083a:	7b7b      	ldrb	r3, [r7, #13]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d107      	bne.n	8000850 <key_scan+0xcc>
 8000840:	7b3b      	ldrb	r3, [r7, #12]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d104      	bne.n	8000850 <key_scan+0xcc>
    {
        key_up = 1;
 8000846:	4b05      	ldr	r3, [pc, #20]	@ (800085c <key_scan+0xd8>)
 8000848:	2201      	movs	r2, #1
 800084a:	701a      	strb	r2, [r3, #0]
 800084c:	e000      	b.n	8000850 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 800084e:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 8000850:	7bfb      	ldrb	r3, [r7, #15]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3710      	adds	r7, #16
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	24000000 	.word	0x24000000
 8000860:	58020000 	.word	0x58020000

08000864 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000880:	4a22      	ldr	r2, [pc, #136]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800088c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000898:	4b1c      	ldr	r3, [pc, #112]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 800089a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800089e:	4a1b      	ldr	r2, [pc, #108]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 80008a0:	f043 0302 	orr.w	r3, r3, #2
 80008a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_LED_GPIO_Init+0xa8>)
 80008aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008ae:	f003 0302 	and.w	r3, r3, #2
 80008b2:	607b      	str	r3, [r7, #4]
 80008b4:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 80008b6:	2201      	movs	r2, #1
 80008b8:	2160      	movs	r1, #96	@ 0x60
 80008ba:	4815      	ldr	r0, [pc, #84]	@ (8000910 <MX_LED_GPIO_Init+0xac>)
 80008bc:	f001 fdd4 	bl	8002468 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 80008c0:	2201      	movs	r2, #1
 80008c2:	2110      	movs	r1, #16
 80008c4:	4813      	ldr	r0, [pc, #76]	@ (8000914 <MX_LED_GPIO_Init+0xb0>)
 80008c6:	f001 fdcf 	bl	8002468 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008ca:	2360      	movs	r3, #96	@ 0x60
 80008cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ce:	2301      	movs	r3, #1
 80008d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008da:	f107 030c 	add.w	r3, r7, #12
 80008de:	4619      	mov	r1, r3
 80008e0:	480b      	ldr	r0, [pc, #44]	@ (8000910 <MX_LED_GPIO_Init+0xac>)
 80008e2:	f001 fbf9 	bl	80020d8 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008e6:	2310      	movs	r3, #16
 80008e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	@ (8000914 <MX_LED_GPIO_Init+0xb0>)
 80008fe:	f001 fbeb 	bl	80020d8 <HAL_GPIO_Init>
}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	58024400 	.word	0x58024400
 8000910:	58021000 	.word	0x58021000
 8000914:	58020400 	.word	0x58020400

08000918 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800091c:	f7ff ffa2 	bl	8000864 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000920:	f7ff fec4 	bl	80006ac <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000924:	f7ff fef6 	bl	8000714 <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000928:	f000 fb2c 	bl	8000f84 <MX_USART1_UART_Init>
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <main>:

void SystemClock_Config(void);
static void MPU_Config(void);

int main(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
  uint8_t key_value = 0;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
  uint32_t random_number = 0;
 800093a:	2300      	movs	r3, #0
 800093c:	603b      	str	r3, [r7, #0]
  MPU_Config();
 800093e:	f000 f8b7 	bl	8000ab0 <MPU_Config>
  HAL_Init();
 8000942:	f000 fc1b 	bl	800117c <HAL_Init>
  SystemClock_Config();
 8000946:	f000 f837 	bl	80009b8 <SystemClock_Config>
  bsp_init();
 800094a:	f7ff ffe5 	bl	8000918 <bsp_init>
  MX_RNG_Init();
 800094e:	f000 f8e1 	bl	8000b14 <MX_RNG_Init>
  while (1)
  {
    key_value = key_scan(0);
 8000952:	2000      	movs	r0, #0
 8000954:	f7ff ff16 	bl	8000784 <key_scan>
 8000958:	4603      	mov	r3, r0
 800095a:	71fb      	strb	r3, [r7, #7]
    if(key_value == KEY0_PRES)
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d10a      	bne.n	8000978 <main+0x48>
    {
      random_number = get_random_number();
 8000962:	f000 f929 	bl	8000bb8 <get_random_number>
 8000966:	6038      	str	r0, [r7, #0]
	  printf("Random Number: %lu\r\n", random_number);
 8000968:	6839      	ldr	r1, [r7, #0]
 800096a:	4810      	ldr	r0, [pc, #64]	@ (80009ac <main+0x7c>)
 800096c:	f006 fb54 	bl	8007018 <iprintf>
	  HAL_Delay(200);
 8000970:	20c8      	movs	r0, #200	@ 0xc8
 8000972:	f000 fc95 	bl	80012a0 <HAL_Delay>
 8000976:	e7ec      	b.n	8000952 <main+0x22>
    }
    else if(key_value == KEY1_PRES)
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	2b02      	cmp	r3, #2
 800097c:	d10c      	bne.n	8000998 <main+0x68>
	{
	  random_number = get_random_number_in_range(50, 100);
 800097e:	2164      	movs	r1, #100	@ 0x64
 8000980:	2032      	movs	r0, #50	@ 0x32
 8000982:	f000 f92b 	bl	8000bdc <get_random_number_in_range>
 8000986:	6038      	str	r0, [r7, #0]
	  printf("Random Number in Range 50-100: %lu\r\n", random_number);
 8000988:	6839      	ldr	r1, [r7, #0]
 800098a:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <main+0x80>)
 800098c:	f006 fb44 	bl	8007018 <iprintf>
	  HAL_Delay(200);
 8000990:	20c8      	movs	r0, #200	@ 0xc8
 8000992:	f000 fc85 	bl	80012a0 <HAL_Delay>
 8000996:	e7dc      	b.n	8000952 <main+0x22>
    }
    else
    {
	  HAL_GPIO_TogglePin(LED_RED_Port, LED_RED_Pin);
 8000998:	2140      	movs	r1, #64	@ 0x40
 800099a:	4806      	ldr	r0, [pc, #24]	@ (80009b4 <main+0x84>)
 800099c:	f001 fd7d 	bl	800249a <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 80009a0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80009a4:	f000 fc7c 	bl	80012a0 <HAL_Delay>
    key_value = key_scan(0);
 80009a8:	e7d3      	b.n	8000952 <main+0x22>
 80009aa:	bf00      	nop
 80009ac:	08007d08 	.word	0x08007d08
 80009b0:	08007d20 	.word	0x08007d20
 80009b4:	58021000 	.word	0x58021000

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b09c      	sub	sp, #112	@ 0x70
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c2:	224c      	movs	r2, #76	@ 0x4c
 80009c4:	2100      	movs	r1, #0
 80009c6:	4618      	mov	r0, r3
 80009c8:	f006 fb7b 	bl	80070c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	2220      	movs	r2, #32
 80009d0:	2100      	movs	r1, #0
 80009d2:	4618      	mov	r0, r3
 80009d4:	f006 fb75 	bl	80070c2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009d8:	2002      	movs	r0, #2
 80009da:	f001 fd9d 	bl	8002518 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009de:	2300      	movs	r3, #0
 80009e0:	603b      	str	r3, [r7, #0]
 80009e2:	4b31      	ldr	r3, [pc, #196]	@ (8000aa8 <SystemClock_Config+0xf0>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	4a30      	ldr	r2, [pc, #192]	@ (8000aa8 <SystemClock_Config+0xf0>)
 80009e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009ec:	6193      	str	r3, [r2, #24]
 80009ee:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa8 <SystemClock_Config+0xf0>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f6:	603b      	str	r3, [r7, #0]
 80009f8:	4b2c      	ldr	r3, [pc, #176]	@ (8000aac <SystemClock_Config+0xf4>)
 80009fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009fc:	4a2b      	ldr	r2, [pc, #172]	@ (8000aac <SystemClock_Config+0xf4>)
 80009fe:	f043 0301 	orr.w	r3, r3, #1
 8000a02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a04:	4b29      	ldr	r3, [pc, #164]	@ (8000aac <SystemClock_Config+0xf4>)
 8000a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a08:	f003 0301 	and.w	r3, r3, #1
 8000a0c:	603b      	str	r3, [r7, #0]
 8000a0e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a10:	bf00      	nop
 8000a12:	4b25      	ldr	r3, [pc, #148]	@ (8000aa8 <SystemClock_Config+0xf0>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a1a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a1e:	d1f8      	bne.n	8000a12 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000a20:	2321      	movs	r3, #33	@ 0x21
 8000a22:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a32:	2302      	movs	r3, #2
 8000a34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000a36:	2302      	movs	r3, #2
 8000a38:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000a3a:	23f0      	movs	r3, #240	@ 0xf0
 8000a3c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a4a:	2308      	movs	r3, #8
 8000a4c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f001 fd96 	bl	800258c <HAL_RCC_OscConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a66:	f000 f84f 	bl	8000b08 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6a:	233f      	movs	r3, #63	@ 0x3f
 8000a6c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a76:	2308      	movs	r3, #8
 8000a78:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a7a:	2340      	movs	r3, #64	@ 0x40
 8000a7c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a7e:	2340      	movs	r3, #64	@ 0x40
 8000a80:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a86:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a88:	2340      	movs	r3, #64	@ 0x40
 8000a8a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a8c:	1d3b      	adds	r3, r7, #4
 8000a8e:	2104      	movs	r1, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f002 f9d5 	bl	8002e40 <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a9c:	f000 f834 	bl	8000b08 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3770      	adds	r7, #112	@ 0x70
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	58024800 	.word	0x58024800
 8000aac:	58000400 	.word	0x58000400

08000ab0 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ac2:	f000 fd2d 	bl	8001520 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000ad2:	231f      	movs	r3, #31
 8000ad4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000ad6:	2387      	movs	r3, #135	@ 0x87
 8000ad8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000aee:	2300      	movs	r3, #0
 8000af0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af2:	463b      	mov	r3, r7
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 fd4b 	bl	8001590 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000afa:	2004      	movs	r0, #4
 8000afc:	f000 fd28 	bl	8001550 <HAL_MPU_Enable>

}
 8000b00:	bf00      	nop
 8000b02:	3710      	adds	r7, #16
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b0c:	b672      	cpsid	i
}
 8000b0e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b10:	bf00      	nop
 8000b12:	e7fd      	b.n	8000b10 <Error_Handler+0x8>

08000b14 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <MX_RNG_Init+0x24>)
 8000b1a:	4a08      	ldr	r2, [pc, #32]	@ (8000b3c <MX_RNG_Init+0x28>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000b1e:	4b06      	ldr	r3, [pc, #24]	@ (8000b38 <MX_RNG_Init+0x24>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000b24:	4804      	ldr	r0, [pc, #16]	@ (8000b38 <MX_RNG_Init+0x24>)
 8000b26:	f004 fb43 	bl	80051b0 <HAL_RNG_Init>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000b30:	f7ff ffea 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2400008c 	.word	0x2400008c
 8000b3c:	48021800 	.word	0x48021800

08000b40 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b0b4      	sub	sp, #208	@ 0xd0
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b48:	f107 0310 	add.w	r3, r7, #16
 8000b4c:	22c0      	movs	r2, #192	@ 0xc0
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f006 fab6 	bl	80070c2 <memset>
  if(rngHandle->Instance==RNG)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	4a15      	ldr	r2, [pc, #84]	@ (8000bb0 <HAL_RNG_MspInit+0x70>)
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	d122      	bne.n	8000ba6 <HAL_RNG_MspInit+0x66>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8000b60:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000b64:	f04f 0300 	mov.w	r3, #0
 8000b68:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8000b6c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b74:	f107 0310 	add.w	r3, r7, #16
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fced 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <HAL_RNG_MspInit+0x48>
    {
      Error_Handler();
 8000b84:	f7ff ffc0 	bl	8000b08 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000b88:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb4 <HAL_RNG_MspInit+0x74>)
 8000b8a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000b8e:	4a09      	ldr	r2, [pc, #36]	@ (8000bb4 <HAL_RNG_MspInit+0x74>)
 8000b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b94:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 8000b98:	4b06      	ldr	r3, [pc, #24]	@ (8000bb4 <HAL_RNG_MspInit+0x74>)
 8000b9a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8000b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000ba6:	bf00      	nop
 8000ba8:	37d0      	adds	r7, #208	@ 0xd0
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	48021800 	.word	0x48021800
 8000bb4:	58024400 	.word	0x58024400

08000bb8 <get_random_number>:

/* USER CODE BEGIN 1 */

// 获取随机数
uint32_t get_random_number(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
	uint32_t random_number = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
	HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <get_random_number+0x20>)
 8000bc8:	f004 fb54 	bl	8005274 <HAL_RNG_GenerateRandomNumber>
	return random_number;
 8000bcc:	687b      	ldr	r3, [r7, #4]
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	2400008c 	.word	0x2400008c

08000bdc <get_random_number_in_range>:

// 获取指定范围的随机数
uint32_t get_random_number_in_range(uint32_t min, uint32_t max)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b084      	sub	sp, #16
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
 8000be4:	6039      	str	r1, [r7, #0]
	uint32_t random_number;
	HAL_RNG_GenerateRandomNumber(&hrng, &random_number);
 8000be6:	f107 030c 	add.w	r3, r7, #12
 8000bea:	4619      	mov	r1, r3
 8000bec:	4809      	ldr	r0, [pc, #36]	@ (8000c14 <get_random_number_in_range+0x38>)
 8000bee:	f004 fb41 	bl	8005274 <HAL_RNG_GenerateRandomNumber>
	return (random_number % (max - min + 1)) + min;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	6839      	ldr	r1, [r7, #0]
 8000bf6:	687a      	ldr	r2, [r7, #4]
 8000bf8:	1a8a      	subs	r2, r1, r2
 8000bfa:	3201      	adds	r2, #1
 8000bfc:	fbb3 f1f2 	udiv	r1, r3, r2
 8000c00:	fb01 f202 	mul.w	r2, r1, r2
 8000c04:	1a9a      	subs	r2, r3, r2
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2400008c 	.word	0x2400008c

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c24:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_MspInit+0x30>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58024400 	.word	0x58024400

08000c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <NMI_Handler+0x4>

08000c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <HardFault_Handler+0x4>

08000c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <MemManage_Handler+0x4>

08000c64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <BusFault_Handler+0x4>

08000c6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <UsageFault_Handler+0x4>

08000c74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr

08000c90 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr

08000c9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ca2:	f000 fadd 	bl	8001260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000caa:	b580      	push	{r7, lr}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f001 fc0d 	bl	80024ce <HAL_GPIO_EXTI_IRQHandler>
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cbc:	4802      	ldr	r0, [pc, #8]	@ (8000cc8 <USART1_IRQHandler+0x10>)
 8000cbe:	f004 fc0d 	bl	80054dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	240000a4 	.word	0x240000a4

08000ccc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b086      	sub	sp, #24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	60b9      	str	r1, [r7, #8]
 8000cd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd8:	2300      	movs	r3, #0
 8000cda:	617b      	str	r3, [r7, #20]
 8000cdc:	e00a      	b.n	8000cf4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cde:	f3af 8000 	nop.w
 8000ce2:	4601      	mov	r1, r0
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	1c5a      	adds	r2, r3, #1
 8000ce8:	60ba      	str	r2, [r7, #8]
 8000cea:	b2ca      	uxtb	r2, r1
 8000cec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf0      	blt.n	8000cde <_read+0x12>
  }

  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d06:	b580      	push	{r7, lr}
 8000d08:	b086      	sub	sp, #24
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	60f8      	str	r0, [r7, #12]
 8000d0e:	60b9      	str	r1, [r7, #8]
 8000d10:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	e009      	b.n	8000d2c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	1c5a      	adds	r2, r3, #1
 8000d1c:	60ba      	str	r2, [r7, #8]
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4618      	mov	r0, r3
 8000d22:	f000 f9ed 	bl	8001100 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697a      	ldr	r2, [r7, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	dbf1      	blt.n	8000d18 <_write+0x12>
  }
  return len;
 8000d34:	687b      	ldr	r3, [r7, #4]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3718      	adds	r7, #24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <_close>:

int _close(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
 8000d5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d66:	605a      	str	r2, [r3, #4]
  return 0;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr

08000d76 <_isatty>:

int _isatty(int file)
{
 8000d76:	b480      	push	{r7}
 8000d78:	b083      	sub	sp, #12
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d7e:	2301      	movs	r3, #1
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b085      	sub	sp, #20
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	60f8      	str	r0, [r7, #12]
 8000d94:	60b9      	str	r1, [r7, #8]
 8000d96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	@ (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	@ (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	@ (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	@ (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	@ (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f006 f9c2 	bl	8007160 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	@ (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	@ (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	@ (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	24080000 	.word	0x24080000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	240000a0 	.word	0x240000a0
 8000e10:	24000288 	.word	0x24000288

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e18:	4b43      	ldr	r3, [pc, #268]	@ (8000f28 <SystemInit+0x114>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e1e:	4a42      	ldr	r2, [pc, #264]	@ (8000f28 <SystemInit+0x114>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e28:	4b40      	ldr	r3, [pc, #256]	@ (8000f2c <SystemInit+0x118>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f003 030f 	and.w	r3, r3, #15
 8000e30:	2b06      	cmp	r3, #6
 8000e32:	d807      	bhi.n	8000e44 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e34:	4b3d      	ldr	r3, [pc, #244]	@ (8000f2c <SystemInit+0x118>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f023 030f 	bic.w	r3, r3, #15
 8000e3c:	4a3b      	ldr	r2, [pc, #236]	@ (8000f2c <SystemInit+0x118>)
 8000e3e:	f043 0307 	orr.w	r3, r3, #7
 8000e42:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e44:	4b3a      	ldr	r3, [pc, #232]	@ (8000f30 <SystemInit+0x11c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a39      	ldr	r2, [pc, #228]	@ (8000f30 <SystemInit+0x11c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e50:	4b37      	ldr	r3, [pc, #220]	@ (8000f30 <SystemInit+0x11c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e56:	4b36      	ldr	r3, [pc, #216]	@ (8000f30 <SystemInit+0x11c>)
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	4935      	ldr	r1, [pc, #212]	@ (8000f30 <SystemInit+0x11c>)
 8000e5c:	4b35      	ldr	r3, [pc, #212]	@ (8000f34 <SystemInit+0x120>)
 8000e5e:	4013      	ands	r3, r2
 8000e60:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e62:	4b32      	ldr	r3, [pc, #200]	@ (8000f2c <SystemInit+0x118>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d007      	beq.n	8000e7e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8000f2c <SystemInit+0x118>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 030f 	bic.w	r3, r3, #15
 8000e76:	4a2d      	ldr	r2, [pc, #180]	@ (8000f2c <SystemInit+0x118>)
 8000e78:	f043 0307 	orr.w	r3, r3, #7
 8000e7c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f30 <SystemInit+0x11c>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e84:	4b2a      	ldr	r3, [pc, #168]	@ (8000f30 <SystemInit+0x11c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e8a:	4b29      	ldr	r3, [pc, #164]	@ (8000f30 <SystemInit+0x11c>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e90:	4b27      	ldr	r3, [pc, #156]	@ (8000f30 <SystemInit+0x11c>)
 8000e92:	4a29      	ldr	r2, [pc, #164]	@ (8000f38 <SystemInit+0x124>)
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e96:	4b26      	ldr	r3, [pc, #152]	@ (8000f30 <SystemInit+0x11c>)
 8000e98:	4a28      	ldr	r2, [pc, #160]	@ (8000f3c <SystemInit+0x128>)
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e9c:	4b24      	ldr	r3, [pc, #144]	@ (8000f30 <SystemInit+0x11c>)
 8000e9e:	4a28      	ldr	r2, [pc, #160]	@ (8000f40 <SystemInit+0x12c>)
 8000ea0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ea2:	4b23      	ldr	r3, [pc, #140]	@ (8000f30 <SystemInit+0x11c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ea8:	4b21      	ldr	r3, [pc, #132]	@ (8000f30 <SystemInit+0x11c>)
 8000eaa:	4a25      	ldr	r2, [pc, #148]	@ (8000f40 <SystemInit+0x12c>)
 8000eac:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000eae:	4b20      	ldr	r3, [pc, #128]	@ (8000f30 <SystemInit+0x11c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000eb4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f30 <SystemInit+0x11c>)
 8000eb6:	4a22      	ldr	r2, [pc, #136]	@ (8000f40 <SystemInit+0x12c>)
 8000eb8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000eba:	4b1d      	ldr	r3, [pc, #116]	@ (8000f30 <SystemInit+0x11c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <SystemInit+0x11c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <SystemInit+0x11c>)
 8000ec6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ecc:	4b18      	ldr	r3, [pc, #96]	@ (8000f30 <SystemInit+0x11c>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8000f44 <SystemInit+0x130>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f48 <SystemInit+0x134>)
 8000ed8:	4013      	ands	r3, r2
 8000eda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ede:	d202      	bcs.n	8000ee6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ee0:	4b1a      	ldr	r3, [pc, #104]	@ (8000f4c <SystemInit+0x138>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <SystemInit+0x11c>)
 8000ee8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d113      	bne.n	8000f1c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <SystemInit+0x11c>)
 8000ef6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000efa:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <SystemInit+0x11c>)
 8000efc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000f04:	4b12      	ldr	r3, [pc, #72]	@ (8000f50 <SystemInit+0x13c>)
 8000f06:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000f0a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <SystemInit+0x11c>)
 8000f0e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000f12:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <SystemInit+0x11c>)
 8000f14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000f18:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000ed00 	.word	0xe000ed00
 8000f2c:	52002000 	.word	0x52002000
 8000f30:	58024400 	.word	0x58024400
 8000f34:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f38:	02020200 	.word	0x02020200
 8000f3c:	01ff0000 	.word	0x01ff0000
 8000f40:	01010280 	.word	0x01010280
 8000f44:	5c001000 	.word	0x5c001000
 8000f48:	ffff0000 	.word	0xffff0000
 8000f4c:	51008108 	.word	0x51008108
 8000f50:	52004000 	.word	0x52004000

08000f54 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <ExitRun0Mode+0x2c>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <ExitRun0Mode+0x2c>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f64:	bf00      	nop
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <ExitRun0Mode+0x2c>)
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f9      	beq.n	8000f66 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f72:	bf00      	nop
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	58024800 	.word	0x58024800

08000f84 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f88:	4b22      	ldr	r3, [pc, #136]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f8a:	4a23      	ldr	r2, [pc, #140]	@ (8001018 <MX_USART1_UART_Init+0x94>)
 8000f8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f8e:	4b21      	ldr	r3, [pc, #132]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f90:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f96:	4b1f      	ldr	r3, [pc, #124]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000faa:	220c      	movs	r2, #12
 8000fac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fae:	4b19      	ldr	r3, [pc, #100]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fc0:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fcc:	4811      	ldr	r0, [pc, #68]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fce:	f004 f9a7 	bl	8005320 <HAL_UART_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000fd8:	f7ff fd96 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	480d      	ldr	r0, [pc, #52]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000fe0:	f005 fe8e 	bl	8006d00 <HAL_UARTEx_SetTxFifoThreshold>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000fea:	f7ff fd8d 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4808      	ldr	r0, [pc, #32]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8000ff2:	f005 fec3 	bl	8006d7c <HAL_UARTEx_SetRxFifoThreshold>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ffc:	f7ff fd84 	bl	8000b08 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_USART1_UART_Init+0x90>)
 8001002:	f005 fe44 	bl	8006c8e <HAL_UARTEx_DisableFifoMode>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800100c:	f7ff fd7c 	bl	8000b08 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	240000a4 	.word	0x240000a4
 8001018:	40011000 	.word	0x40011000

0800101c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b0ba      	sub	sp, #232	@ 0xe8
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001034:	f107 0310 	add.w	r3, r7, #16
 8001038:	22c0      	movs	r2, #192	@ 0xc0
 800103a:	2100      	movs	r1, #0
 800103c:	4618      	mov	r0, r3
 800103e:	f006 f840 	bl	80070c2 <memset>
  if(uartHandle->Instance==USART1)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a2b      	ldr	r2, [pc, #172]	@ (80010f4 <HAL_UART_MspInit+0xd8>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d14e      	bne.n	80010ea <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800104c:	f04f 0201 	mov.w	r2, #1
 8001050:	f04f 0300 	mov.w	r3, #0
 8001054:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8001058:	2300      	movs	r3, #0
 800105a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800105e:	f107 0310 	add.w	r3, r7, #16
 8001062:	4618      	mov	r0, r3
 8001064:	f002 fa78 	bl	8003558 <HAL_RCCEx_PeriphCLKConfig>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800106e:	f7ff fd4b 	bl	8000b08 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001072:	4b21      	ldr	r3, [pc, #132]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
 8001074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001078:	4a1f      	ldr	r2, [pc, #124]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
 800107a:	f043 0310 	orr.w	r3, r3, #16
 800107e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001082:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
 8001084:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001088:	f003 0310 	and.w	r3, r3, #16
 800108c:	60fb      	str	r3, [r7, #12]
 800108e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a18      	ldr	r2, [pc, #96]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_UART_MspInit+0xdc>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80010b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010bc:	2301      	movs	r3, #1
 80010be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	2302      	movs	r3, #2
 80010c4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010c8:	2307      	movs	r3, #7
 80010ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ce:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <HAL_UART_MspInit+0xe0>)
 80010d6:	f000 ffff 	bl	80020d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2025      	movs	r0, #37	@ 0x25
 80010e0:	f000 f9e9 	bl	80014b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80010e4:	2025      	movs	r0, #37	@ 0x25
 80010e6:	f000 fa00 	bl	80014ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80010ea:	bf00      	nop
 80010ec:	37e8      	adds	r7, #232	@ 0xe8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40011000 	.word	0x40011000
 80010f8:	58024400 	.word	0x58024400
 80010fc:	58020000 	.word	0x58020000

08001100 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001108:	1d39      	adds	r1, r7, #4
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	2201      	movs	r2, #1
 8001110:	4803      	ldr	r0, [pc, #12]	@ (8001120 <__io_putchar+0x20>)
 8001112:	f004 f955 	bl	80053c0 <HAL_UART_Transmit>
    return ch;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3708      	adds	r7, #8
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	240000a4 	.word	0x240000a4

08001124 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001160 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001128:	f7ff ff14 	bl	8000f54 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800112c:	f7ff fe72 	bl	8000e14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480c      	ldr	r0, [pc, #48]	@ (8001164 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001132:	490d      	ldr	r1, [pc, #52]	@ (8001168 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001134:	4a0d      	ldr	r2, [pc, #52]	@ (800116c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001148:	4c0a      	ldr	r4, [pc, #40]	@ (8001174 <LoopFillZerobss+0x22>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f006 f809 	bl	800716c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800115a:	f7ff fbe9 	bl	8000930 <main>
  bx  lr
 800115e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001160:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001164:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001168:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 800116c:	08007dc4 	.word	0x08007dc4
  ldr r2, =_sbss
 8001170:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001174:	24000288 	.word	0x24000288

08001178 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001178:	e7fe      	b.n	8001178 <ADC3_IRQHandler>
	...

0800117c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001182:	2003      	movs	r0, #3
 8001184:	f000 f98c 	bl	80014a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001188:	f002 f810 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800118c:	4602      	mov	r2, r0
 800118e:	4b15      	ldr	r3, [pc, #84]	@ (80011e4 <HAL_Init+0x68>)
 8001190:	699b      	ldr	r3, [r3, #24]
 8001192:	0a1b      	lsrs	r3, r3, #8
 8001194:	f003 030f 	and.w	r3, r3, #15
 8001198:	4913      	ldr	r1, [pc, #76]	@ (80011e8 <HAL_Init+0x6c>)
 800119a:	5ccb      	ldrb	r3, [r1, r3]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	fa22 f303 	lsr.w	r3, r2, r3
 80011a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011a6:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <HAL_Init+0x68>)
 80011a8:	699b      	ldr	r3, [r3, #24]
 80011aa:	f003 030f 	and.w	r3, r3, #15
 80011ae:	4a0e      	ldr	r2, [pc, #56]	@ (80011e8 <HAL_Init+0x6c>)
 80011b0:	5cd3      	ldrb	r3, [r2, r3]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	fa22 f303 	lsr.w	r3, r2, r3
 80011bc:	4a0b      	ldr	r2, [pc, #44]	@ (80011ec <HAL_Init+0x70>)
 80011be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011c0:	4a0b      	ldr	r2, [pc, #44]	@ (80011f0 <HAL_Init+0x74>)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c6:	200f      	movs	r0, #15
 80011c8:	f000 f814 	bl	80011f4 <HAL_InitTick>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e002      	b.n	80011dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80011d6:	f7ff fd1f 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	58024400 	.word	0x58024400
 80011e8:	08007d48 	.word	0x08007d48
 80011ec:	24000008 	.word	0x24000008
 80011f0:	24000004 	.word	0x24000004

080011f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011fc:	4b15      	ldr	r3, [pc, #84]	@ (8001254 <HAL_InitTick+0x60>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e021      	b.n	800124c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001208:	4b13      	ldr	r3, [pc, #76]	@ (8001258 <HAL_InitTick+0x64>)
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <HAL_InitTick+0x60>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	4619      	mov	r1, r3
 8001212:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001216:	fbb3 f3f1 	udiv	r3, r3, r1
 800121a:	fbb2 f3f3 	udiv	r3, r2, r3
 800121e:	4618      	mov	r0, r3
 8001220:	f000 f971 	bl	8001506 <HAL_SYSTICK_Config>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e00e      	b.n	800124c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2b0f      	cmp	r3, #15
 8001232:	d80a      	bhi.n	800124a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001234:	2200      	movs	r2, #0
 8001236:	6879      	ldr	r1, [r7, #4]
 8001238:	f04f 30ff 	mov.w	r0, #4294967295
 800123c:	f000 f93b 	bl	80014b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001240:	4a06      	ldr	r2, [pc, #24]	@ (800125c <HAL_InitTick+0x68>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001246:	2300      	movs	r3, #0
 8001248:	e000      	b.n	800124c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	24000010 	.word	0x24000010
 8001258:	24000004 	.word	0x24000004
 800125c:	2400000c 	.word	0x2400000c

08001260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001264:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <HAL_IncTick+0x20>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	4b06      	ldr	r3, [pc, #24]	@ (8001284 <HAL_IncTick+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4413      	add	r3, r2
 8001270:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <HAL_IncTick+0x24>)
 8001272:	6013      	str	r3, [r2, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	24000010 	.word	0x24000010
 8001284:	24000138 	.word	0x24000138

08001288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  return uwTick;
 800128c:	4b03      	ldr	r3, [pc, #12]	@ (800129c <HAL_GetTick+0x14>)
 800128e:	681b      	ldr	r3, [r3, #0]
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	24000138 	.word	0x24000138

080012a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a8:	f7ff ffee 	bl	8001288 <HAL_GetTick>
 80012ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b8:	d005      	beq.n	80012c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ba:	4b0a      	ldr	r3, [pc, #40]	@ (80012e4 <HAL_Delay+0x44>)
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	461a      	mov	r2, r3
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	4413      	add	r3, r2
 80012c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012c6:	bf00      	nop
 80012c8:	f7ff ffde 	bl	8001288 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	68fa      	ldr	r2, [r7, #12]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8f7      	bhi.n	80012c8 <HAL_Delay+0x28>
  {
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	24000010 	.word	0x24000010

080012e8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <HAL_GetREVID+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	0c1b      	lsrs	r3, r3, #16
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	5c001000 	.word	0x5c001000

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 800132a:	4313      	orrs	r3, r2
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	@ (8001340 <__NVIC_SetPriorityGrouping+0x40>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00
 8001344:	05fa0000 	.word	0x05fa0000

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	88fb      	ldrh	r3, [r7, #6]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4907      	ldr	r1, [pc, #28]	@ (800139c <__NVIC_EnableIRQ+0x38>)
 800137e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	4603      	mov	r3, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	db0a      	blt.n	80013ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	490c      	ldr	r1, [pc, #48]	@ (80013ec <__NVIC_SetPriority+0x4c>)
 80013ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013be:	0112      	lsls	r2, r2, #4
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	440b      	add	r3, r1
 80013c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c8:	e00a      	b.n	80013e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	4908      	ldr	r1, [pc, #32]	@ (80013f0 <__NVIC_SetPriority+0x50>)
 80013d0:	88fb      	ldrh	r3, [r7, #6]
 80013d2:	f003 030f 	and.w	r3, r3, #15
 80013d6:	3b04      	subs	r3, #4
 80013d8:	0112      	lsls	r2, r2, #4
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	440b      	add	r3, r1
 80013de:	761a      	strb	r2, [r3, #24]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100
 80013f0:	e000ed00 	.word	0xe000ed00

080013f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	@ 0x24
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	60f8      	str	r0, [r7, #12]
 80013fc:	60b9      	str	r1, [r7, #8]
 80013fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f003 0307 	and.w	r3, r3, #7
 8001406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001408:	69fb      	ldr	r3, [r7, #28]
 800140a:	f1c3 0307 	rsb	r3, r3, #7
 800140e:	2b04      	cmp	r3, #4
 8001410:	bf28      	it	cs
 8001412:	2304      	movcs	r3, #4
 8001414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3304      	adds	r3, #4
 800141a:	2b06      	cmp	r3, #6
 800141c:	d902      	bls.n	8001424 <NVIC_EncodePriority+0x30>
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	3b03      	subs	r3, #3
 8001422:	e000      	b.n	8001426 <NVIC_EncodePriority+0x32>
 8001424:	2300      	movs	r3, #0
 8001426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001428:	f04f 32ff 	mov.w	r2, #4294967295
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	fa02 f303 	lsl.w	r3, r2, r3
 8001432:	43da      	mvns	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	401a      	ands	r2, r3
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800143c:	f04f 31ff 	mov.w	r1, #4294967295
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	fa01 f303 	lsl.w	r3, r1, r3
 8001446:	43d9      	mvns	r1, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800144c:	4313      	orrs	r3, r2
         );
}
 800144e:	4618      	mov	r0, r3
 8001450:	3724      	adds	r7, #36	@ 0x24
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
	...

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	3b01      	subs	r3, #1
 8001468:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800146c:	d301      	bcc.n	8001472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800146e:	2301      	movs	r3, #1
 8001470:	e00f      	b.n	8001492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001472:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <SysTick_Config+0x40>)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147a:	210f      	movs	r1, #15
 800147c:	f04f 30ff 	mov.w	r0, #4294967295
 8001480:	f7ff ff8e 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001484:	4b05      	ldr	r3, [pc, #20]	@ (800149c <SysTick_Config+0x40>)
 8001486:	2200      	movs	r2, #0
 8001488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148a:	4b04      	ldr	r3, [pc, #16]	@ (800149c <SysTick_Config+0x40>)
 800148c:	2207      	movs	r2, #7
 800148e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001490:	2300      	movs	r3, #0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	e000e010 	.word	0xe000e010

080014a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff ff29 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b6:	b580      	push	{r7, lr}
 80014b8:	b086      	sub	sp, #24
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	4603      	mov	r3, r0
 80014be:	60b9      	str	r1, [r7, #8]
 80014c0:	607a      	str	r2, [r7, #4]
 80014c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014c4:	f7ff ff40 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	68b9      	ldr	r1, [r7, #8]
 80014ce:	6978      	ldr	r0, [r7, #20]
 80014d0:	f7ff ff90 	bl	80013f4 <NVIC_EncodePriority>
 80014d4:	4602      	mov	r2, r0
 80014d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff ff5f 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e2:	bf00      	nop
 80014e4:	3718      	adds	r7, #24
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}

080014ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ea:	b580      	push	{r7, lr}
 80014ec:	b082      	sub	sp, #8
 80014ee:	af00      	add	r7, sp, #0
 80014f0:	4603      	mov	r3, r0
 80014f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff ff33 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b082      	sub	sp, #8
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f7ff ffa4 	bl	800145c <SysTick_Config>
 8001514:	4603      	mov	r3, r0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001524:	f3bf 8f5f 	dmb	sy
}
 8001528:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800152a:	4b07      	ldr	r3, [pc, #28]	@ (8001548 <HAL_MPU_Disable+0x28>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	4a06      	ldr	r2, [pc, #24]	@ (8001548 <HAL_MPU_Disable+0x28>)
 8001530:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001534:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001536:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_MPU_Disable+0x2c>)
 8001538:	2200      	movs	r2, #0
 800153a:	605a      	str	r2, [r3, #4]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000ed00 	.word	0xe000ed00
 800154c:	e000ed90 	.word	0xe000ed90

08001550 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001558:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <HAL_MPU_Enable+0x38>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	f043 0301 	orr.w	r3, r3, #1
 8001560:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_MPU_Enable+0x3c>)
 8001564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001566:	4a09      	ldr	r2, [pc, #36]	@ (800158c <HAL_MPU_Enable+0x3c>)
 8001568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800156c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800156e:	f3bf 8f4f 	dsb	sy
}
 8001572:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001574:	f3bf 8f6f 	isb	sy
}
 8001578:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	e000ed90 	.word	0xe000ed90
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	785a      	ldrb	r2, [r3, #1]
 800159c:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <HAL_MPU_ConfigRegion+0x7c>)
 800159e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015a0:	4b1a      	ldr	r3, [pc, #104]	@ (800160c <HAL_MPU_ConfigRegion+0x7c>)
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	4a19      	ldr	r2, [pc, #100]	@ (800160c <HAL_MPU_ConfigRegion+0x7c>)
 80015a6:	f023 0301 	bic.w	r3, r3, #1
 80015aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015ac:	4a17      	ldr	r2, [pc, #92]	@ (800160c <HAL_MPU_ConfigRegion+0x7c>)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	7b1b      	ldrb	r3, [r3, #12]
 80015b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7adb      	ldrb	r3, [r3, #11]
 80015be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7a9b      	ldrb	r3, [r3, #10]
 80015c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7b5b      	ldrb	r3, [r3, #13]
 80015ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7b9b      	ldrb	r3, [r3, #14]
 80015d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7bdb      	ldrb	r3, [r3, #15]
 80015de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7a5b      	ldrb	r3, [r3, #9]
 80015e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	7a1b      	ldrb	r3, [r3, #8]
 80015ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	7812      	ldrb	r2, [r2, #0]
 80015f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f8:	4a04      	ldr	r2, [pc, #16]	@ (800160c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015fc:	6113      	str	r3, [r2, #16]
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed90 	.word	0xe000ed90

08001610 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fe36 	bl	8001288 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e2dc      	b.n	8001be2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d008      	beq.n	8001646 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2280      	movs	r2, #128	@ 0x80
 8001638:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	e2cd      	b.n	8001be2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a76      	ldr	r2, [pc, #472]	@ (8001824 <HAL_DMA_Abort+0x214>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d04a      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a74      	ldr	r2, [pc, #464]	@ (8001828 <HAL_DMA_Abort+0x218>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d045      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a73      	ldr	r2, [pc, #460]	@ (800182c <HAL_DMA_Abort+0x21c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d040      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a71      	ldr	r2, [pc, #452]	@ (8001830 <HAL_DMA_Abort+0x220>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d03b      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a70      	ldr	r2, [pc, #448]	@ (8001834 <HAL_DMA_Abort+0x224>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d036      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a6e      	ldr	r2, [pc, #440]	@ (8001838 <HAL_DMA_Abort+0x228>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d031      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6d      	ldr	r2, [pc, #436]	@ (800183c <HAL_DMA_Abort+0x22c>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d02c      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6b      	ldr	r2, [pc, #428]	@ (8001840 <HAL_DMA_Abort+0x230>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d027      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6a      	ldr	r2, [pc, #424]	@ (8001844 <HAL_DMA_Abort+0x234>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d022      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a68      	ldr	r2, [pc, #416]	@ (8001848 <HAL_DMA_Abort+0x238>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d01d      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a67      	ldr	r2, [pc, #412]	@ (800184c <HAL_DMA_Abort+0x23c>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d018      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a65      	ldr	r2, [pc, #404]	@ (8001850 <HAL_DMA_Abort+0x240>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d013      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a64      	ldr	r2, [pc, #400]	@ (8001854 <HAL_DMA_Abort+0x244>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d00e      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a62      	ldr	r2, [pc, #392]	@ (8001858 <HAL_DMA_Abort+0x248>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d009      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a61      	ldr	r2, [pc, #388]	@ (800185c <HAL_DMA_Abort+0x24c>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d004      	beq.n	80016e6 <HAL_DMA_Abort+0xd6>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a5f      	ldr	r2, [pc, #380]	@ (8001860 <HAL_DMA_Abort+0x250>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d101      	bne.n	80016ea <HAL_DMA_Abort+0xda>
 80016e6:	2301      	movs	r3, #1
 80016e8:	e000      	b.n	80016ec <HAL_DMA_Abort+0xdc>
 80016ea:	2300      	movs	r3, #0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d013      	beq.n	8001718 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 021e 	bic.w	r2, r2, #30
 80016fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800170e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	e00a      	b.n	800172e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f022 020e 	bic.w	r2, r2, #14
 8001726:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a3c      	ldr	r2, [pc, #240]	@ (8001824 <HAL_DMA_Abort+0x214>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d072      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a3a      	ldr	r2, [pc, #232]	@ (8001828 <HAL_DMA_Abort+0x218>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d06d      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a39      	ldr	r2, [pc, #228]	@ (800182c <HAL_DMA_Abort+0x21c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d068      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a37      	ldr	r2, [pc, #220]	@ (8001830 <HAL_DMA_Abort+0x220>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d063      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a36      	ldr	r2, [pc, #216]	@ (8001834 <HAL_DMA_Abort+0x224>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d05e      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a34      	ldr	r2, [pc, #208]	@ (8001838 <HAL_DMA_Abort+0x228>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d059      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a33      	ldr	r2, [pc, #204]	@ (800183c <HAL_DMA_Abort+0x22c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d054      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a31      	ldr	r2, [pc, #196]	@ (8001840 <HAL_DMA_Abort+0x230>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d04f      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a30      	ldr	r2, [pc, #192]	@ (8001844 <HAL_DMA_Abort+0x234>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04a      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a2e      	ldr	r2, [pc, #184]	@ (8001848 <HAL_DMA_Abort+0x238>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d045      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a2d      	ldr	r2, [pc, #180]	@ (800184c <HAL_DMA_Abort+0x23c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d040      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001850 <HAL_DMA_Abort+0x240>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d03b      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a2a      	ldr	r2, [pc, #168]	@ (8001854 <HAL_DMA_Abort+0x244>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d036      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a28      	ldr	r2, [pc, #160]	@ (8001858 <HAL_DMA_Abort+0x248>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d031      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a27      	ldr	r2, [pc, #156]	@ (800185c <HAL_DMA_Abort+0x24c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d02c      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a25      	ldr	r2, [pc, #148]	@ (8001860 <HAL_DMA_Abort+0x250>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d027      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a24      	ldr	r2, [pc, #144]	@ (8001864 <HAL_DMA_Abort+0x254>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_DMA_Abort+0x258>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01d      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a21      	ldr	r2, [pc, #132]	@ (800186c <HAL_DMA_Abort+0x25c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d018      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001870 <HAL_DMA_Abort+0x260>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a1e      	ldr	r2, [pc, #120]	@ (8001874 <HAL_DMA_Abort+0x264>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1c      	ldr	r2, [pc, #112]	@ (8001878 <HAL_DMA_Abort+0x268>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a1b      	ldr	r2, [pc, #108]	@ (800187c <HAL_DMA_Abort+0x26c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_DMA_Abort+0x20e>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <HAL_DMA_Abort+0x270>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d132      	bne.n	8001884 <HAL_DMA_Abort+0x274>
 800181e:	2301      	movs	r3, #1
 8001820:	e031      	b.n	8001886 <HAL_DMA_Abort+0x276>
 8001822:	bf00      	nop
 8001824:	40020010 	.word	0x40020010
 8001828:	40020028 	.word	0x40020028
 800182c:	40020040 	.word	0x40020040
 8001830:	40020058 	.word	0x40020058
 8001834:	40020070 	.word	0x40020070
 8001838:	40020088 	.word	0x40020088
 800183c:	400200a0 	.word	0x400200a0
 8001840:	400200b8 	.word	0x400200b8
 8001844:	40020410 	.word	0x40020410
 8001848:	40020428 	.word	0x40020428
 800184c:	40020440 	.word	0x40020440
 8001850:	40020458 	.word	0x40020458
 8001854:	40020470 	.word	0x40020470
 8001858:	40020488 	.word	0x40020488
 800185c:	400204a0 	.word	0x400204a0
 8001860:	400204b8 	.word	0x400204b8
 8001864:	58025408 	.word	0x58025408
 8001868:	5802541c 	.word	0x5802541c
 800186c:	58025430 	.word	0x58025430
 8001870:	58025444 	.word	0x58025444
 8001874:	58025458 	.word	0x58025458
 8001878:	5802546c 	.word	0x5802546c
 800187c:	58025480 	.word	0x58025480
 8001880:	58025494 	.word	0x58025494
 8001884:	2300      	movs	r3, #0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001894:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001898:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6d      	ldr	r2, [pc, #436]	@ (8001a54 <HAL_DMA_Abort+0x444>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d04a      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a6b      	ldr	r2, [pc, #428]	@ (8001a58 <HAL_DMA_Abort+0x448>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d045      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a6a      	ldr	r2, [pc, #424]	@ (8001a5c <HAL_DMA_Abort+0x44c>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d040      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a68      	ldr	r2, [pc, #416]	@ (8001a60 <HAL_DMA_Abort+0x450>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d03b      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a67      	ldr	r2, [pc, #412]	@ (8001a64 <HAL_DMA_Abort+0x454>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d036      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a65      	ldr	r2, [pc, #404]	@ (8001a68 <HAL_DMA_Abort+0x458>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d031      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a64      	ldr	r2, [pc, #400]	@ (8001a6c <HAL_DMA_Abort+0x45c>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d02c      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a62      	ldr	r2, [pc, #392]	@ (8001a70 <HAL_DMA_Abort+0x460>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d027      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a61      	ldr	r2, [pc, #388]	@ (8001a74 <HAL_DMA_Abort+0x464>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d022      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a5f      	ldr	r2, [pc, #380]	@ (8001a78 <HAL_DMA_Abort+0x468>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d01d      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a5e      	ldr	r2, [pc, #376]	@ (8001a7c <HAL_DMA_Abort+0x46c>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d018      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a5c      	ldr	r2, [pc, #368]	@ (8001a80 <HAL_DMA_Abort+0x470>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a5b      	ldr	r2, [pc, #364]	@ (8001a84 <HAL_DMA_Abort+0x474>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d00e      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a59      	ldr	r2, [pc, #356]	@ (8001a88 <HAL_DMA_Abort+0x478>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d009      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a58      	ldr	r2, [pc, #352]	@ (8001a8c <HAL_DMA_Abort+0x47c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d004      	beq.n	800193a <HAL_DMA_Abort+0x32a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a56      	ldr	r2, [pc, #344]	@ (8001a90 <HAL_DMA_Abort+0x480>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d108      	bne.n	800194c <HAL_DMA_Abort+0x33c>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
 800194a:	e007      	b.n	800195c <HAL_DMA_Abort+0x34c>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800195c:	e013      	b.n	8001986 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800195e:	f7ff fc93 	bl	8001288 <HAL_GetTick>
 8001962:	4602      	mov	r2, r0
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	2b05      	cmp	r3, #5
 800196a:	d90c      	bls.n	8001986 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2220      	movs	r2, #32
 8001970:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2203      	movs	r2, #3
 8001976:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e12d      	b.n	8001be2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1e5      	bne.n	800195e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a2f      	ldr	r2, [pc, #188]	@ (8001a54 <HAL_DMA_Abort+0x444>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d04a      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a2d      	ldr	r2, [pc, #180]	@ (8001a58 <HAL_DMA_Abort+0x448>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d045      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2c      	ldr	r2, [pc, #176]	@ (8001a5c <HAL_DMA_Abort+0x44c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d040      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2a      	ldr	r2, [pc, #168]	@ (8001a60 <HAL_DMA_Abort+0x450>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d03b      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a29      	ldr	r2, [pc, #164]	@ (8001a64 <HAL_DMA_Abort+0x454>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d036      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a27      	ldr	r2, [pc, #156]	@ (8001a68 <HAL_DMA_Abort+0x458>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d031      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a26      	ldr	r2, [pc, #152]	@ (8001a6c <HAL_DMA_Abort+0x45c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d02c      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a24      	ldr	r2, [pc, #144]	@ (8001a70 <HAL_DMA_Abort+0x460>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d027      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a23      	ldr	r2, [pc, #140]	@ (8001a74 <HAL_DMA_Abort+0x464>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d022      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a21      	ldr	r2, [pc, #132]	@ (8001a78 <HAL_DMA_Abort+0x468>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d01d      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a20      	ldr	r2, [pc, #128]	@ (8001a7c <HAL_DMA_Abort+0x46c>)
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d018      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1e      	ldr	r2, [pc, #120]	@ (8001a80 <HAL_DMA_Abort+0x470>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a1d      	ldr	r2, [pc, #116]	@ (8001a84 <HAL_DMA_Abort+0x474>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d00e      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a1b      	ldr	r2, [pc, #108]	@ (8001a88 <HAL_DMA_Abort+0x478>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d009      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a1a      	ldr	r2, [pc, #104]	@ (8001a8c <HAL_DMA_Abort+0x47c>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d004      	beq.n	8001a32 <HAL_DMA_Abort+0x422>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a18      	ldr	r2, [pc, #96]	@ (8001a90 <HAL_DMA_Abort+0x480>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d101      	bne.n	8001a36 <HAL_DMA_Abort+0x426>
 8001a32:	2301      	movs	r3, #1
 8001a34:	e000      	b.n	8001a38 <HAL_DMA_Abort+0x428>
 8001a36:	2300      	movs	r3, #0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d02b      	beq.n	8001a94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	f003 031f 	and.w	r3, r3, #31
 8001a4a:	223f      	movs	r2, #63	@ 0x3f
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	e02a      	b.n	8001aaa <HAL_DMA_Abort+0x49a>
 8001a54:	40020010 	.word	0x40020010
 8001a58:	40020028 	.word	0x40020028
 8001a5c:	40020040 	.word	0x40020040
 8001a60:	40020058 	.word	0x40020058
 8001a64:	40020070 	.word	0x40020070
 8001a68:	40020088 	.word	0x40020088
 8001a6c:	400200a0 	.word	0x400200a0
 8001a70:	400200b8 	.word	0x400200b8
 8001a74:	40020410 	.word	0x40020410
 8001a78:	40020428 	.word	0x40020428
 8001a7c:	40020440 	.word	0x40020440
 8001a80:	40020458 	.word	0x40020458
 8001a84:	40020470 	.word	0x40020470
 8001a88:	40020488 	.word	0x40020488
 8001a8c:	400204a0 	.word	0x400204a0
 8001a90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	409a      	lsls	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a4f      	ldr	r2, [pc, #316]	@ (8001bec <HAL_DMA_Abort+0x5dc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d072      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a4d      	ldr	r2, [pc, #308]	@ (8001bf0 <HAL_DMA_Abort+0x5e0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d06d      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a4c      	ldr	r2, [pc, #304]	@ (8001bf4 <HAL_DMA_Abort+0x5e4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d068      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf8 <HAL_DMA_Abort+0x5e8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d063      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a49      	ldr	r2, [pc, #292]	@ (8001bfc <HAL_DMA_Abort+0x5ec>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d05e      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a47      	ldr	r2, [pc, #284]	@ (8001c00 <HAL_DMA_Abort+0x5f0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d059      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a46      	ldr	r2, [pc, #280]	@ (8001c04 <HAL_DMA_Abort+0x5f4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d054      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a44      	ldr	r2, [pc, #272]	@ (8001c08 <HAL_DMA_Abort+0x5f8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d04f      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a43      	ldr	r2, [pc, #268]	@ (8001c0c <HAL_DMA_Abort+0x5fc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d04a      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a41      	ldr	r2, [pc, #260]	@ (8001c10 <HAL_DMA_Abort+0x600>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d045      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a40      	ldr	r2, [pc, #256]	@ (8001c14 <HAL_DMA_Abort+0x604>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d040      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a3e      	ldr	r2, [pc, #248]	@ (8001c18 <HAL_DMA_Abort+0x608>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d03b      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a3d      	ldr	r2, [pc, #244]	@ (8001c1c <HAL_DMA_Abort+0x60c>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d036      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a3b      	ldr	r2, [pc, #236]	@ (8001c20 <HAL_DMA_Abort+0x610>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d031      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8001c24 <HAL_DMA_Abort+0x614>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d02c      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a38      	ldr	r2, [pc, #224]	@ (8001c28 <HAL_DMA_Abort+0x618>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d027      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a37      	ldr	r2, [pc, #220]	@ (8001c2c <HAL_DMA_Abort+0x61c>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a35      	ldr	r2, [pc, #212]	@ (8001c30 <HAL_DMA_Abort+0x620>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d01d      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a34      	ldr	r2, [pc, #208]	@ (8001c34 <HAL_DMA_Abort+0x624>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d018      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a32      	ldr	r2, [pc, #200]	@ (8001c38 <HAL_DMA_Abort+0x628>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d013      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a31      	ldr	r2, [pc, #196]	@ (8001c3c <HAL_DMA_Abort+0x62c>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d00e      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2f      	ldr	r2, [pc, #188]	@ (8001c40 <HAL_DMA_Abort+0x630>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d009      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2e      	ldr	r2, [pc, #184]	@ (8001c44 <HAL_DMA_Abort+0x634>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d004      	beq.n	8001b9a <HAL_DMA_Abort+0x58a>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a2c      	ldr	r2, [pc, #176]	@ (8001c48 <HAL_DMA_Abort+0x638>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d101      	bne.n	8001b9e <HAL_DMA_Abort+0x58e>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e000      	b.n	8001ba0 <HAL_DMA_Abort+0x590>
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d015      	beq.n	8001bd0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00c      	beq.n	8001bd0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bc0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bc4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bce:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40020010 	.word	0x40020010
 8001bf0:	40020028 	.word	0x40020028
 8001bf4:	40020040 	.word	0x40020040
 8001bf8:	40020058 	.word	0x40020058
 8001bfc:	40020070 	.word	0x40020070
 8001c00:	40020088 	.word	0x40020088
 8001c04:	400200a0 	.word	0x400200a0
 8001c08:	400200b8 	.word	0x400200b8
 8001c0c:	40020410 	.word	0x40020410
 8001c10:	40020428 	.word	0x40020428
 8001c14:	40020440 	.word	0x40020440
 8001c18:	40020458 	.word	0x40020458
 8001c1c:	40020470 	.word	0x40020470
 8001c20:	40020488 	.word	0x40020488
 8001c24:	400204a0 	.word	0x400204a0
 8001c28:	400204b8 	.word	0x400204b8
 8001c2c:	58025408 	.word	0x58025408
 8001c30:	5802541c 	.word	0x5802541c
 8001c34:	58025430 	.word	0x58025430
 8001c38:	58025444 	.word	0x58025444
 8001c3c:	58025458 	.word	0x58025458
 8001c40:	5802546c 	.word	0x5802546c
 8001c44:	58025480 	.word	0x58025480
 8001c48:	58025494 	.word	0x58025494

08001c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e237      	b.n	80020ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d004      	beq.n	8001c74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2280      	movs	r2, #128	@ 0x80
 8001c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e22c      	b.n	80020ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a5c      	ldr	r2, [pc, #368]	@ (8001dec <HAL_DMA_Abort_IT+0x1a0>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d04a      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a5b      	ldr	r2, [pc, #364]	@ (8001df0 <HAL_DMA_Abort_IT+0x1a4>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d045      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a59      	ldr	r2, [pc, #356]	@ (8001df4 <HAL_DMA_Abort_IT+0x1a8>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d040      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a58      	ldr	r2, [pc, #352]	@ (8001df8 <HAL_DMA_Abort_IT+0x1ac>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d03b      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a56      	ldr	r2, [pc, #344]	@ (8001dfc <HAL_DMA_Abort_IT+0x1b0>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d036      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a55      	ldr	r2, [pc, #340]	@ (8001e00 <HAL_DMA_Abort_IT+0x1b4>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d031      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a53      	ldr	r2, [pc, #332]	@ (8001e04 <HAL_DMA_Abort_IT+0x1b8>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d02c      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a52      	ldr	r2, [pc, #328]	@ (8001e08 <HAL_DMA_Abort_IT+0x1bc>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d027      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a50      	ldr	r2, [pc, #320]	@ (8001e0c <HAL_DMA_Abort_IT+0x1c0>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d022      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4f      	ldr	r2, [pc, #316]	@ (8001e10 <HAL_DMA_Abort_IT+0x1c4>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d01d      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a4d      	ldr	r2, [pc, #308]	@ (8001e14 <HAL_DMA_Abort_IT+0x1c8>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d018      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a4c      	ldr	r2, [pc, #304]	@ (8001e18 <HAL_DMA_Abort_IT+0x1cc>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d013      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a4a      	ldr	r2, [pc, #296]	@ (8001e1c <HAL_DMA_Abort_IT+0x1d0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d00e      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a49      	ldr	r2, [pc, #292]	@ (8001e20 <HAL_DMA_Abort_IT+0x1d4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d009      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a47      	ldr	r2, [pc, #284]	@ (8001e24 <HAL_DMA_Abort_IT+0x1d8>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d004      	beq.n	8001d14 <HAL_DMA_Abort_IT+0xc8>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a46      	ldr	r2, [pc, #280]	@ (8001e28 <HAL_DMA_Abort_IT+0x1dc>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d101      	bne.n	8001d18 <HAL_DMA_Abort_IT+0xcc>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_DMA_Abort_IT+0xce>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f000 8086 	beq.w	8001e2c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2204      	movs	r2, #4
 8001d24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001dec <HAL_DMA_Abort_IT+0x1a0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d04a      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2e      	ldr	r2, [pc, #184]	@ (8001df0 <HAL_DMA_Abort_IT+0x1a4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d045      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a2c      	ldr	r2, [pc, #176]	@ (8001df4 <HAL_DMA_Abort_IT+0x1a8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d040      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a2b      	ldr	r2, [pc, #172]	@ (8001df8 <HAL_DMA_Abort_IT+0x1ac>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d03b      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a29      	ldr	r2, [pc, #164]	@ (8001dfc <HAL_DMA_Abort_IT+0x1b0>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d036      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_DMA_Abort_IT+0x1b4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d031      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a26      	ldr	r2, [pc, #152]	@ (8001e04 <HAL_DMA_Abort_IT+0x1b8>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d02c      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a25      	ldr	r2, [pc, #148]	@ (8001e08 <HAL_DMA_Abort_IT+0x1bc>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d027      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a23      	ldr	r2, [pc, #140]	@ (8001e0c <HAL_DMA_Abort_IT+0x1c0>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d022      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a22      	ldr	r2, [pc, #136]	@ (8001e10 <HAL_DMA_Abort_IT+0x1c4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d01d      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a20      	ldr	r2, [pc, #128]	@ (8001e14 <HAL_DMA_Abort_IT+0x1c8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d018      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a1f      	ldr	r2, [pc, #124]	@ (8001e18 <HAL_DMA_Abort_IT+0x1cc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d013      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e1c <HAL_DMA_Abort_IT+0x1d0>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d00e      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1c      	ldr	r2, [pc, #112]	@ (8001e20 <HAL_DMA_Abort_IT+0x1d4>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a1a      	ldr	r2, [pc, #104]	@ (8001e24 <HAL_DMA_Abort_IT+0x1d8>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d004      	beq.n	8001dc8 <HAL_DMA_Abort_IT+0x17c>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a19      	ldr	r2, [pc, #100]	@ (8001e28 <HAL_DMA_Abort_IT+0x1dc>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d108      	bne.n	8001dda <HAL_DMA_Abort_IT+0x18e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 0201 	bic.w	r2, r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	e178      	b.n	80020cc <HAL_DMA_Abort_IT+0x480>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	e16f      	b.n	80020cc <HAL_DMA_Abort_IT+0x480>
 8001dec:	40020010 	.word	0x40020010
 8001df0:	40020028 	.word	0x40020028
 8001df4:	40020040 	.word	0x40020040
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	40020070 	.word	0x40020070
 8001e00:	40020088 	.word	0x40020088
 8001e04:	400200a0 	.word	0x400200a0
 8001e08:	400200b8 	.word	0x400200b8
 8001e0c:	40020410 	.word	0x40020410
 8001e10:	40020428 	.word	0x40020428
 8001e14:	40020440 	.word	0x40020440
 8001e18:	40020458 	.word	0x40020458
 8001e1c:	40020470 	.word	0x40020470
 8001e20:	40020488 	.word	0x40020488
 8001e24:	400204a0 	.word	0x400204a0
 8001e28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 020e 	bic.w	r2, r2, #14
 8001e3a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a6c      	ldr	r2, [pc, #432]	@ (8001ff4 <HAL_DMA_Abort_IT+0x3a8>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d04a      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a6b      	ldr	r2, [pc, #428]	@ (8001ff8 <HAL_DMA_Abort_IT+0x3ac>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d045      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a69      	ldr	r2, [pc, #420]	@ (8001ffc <HAL_DMA_Abort_IT+0x3b0>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d040      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a68      	ldr	r2, [pc, #416]	@ (8002000 <HAL_DMA_Abort_IT+0x3b4>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d03b      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a66      	ldr	r2, [pc, #408]	@ (8002004 <HAL_DMA_Abort_IT+0x3b8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d036      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a65      	ldr	r2, [pc, #404]	@ (8002008 <HAL_DMA_Abort_IT+0x3bc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d031      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a63      	ldr	r2, [pc, #396]	@ (800200c <HAL_DMA_Abort_IT+0x3c0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d02c      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a62      	ldr	r2, [pc, #392]	@ (8002010 <HAL_DMA_Abort_IT+0x3c4>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d027      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a60      	ldr	r2, [pc, #384]	@ (8002014 <HAL_DMA_Abort_IT+0x3c8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d022      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a5f      	ldr	r2, [pc, #380]	@ (8002018 <HAL_DMA_Abort_IT+0x3cc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d01d      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5d      	ldr	r2, [pc, #372]	@ (800201c <HAL_DMA_Abort_IT+0x3d0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d018      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a5c      	ldr	r2, [pc, #368]	@ (8002020 <HAL_DMA_Abort_IT+0x3d4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d013      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002024 <HAL_DMA_Abort_IT+0x3d8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d00e      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a59      	ldr	r2, [pc, #356]	@ (8002028 <HAL_DMA_Abort_IT+0x3dc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d009      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a57      	ldr	r2, [pc, #348]	@ (800202c <HAL_DMA_Abort_IT+0x3e0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d004      	beq.n	8001edc <HAL_DMA_Abort_IT+0x290>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a56      	ldr	r2, [pc, #344]	@ (8002030 <HAL_DMA_Abort_IT+0x3e4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d108      	bne.n	8001eee <HAL_DMA_Abort_IT+0x2a2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0201 	bic.w	r2, r2, #1
 8001eea:	601a      	str	r2, [r3, #0]
 8001eec:	e007      	b.n	8001efe <HAL_DMA_Abort_IT+0x2b2>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f022 0201 	bic.w	r2, r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a3c      	ldr	r2, [pc, #240]	@ (8001ff4 <HAL_DMA_Abort_IT+0x3a8>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d072      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff8 <HAL_DMA_Abort_IT+0x3ac>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d06d      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a39      	ldr	r2, [pc, #228]	@ (8001ffc <HAL_DMA_Abort_IT+0x3b0>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d068      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a37      	ldr	r2, [pc, #220]	@ (8002000 <HAL_DMA_Abort_IT+0x3b4>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d063      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a36      	ldr	r2, [pc, #216]	@ (8002004 <HAL_DMA_Abort_IT+0x3b8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d05e      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a34      	ldr	r2, [pc, #208]	@ (8002008 <HAL_DMA_Abort_IT+0x3bc>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d059      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a33      	ldr	r2, [pc, #204]	@ (800200c <HAL_DMA_Abort_IT+0x3c0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d054      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a31      	ldr	r2, [pc, #196]	@ (8002010 <HAL_DMA_Abort_IT+0x3c4>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d04f      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a30      	ldr	r2, [pc, #192]	@ (8002014 <HAL_DMA_Abort_IT+0x3c8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d04a      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002018 <HAL_DMA_Abort_IT+0x3cc>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d045      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2d      	ldr	r2, [pc, #180]	@ (800201c <HAL_DMA_Abort_IT+0x3d0>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d040      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	@ (8002020 <HAL_DMA_Abort_IT+0x3d4>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d03b      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002024 <HAL_DMA_Abort_IT+0x3d8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d036      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a28      	ldr	r2, [pc, #160]	@ (8002028 <HAL_DMA_Abort_IT+0x3dc>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d031      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a27      	ldr	r2, [pc, #156]	@ (800202c <HAL_DMA_Abort_IT+0x3e0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d02c      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a25      	ldr	r2, [pc, #148]	@ (8002030 <HAL_DMA_Abort_IT+0x3e4>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d027      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a24      	ldr	r2, [pc, #144]	@ (8002034 <HAL_DMA_Abort_IT+0x3e8>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a22      	ldr	r2, [pc, #136]	@ (8002038 <HAL_DMA_Abort_IT+0x3ec>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d01d      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a21      	ldr	r2, [pc, #132]	@ (800203c <HAL_DMA_Abort_IT+0x3f0>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d018      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002040 <HAL_DMA_Abort_IT+0x3f4>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1e      	ldr	r2, [pc, #120]	@ (8002044 <HAL_DMA_Abort_IT+0x3f8>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00e      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8002048 <HAL_DMA_Abort_IT+0x3fc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d009      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1b      	ldr	r2, [pc, #108]	@ (800204c <HAL_DMA_Abort_IT+0x400>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d004      	beq.n	8001fee <HAL_DMA_Abort_IT+0x3a2>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	@ (8002050 <HAL_DMA_Abort_IT+0x404>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d132      	bne.n	8002054 <HAL_DMA_Abort_IT+0x408>
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e031      	b.n	8002056 <HAL_DMA_Abort_IT+0x40a>
 8001ff2:	bf00      	nop
 8001ff4:	40020010 	.word	0x40020010
 8001ff8:	40020028 	.word	0x40020028
 8001ffc:	40020040 	.word	0x40020040
 8002000:	40020058 	.word	0x40020058
 8002004:	40020070 	.word	0x40020070
 8002008:	40020088 	.word	0x40020088
 800200c:	400200a0 	.word	0x400200a0
 8002010:	400200b8 	.word	0x400200b8
 8002014:	40020410 	.word	0x40020410
 8002018:	40020428 	.word	0x40020428
 800201c:	40020440 	.word	0x40020440
 8002020:	40020458 	.word	0x40020458
 8002024:	40020470 	.word	0x40020470
 8002028:	40020488 	.word	0x40020488
 800202c:	400204a0 	.word	0x400204a0
 8002030:	400204b8 	.word	0x400204b8
 8002034:	58025408 	.word	0x58025408
 8002038:	5802541c 	.word	0x5802541c
 800203c:	58025430 	.word	0x58025430
 8002040:	58025444 	.word	0x58025444
 8002044:	58025458 	.word	0x58025458
 8002048:	5802546c 	.word	0x5802546c
 800204c:	58025480 	.word	0x58025480
 8002050:	58025494 	.word	0x58025494
 8002054:	2300      	movs	r3, #0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d028      	beq.n	80020ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002064:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002068:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800206e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	2201      	movs	r2, #1
 800207a:	409a      	lsls	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002088:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00c      	beq.n	80020ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d003      	beq.n	80020cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3710      	adds	r7, #16
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b089      	sub	sp, #36	@ 0x24
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020e6:	4b89      	ldr	r3, [pc, #548]	@ (800230c <HAL_GPIO_Init+0x234>)
 80020e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020ea:	e194      	b.n	8002416 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	2101      	movs	r1, #1
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	4013      	ands	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8186 	beq.w	8002410 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d005      	beq.n	800211c <HAL_GPIO_Init+0x44>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d130      	bne.n	800217e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	2203      	movs	r2, #3
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	4013      	ands	r3, r2
 8002132:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	68da      	ldr	r2, [r3, #12]
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002152:	2201      	movs	r2, #1
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	fa02 f303 	lsl.w	r3, r2, r3
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	091b      	lsrs	r3, r3, #4
 8002168:	f003 0201 	and.w	r2, r3, #1
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	fa02 f303 	lsl.w	r3, r2, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b03      	cmp	r3, #3
 8002188:	d017      	beq.n	80021ba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d123      	bne.n	800220e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	08da      	lsrs	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3208      	adds	r2, #8
 80021ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	691a      	ldr	r2, [r3, #16]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	009b      	lsls	r3, r3, #2
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	08da      	lsrs	r2, r3, #3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3208      	adds	r2, #8
 8002208:	69b9      	ldr	r1, [r7, #24]
 800220a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	2203      	movs	r2, #3
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	43db      	mvns	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	4013      	ands	r3, r2
 8002224:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 0203 	and.w	r2, r3, #3
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4313      	orrs	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80e0 	beq.w	8002410 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002250:	4b2f      	ldr	r3, [pc, #188]	@ (8002310 <HAL_GPIO_Init+0x238>)
 8002252:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_GPIO_Init+0x238>)
 8002258:	f043 0302 	orr.w	r3, r3, #2
 800225c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002260:	4b2b      	ldr	r3, [pc, #172]	@ (8002310 <HAL_GPIO_Init+0x238>)
 8002262:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800226e:	4a29      	ldr	r2, [pc, #164]	@ (8002314 <HAL_GPIO_Init+0x23c>)
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	220f      	movs	r2, #15
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	4013      	ands	r3, r2
 8002290:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a20      	ldr	r2, [pc, #128]	@ (8002318 <HAL_GPIO_Init+0x240>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d052      	beq.n	8002340 <HAL_GPIO_Init+0x268>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_GPIO_Init+0x244>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d031      	beq.n	8002306 <HAL_GPIO_Init+0x22e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_GPIO_Init+0x248>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d02b      	beq.n	8002302 <HAL_GPIO_Init+0x22a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002324 <HAL_GPIO_Init+0x24c>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d025      	beq.n	80022fe <HAL_GPIO_Init+0x226>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002328 <HAL_GPIO_Init+0x250>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d01f      	beq.n	80022fa <HAL_GPIO_Init+0x222>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a1b      	ldr	r2, [pc, #108]	@ (800232c <HAL_GPIO_Init+0x254>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x21e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002330 <HAL_GPIO_Init+0x258>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x21a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a19      	ldr	r2, [pc, #100]	@ (8002334 <HAL_GPIO_Init+0x25c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x216>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a18      	ldr	r2, [pc, #96]	@ (8002338 <HAL_GPIO_Init+0x260>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x212>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a17      	ldr	r2, [pc, #92]	@ (800233c <HAL_GPIO_Init+0x264>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x20e>
 80022e2:	2309      	movs	r3, #9
 80022e4:	e02d      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022e6:	230a      	movs	r3, #10
 80022e8:	e02b      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022ea:	2308      	movs	r3, #8
 80022ec:	e029      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e027      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e025      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e023      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e021      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 80022fe:	2303      	movs	r3, #3
 8002300:	e01f      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 8002302:	2302      	movs	r3, #2
 8002304:	e01d      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 8002306:	2301      	movs	r3, #1
 8002308:	e01b      	b.n	8002342 <HAL_GPIO_Init+0x26a>
 800230a:	bf00      	nop
 800230c:	58000080 	.word	0x58000080
 8002310:	58024400 	.word	0x58024400
 8002314:	58000400 	.word	0x58000400
 8002318:	58020000 	.word	0x58020000
 800231c:	58020400 	.word	0x58020400
 8002320:	58020800 	.word	0x58020800
 8002324:	58020c00 	.word	0x58020c00
 8002328:	58021000 	.word	0x58021000
 800232c:	58021400 	.word	0x58021400
 8002330:	58021800 	.word	0x58021800
 8002334:	58021c00 	.word	0x58021c00
 8002338:	58022000 	.word	0x58022000
 800233c:	58022400 	.word	0x58022400
 8002340:	2300      	movs	r3, #0
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	f002 0203 	and.w	r2, r2, #3
 8002348:	0092      	lsls	r2, r2, #2
 800234a:	4093      	lsls	r3, r2
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002352:	4938      	ldr	r1, [pc, #224]	@ (8002434 <HAL_GPIO_Init+0x35c>)
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	089b      	lsrs	r3, r3, #2
 8002358:	3302      	adds	r3, #2
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002386:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800238a:	69bb      	ldr	r3, [r7, #24]
 800238c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800238e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d003      	beq.n	80023e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	43db      	mvns	r3, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4013      	ands	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	4313      	orrs	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	69ba      	ldr	r2, [r7, #24]
 800240e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	3301      	adds	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa22 f303 	lsr.w	r3, r2, r3
 8002420:	2b00      	cmp	r3, #0
 8002422:	f47f ae63 	bne.w	80020ec <HAL_GPIO_Init+0x14>
  }
}
 8002426:	bf00      	nop
 8002428:	bf00      	nop
 800242a:	3724      	adds	r7, #36	@ 0x24
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr
 8002434:	58000400 	.word	0x58000400

08002438 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691a      	ldr	r2, [r3, #16]
 8002448:	887b      	ldrh	r3, [r7, #2]
 800244a:	4013      	ands	r3, r2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002450:	2301      	movs	r3, #1
 8002452:	73fb      	strb	r3, [r7, #15]
 8002454:	e001      	b.n	800245a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800245a:	7bfb      	ldrb	r3, [r7, #15]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3714      	adds	r7, #20
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
 8002470:	460b      	mov	r3, r1
 8002472:	807b      	strh	r3, [r7, #2]
 8002474:	4613      	mov	r3, r2
 8002476:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002478:	787b      	ldrb	r3, [r7, #1]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800247e:	887a      	ldrh	r2, [r7, #2]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002484:	e003      	b.n	800248e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002486:	887b      	ldrh	r3, [r7, #2]
 8002488:	041a      	lsls	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	619a      	str	r2, [r3, #24]
}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	460b      	mov	r3, r1
 80024a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024ac:	887a      	ldrh	r2, [r7, #2]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	4013      	ands	r3, r2
 80024b2:	041a      	lsls	r2, r3, #16
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43d9      	mvns	r1, r3
 80024b8:	887b      	ldrh	r3, [r7, #2]
 80024ba:	400b      	ands	r3, r1
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	619a      	str	r2, [r3, #24]
}
 80024c2:	bf00      	nop
 80024c4:	3714      	adds	r7, #20
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b082      	sub	sp, #8
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	4603      	mov	r3, r0
 80024d6:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80024d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80024dc:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80024e0:	88fb      	ldrh	r3, [r7, #6]
 80024e2:	4013      	ands	r3, r2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d008      	beq.n	80024fa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024e8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80024ec:	88fb      	ldrh	r3, [r7, #6]
 80024ee:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f000 f804 	bl	8002502 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}

08002502 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002502:	b480      	push	{r7}
 8002504:	b083      	sub	sp, #12
 8002506:	af00      	add	r7, sp, #0
 8002508:	4603      	mov	r3, r0
 800250a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002520:	4b19      	ldr	r3, [pc, #100]	@ (8002588 <HAL_PWREx_ConfigSupply+0x70>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b04      	cmp	r3, #4
 800252a:	d00a      	beq.n	8002542 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800252c:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <HAL_PWREx_ConfigSupply+0x70>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	687a      	ldr	r2, [r7, #4]
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e01f      	b.n	800257e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800253e:	2300      	movs	r3, #0
 8002540:	e01d      	b.n	800257e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002542:	4b11      	ldr	r3, [pc, #68]	@ (8002588 <HAL_PWREx_ConfigSupply+0x70>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f023 0207 	bic.w	r2, r3, #7
 800254a:	490f      	ldr	r1, [pc, #60]	@ (8002588 <HAL_PWREx_ConfigSupply+0x70>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4313      	orrs	r3, r2
 8002550:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002552:	f7fe fe99 	bl	8001288 <HAL_GetTick>
 8002556:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002558:	e009      	b.n	800256e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800255a:	f7fe fe95 	bl	8001288 <HAL_GetTick>
 800255e:	4602      	mov	r2, r0
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002568:	d901      	bls.n	800256e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	e007      	b.n	800257e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800256e:	4b06      	ldr	r3, [pc, #24]	@ (8002588 <HAL_PWREx_ConfigSupply+0x70>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002576:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800257a:	d1ee      	bne.n	800255a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	58024800 	.word	0x58024800

0800258c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b08c      	sub	sp, #48	@ 0x30
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d102      	bne.n	80025a0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	f000 bc48 	b.w	8002e30 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0301 	and.w	r3, r3, #1
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8088 	beq.w	80026be <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ae:	4b99      	ldr	r3, [pc, #612]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025b8:	4b96      	ldr	r3, [pc, #600]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80025be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d007      	beq.n	80025d4 <HAL_RCC_OscConfig+0x48>
 80025c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025c6:	2b18      	cmp	r3, #24
 80025c8:	d111      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
 80025ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025cc:	f003 0303 	and.w	r3, r3, #3
 80025d0:	2b02      	cmp	r3, #2
 80025d2:	d10c      	bne.n	80025ee <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025d4:	4b8f      	ldr	r3, [pc, #572]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d06d      	beq.n	80026bc <HAL_RCC_OscConfig+0x130>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d169      	bne.n	80026bc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	f000 bc21 	b.w	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025f6:	d106      	bne.n	8002606 <HAL_RCC_OscConfig+0x7a>
 80025f8:	4b86      	ldr	r3, [pc, #536]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a85      	ldr	r2, [pc, #532]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80025fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	e02e      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10c      	bne.n	8002628 <HAL_RCC_OscConfig+0x9c>
 800260e:	4b81      	ldr	r3, [pc, #516]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a80      	ldr	r2, [pc, #512]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002614:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002618:	6013      	str	r3, [r2, #0]
 800261a:	4b7e      	ldr	r3, [pc, #504]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7d      	ldr	r2, [pc, #500]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002620:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002624:	6013      	str	r3, [r2, #0]
 8002626:	e01d      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002630:	d10c      	bne.n	800264c <HAL_RCC_OscConfig+0xc0>
 8002632:	4b78      	ldr	r3, [pc, #480]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a77      	ldr	r2, [pc, #476]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002638:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	4b75      	ldr	r3, [pc, #468]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a74      	ldr	r2, [pc, #464]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e00b      	b.n	8002664 <HAL_RCC_OscConfig+0xd8>
 800264c:	4b71      	ldr	r3, [pc, #452]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a70      	ldr	r2, [pc, #448]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002652:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002656:	6013      	str	r3, [r2, #0]
 8002658:	4b6e      	ldr	r3, [pc, #440]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a6d      	ldr	r2, [pc, #436]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800265e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002662:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d013      	beq.n	8002694 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fe0c 	bl	8001288 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fe08 	bl	8001288 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e3d4      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002686:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0xe8>
 8002692:	e014      	b.n	80026be <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7fe fdf8 	bl	8001288 <HAL_GetTick>
 8002698:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800269c:	f7fe fdf4 	bl	8001288 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b64      	cmp	r3, #100	@ 0x64
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e3c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80026ae:	4b59      	ldr	r3, [pc, #356]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x110>
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 80ca 	beq.w	8002860 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026cc:	4b51      	ldr	r3, [pc, #324]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d6:	4b4f      	ldr	r3, [pc, #316]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80026d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d007      	beq.n	80026f2 <HAL_RCC_OscConfig+0x166>
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	2b18      	cmp	r3, #24
 80026e6:	d156      	bne.n	8002796 <HAL_RCC_OscConfig+0x20a>
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d151      	bne.n	8002796 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026f2:	4b48      	ldr	r3, [pc, #288]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0304 	and.w	r3, r3, #4
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d005      	beq.n	800270a <HAL_RCC_OscConfig+0x17e>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d101      	bne.n	800270a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e392      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800270a:	4b42      	ldr	r3, [pc, #264]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f023 0219 	bic.w	r2, r3, #25
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	493f      	ldr	r1, [pc, #252]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002718:	4313      	orrs	r3, r2
 800271a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800271c:	f7fe fdb4 	bl	8001288 <HAL_GetTick>
 8002720:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002722:	e008      	b.n	8002736 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002724:	f7fe fdb0 	bl	8001288 <HAL_GetTick>
 8002728:	4602      	mov	r2, r0
 800272a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	2b02      	cmp	r3, #2
 8002730:	d901      	bls.n	8002736 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002732:	2303      	movs	r3, #3
 8002734:	e37c      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002736:	4b37      	ldr	r3, [pc, #220]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0304 	and.w	r3, r3, #4
 800273e:	2b00      	cmp	r3, #0
 8002740:	d0f0      	beq.n	8002724 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	f7fe fdd1 	bl	80012e8 <HAL_GetREVID>
 8002746:	4603      	mov	r3, r0
 8002748:	f241 0203 	movw	r2, #4099	@ 0x1003
 800274c:	4293      	cmp	r3, r2
 800274e:	d817      	bhi.n	8002780 <HAL_RCC_OscConfig+0x1f4>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b40      	cmp	r3, #64	@ 0x40
 8002756:	d108      	bne.n	800276a <HAL_RCC_OscConfig+0x1de>
 8002758:	4b2e      	ldr	r3, [pc, #184]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002760:	4a2c      	ldr	r2, [pc, #176]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002762:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002766:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002768:	e07a      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b2a      	ldr	r3, [pc, #168]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	031b      	lsls	r3, r3, #12
 8002778:	4926      	ldr	r1, [pc, #152]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800277e:	e06f      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002780:	4b24      	ldr	r3, [pc, #144]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	061b      	lsls	r3, r3, #24
 800278e:	4921      	ldr	r1, [pc, #132]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002790:	4313      	orrs	r3, r2
 8002792:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002794:	e064      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d047      	beq.n	800282e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f023 0219 	bic.w	r2, r3, #25
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	491a      	ldr	r1, [pc, #104]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b0:	f7fe fd6a 	bl	8001288 <HAL_GetTick>
 80027b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b8:	f7fe fd66 	bl	8001288 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e332      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0304 	and.w	r3, r3, #4
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	f7fe fd87 	bl	80012e8 <HAL_GetREVID>
 80027da:	4603      	mov	r3, r0
 80027dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d819      	bhi.n	8002818 <HAL_RCC_OscConfig+0x28c>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	691b      	ldr	r3, [r3, #16]
 80027e8:	2b40      	cmp	r3, #64	@ 0x40
 80027ea:	d108      	bne.n	80027fe <HAL_RCC_OscConfig+0x272>
 80027ec:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80027f4:	4a07      	ldr	r2, [pc, #28]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 80027f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027fa:	6053      	str	r3, [r2, #4]
 80027fc:	e030      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
 80027fe:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	031b      	lsls	r3, r3, #12
 800280c:	4901      	ldr	r1, [pc, #4]	@ (8002814 <HAL_RCC_OscConfig+0x288>)
 800280e:	4313      	orrs	r3, r2
 8002810:	604b      	str	r3, [r1, #4]
 8002812:	e025      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
 8002814:	58024400 	.word	0x58024400
 8002818:	4b9a      	ldr	r3, [pc, #616]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	061b      	lsls	r3, r3, #24
 8002826:	4997      	ldr	r1, [pc, #604]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
 800282c:	e018      	b.n	8002860 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800282e:	4b95      	ldr	r3, [pc, #596]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a94      	ldr	r2, [pc, #592]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283a:	f7fe fd25 	bl	8001288 <HAL_GetTick>
 800283e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002840:	e008      	b.n	8002854 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002842:	f7fe fd21 	bl	8001288 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e2ed      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002854:	4b8b      	ldr	r3, [pc, #556]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f0      	bne.n	8002842 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a9 	beq.w	80029c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286e:	4b85      	ldr	r3, [pc, #532]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002876:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002878:	4b82      	ldr	r3, [pc, #520]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b08      	cmp	r3, #8
 8002882:	d007      	beq.n	8002894 <HAL_RCC_OscConfig+0x308>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2b18      	cmp	r3, #24
 8002888:	d13a      	bne.n	8002900 <HAL_RCC_OscConfig+0x374>
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b01      	cmp	r3, #1
 8002892:	d135      	bne.n	8002900 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002894:	4b7b      	ldr	r3, [pc, #492]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d005      	beq.n	80028ac <HAL_RCC_OscConfig+0x320>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	2b80      	cmp	r3, #128	@ 0x80
 80028a6:	d001      	beq.n	80028ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e2c1      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ac:	f7fe fd1c 	bl	80012e8 <HAL_GetREVID>
 80028b0:	4603      	mov	r3, r0
 80028b2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d817      	bhi.n	80028ea <HAL_RCC_OscConfig+0x35e>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	2b20      	cmp	r3, #32
 80028c0:	d108      	bne.n	80028d4 <HAL_RCC_OscConfig+0x348>
 80028c2:	4b70      	ldr	r3, [pc, #448]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80028ca:	4a6e      	ldr	r2, [pc, #440]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80028d0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028d2:	e075      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028d4:	4b6b      	ldr	r3, [pc, #428]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	069b      	lsls	r3, r3, #26
 80028e2:	4968      	ldr	r1, [pc, #416]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028e8:	e06a      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028ea:	4b66      	ldr	r3, [pc, #408]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	061b      	lsls	r3, r3, #24
 80028f8:	4962      	ldr	r1, [pc, #392]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028fe:	e05f      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d042      	beq.n	800298e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002908:	4b5e      	ldr	r3, [pc, #376]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a5d      	ldr	r2, [pc, #372]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800290e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002914:	f7fe fcb8 	bl	8001288 <HAL_GetTick>
 8002918:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800291c:	f7fe fcb4 	bl	8001288 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e280      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800292e:	4b55      	ldr	r3, [pc, #340]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f0      	beq.n	800291c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800293a:	f7fe fcd5 	bl	80012e8 <HAL_GetREVID>
 800293e:	4603      	mov	r3, r0
 8002940:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002944:	4293      	cmp	r3, r2
 8002946:	d817      	bhi.n	8002978 <HAL_RCC_OscConfig+0x3ec>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	2b20      	cmp	r3, #32
 800294e:	d108      	bne.n	8002962 <HAL_RCC_OscConfig+0x3d6>
 8002950:	4b4c      	ldr	r3, [pc, #304]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002958:	4a4a      	ldr	r2, [pc, #296]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800295a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800295e:	6053      	str	r3, [r2, #4]
 8002960:	e02e      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
 8002962:	4b48      	ldr	r3, [pc, #288]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	069b      	lsls	r3, r3, #26
 8002970:	4944      	ldr	r1, [pc, #272]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
 8002976:	e023      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
 8002978:	4b42      	ldr	r3, [pc, #264]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a1b      	ldr	r3, [r3, #32]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	493f      	ldr	r1, [pc, #252]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002988:	4313      	orrs	r3, r2
 800298a:	60cb      	str	r3, [r1, #12]
 800298c:	e018      	b.n	80029c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800298e:	4b3d      	ldr	r3, [pc, #244]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a3c      	ldr	r2, [pc, #240]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002994:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fe fc75 	bl	8001288 <HAL_GetTick>
 800299e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80029a2:	f7fe fc71 	bl	8001288 <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e23d      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80029b4:	4b33      	ldr	r3, [pc, #204]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0308 	and.w	r3, r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d036      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d019      	beq.n	8002a08 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029d8:	4a2a      	ldr	r2, [pc, #168]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029da:	f043 0301 	orr.w	r3, r3, #1
 80029de:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e0:	f7fe fc52 	bl	8001288 <HAL_GetTick>
 80029e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029e8:	f7fe fc4e 	bl	8001288 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e21a      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029fa:	4b22      	ldr	r3, [pc, #136]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f0      	beq.n	80029e8 <HAL_RCC_OscConfig+0x45c>
 8002a06:	e018      	b.n	8002a3a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a08:	4b1e      	ldr	r3, [pc, #120]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	f023 0301 	bic.w	r3, r3, #1
 8002a12:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a14:	f7fe fc38 	bl	8001288 <HAL_GetTick>
 8002a18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a1a:	e008      	b.n	8002a2e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a1c:	f7fe fc34 	bl	8001288 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d901      	bls.n	8002a2e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	e200      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a2e:	4b15      	ldr	r3, [pc, #84]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d1f0      	bne.n	8002a1c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0320 	and.w	r3, r3, #32
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d039      	beq.n	8002aba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d01c      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a0c      	ldr	r2, [pc, #48]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a58:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a5a:	f7fe fc15 	bl	8001288 <HAL_GetTick>
 8002a5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a62:	f7fe fc11 	bl	8001288 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e1dd      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a74:	4b03      	ldr	r3, [pc, #12]	@ (8002a84 <HAL_RCC_OscConfig+0x4f8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x4d6>
 8002a80:	e01b      	b.n	8002aba <HAL_RCC_OscConfig+0x52e>
 8002a82:	bf00      	nop
 8002a84:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a88:	4b9b      	ldr	r3, [pc, #620]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a9a      	ldr	r2, [pc, #616]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002a8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002a92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a94:	f7fe fbf8 	bl	8001288 <HAL_GetTick>
 8002a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a9a:	e008      	b.n	8002aae <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a9c:	f7fe fbf4 	bl	8001288 <HAL_GetTick>
 8002aa0:	4602      	mov	r2, r0
 8002aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa4:	1ad3      	subs	r3, r2, r3
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d901      	bls.n	8002aae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e1c0      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002aae:	4b92      	ldr	r3, [pc, #584]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f0      	bne.n	8002a9c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	f000 8081 	beq.w	8002bca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8002cfc <HAL_RCC_OscConfig+0x770>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a8b      	ldr	r2, [pc, #556]	@ (8002cfc <HAL_RCC_OscConfig+0x770>)
 8002ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ad4:	f7fe fbd8 	bl	8001288 <HAL_GetTick>
 8002ad8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002adc:	f7fe fbd4 	bl	8001288 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e1a0      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002aee:	4b83      	ldr	r3, [pc, #524]	@ (8002cfc <HAL_RCC_OscConfig+0x770>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f0      	beq.n	8002adc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d106      	bne.n	8002b10 <HAL_RCC_OscConfig+0x584>
 8002b02:	4b7d      	ldr	r3, [pc, #500]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b06:	4a7c      	ldr	r2, [pc, #496]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b08:	f043 0301 	orr.w	r3, r3, #1
 8002b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b0e:	e02d      	b.n	8002b6c <HAL_RCC_OscConfig+0x5e0>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d10c      	bne.n	8002b32 <HAL_RCC_OscConfig+0x5a6>
 8002b18:	4b77      	ldr	r3, [pc, #476]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b1c:	4a76      	ldr	r2, [pc, #472]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b24:	4b74      	ldr	r3, [pc, #464]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b28:	4a73      	ldr	r2, [pc, #460]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b2a:	f023 0304 	bic.w	r3, r3, #4
 8002b2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b30:	e01c      	b.n	8002b6c <HAL_RCC_OscConfig+0x5e0>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	689b      	ldr	r3, [r3, #8]
 8002b36:	2b05      	cmp	r3, #5
 8002b38:	d10c      	bne.n	8002b54 <HAL_RCC_OscConfig+0x5c8>
 8002b3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	f043 0304 	orr.w	r3, r3, #4
 8002b44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b46:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b4a:	4a6b      	ldr	r2, [pc, #428]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	f043 0301 	orr.w	r3, r3, #1
 8002b50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b52:	e00b      	b.n	8002b6c <HAL_RCC_OscConfig+0x5e0>
 8002b54:	4b68      	ldr	r3, [pc, #416]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b58:	4a67      	ldr	r2, [pc, #412]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	f023 0301 	bic.w	r3, r3, #1
 8002b5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b60:	4b65      	ldr	r3, [pc, #404]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b64:	4a64      	ldr	r2, [pc, #400]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b66:	f023 0304 	bic.w	r3, r3, #4
 8002b6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d015      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b74:	f7fe fb88 	bl	8001288 <HAL_GetTick>
 8002b78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b7a:	e00a      	b.n	8002b92 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b7c:	f7fe fb84 	bl	8001288 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e14e      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b92:	4b59      	ldr	r3, [pc, #356]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b96:	f003 0302 	and.w	r3, r3, #2
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d0ee      	beq.n	8002b7c <HAL_RCC_OscConfig+0x5f0>
 8002b9e:	e014      	b.n	8002bca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ba0:	f7fe fb72 	bl	8001288 <HAL_GetTick>
 8002ba4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002ba6:	e00a      	b.n	8002bbe <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ba8:	f7fe fb6e 	bl	8001288 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e138      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002bbe:	4b4e      	ldr	r3, [pc, #312]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1ee      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 812d 	beq.w	8002e2e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002bd4:	4b48      	ldr	r3, [pc, #288]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002bdc:	2b18      	cmp	r3, #24
 8002bde:	f000 80bd 	beq.w	8002d5c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	f040 809e 	bne.w	8002d28 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bec:	4b42      	ldr	r3, [pc, #264]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a41      	ldr	r2, [pc, #260]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bf6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fb46 	bl	8001288 <HAL_GetTick>
 8002bfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c00:	f7fe fb42 	bl	8001288 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e10e      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c12:	4b39      	ldr	r3, [pc, #228]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002c22:	4b37      	ldr	r3, [pc, #220]	@ (8002d00 <HAL_RCC_OscConfig+0x774>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c2e:	0112      	lsls	r2, r2, #4
 8002c30:	430a      	orrs	r2, r1
 8002c32:	4931      	ldr	r1, [pc, #196]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c34:	4313      	orrs	r3, r2
 8002c36:	628b      	str	r3, [r1, #40]	@ 0x28
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c46:	3b01      	subs	r3, #1
 8002c48:	025b      	lsls	r3, r3, #9
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	3b01      	subs	r3, #1
 8002c54:	041b      	lsls	r3, r3, #16
 8002c56:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c60:	3b01      	subs	r3, #1
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002c68:	4923      	ldr	r1, [pc, #140]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c6e:	4b22      	ldr	r3, [pc, #136]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	4a21      	ldr	r2, [pc, #132]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c74:	f023 0301 	bic.w	r3, r3, #1
 8002c78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c7a:	4b1f      	ldr	r3, [pc, #124]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c7e:	4b21      	ldr	r3, [pc, #132]	@ (8002d04 <HAL_RCC_OscConfig+0x778>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c86:	00d2      	lsls	r2, r2, #3
 8002c88:	491b      	ldr	r1, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c92:	f023 020c 	bic.w	r2, r3, #12
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9a:	4917      	ldr	r1, [pc, #92]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ca0:	4b15      	ldr	r3, [pc, #84]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca4:	f023 0202 	bic.w	r2, r3, #2
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cac:	4912      	ldr	r1, [pc, #72]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002cb2:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cb6:	4a10      	ldr	r2, [pc, #64]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cbc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	4a0d      	ldr	r2, [pc, #52]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002cca:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	4a0a      	ldr	r2, [pc, #40]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002cd6:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cee:	f7fe facb 	bl	8001288 <HAL_GetTick>
 8002cf2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cf4:	e011      	b.n	8002d1a <HAL_RCC_OscConfig+0x78e>
 8002cf6:	bf00      	nop
 8002cf8:	58024400 	.word	0x58024400
 8002cfc:	58024800 	.word	0x58024800
 8002d00:	fffffc0c 	.word	0xfffffc0c
 8002d04:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d08:	f7fe fabe 	bl	8001288 <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e08a      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d1a:	4b47      	ldr	r3, [pc, #284]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0x77c>
 8002d26:	e082      	b.n	8002e2e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d28:	4b43      	ldr	r3, [pc, #268]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a42      	ldr	r2, [pc, #264]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d2e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d34:	f7fe faa8 	bl	8001288 <HAL_GetTick>
 8002d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3c:	f7fe faa4 	bl	8001288 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e070      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1f0      	bne.n	8002d3c <HAL_RCC_OscConfig+0x7b0>
 8002d5a:	e068      	b.n	8002e2e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d60:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d62:	4b35      	ldr	r3, [pc, #212]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d031      	beq.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	f003 0203 	and.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d12a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	091b      	lsrs	r3, r3, #4
 8002d82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d122      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d11a      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	0a5b      	lsrs	r3, r3, #9
 8002da2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002daa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d111      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	0c1b      	lsrs	r3, r3, #16
 8002db4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dbc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d108      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	0e1b      	lsrs	r3, r3, #24
 8002dc6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002dce:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e02b      	b.n	8002e30 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002dd8:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002dda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ddc:	08db      	lsrs	r3, r3, #3
 8002dde:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002de2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002de8:	693a      	ldr	r2, [r7, #16]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d01f      	beq.n	8002e2e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002dee:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002df0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df2:	4a11      	ldr	r2, [pc, #68]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dfa:	f7fe fa45 	bl	8001288 <HAL_GetTick>
 8002dfe:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002e00:	bf00      	nop
 8002e02:	f7fe fa41 	bl	8001288 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d0f9      	beq.n	8002e02 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e12:	4b0a      	ldr	r3, [pc, #40]	@ (8002e3c <HAL_RCC_OscConfig+0x8b0>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002e1a:	00d2      	lsls	r2, r2, #3
 8002e1c:	4906      	ldr	r1, [pc, #24]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002e22:	4b05      	ldr	r3, [pc, #20]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e26:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <HAL_RCC_OscConfig+0x8ac>)
 8002e28:	f043 0301 	orr.w	r3, r3, #1
 8002e2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3730      	adds	r7, #48	@ 0x30
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}
 8002e38:	58024400 	.word	0x58024400
 8002e3c:	ffff0007 	.word	0xffff0007

08002e40 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e19c      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e54:	4b8a      	ldr	r3, [pc, #552]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 030f 	and.w	r3, r3, #15
 8002e5c:	683a      	ldr	r2, [r7, #0]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d910      	bls.n	8002e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e62:	4b87      	ldr	r3, [pc, #540]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f023 020f 	bic.w	r2, r3, #15
 8002e6a:	4985      	ldr	r1, [pc, #532]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e72:	4b83      	ldr	r3, [pc, #524]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 030f 	and.w	r3, r3, #15
 8002e7a:	683a      	ldr	r2, [r7, #0]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d001      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e184      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0304 	and.w	r3, r3, #4
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d010      	beq.n	8002eb2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	4b7b      	ldr	r3, [pc, #492]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	d908      	bls.n	8002eb2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ea0:	4b78      	ldr	r3, [pc, #480]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	4975      	ldr	r1, [pc, #468]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d010      	beq.n	8002ee0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	4b70      	ldr	r3, [pc, #448]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ec4:	69db      	ldr	r3, [r3, #28]
 8002ec6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d908      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002ece:	4b6d      	ldr	r3, [pc, #436]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ed0:	69db      	ldr	r3, [r3, #28]
 8002ed2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	695b      	ldr	r3, [r3, #20]
 8002eda:	496a      	ldr	r1, [pc, #424]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0310 	and.w	r3, r3, #16
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d010      	beq.n	8002f0e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	4b64      	ldr	r3, [pc, #400]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	69db      	ldr	r3, [r3, #28]
 8002ef4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d908      	bls.n	8002f0e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002efc:	4b61      	ldr	r3, [pc, #388]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	495e      	ldr	r1, [pc, #376]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d010      	beq.n	8002f3c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	6a1b      	ldr	r3, [r3, #32]
 8002f22:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d908      	bls.n	8002f3c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f2a:	4b56      	ldr	r3, [pc, #344]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69db      	ldr	r3, [r3, #28]
 8002f36:	4953      	ldr	r1, [pc, #332]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d010      	beq.n	8002f6a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	4b4d      	ldr	r3, [pc, #308]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	f003 030f 	and.w	r3, r3, #15
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d908      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f58:	4b4a      	ldr	r3, [pc, #296]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	f023 020f 	bic.w	r2, r3, #15
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	4947      	ldr	r1, [pc, #284]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d055      	beq.n	8003022 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f76:	4b43      	ldr	r3, [pc, #268]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	4940      	ldr	r1, [pc, #256]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d107      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f90:	4b3c      	ldr	r3, [pc, #240]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d121      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0f6      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	2b03      	cmp	r3, #3
 8002fa6:	d107      	bne.n	8002fb8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002fa8:	4b36      	ldr	r3, [pc, #216]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d115      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0ea      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d107      	bne.n	8002fd0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002fc0:	4b30      	ldr	r3, [pc, #192]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0de      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e0d6      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fe0:	4b28      	ldr	r3, [pc, #160]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	691b      	ldr	r3, [r3, #16]
 8002fe4:	f023 0207 	bic.w	r2, r3, #7
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	4925      	ldr	r1, [pc, #148]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff2:	f7fe f949 	bl	8001288 <HAL_GetTick>
 8002ff6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ff8:	e00a      	b.n	8003010 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ffa:	f7fe f945 	bl	8001288 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003008:	4293      	cmp	r3, r2
 800300a:	d901      	bls.n	8003010 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e0be      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003010:	4b1c      	ldr	r3, [pc, #112]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	429a      	cmp	r2, r3
 8003020:	d1eb      	bne.n	8002ffa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	4b14      	ldr	r3, [pc, #80]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	429a      	cmp	r2, r3
 800303c:	d208      	bcs.n	8003050 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303e:	4b11      	ldr	r3, [pc, #68]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	f023 020f 	bic.w	r2, r3, #15
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	490e      	ldr	r1, [pc, #56]	@ (8003084 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003050:	4b0b      	ldr	r3, [pc, #44]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 030f 	and.w	r3, r3, #15
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	429a      	cmp	r2, r3
 800305c:	d214      	bcs.n	8003088 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 020f 	bic.w	r2, r3, #15
 8003066:	4906      	ldr	r1, [pc, #24]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	4313      	orrs	r3, r2
 800306c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306e:	4b04      	ldr	r3, [pc, #16]	@ (8003080 <HAL_RCC_ClockConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	683a      	ldr	r2, [r7, #0]
 8003078:	429a      	cmp	r2, r3
 800307a:	d005      	beq.n	8003088 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e086      	b.n	800318e <HAL_RCC_ClockConfig+0x34e>
 8003080:	52002000 	.word	0x52002000
 8003084:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d010      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	691a      	ldr	r2, [r3, #16]
 8003098:	4b3f      	ldr	r3, [pc, #252]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 800309a:	699b      	ldr	r3, [r3, #24]
 800309c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d208      	bcs.n	80030b6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	4939      	ldr	r1, [pc, #228]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0308 	and.w	r3, r3, #8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d010      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	4b34      	ldr	r3, [pc, #208]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d208      	bcs.n	80030e4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80030d2:	4b31      	ldr	r3, [pc, #196]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	492e      	ldr	r1, [pc, #184]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0310 	and.w	r3, r3, #16
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d010      	beq.n	8003112 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699a      	ldr	r2, [r3, #24]
 80030f4:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 80030f6:	69db      	ldr	r3, [r3, #28]
 80030f8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d208      	bcs.n	8003112 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003100:	4b25      	ldr	r3, [pc, #148]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003102:	69db      	ldr	r3, [r3, #28]
 8003104:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	699b      	ldr	r3, [r3, #24]
 800310c:	4922      	ldr	r1, [pc, #136]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 800310e:	4313      	orrs	r3, r2
 8003110:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0320 	and.w	r3, r3, #32
 800311a:	2b00      	cmp	r3, #0
 800311c:	d010      	beq.n	8003140 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	69da      	ldr	r2, [r3, #28]
 8003122:	4b1d      	ldr	r3, [pc, #116]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800312a:	429a      	cmp	r2, r3
 800312c:	d208      	bcs.n	8003140 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800312e:	4b1a      	ldr	r3, [pc, #104]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003130:	6a1b      	ldr	r3, [r3, #32]
 8003132:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	4917      	ldr	r1, [pc, #92]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 800313c:	4313      	orrs	r3, r2
 800313e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003140:	f000 f834 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 8003144:	4602      	mov	r2, r0
 8003146:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	0a1b      	lsrs	r3, r3, #8
 800314c:	f003 030f 	and.w	r3, r3, #15
 8003150:	4912      	ldr	r1, [pc, #72]	@ (800319c <HAL_RCC_ClockConfig+0x35c>)
 8003152:	5ccb      	ldrb	r3, [r1, r3]
 8003154:	f003 031f 	and.w	r3, r3, #31
 8003158:	fa22 f303 	lsr.w	r3, r2, r3
 800315c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800315e:	4b0e      	ldr	r3, [pc, #56]	@ (8003198 <HAL_RCC_ClockConfig+0x358>)
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	f003 030f 	and.w	r3, r3, #15
 8003166:	4a0d      	ldr	r2, [pc, #52]	@ (800319c <HAL_RCC_ClockConfig+0x35c>)
 8003168:	5cd3      	ldrb	r3, [r2, r3]
 800316a:	f003 031f 	and.w	r3, r3, #31
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	fa22 f303 	lsr.w	r3, r2, r3
 8003174:	4a0a      	ldr	r2, [pc, #40]	@ (80031a0 <HAL_RCC_ClockConfig+0x360>)
 8003176:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003178:	4a0a      	ldr	r2, [pc, #40]	@ (80031a4 <HAL_RCC_ClockConfig+0x364>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800317e:	4b0a      	ldr	r3, [pc, #40]	@ (80031a8 <HAL_RCC_ClockConfig+0x368>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4618      	mov	r0, r3
 8003184:	f7fe f836 	bl	80011f4 <HAL_InitTick>
 8003188:	4603      	mov	r3, r0
 800318a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800318c:	7bfb      	ldrb	r3, [r7, #15]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3718      	adds	r7, #24
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	58024400 	.word	0x58024400
 800319c:	08007d48 	.word	0x08007d48
 80031a0:	24000008 	.word	0x24000008
 80031a4:	24000004 	.word	0x24000004
 80031a8:	2400000c 	.word	0x2400000c

080031ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b089      	sub	sp, #36	@ 0x24
 80031b0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b2:	4bb3      	ldr	r3, [pc, #716]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80031ba:	2b18      	cmp	r3, #24
 80031bc:	f200 8155 	bhi.w	800346a <HAL_RCC_GetSysClockFreq+0x2be>
 80031c0:	a201      	add	r2, pc, #4	@ (adr r2, 80031c8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80031c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c6:	bf00      	nop
 80031c8:	0800322d 	.word	0x0800322d
 80031cc:	0800346b 	.word	0x0800346b
 80031d0:	0800346b 	.word	0x0800346b
 80031d4:	0800346b 	.word	0x0800346b
 80031d8:	0800346b 	.word	0x0800346b
 80031dc:	0800346b 	.word	0x0800346b
 80031e0:	0800346b 	.word	0x0800346b
 80031e4:	0800346b 	.word	0x0800346b
 80031e8:	08003253 	.word	0x08003253
 80031ec:	0800346b 	.word	0x0800346b
 80031f0:	0800346b 	.word	0x0800346b
 80031f4:	0800346b 	.word	0x0800346b
 80031f8:	0800346b 	.word	0x0800346b
 80031fc:	0800346b 	.word	0x0800346b
 8003200:	0800346b 	.word	0x0800346b
 8003204:	0800346b 	.word	0x0800346b
 8003208:	08003259 	.word	0x08003259
 800320c:	0800346b 	.word	0x0800346b
 8003210:	0800346b 	.word	0x0800346b
 8003214:	0800346b 	.word	0x0800346b
 8003218:	0800346b 	.word	0x0800346b
 800321c:	0800346b 	.word	0x0800346b
 8003220:	0800346b 	.word	0x0800346b
 8003224:	0800346b 	.word	0x0800346b
 8003228:	0800325f 	.word	0x0800325f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800322c:	4b94      	ldr	r3, [pc, #592]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d009      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003238:	4b91      	ldr	r3, [pc, #580]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	08db      	lsrs	r3, r3, #3
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	4a90      	ldr	r2, [pc, #576]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003244:	fa22 f303 	lsr.w	r3, r2, r3
 8003248:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800324a:	e111      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800324c:	4b8d      	ldr	r3, [pc, #564]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800324e:	61bb      	str	r3, [r7, #24]
      break;
 8003250:	e10e      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003252:	4b8d      	ldr	r3, [pc, #564]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003254:	61bb      	str	r3, [r7, #24]
      break;
 8003256:	e10b      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003258:	4b8c      	ldr	r3, [pc, #560]	@ (800348c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800325a:	61bb      	str	r3, [r7, #24]
      break;
 800325c:	e108      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800325e:	4b88      	ldr	r3, [pc, #544]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003268:	4b85      	ldr	r3, [pc, #532]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800326c:	091b      	lsrs	r3, r3, #4
 800326e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003272:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003274:	4b82      	ldr	r3, [pc, #520]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003278:	f003 0301 	and.w	r3, r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800327e:	4b80      	ldr	r3, [pc, #512]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003282:	08db      	lsrs	r3, r3, #3
 8003284:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	fb02 f303 	mul.w	r3, r2, r3
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80e1 	beq.w	8003464 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	f000 8083 	beq.w	80033b0 <HAL_RCC_GetSysClockFreq+0x204>
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	f200 80a1 	bhi.w	80033f4 <HAL_RCC_GetSysClockFreq+0x248>
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d003      	beq.n	80032c0 <HAL_RCC_GetSysClockFreq+0x114>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d056      	beq.n	800336c <HAL_RCC_GetSysClockFreq+0x1c0>
 80032be:	e099      	b.n	80033f4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032c0:	4b6f      	ldr	r3, [pc, #444]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d02d      	beq.n	8003328 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80032cc:	4b6c      	ldr	r3, [pc, #432]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	08db      	lsrs	r3, r3, #3
 80032d2:	f003 0303 	and.w	r3, r3, #3
 80032d6:	4a6b      	ldr	r2, [pc, #428]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032d8:	fa22 f303 	lsr.w	r3, r2, r3
 80032dc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	ee07 3a90 	vmov	s15, r3
 80032e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032f6:	4b62      	ldr	r3, [pc, #392]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032fe:	ee07 3a90 	vmov	s15, r3
 8003302:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003306:	ed97 6a02 	vldr	s12, [r7, #8]
 800330a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800330e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003312:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003316:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800331a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800331e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003322:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003326:	e087      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003332:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003494 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003336:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800333a:	4b51      	ldr	r3, [pc, #324]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800333e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003342:	ee07 3a90 	vmov	s15, r3
 8003346:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800334a:	ed97 6a02 	vldr	s12, [r7, #8]
 800334e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003352:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003356:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800335a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800335e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003362:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003366:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800336a:	e065      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	ee07 3a90 	vmov	s15, r3
 8003372:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003376:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003498 <HAL_RCC_GetSysClockFreq+0x2ec>
 800337a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800337e:	4b40      	ldr	r3, [pc, #256]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003382:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003386:	ee07 3a90 	vmov	s15, r3
 800338a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800338e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003392:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003396:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800339a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800339e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033ae:	e043      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ba:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800349c <HAL_RCC_GetSysClockFreq+0x2f0>
 80033be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033c2:	4b2f      	ldr	r3, [pc, #188]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ca:	ee07 3a90 	vmov	s15, r3
 80033ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033d6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033f2:	e021      	b.n	8003438 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	ee07 3a90 	vmov	s15, r3
 80033fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033fe:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003498 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b1e      	ldr	r3, [pc, #120]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003490 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003436:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003438:	4b11      	ldr	r3, [pc, #68]	@ (8003480 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800343a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800343c:	0a5b      	lsrs	r3, r3, #9
 800343e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003442:	3301      	adds	r3, #1
 8003444:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	ee07 3a90 	vmov	s15, r3
 800344c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003450:	edd7 6a07 	vldr	s13, [r7, #28]
 8003454:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800345c:	ee17 3a90 	vmov	r3, s15
 8003460:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003462:	e005      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	61bb      	str	r3, [r7, #24]
      break;
 8003468:	e002      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800346a:	4b07      	ldr	r3, [pc, #28]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800346c:	61bb      	str	r3, [r7, #24]
      break;
 800346e:	bf00      	nop
  }

  return sysclockfreq;
 8003470:	69bb      	ldr	r3, [r7, #24]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	@ 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	58024400 	.word	0x58024400
 8003484:	03d09000 	.word	0x03d09000
 8003488:	003d0900 	.word	0x003d0900
 800348c:	007a1200 	.word	0x007a1200
 8003490:	46000000 	.word	0x46000000
 8003494:	4c742400 	.word	0x4c742400
 8003498:	4a742400 	.word	0x4a742400
 800349c:	4af42400 	.word	0x4af42400

080034a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034a6:	f7ff fe81 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b10      	ldr	r3, [pc, #64]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	0a1b      	lsrs	r3, r3, #8
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	490f      	ldr	r1, [pc, #60]	@ (80034f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	f003 031f 	and.w	r3, r3, #31
 80034be:	fa22 f303 	lsr.w	r3, r2, r3
 80034c2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80034c4:	4b0a      	ldr	r3, [pc, #40]	@ (80034f0 <HAL_RCC_GetHCLKFreq+0x50>)
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	f003 030f 	and.w	r3, r3, #15
 80034cc:	4a09      	ldr	r2, [pc, #36]	@ (80034f4 <HAL_RCC_GetHCLKFreq+0x54>)
 80034ce:	5cd3      	ldrb	r3, [r2, r3]
 80034d0:	f003 031f 	and.w	r3, r3, #31
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	fa22 f303 	lsr.w	r3, r2, r3
 80034da:	4a07      	ldr	r2, [pc, #28]	@ (80034f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034dc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80034de:	4a07      	ldr	r2, [pc, #28]	@ (80034fc <HAL_RCC_GetHCLKFreq+0x5c>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80034e4:	4b04      	ldr	r3, [pc, #16]	@ (80034f8 <HAL_RCC_GetHCLKFreq+0x58>)
 80034e6:	681b      	ldr	r3, [r3, #0]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	58024400 	.word	0x58024400
 80034f4:	08007d48 	.word	0x08007d48
 80034f8:	24000008 	.word	0x24000008
 80034fc:	24000004 	.word	0x24000004

08003500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003504:	f7ff ffcc 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 8003508:	4602      	mov	r2, r0
 800350a:	4b06      	ldr	r3, [pc, #24]	@ (8003524 <HAL_RCC_GetPCLK1Freq+0x24>)
 800350c:	69db      	ldr	r3, [r3, #28]
 800350e:	091b      	lsrs	r3, r3, #4
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	4904      	ldr	r1, [pc, #16]	@ (8003528 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003516:	5ccb      	ldrb	r3, [r1, r3]
 8003518:	f003 031f 	and.w	r3, r3, #31
 800351c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003520:	4618      	mov	r0, r3
 8003522:	bd80      	pop	{r7, pc}
 8003524:	58024400 	.word	0x58024400
 8003528:	08007d48 	.word	0x08007d48

0800352c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003530:	f7ff ffb6 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b06      	ldr	r3, [pc, #24]	@ (8003550 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003538:	69db      	ldr	r3, [r3, #28]
 800353a:	0a1b      	lsrs	r3, r3, #8
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	4904      	ldr	r1, [pc, #16]	@ (8003554 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	f003 031f 	and.w	r3, r3, #31
 8003548:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800354c:	4618      	mov	r0, r3
 800354e:	bd80      	pop	{r7, pc}
 8003550:	58024400 	.word	0x58024400
 8003554:	08007d48 	.word	0x08007d48

08003558 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b0ca      	sub	sp, #296	@ 0x128
 800355e:	af00      	add	r7, sp, #0
 8003560:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003564:	2300      	movs	r3, #0
 8003566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800356a:	2300      	movs	r3, #0
 800356c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800357c:	2500      	movs	r5, #0
 800357e:	ea54 0305 	orrs.w	r3, r4, r5
 8003582:	d049      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003588:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800358a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800358e:	d02f      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003590:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003594:	d828      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003596:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800359a:	d01a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800359c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035a0:	d822      	bhi.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d003      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035aa:	d007      	beq.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035ac:	e01c      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ae:	4bb8      	ldr	r3, [pc, #736]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	4ab7      	ldr	r2, [pc, #732]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035ba:	e01a      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	3308      	adds	r3, #8
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fc8f 	bl	8004ee8 <RCCEx_PLL2_Config>
 80035ca:	4603      	mov	r3, r0
 80035cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035d0:	e00f      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035d6:	3328      	adds	r3, #40	@ 0x28
 80035d8:	2102      	movs	r1, #2
 80035da:	4618      	mov	r0, r3
 80035dc:	f001 fd36 	bl	800504c <RCCEx_PLL3_Config>
 80035e0:	4603      	mov	r3, r0
 80035e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80035e6:	e004      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035ee:	e000      	b.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80035f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10a      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80035fa:	4ba5      	ldr	r3, [pc, #660]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035fe:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003606:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003608:	4aa1      	ldr	r2, [pc, #644]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360a:	430b      	orrs	r3, r1
 800360c:	6513      	str	r3, [r2, #80]	@ 0x50
 800360e:	e003      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800361c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003620:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003624:	f04f 0900 	mov.w	r9, #0
 8003628:	ea58 0309 	orrs.w	r3, r8, r9
 800362c:	d047      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003634:	2b04      	cmp	r3, #4
 8003636:	d82a      	bhi.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003638:	a201      	add	r2, pc, #4	@ (adr r2, 8003640 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800363a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800363e:	bf00      	nop
 8003640:	08003655 	.word	0x08003655
 8003644:	08003663 	.word	0x08003663
 8003648:	08003679 	.word	0x08003679
 800364c:	08003697 	.word	0x08003697
 8003650:	08003697 	.word	0x08003697
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003654:	4b8e      	ldr	r3, [pc, #568]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	4a8d      	ldr	r2, [pc, #564]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800365a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800365e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003660:	e01a      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003662:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003666:	3308      	adds	r3, #8
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f001 fc3c 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003670:	4603      	mov	r3, r0
 8003672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003676:	e00f      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	3328      	adds	r3, #40	@ 0x28
 800367e:	2100      	movs	r1, #0
 8003680:	4618      	mov	r0, r3
 8003682:	f001 fce3 	bl	800504c <RCCEx_PLL3_Config>
 8003686:	4603      	mov	r3, r0
 8003688:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800368c:	e004      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003694:	e000      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003696:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800369c:	2b00      	cmp	r3, #0
 800369e:	d10a      	bne.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036a0:	4b7b      	ldr	r3, [pc, #492]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a4:	f023 0107 	bic.w	r1, r3, #7
 80036a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ae:	4a78      	ldr	r2, [pc, #480]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b0:	430b      	orrs	r3, r1
 80036b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80036b4:	e003      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80036ca:	f04f 0b00 	mov.w	fp, #0
 80036ce:	ea5a 030b 	orrs.w	r3, sl, fp
 80036d2:	d04c      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80036d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036de:	d030      	beq.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80036e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036e4:	d829      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036e6:	2bc0      	cmp	r3, #192	@ 0xc0
 80036e8:	d02d      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80036ea:	2bc0      	cmp	r3, #192	@ 0xc0
 80036ec:	d825      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036ee:	2b80      	cmp	r3, #128	@ 0x80
 80036f0:	d018      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80036f2:	2b80      	cmp	r3, #128	@ 0x80
 80036f4:	d821      	bhi.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80036fa:	2b40      	cmp	r3, #64	@ 0x40
 80036fc:	d007      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80036fe:	e01c      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003700:	4b63      	ldr	r3, [pc, #396]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	4a62      	ldr	r2, [pc, #392]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800370a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800370c:	e01c      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003712:	3308      	adds	r3, #8
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f001 fbe6 	bl	8004ee8 <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003722:	e011      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003724:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003728:	3328      	adds	r3, #40	@ 0x28
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f001 fc8d 	bl	800504c <RCCEx_PLL3_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003738:	e006      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003740:	e002      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003742:	bf00      	nop
 8003744:	e000      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003746:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003748:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10a      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003750:	4b4f      	ldr	r3, [pc, #316]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003752:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003754:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	4a4c      	ldr	r2, [pc, #304]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003760:	430b      	orrs	r3, r1
 8003762:	6513      	str	r3, [r2, #80]	@ 0x50
 8003764:	e003      	b.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003766:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800376a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003776:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800377a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800377e:	2300      	movs	r3, #0
 8003780:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003784:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003788:	460b      	mov	r3, r1
 800378a:	4313      	orrs	r3, r2
 800378c:	d053      	beq.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800378e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003792:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003796:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800379a:	d035      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800379c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037a0:	d82e      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037a2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037a6:	d031      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80037a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037ac:	d828      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037b2:	d01a      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x292>
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037b8:	d822      	bhi.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80037be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c2:	d007      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80037c4:	e01c      	b.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c6:	4b32      	ldr	r3, [pc, #200]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ca:	4a31      	ldr	r2, [pc, #196]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037d2:	e01c      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	3308      	adds	r3, #8
 80037da:	2100      	movs	r1, #0
 80037dc:	4618      	mov	r0, r3
 80037de:	f001 fb83 	bl	8004ee8 <RCCEx_PLL2_Config>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037e8:	e011      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ee:	3328      	adds	r3, #40	@ 0x28
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 fc2a 	bl	800504c <RCCEx_PLL3_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037fe:	e006      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003806:	e002      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003808:	bf00      	nop
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10b      	bne.n	800382e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003816:	4b1e      	ldr	r3, [pc, #120]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003818:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800381a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003826:	4a1a      	ldr	r2, [pc, #104]	@ (8003890 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003828:	430b      	orrs	r3, r1
 800382a:	6593      	str	r3, [r2, #88]	@ 0x58
 800382c:	e003      	b.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003832:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003842:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003846:	2300      	movs	r3, #0
 8003848:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800384c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003850:	460b      	mov	r3, r1
 8003852:	4313      	orrs	r3, r2
 8003854:	d056      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003856:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800385e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003862:	d038      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003864:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003868:	d831      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800386a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800386e:	d034      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003870:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003874:	d82b      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003876:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800387a:	d01d      	beq.n	80038b8 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800387c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003880:	d825      	bhi.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003882:	2b00      	cmp	r3, #0
 8003884:	d006      	beq.n	8003894 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003886:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800388a:	d00a      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800388c:	e01f      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x376>
 800388e:	bf00      	nop
 8003890:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003894:	4ba2      	ldr	r3, [pc, #648]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003898:	4aa1      	ldr	r2, [pc, #644]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800389a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800389e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038a0:	e01c      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	3308      	adds	r3, #8
 80038a8:	2100      	movs	r1, #0
 80038aa:	4618      	mov	r0, r3
 80038ac:	f001 fb1c 	bl	8004ee8 <RCCEx_PLL2_Config>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038b6:	e011      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038bc:	3328      	adds	r3, #40	@ 0x28
 80038be:	2100      	movs	r1, #0
 80038c0:	4618      	mov	r0, r3
 80038c2:	f001 fbc3 	bl	800504c <RCCEx_PLL3_Config>
 80038c6:	4603      	mov	r3, r0
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038d4:	e002      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80038da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038e8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038f4:	4a8a      	ldr	r2, [pc, #552]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f6:	430b      	orrs	r3, r1
 80038f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80038fa:	e003      	b.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003900:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003910:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003914:	2300      	movs	r3, #0
 8003916:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800391a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800391e:	460b      	mov	r3, r1
 8003920:	4313      	orrs	r3, r2
 8003922:	d03a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003924:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392a:	2b30      	cmp	r3, #48	@ 0x30
 800392c:	d01f      	beq.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800392e:	2b30      	cmp	r3, #48	@ 0x30
 8003930:	d819      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003932:	2b20      	cmp	r3, #32
 8003934:	d00c      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003936:	2b20      	cmp	r3, #32
 8003938:	d815      	bhi.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800393a:	2b00      	cmp	r3, #0
 800393c:	d019      	beq.n	8003972 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800393e:	2b10      	cmp	r3, #16
 8003940:	d111      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003942:	4b77      	ldr	r3, [pc, #476]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	4a76      	ldr	r2, [pc, #472]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800394c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800394e:	e011      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003954:	3308      	adds	r3, #8
 8003956:	2102      	movs	r1, #2
 8003958:	4618      	mov	r0, r3
 800395a:	f001 fac5 	bl	8004ee8 <RCCEx_PLL2_Config>
 800395e:	4603      	mov	r3, r0
 8003960:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003964:	e006      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800396c:	e002      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800396e:	bf00      	nop
 8003970:	e000      	b.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003972:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003974:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800397c:	4b68      	ldr	r3, [pc, #416]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800397e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003980:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003988:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800398a:	4a65      	ldr	r2, [pc, #404]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800398c:	430b      	orrs	r3, r1
 800398e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003990:	e003      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80039a6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80039aa:	2300      	movs	r3, #0
 80039ac:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80039b0:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80039b4:	460b      	mov	r3, r1
 80039b6:	4313      	orrs	r3, r2
 80039b8:	d051      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039c4:	d035      	beq.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80039c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80039ca:	d82e      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039cc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039d0:	d031      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80039d2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80039d6:	d828      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039dc:	d01a      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80039de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80039e2:	d822      	bhi.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d003      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80039e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ec:	d007      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80039ee:	e01c      	b.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039f0:	4b4b      	ldr	r3, [pc, #300]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039fa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80039fc:	e01c      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a02:	3308      	adds	r3, #8
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f001 fa6e 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a12:	e011      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a18:	3328      	adds	r3, #40	@ 0x28
 8003a1a:	2100      	movs	r1, #0
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fb15 	bl	800504c <RCCEx_PLL3_Config>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a28:	e006      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a30:	e002      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a36:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d10a      	bne.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a40:	4b37      	ldr	r3, [pc, #220]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a44:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a4e:	4a34      	ldr	r2, [pc, #208]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a50:	430b      	orrs	r3, r1
 8003a52:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a54:	e003      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003a6a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003a6e:	2300      	movs	r3, #0
 8003a70:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003a74:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	d056      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a88:	d033      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003a8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a8e:	d82c      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a94:	d02f      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003a96:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a9a:	d826      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003a9c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aa0:	d02b      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003aa2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003aa6:	d820      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003aa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003aac:	d012      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003aae:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ab2:	d81a      	bhi.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d022      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003ab8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003abc:	d115      	bne.n	8003aea <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ac2:	3308      	adds	r3, #8
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f001 fa0e 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003acc:	4603      	mov	r3, r0
 8003ace:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ad2:	e015      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad8:	3328      	adds	r3, #40	@ 0x28
 8003ada:	2101      	movs	r1, #1
 8003adc:	4618      	mov	r0, r3
 8003ade:	f001 fab5 	bl	800504c <RCCEx_PLL3_Config>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003ae8:	e00a      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003afe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b08:	4b05      	ldr	r3, [pc, #20]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b0c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b16:	4a02      	ldr	r2, [pc, #8]	@ (8003b20 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b1c:	e006      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b1e:	bf00      	nop
 8003b20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003b38:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b42:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	d055      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b58:	d033      	beq.n	8003bc2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b5e:	d82c      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b64:	d02f      	beq.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003b66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b6a:	d826      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b6c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b70:	d02b      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003b72:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003b76:	d820      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b78:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b7c:	d012      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003b7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b82:	d81a      	bhi.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d022      	beq.n	8003bce <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003b88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b8c:	d115      	bne.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b92:	3308      	adds	r3, #8
 8003b94:	2101      	movs	r1, #1
 8003b96:	4618      	mov	r0, r3
 8003b98:	f001 f9a6 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ba2:	e015      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba8:	3328      	adds	r3, #40	@ 0x28
 8003baa:	2101      	movs	r1, #1
 8003bac:	4618      	mov	r0, r3
 8003bae:	f001 fa4d 	bl	800504c <RCCEx_PLL3_Config>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bb8:	e00a      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc0:	e006      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bc2:	bf00      	nop
 8003bc4:	e004      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bc6:	bf00      	nop
 8003bc8:	e002      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bca:	bf00      	nop
 8003bcc:	e000      	b.n	8003bd0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003bce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d10b      	bne.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003bd8:	4ba3      	ldr	r3, [pc, #652]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bdc:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003be8:	4a9f      	ldr	r2, [pc, #636]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bea:	430b      	orrs	r3, r1
 8003bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bee:	e003      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c00:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003c08:	2300      	movs	r3, #0
 8003c0a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003c0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003c12:	460b      	mov	r3, r1
 8003c14:	4313      	orrs	r3, r2
 8003c16:	d037      	beq.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c22:	d00e      	beq.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c24:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c28:	d816      	bhi.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d018      	beq.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c2e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c32:	d111      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c34:	4b8c      	ldr	r3, [pc, #560]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c38:	4a8b      	ldr	r2, [pc, #556]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003c3e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c40:	e00f      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	3308      	adds	r3, #8
 8003c48:	2101      	movs	r1, #1
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 f94c 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003c50:	4603      	mov	r3, r0
 8003c52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c56:	e004      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c5e:	e000      	b.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003c60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d10a      	bne.n	8003c80 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c6e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c78:	4a7b      	ldr	r2, [pc, #492]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c7a:	430b      	orrs	r3, r1
 8003c7c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c7e:	e003      	b.n	8003c88 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c90:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c98:	2300      	movs	r3, #0
 8003c9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003c9e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	d039      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	d81c      	bhi.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cb8:	08003cf5 	.word	0x08003cf5
 8003cbc:	08003cc9 	.word	0x08003cc9
 8003cc0:	08003cd7 	.word	0x08003cd7
 8003cc4:	08003cf5 	.word	0x08003cf5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc8:	4b67      	ldr	r3, [pc, #412]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ccc:	4a66      	ldr	r2, [pc, #408]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cd4:	e00f      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	3308      	adds	r3, #8
 8003cdc:	2102      	movs	r1, #2
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f001 f902 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003cea:	e004      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cf2:	e000      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003cf4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d10a      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003cfe:	4b5a      	ldr	r3, [pc, #360]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d02:	f023 0103 	bic.w	r1, r3, #3
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003d0c:	4a56      	ldr	r2, [pc, #344]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0e:	430b      	orrs	r3, r1
 8003d10:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d12:	e003      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003d28:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003d32:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f000 809f 	beq.w	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d3e:	4b4b      	ldr	r3, [pc, #300]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a4a      	ldr	r2, [pc, #296]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d48:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fa9d 	bl	8001288 <HAL_GetTick>
 8003d4e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d52:	e00b      	b.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d54:	f7fd fa98 	bl	8001288 <HAL_GetTick>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b64      	cmp	r3, #100	@ 0x64
 8003d62:	d903      	bls.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d6a:	e005      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e6c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ed      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003d78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d179      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003d80:	4b39      	ldr	r3, [pc, #228]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d82:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d88:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d8c:	4053      	eors	r3, r2
 8003d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d015      	beq.n	8003dc2 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d96:	4b34      	ldr	r3, [pc, #208]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003da2:	4b31      	ldr	r3, [pc, #196]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da6:	4a30      	ldr	r2, [pc, #192]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003da8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dac:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003dae:	4b2e      	ldr	r3, [pc, #184]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003db4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003db8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003dba:	4a2b      	ldr	r2, [pc, #172]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003dc0:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dce:	d118      	bne.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd0:	f7fd fa5a 	bl	8001288 <HAL_GetTick>
 8003dd4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003dd8:	e00d      	b.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dda:	f7fd fa55 	bl	8001288 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003de4:	1ad2      	subs	r2, r2, r3
 8003de6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d903      	bls.n	8003df6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003df4:	e005      	b.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003df6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d0eb      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d129      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e0e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003e1a:	d10e      	bne.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e1c:	4b12      	ldr	r3, [pc, #72]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e2c:	091a      	lsrs	r2, r3, #4
 8003e2e:	4b10      	ldr	r3, [pc, #64]	@ (8003e70 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	4a0d      	ldr	r2, [pc, #52]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e34:	430b      	orrs	r3, r1
 8003e36:	6113      	str	r3, [r2, #16]
 8003e38:	e005      	b.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	4a0a      	ldr	r2, [pc, #40]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003e44:	6113      	str	r3, [r2, #16]
 8003e46:	4b08      	ldr	r3, [pc, #32]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e48:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003e52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e56:	4a04      	ldr	r2, [pc, #16]	@ (8003e68 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e58:	430b      	orrs	r3, r1
 8003e5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003e5c:	e00e      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003e66:	e009      	b.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003e68:	58024400 	.word	0x58024400
 8003e6c:	58024800 	.word	0x58024800
 8003e70:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e84:	f002 0301 	and.w	r3, r2, #1
 8003e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003e92:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e96:	460b      	mov	r3, r1
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	f000 8089 	beq.w	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ea4:	2b28      	cmp	r3, #40	@ 0x28
 8003ea6:	d86b      	bhi.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003f89 	.word	0x08003f89
 8003eb4:	08003f81 	.word	0x08003f81
 8003eb8:	08003f81 	.word	0x08003f81
 8003ebc:	08003f81 	.word	0x08003f81
 8003ec0:	08003f81 	.word	0x08003f81
 8003ec4:	08003f81 	.word	0x08003f81
 8003ec8:	08003f81 	.word	0x08003f81
 8003ecc:	08003f81 	.word	0x08003f81
 8003ed0:	08003f55 	.word	0x08003f55
 8003ed4:	08003f81 	.word	0x08003f81
 8003ed8:	08003f81 	.word	0x08003f81
 8003edc:	08003f81 	.word	0x08003f81
 8003ee0:	08003f81 	.word	0x08003f81
 8003ee4:	08003f81 	.word	0x08003f81
 8003ee8:	08003f81 	.word	0x08003f81
 8003eec:	08003f81 	.word	0x08003f81
 8003ef0:	08003f6b 	.word	0x08003f6b
 8003ef4:	08003f81 	.word	0x08003f81
 8003ef8:	08003f81 	.word	0x08003f81
 8003efc:	08003f81 	.word	0x08003f81
 8003f00:	08003f81 	.word	0x08003f81
 8003f04:	08003f81 	.word	0x08003f81
 8003f08:	08003f81 	.word	0x08003f81
 8003f0c:	08003f81 	.word	0x08003f81
 8003f10:	08003f89 	.word	0x08003f89
 8003f14:	08003f81 	.word	0x08003f81
 8003f18:	08003f81 	.word	0x08003f81
 8003f1c:	08003f81 	.word	0x08003f81
 8003f20:	08003f81 	.word	0x08003f81
 8003f24:	08003f81 	.word	0x08003f81
 8003f28:	08003f81 	.word	0x08003f81
 8003f2c:	08003f81 	.word	0x08003f81
 8003f30:	08003f89 	.word	0x08003f89
 8003f34:	08003f81 	.word	0x08003f81
 8003f38:	08003f81 	.word	0x08003f81
 8003f3c:	08003f81 	.word	0x08003f81
 8003f40:	08003f81 	.word	0x08003f81
 8003f44:	08003f81 	.word	0x08003f81
 8003f48:	08003f81 	.word	0x08003f81
 8003f4c:	08003f81 	.word	0x08003f81
 8003f50:	08003f89 	.word	0x08003f89
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f58:	3308      	adds	r3, #8
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f000 ffc3 	bl	8004ee8 <RCCEx_PLL2_Config>
 8003f62:	4603      	mov	r3, r0
 8003f64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f68:	e00f      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6e:	3328      	adds	r3, #40	@ 0x28
 8003f70:	2101      	movs	r1, #1
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 f86a 	bl	800504c <RCCEx_PLL3_Config>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003f7e:	e004      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f86:	e000      	b.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003f88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003f92:	4bbf      	ldr	r3, [pc, #764]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f96:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f9e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fa0:	4abb      	ldr	r2, [pc, #748]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fa2:	430b      	orrs	r3, r1
 8003fa4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003fa6:	e003      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003fb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb8:	f002 0302 	and.w	r3, r2, #2
 8003fbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003fc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	d041      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003fd6:	2b05      	cmp	r3, #5
 8003fd8:	d824      	bhi.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003fda:	a201      	add	r2, pc, #4	@ (adr r2, 8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe0:	0800402d 	.word	0x0800402d
 8003fe4:	08003ff9 	.word	0x08003ff9
 8003fe8:	0800400f 	.word	0x0800400f
 8003fec:	0800402d 	.word	0x0800402d
 8003ff0:	0800402d 	.word	0x0800402d
 8003ff4:	0800402d 	.word	0x0800402d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffc:	3308      	adds	r3, #8
 8003ffe:	2101      	movs	r1, #1
 8004000:	4618      	mov	r0, r3
 8004002:	f000 ff71 	bl	8004ee8 <RCCEx_PLL2_Config>
 8004006:	4603      	mov	r3, r0
 8004008:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800400c:	e00f      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800400e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004012:	3328      	adds	r3, #40	@ 0x28
 8004014:	2101      	movs	r1, #1
 8004016:	4618      	mov	r0, r3
 8004018:	f001 f818 	bl	800504c <RCCEx_PLL3_Config>
 800401c:	4603      	mov	r3, r0
 800401e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004022:	e004      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800402a:	e000      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800402c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10a      	bne.n	800404c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004036:	4b96      	ldr	r3, [pc, #600]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800403a:	f023 0107 	bic.w	r1, r3, #7
 800403e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004042:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004044:	4a92      	ldr	r2, [pc, #584]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004046:	430b      	orrs	r3, r1
 8004048:	6553      	str	r3, [r2, #84]	@ 0x54
 800404a:	e003      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004050:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	f002 0304 	and.w	r3, r2, #4
 8004060:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004064:	2300      	movs	r3, #0
 8004066:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800406a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800406e:	460b      	mov	r3, r1
 8004070:	4313      	orrs	r3, r2
 8004072:	d044      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004078:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800407c:	2b05      	cmp	r3, #5
 800407e:	d825      	bhi.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004080:	a201      	add	r2, pc, #4	@ (adr r2, 8004088 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004086:	bf00      	nop
 8004088:	080040d5 	.word	0x080040d5
 800408c:	080040a1 	.word	0x080040a1
 8004090:	080040b7 	.word	0x080040b7
 8004094:	080040d5 	.word	0x080040d5
 8004098:	080040d5 	.word	0x080040d5
 800409c:	080040d5 	.word	0x080040d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a4:	3308      	adds	r3, #8
 80040a6:	2101      	movs	r1, #1
 80040a8:	4618      	mov	r0, r3
 80040aa:	f000 ff1d 	bl	8004ee8 <RCCEx_PLL2_Config>
 80040ae:	4603      	mov	r3, r0
 80040b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040b4:	e00f      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80040b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ba:	3328      	adds	r3, #40	@ 0x28
 80040bc:	2101      	movs	r1, #1
 80040be:	4618      	mov	r0, r3
 80040c0:	f000 ffc4 	bl	800504c <RCCEx_PLL3_Config>
 80040c4:	4603      	mov	r3, r0
 80040c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80040ca:	e004      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040d2:	e000      	b.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80040d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10b      	bne.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040de:	4b6c      	ldr	r3, [pc, #432]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040e2:	f023 0107 	bic.w	r1, r3, #7
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80040ee:	4a68      	ldr	r2, [pc, #416]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040f0:	430b      	orrs	r3, r1
 80040f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80040f4:	e003      	b.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f002 0320 	and.w	r3, r2, #32
 800410a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800410e:	2300      	movs	r3, #0
 8004110:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004114:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004118:	460b      	mov	r3, r1
 800411a:	4313      	orrs	r3, r2
 800411c:	d055      	beq.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800411e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800412a:	d033      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800412c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004130:	d82c      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004132:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004136:	d02f      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004138:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800413c:	d826      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800413e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004142:	d02b      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004144:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004148:	d820      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800414a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800414e:	d012      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004150:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004154:	d81a      	bhi.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004156:	2b00      	cmp	r3, #0
 8004158:	d022      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800415a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800415e:	d115      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004164:	3308      	adds	r3, #8
 8004166:	2100      	movs	r1, #0
 8004168:	4618      	mov	r0, r3
 800416a:	f000 febd 	bl	8004ee8 <RCCEx_PLL2_Config>
 800416e:	4603      	mov	r3, r0
 8004170:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004174:	e015      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800417a:	3328      	adds	r3, #40	@ 0x28
 800417c:	2102      	movs	r1, #2
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ff64 	bl	800504c <RCCEx_PLL3_Config>
 8004184:	4603      	mov	r3, r0
 8004186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800418a:	e00a      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004192:	e006      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004194:	bf00      	nop
 8004196:	e004      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004198:	bf00      	nop
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041aa:	4b39      	ldr	r3, [pc, #228]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041ae:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ba:	4a35      	ldr	r2, [pc, #212]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041bc:	430b      	orrs	r3, r1
 80041be:	6553      	str	r3, [r2, #84]	@ 0x54
 80041c0:	e003      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80041d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80041da:	2300      	movs	r3, #0
 80041dc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80041e0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4313      	orrs	r3, r2
 80041e8:	d058      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80041ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80041f2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041f6:	d033      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80041f8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80041fc:	d82c      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80041fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004202:	d02f      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004204:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004208:	d826      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800420a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800420e:	d02b      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004210:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004214:	d820      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004216:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800421a:	d012      	beq.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800421c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004220:	d81a      	bhi.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d022      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004226:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800422a:	d115      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800422c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004230:	3308      	adds	r3, #8
 8004232:	2100      	movs	r1, #0
 8004234:	4618      	mov	r0, r3
 8004236:	f000 fe57 	bl	8004ee8 <RCCEx_PLL2_Config>
 800423a:	4603      	mov	r3, r0
 800423c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004240:	e015      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004246:	3328      	adds	r3, #40	@ 0x28
 8004248:	2102      	movs	r1, #2
 800424a:	4618      	mov	r0, r3
 800424c:	f000 fefe 	bl	800504c <RCCEx_PLL3_Config>
 8004250:	4603      	mov	r3, r0
 8004252:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004256:	e00a      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800425e:	e006      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004260:	bf00      	nop
 8004262:	e004      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004264:	bf00      	nop
 8004266:	e002      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004268:	bf00      	nop
 800426a:	e000      	b.n	800426e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800426c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800426e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004272:	2b00      	cmp	r3, #0
 8004274:	d10e      	bne.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004276:	4b06      	ldr	r3, [pc, #24]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800427e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004282:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004286:	4a02      	ldr	r2, [pc, #8]	@ (8004290 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004288:	430b      	orrs	r3, r1
 800428a:	6593      	str	r3, [r2, #88]	@ 0x58
 800428c:	e006      	b.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800428e:	bf00      	nop
 8004290:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004294:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004298:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800429c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80042a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80042ac:	2300      	movs	r3, #0
 80042ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80042b2:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80042b6:	460b      	mov	r3, r1
 80042b8:	4313      	orrs	r3, r2
 80042ba:	d055      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80042bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042c4:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042c8:	d033      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80042ca:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80042ce:	d82c      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042d4:	d02f      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80042d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042da:	d826      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042dc:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042e0:	d02b      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80042e2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80042e6:	d820      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042ec:	d012      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80042ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80042f2:	d81a      	bhi.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d022      	beq.n	800433e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fc:	d115      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	3308      	adds	r3, #8
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f000 fdee 	bl	8004ee8 <RCCEx_PLL2_Config>
 800430c:	4603      	mov	r3, r0
 800430e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004312:	e015      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004318:	3328      	adds	r3, #40	@ 0x28
 800431a:	2102      	movs	r1, #2
 800431c:	4618      	mov	r0, r3
 800431e:	f000 fe95 	bl	800504c <RCCEx_PLL3_Config>
 8004322:	4603      	mov	r3, r0
 8004324:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004328:	e00a      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004330:	e006      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004332:	bf00      	nop
 8004334:	e004      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800433e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004340:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10b      	bne.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004348:	4ba1      	ldr	r3, [pc, #644]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004358:	4a9d      	ldr	r2, [pc, #628]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800435a:	430b      	orrs	r3, r1
 800435c:	6593      	str	r3, [r2, #88]	@ 0x58
 800435e:	e003      	b.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004360:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004364:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004368:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004370:	f002 0308 	and.w	r3, r2, #8
 8004374:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004378:	2300      	movs	r3, #0
 800437a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800437e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004382:	460b      	mov	r3, r1
 8004384:	4313      	orrs	r3, r2
 8004386:	d01e      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004388:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800438c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004390:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004394:	d10c      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800439a:	3328      	adds	r3, #40	@ 0x28
 800439c:	2102      	movs	r1, #2
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 fe54 	bl	800504c <RCCEx_PLL3_Config>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d002      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80043b0:	4b87      	ldr	r3, [pc, #540]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80043c0:	4a83      	ldr	r2, [pc, #524]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043c2:	430b      	orrs	r3, r1
 80043c4:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	f002 0310 	and.w	r3, r2, #16
 80043d2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80043d6:	2300      	movs	r3, #0
 80043d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80043dc:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80043e0:	460b      	mov	r3, r1
 80043e2:	4313      	orrs	r3, r2
 80043e4:	d01e      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80043ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f2:	d10c      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f8:	3328      	adds	r3, #40	@ 0x28
 80043fa:	2102      	movs	r1, #2
 80043fc:	4618      	mov	r0, r3
 80043fe:	f000 fe25 	bl	800504c <RCCEx_PLL3_Config>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800440e:	4b70      	ldr	r3, [pc, #448]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004410:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004412:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004416:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800441a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800441e:	4a6c      	ldr	r2, [pc, #432]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004420:	430b      	orrs	r3, r1
 8004422:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004430:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800443a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800443e:	460b      	mov	r3, r1
 8004440:	4313      	orrs	r3, r2
 8004442:	d03e      	beq.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004448:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800444c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004450:	d022      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004452:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004456:	d81b      	bhi.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800445c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004460:	d00b      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004462:	e015      	b.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	3308      	adds	r3, #8
 800446a:	2100      	movs	r1, #0
 800446c:	4618      	mov	r0, r3
 800446e:	f000 fd3b 	bl	8004ee8 <RCCEx_PLL2_Config>
 8004472:	4603      	mov	r3, r0
 8004474:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004478:	e00f      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	2102      	movs	r1, #2
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fde2 	bl	800504c <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800448e:	e004      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004496:	e000      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004498:	bf00      	nop
    }

    if (ret == HAL_OK)
 800449a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10b      	bne.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044a2:	4b4b      	ldr	r3, [pc, #300]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044a6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044b2:	4a47      	ldr	r2, [pc, #284]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044b4:	430b      	orrs	r3, r1
 80044b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80044b8:	e003      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80044c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ca:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80044ce:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044d0:	2300      	movs	r3, #0
 80044d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80044d4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80044d8:	460b      	mov	r3, r1
 80044da:	4313      	orrs	r3, r2
 80044dc:	d03b      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044ea:	d01f      	beq.n	800452c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80044ec:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80044f0:	d818      	bhi.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80044f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80044f6:	d003      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80044f8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80044fc:	d007      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80044fe:	e011      	b.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004500:	4b33      	ldr	r3, [pc, #204]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004504:	4a32      	ldr	r2, [pc, #200]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004506:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800450a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800450c:	e00f      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	3328      	adds	r3, #40	@ 0x28
 8004514:	2101      	movs	r1, #1
 8004516:	4618      	mov	r0, r3
 8004518:	f000 fd98 	bl	800504c <RCCEx_PLL3_Config>
 800451c:	4603      	mov	r3, r0
 800451e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004522:	e004      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800452a:	e000      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800452c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800452e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004532:	2b00      	cmp	r3, #0
 8004534:	d10b      	bne.n	800454e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004536:	4b26      	ldr	r3, [pc, #152]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004538:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800453a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800453e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	4a22      	ldr	r2, [pc, #136]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004548:	430b      	orrs	r3, r1
 800454a:	6553      	str	r3, [r2, #84]	@ 0x54
 800454c:	e003      	b.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004552:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004562:	673b      	str	r3, [r7, #112]	@ 0x70
 8004564:	2300      	movs	r3, #0
 8004566:	677b      	str	r3, [r7, #116]	@ 0x74
 8004568:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800456c:	460b      	mov	r3, r1
 800456e:	4313      	orrs	r3, r2
 8004570:	d034      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004572:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004576:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004578:	2b00      	cmp	r3, #0
 800457a:	d003      	beq.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800457c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004580:	d007      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004582:	e011      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004584:	4b12      	ldr	r3, [pc, #72]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004588:	4a11      	ldr	r2, [pc, #68]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800458a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800458e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004590:	e00e      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004596:	3308      	adds	r3, #8
 8004598:	2102      	movs	r1, #2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 fca4 	bl	8004ee8 <RCCEx_PLL2_Config>
 80045a0:	4603      	mov	r3, r0
 80045a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045a6:	e003      	b.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d10d      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80045b8:	4b05      	ldr	r3, [pc, #20]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045bc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80045c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045c6:	4a02      	ldr	r2, [pc, #8]	@ (80045d0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80045cc:	e006      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80045ce:	bf00      	nop
 80045d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80045dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045e4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80045e8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80045ea:	2300      	movs	r3, #0
 80045ec:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80045ee:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80045f2:	460b      	mov	r3, r1
 80045f4:	4313      	orrs	r3, r2
 80045f6:	d00c      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80045f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fc:	3328      	adds	r3, #40	@ 0x28
 80045fe:	2102      	movs	r1, #2
 8004600:	4618      	mov	r0, r3
 8004602:	f000 fd23 	bl	800504c <RCCEx_PLL3_Config>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d002      	beq.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800461e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004620:	2300      	movs	r3, #0
 8004622:	667b      	str	r3, [r7, #100]	@ 0x64
 8004624:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004628:	460b      	mov	r3, r1
 800462a:	4313      	orrs	r3, r2
 800462c:	d038      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004636:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800463a:	d018      	beq.n	800466e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800463c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004640:	d811      	bhi.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004642:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004646:	d014      	beq.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004648:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800464c:	d80b      	bhi.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800464e:	2b00      	cmp	r3, #0
 8004650:	d011      	beq.n	8004676 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004652:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004656:	d106      	bne.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004658:	4bc3      	ldr	r3, [pc, #780]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800465c:	4ac2      	ldr	r2, [pc, #776]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004662:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004664:	e008      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800466c:	e004      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800466e:	bf00      	nop
 8004670:	e002      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004672:	bf00      	nop
 8004674:	e000      	b.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004680:	4bb9      	ldr	r3, [pc, #740]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004684:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004690:	4ab5      	ldr	r2, [pc, #724]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004692:	430b      	orrs	r3, r1
 8004694:	6553      	str	r3, [r2, #84]	@ 0x54
 8004696:	e003      	b.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80046ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80046ae:	2300      	movs	r3, #0
 80046b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80046b6:	460b      	mov	r3, r1
 80046b8:	4313      	orrs	r3, r2
 80046ba:	d009      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046bc:	4baa      	ldr	r3, [pc, #680]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80046c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	4aa7      	ldr	r2, [pc, #668]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046cc:	430b      	orrs	r3, r1
 80046ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80046dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80046de:	2300      	movs	r3, #0
 80046e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80046e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80046e6:	460b      	mov	r3, r1
 80046e8:	4313      	orrs	r3, r2
 80046ea:	d00a      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80046ec:	4b9e      	ldr	r3, [pc, #632]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80046fc:	4a9a      	ldr	r2, [pc, #616]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80046fe:	430b      	orrs	r3, r1
 8004700:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800470a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800470e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004710:	2300      	movs	r3, #0
 8004712:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004714:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004718:	460b      	mov	r3, r1
 800471a:	4313      	orrs	r3, r2
 800471c:	d009      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800471e:	4b92      	ldr	r3, [pc, #584]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004720:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004722:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800472c:	4a8e      	ldr	r2, [pc, #568]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800472e:	430b      	orrs	r3, r1
 8004730:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800473e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004740:	2300      	movs	r3, #0
 8004742:	647b      	str	r3, [r7, #68]	@ 0x44
 8004744:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d00e      	beq.n	800476c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800474e:	4b86      	ldr	r3, [pc, #536]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	4a85      	ldr	r2, [pc, #532]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004754:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004758:	6113      	str	r3, [r2, #16]
 800475a:	4b83      	ldr	r3, [pc, #524]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800475c:	6919      	ldr	r1, [r3, #16]
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004762:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004766:	4a80      	ldr	r2, [pc, #512]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004768:	430b      	orrs	r3, r1
 800476a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800476c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004774:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004778:	63bb      	str	r3, [r7, #56]	@ 0x38
 800477a:	2300      	movs	r3, #0
 800477c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800477e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004782:	460b      	mov	r3, r1
 8004784:	4313      	orrs	r3, r2
 8004786:	d009      	beq.n	800479c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004788:	4b77      	ldr	r3, [pc, #476]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800478a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800478c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004794:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004796:	4a74      	ldr	r2, [pc, #464]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004798:	430b      	orrs	r3, r1
 800479a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80047a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80047aa:	2300      	movs	r3, #0
 80047ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80047ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80047b2:	460b      	mov	r3, r1
 80047b4:	4313      	orrs	r3, r2
 80047b6:	d00a      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047b8:	4b6b      	ldr	r3, [pc, #428]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80047c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80047c8:	4a67      	ldr	r2, [pc, #412]	@ (8004968 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047ca:	430b      	orrs	r3, r1
 80047cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d6:	2100      	movs	r1, #0
 80047d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80047e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80047e4:	460b      	mov	r3, r1
 80047e6:	4313      	orrs	r3, r2
 80047e8:	d011      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047ee:	3308      	adds	r3, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f000 fb78 	bl	8004ee8 <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004806:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800480a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800480e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	2100      	movs	r1, #0
 8004818:	6239      	str	r1, [r7, #32]
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004820:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004824:	460b      	mov	r3, r1
 8004826:	4313      	orrs	r3, r2
 8004828:	d011      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800482a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800482e:	3308      	adds	r3, #8
 8004830:	2101      	movs	r1, #1
 8004832:	4618      	mov	r0, r3
 8004834:	f000 fb58 	bl	8004ee8 <RCCEx_PLL2_Config>
 8004838:	4603      	mov	r3, r0
 800483a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800483e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004842:	2b00      	cmp	r3, #0
 8004844:	d003      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004846:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800484a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800484e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004856:	2100      	movs	r1, #0
 8004858:	61b9      	str	r1, [r7, #24]
 800485a:	f003 0304 	and.w	r3, r3, #4
 800485e:	61fb      	str	r3, [r7, #28]
 8004860:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d011      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800486a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800486e:	3308      	adds	r3, #8
 8004870:	2102      	movs	r1, #2
 8004872:	4618      	mov	r0, r3
 8004874:	f000 fb38 	bl	8004ee8 <RCCEx_PLL2_Config>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800487e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004882:	2b00      	cmp	r3, #0
 8004884:	d003      	beq.n	800488e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800488a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800488e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004896:	2100      	movs	r1, #0
 8004898:	6139      	str	r1, [r7, #16]
 800489a:	f003 0308 	and.w	r3, r3, #8
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048a4:	460b      	mov	r3, r1
 80048a6:	4313      	orrs	r3, r2
 80048a8:	d011      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ae:	3328      	adds	r3, #40	@ 0x28
 80048b0:	2100      	movs	r1, #0
 80048b2:	4618      	mov	r0, r3
 80048b4:	f000 fbca 	bl	800504c <RCCEx_PLL3_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80048be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d003      	beq.n	80048ce <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80048ca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048d6:	2100      	movs	r1, #0
 80048d8:	60b9      	str	r1, [r7, #8]
 80048da:	f003 0310 	and.w	r3, r3, #16
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80048e4:	460b      	mov	r3, r1
 80048e6:	4313      	orrs	r3, r2
 80048e8:	d011      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048ee:	3328      	adds	r3, #40	@ 0x28
 80048f0:	2101      	movs	r1, #1
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbaa 	bl	800504c <RCCEx_PLL3_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80048fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004906:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800490a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800490e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004916:	2100      	movs	r1, #0
 8004918:	6039      	str	r1, [r7, #0]
 800491a:	f003 0320 	and.w	r3, r3, #32
 800491e:	607b      	str	r3, [r7, #4]
 8004920:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004924:	460b      	mov	r3, r1
 8004926:	4313      	orrs	r3, r2
 8004928:	d011      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800492a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800492e:	3328      	adds	r3, #40	@ 0x28
 8004930:	2102      	movs	r1, #2
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fb8a 	bl	800504c <RCCEx_PLL3_Config>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800493e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800494a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800494e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	e000      	b.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
}
 800495c:	4618      	mov	r0, r3
 800495e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004962:	46bd      	mov	sp, r7
 8004964:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004968:	58024400 	.word	0x58024400

0800496c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004970:	f7fe fd96 	bl	80034a0 <HAL_RCC_GetHCLKFreq>
 8004974:	4602      	mov	r2, r0
 8004976:	4b06      	ldr	r3, [pc, #24]	@ (8004990 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	091b      	lsrs	r3, r3, #4
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	4904      	ldr	r1, [pc, #16]	@ (8004994 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004982:	5ccb      	ldrb	r3, [r1, r3]
 8004984:	f003 031f 	and.w	r3, r3, #31
 8004988:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800498c:	4618      	mov	r0, r3
 800498e:	bd80      	pop	{r7, pc}
 8004990:	58024400 	.word	0x58024400
 8004994:	08007d48 	.word	0x08007d48

08004998 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004998:	b480      	push	{r7}
 800499a:	b089      	sub	sp, #36	@ 0x24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049a0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a4:	f003 0303 	and.w	r3, r3, #3
 80049a8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80049aa:	4b9f      	ldr	r3, [pc, #636]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ae:	0b1b      	lsrs	r3, r3, #12
 80049b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80049b6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ba:	091b      	lsrs	r3, r3, #4
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80049c2:	4b99      	ldr	r3, [pc, #612]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049c6:	08db      	lsrs	r3, r3, #3
 80049c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049cc:	693a      	ldr	r2, [r7, #16]
 80049ce:	fb02 f303 	mul.w	r3, r2, r3
 80049d2:	ee07 3a90 	vmov	s15, r3
 80049d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	f000 8111 	beq.w	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	f000 8083 	beq.w	8004af4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	f200 80a1 	bhi.w	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d056      	beq.n	8004ab0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004a02:	e099      	b.n	8004b38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a04:	4b88      	ldr	r3, [pc, #544]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d02d      	beq.n	8004a6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a10:	4b85      	ldr	r3, [pc, #532]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	08db      	lsrs	r3, r3, #3
 8004a16:	f003 0303 	and.w	r3, r3, #3
 8004a1a:	4a84      	ldr	r2, [pc, #528]	@ (8004c2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004a1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	ee07 3a90 	vmov	s15, r3
 8004a28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a42:	ee07 3a90 	vmov	s15, r3
 8004a46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a6a:	e087      	b.n	8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	ee07 3a90 	vmov	s15, r3
 8004a72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a7e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a86:	ee07 3a90 	vmov	s15, r3
 8004a8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004aa2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004aae:	e065      	b.n	8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004abe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ac2:	4b59      	ldr	r3, [pc, #356]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aca:	ee07 3a90 	vmov	s15, r3
 8004ace:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ad2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004ada:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ade:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ae2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004af2:	e043      	b.n	8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004af4:	697b      	ldr	r3, [r7, #20]
 8004af6:	ee07 3a90 	vmov	s15, r3
 8004afa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004b02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b06:	4b48      	ldr	r3, [pc, #288]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0e:	ee07 3a90 	vmov	s15, r3
 8004b12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b36:	e021      	b.n	8004b7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	ee07 3a90 	vmov	s15, r3
 8004b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004b46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4a:	4b37      	ldr	r3, [pc, #220]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b52:	ee07 3a90 	vmov	s15, r3
 8004b56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004b7c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b80:	0a5b      	lsrs	r3, r3, #9
 8004b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b86:	ee07 3a90 	vmov	s15, r3
 8004b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ba2:	ee17 2a90 	vmov	r2, s15
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004baa:	4b1f      	ldr	r3, [pc, #124]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	ee17 2a90 	vmov	r2, s15
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004bd8:	4b13      	ldr	r3, [pc, #76]	@ (8004c28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bdc:	0e1b      	lsrs	r3, r3, #24
 8004bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004be2:	ee07 3a90 	vmov	s15, r3
 8004be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bfe:	ee17 2a90 	vmov	r2, s15
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004c06:	e008      	b.n	8004c1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	609a      	str	r2, [r3, #8]
}
 8004c1a:	bf00      	nop
 8004c1c:	3724      	adds	r7, #36	@ 0x24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	03d09000 	.word	0x03d09000
 8004c30:	46000000 	.word	0x46000000
 8004c34:	4c742400 	.word	0x4c742400
 8004c38:	4a742400 	.word	0x4a742400
 8004c3c:	4af42400 	.word	0x4af42400

08004c40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b089      	sub	sp, #36	@ 0x24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004c48:	4ba1      	ldr	r3, [pc, #644]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c4c:	f003 0303 	and.w	r3, r3, #3
 8004c50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004c52:	4b9f      	ldr	r3, [pc, #636]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c56:	0d1b      	lsrs	r3, r3, #20
 8004c58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004c5e:	4b9c      	ldr	r3, [pc, #624]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c62:	0a1b      	lsrs	r3, r3, #8
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004c6a:	4b99      	ldr	r3, [pc, #612]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	08db      	lsrs	r3, r3, #3
 8004c70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	fb02 f303 	mul.w	r3, r2, r3
 8004c7a:	ee07 3a90 	vmov	s15, r3
 8004c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f000 8111 	beq.w	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004c8e:	69bb      	ldr	r3, [r7, #24]
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	f000 8083 	beq.w	8004d9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	f200 80a1 	bhi.w	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b01      	cmp	r3, #1
 8004ca8:	d056      	beq.n	8004d58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004caa:	e099      	b.n	8004de0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cac:	4b88      	ldr	r3, [pc, #544]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f003 0320 	and.w	r3, r3, #32
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d02d      	beq.n	8004d14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cb8:	4b85      	ldr	r3, [pc, #532]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	08db      	lsrs	r3, r3, #3
 8004cbe:	f003 0303 	and.w	r3, r3, #3
 8004cc2:	4a84      	ldr	r2, [pc, #528]	@ (8004ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8004cc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	ee07 3a90 	vmov	s15, r3
 8004cd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	ee07 3a90 	vmov	s15, r3
 8004cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ce2:	4b7b      	ldr	r3, [pc, #492]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cea:	ee07 3a90 	vmov	s15, r3
 8004cee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004d12:	e087      	b.n	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	ee07 3a90 	vmov	s15, r3
 8004d1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004edc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d26:	4b6a      	ldr	r3, [pc, #424]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2e:	ee07 3a90 	vmov	s15, r3
 8004d32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d36:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d56:	e065      	b.n	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004d66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d6a:	4b59      	ldr	r3, [pc, #356]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d72:	ee07 3a90 	vmov	s15, r3
 8004d76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004d82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004d8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004d9a:	e043      	b.n	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	ee07 3a90 	vmov	s15, r3
 8004da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004da6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ee4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b48      	ldr	r3, [pc, #288]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004dc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004dde:	e021      	b.n	8004e24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b37      	ldr	r3, [pc, #220]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004e24:	4b2a      	ldr	r3, [pc, #168]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e28:	0a5b      	lsrs	r3, r3, #9
 8004e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e2e:	ee07 3a90 	vmov	s15, r3
 8004e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e4a:	ee17 2a90 	vmov	r2, s15
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004e52:	4b1f      	ldr	r3, [pc, #124]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e56:	0c1b      	lsrs	r3, r3, #16
 8004e58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e5c:	ee07 3a90 	vmov	s15, r3
 8004e60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e78:	ee17 2a90 	vmov	r2, s15
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004e80:	4b13      	ldr	r3, [pc, #76]	@ (8004ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e84:	0e1b      	lsrs	r3, r3, #24
 8004e86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e8a:	ee07 3a90 	vmov	s15, r3
 8004e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004e96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004e9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004e9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ea2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ea6:	ee17 2a90 	vmov	r2, s15
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004eae:	e008      	b.n	8004ec2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	609a      	str	r2, [r3, #8]
}
 8004ec2:	bf00      	nop
 8004ec4:	3724      	adds	r7, #36	@ 0x24
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr
 8004ece:	bf00      	nop
 8004ed0:	58024400 	.word	0x58024400
 8004ed4:	03d09000 	.word	0x03d09000
 8004ed8:	46000000 	.word	0x46000000
 8004edc:	4c742400 	.word	0x4c742400
 8004ee0:	4a742400 	.word	0x4a742400
 8004ee4:	4af42400 	.word	0x4af42400

08004ee8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ef6:	4b53      	ldr	r3, [pc, #332]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d101      	bne.n	8004f06 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e099      	b.n	800503a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004f06:	4b4f      	ldr	r3, [pc, #316]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a4e      	ldr	r2, [pc, #312]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f0c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004f10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f12:	f7fc f9b9 	bl	8001288 <HAL_GetTick>
 8004f16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f18:	e008      	b.n	8004f2c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004f1a:	f7fc f9b5 	bl	8001288 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e086      	b.n	800503a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004f2c:	4b45      	ldr	r3, [pc, #276]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1f0      	bne.n	8004f1a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004f38:	4b42      	ldr	r3, [pc, #264]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	031b      	lsls	r3, r3, #12
 8004f46:	493f      	ldr	r1, [pc, #252]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	025b      	lsls	r3, r3, #9
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	431a      	orrs	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	3b01      	subs	r3, #1
 8004f68:	041b      	lsls	r3, r3, #16
 8004f6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	691b      	ldr	r3, [r3, #16]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	061b      	lsls	r3, r3, #24
 8004f78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004f7c:	4931      	ldr	r1, [pc, #196]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004f82:	4b30      	ldr	r3, [pc, #192]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f86:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	492d      	ldr	r1, [pc, #180]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f90:	4313      	orrs	r3, r2
 8004f92:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004f94:	4b2b      	ldr	r3, [pc, #172]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f98:	f023 0220 	bic.w	r2, r3, #32
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	699b      	ldr	r3, [r3, #24]
 8004fa0:	4928      	ldr	r1, [pc, #160]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004fa6:	4b27      	ldr	r3, [pc, #156]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	4a26      	ldr	r2, [pc, #152]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fac:	f023 0310 	bic.w	r3, r3, #16
 8004fb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004fb2:	4b24      	ldr	r3, [pc, #144]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fb6:	4b24      	ldr	r3, [pc, #144]	@ (8005048 <RCCEx_PLL2_Config+0x160>)
 8004fb8:	4013      	ands	r3, r2
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	69d2      	ldr	r2, [r2, #28]
 8004fbe:	00d2      	lsls	r2, r2, #3
 8004fc0:	4920      	ldr	r1, [pc, #128]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004fc6:	4b1f      	ldr	r3, [pc, #124]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fca:	4a1e      	ldr	r2, [pc, #120]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fcc:	f043 0310 	orr.w	r3, r3, #16
 8004fd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d106      	bne.n	8004fe6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fdc:	4a19      	ldr	r2, [pc, #100]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fde:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004fe2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004fe4:	e00f      	b.n	8005006 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004fec:	4b15      	ldr	r3, [pc, #84]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ff0:	4a14      	ldr	r2, [pc, #80]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004ff2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ff6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ff8:	e005      	b.n	8005006 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ffa:	4b12      	ldr	r3, [pc, #72]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	4a11      	ldr	r2, [pc, #68]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8005000:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005004:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005006:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a0e      	ldr	r2, [pc, #56]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 800500c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005012:	f7fc f939 	bl	8001288 <HAL_GetTick>
 8005016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005018:	e008      	b.n	800502c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800501a:	f7fc f935 	bl	8001288 <HAL_GetTick>
 800501e:	4602      	mov	r2, r0
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	2b02      	cmp	r3, #2
 8005026:	d901      	bls.n	800502c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005028:	2303      	movs	r3, #3
 800502a:	e006      	b.n	800503a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800502c:	4b05      	ldr	r3, [pc, #20]	@ (8005044 <RCCEx_PLL2_Config+0x15c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0f0      	beq.n	800501a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005038:	7bfb      	ldrb	r3, [r7, #15]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3710      	adds	r7, #16
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	ffff0007 	.word	0xffff0007

0800504c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005056:	2300      	movs	r3, #0
 8005058:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800505a:	4b53      	ldr	r3, [pc, #332]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b03      	cmp	r3, #3
 8005064:	d101      	bne.n	800506a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e099      	b.n	800519e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800506a:	4b4f      	ldr	r3, [pc, #316]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a4e      	ldr	r2, [pc, #312]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005074:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005076:	f7fc f907 	bl	8001288 <HAL_GetTick>
 800507a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800507c:	e008      	b.n	8005090 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800507e:	f7fc f903 	bl	8001288 <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	2b02      	cmp	r3, #2
 800508a:	d901      	bls.n	8005090 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800508c:	2303      	movs	r3, #3
 800508e:	e086      	b.n	800519e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005090:	4b45      	ldr	r3, [pc, #276]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1f0      	bne.n	800507e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800509c:	4b42      	ldr	r3, [pc, #264]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800509e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	051b      	lsls	r3, r3, #20
 80050aa:	493f      	ldr	r1, [pc, #252]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 80050ac:	4313      	orrs	r3, r2
 80050ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	3b01      	subs	r3, #1
 80050b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	3b01      	subs	r3, #1
 80050c0:	025b      	lsls	r3, r3, #9
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	431a      	orrs	r2, r3
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	68db      	ldr	r3, [r3, #12]
 80050ca:	3b01      	subs	r3, #1
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80050d2:	431a      	orrs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	3b01      	subs	r3, #1
 80050da:	061b      	lsls	r3, r3, #24
 80050dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80050e0:	4931      	ldr	r1, [pc, #196]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80050e6:	4b30      	ldr	r3, [pc, #192]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 80050e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	695b      	ldr	r3, [r3, #20]
 80050f2:	492d      	ldr	r1, [pc, #180]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 80050f4:	4313      	orrs	r3, r2
 80050f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80050f8:	4b2b      	ldr	r3, [pc, #172]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 80050fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	699b      	ldr	r3, [r3, #24]
 8005104:	4928      	ldr	r1, [pc, #160]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005106:	4313      	orrs	r3, r2
 8005108:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800510a:	4b27      	ldr	r3, [pc, #156]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800510c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800510e:	4a26      	ldr	r2, [pc, #152]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005110:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005114:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005116:	4b24      	ldr	r3, [pc, #144]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005118:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800511a:	4b24      	ldr	r3, [pc, #144]	@ (80051ac <RCCEx_PLL3_Config+0x160>)
 800511c:	4013      	ands	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	69d2      	ldr	r2, [r2, #28]
 8005122:	00d2      	lsls	r2, r2, #3
 8005124:	4920      	ldr	r1, [pc, #128]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005126:	4313      	orrs	r3, r2
 8005128:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800512a:	4b1f      	ldr	r3, [pc, #124]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800512c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512e:	4a1e      	ldr	r2, [pc, #120]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005130:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005134:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d106      	bne.n	800514a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800513c:	4b1a      	ldr	r3, [pc, #104]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800513e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005140:	4a19      	ldr	r2, [pc, #100]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005142:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005146:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005148:	e00f      	b.n	800516a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b01      	cmp	r3, #1
 800514e:	d106      	bne.n	800515e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005150:	4b15      	ldr	r3, [pc, #84]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005154:	4a14      	ldr	r2, [pc, #80]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005156:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800515a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800515c:	e005      	b.n	800516a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800515e:	4b12      	ldr	r3, [pc, #72]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005162:	4a11      	ldr	r2, [pc, #68]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005164:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005168:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800516a:	4b0f      	ldr	r3, [pc, #60]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a0e      	ldr	r2, [pc, #56]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005170:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005176:	f7fc f887 	bl	8001288 <HAL_GetTick>
 800517a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800517c:	e008      	b.n	8005190 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800517e:	f7fc f883 	bl	8001288 <HAL_GetTick>
 8005182:	4602      	mov	r2, r0
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	2b02      	cmp	r3, #2
 800518a:	d901      	bls.n	8005190 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800518c:	2303      	movs	r3, #3
 800518e:	e006      	b.n	800519e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005190:	4b05      	ldr	r3, [pc, #20]	@ (80051a8 <RCCEx_PLL3_Config+0x15c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d0f0      	beq.n	800517e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}
 80051a6:	bf00      	nop
 80051a8:	58024400 	.word	0x58024400
 80051ac:	ffff0007 	.word	0xffff0007

080051b0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d101      	bne.n	80051c2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	e054      	b.n	800526c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	7a5b      	ldrb	r3, [r3, #9]
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d105      	bne.n	80051d8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb fcb4 	bl	8000b40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2202      	movs	r2, #2
 80051dc:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f023 0120 	bic.w	r1, r3, #32
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	685a      	ldr	r2, [r3, #4]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f042 0204 	orr.w	r2, r2, #4
 8005202:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800520e:	2b40      	cmp	r3, #64	@ 0x40
 8005210:	d104      	bne.n	800521c <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2204      	movs	r2, #4
 8005216:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e027      	b.n	800526c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800521c:	f7fc f834 	bl	8001288 <HAL_GetTick>
 8005220:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005222:	e015      	b.n	8005250 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005224:	f7fc f830 	bl	8001288 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b02      	cmp	r3, #2
 8005230:	d90e      	bls.n	8005250 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b01      	cmp	r3, #1
 800523e:	d007      	beq.n	8005250 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2204      	movs	r2, #4
 8005244:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2202      	movs	r2, #2
 800524a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800524c:	2301      	movs	r3, #1
 800524e:	e00d      	b.n	800526c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) != SET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b01      	cmp	r3, #1
 800525c:	d1e2      	bne.n	8005224 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
 800527c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800527e:	2300      	movs	r3, #0
 8005280:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	7a1b      	ldrb	r3, [r3, #8]
 8005286:	2b01      	cmp	r3, #1
 8005288:	d101      	bne.n	800528e <HAL_RNG_GenerateRandomNumber+0x1a>
 800528a:	2302      	movs	r3, #2
 800528c:	e044      	b.n	8005318 <HAL_RNG_GenerateRandomNumber+0xa4>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2201      	movs	r2, #1
 8005292:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	7a5b      	ldrb	r3, [r3, #9]
 8005298:	b2db      	uxtb	r3, r3
 800529a:	2b01      	cmp	r3, #1
 800529c:	d133      	bne.n	8005306 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	725a      	strb	r2, [r3, #9]
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 80052a4:	f7fb fff0 	bl	8001288 <HAL_GetTick>
 80052a8:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052aa:	e018      	b.n	80052de <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80052ac:	f7fb ffec 	bl	8001288 <HAL_GetTick>
 80052b0:	4602      	mov	r2, r0
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	1ad3      	subs	r3, r2, r3
 80052b6:	2b02      	cmp	r3, #2
 80052b8:	d911      	bls.n	80052de <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0301 	and.w	r3, r3, #1
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d00a      	beq.n	80052de <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e01c      	b.n	8005318 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d1df      	bne.n	80052ac <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	689a      	ldr	r2, [r3, #8]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
    }
#else
    *random32bit = hrng->RandomNumber;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691a      	ldr	r2, [r3, #16]
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	601a      	str	r2, [r3, #0]

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	725a      	strb	r2, [r3, #9]
 8005304:	e004      	b.n	8005310 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2204      	movs	r2, #4
 800530a:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2200      	movs	r2, #0
 8005314:	721a      	strb	r2, [r3, #8]

  return status;
 8005316:	7bfb      	ldrb	r3, [r7, #15]
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e042      	b.n	80053b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005338:	2b00      	cmp	r3, #0
 800533a:	d106      	bne.n	800534a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f7fb fe69 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2224      	movs	r2, #36	@ 0x24
 800534e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 0201 	bic.w	r2, r2, #1
 8005360:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f001 fa14 	bl	8006798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f000 fca9 	bl	8005cc8 <UART_SetConfig>
 8005376:	4603      	mov	r3, r0
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e01b      	b.n	80053b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800538e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	689a      	ldr	r2, [r3, #8]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800539e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f042 0201 	orr.w	r2, r2, #1
 80053ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f001 fa93 	bl	80068dc <UART_CheckIdleState>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	@ 0x28
 80053c4:	af02      	add	r7, sp, #8
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	603b      	str	r3, [r7, #0]
 80053cc:	4613      	mov	r3, r2
 80053ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d17b      	bne.n	80054d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <HAL_UART_Transmit+0x26>
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e074      	b.n	80054d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2221      	movs	r2, #33	@ 0x21
 80053f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053fa:	f7fb ff45 	bl	8001288 <HAL_GetTick>
 80053fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	88fa      	ldrh	r2, [r7, #6]
 8005404:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005418:	d108      	bne.n	800542c <HAL_UART_Transmit+0x6c>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d104      	bne.n	800542c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	61bb      	str	r3, [r7, #24]
 800542a:	e003      	b.n	8005434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005430:	2300      	movs	r3, #0
 8005432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005434:	e030      	b.n	8005498 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	9300      	str	r3, [sp, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2200      	movs	r2, #0
 800543e:	2180      	movs	r1, #128	@ 0x80
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	f001 faf5 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2220      	movs	r2, #32
 8005450:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005454:	2303      	movs	r3, #3
 8005456:	e03d      	b.n	80054d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	881b      	ldrh	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800546c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	3302      	adds	r3, #2
 8005472:	61bb      	str	r3, [r7, #24]
 8005474:	e007      	b.n	8005486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	3301      	adds	r3, #1
 8005484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800548c:	b29b      	uxth	r3, r3
 800548e:	3b01      	subs	r3, #1
 8005490:	b29a      	uxth	r2, r3
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800549e:	b29b      	uxth	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1c8      	bne.n	8005436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	9300      	str	r3, [sp, #0]
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	2200      	movs	r2, #0
 80054ac:	2140      	movs	r1, #64	@ 0x40
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f001 fabe 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2220      	movs	r2, #32
 80054be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e006      	b.n	80054d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2220      	movs	r2, #32
 80054ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80054d2:	2302      	movs	r3, #2
  }
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3720      	adds	r7, #32
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}

080054dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b0ba      	sub	sp, #232	@ 0xe8
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005502:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005506:	f640 030f 	movw	r3, #2063	@ 0x80f
 800550a:	4013      	ands	r3, r2
 800550c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005510:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005514:	2b00      	cmp	r3, #0
 8005516:	d11b      	bne.n	8005550 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551c:	f003 0320 	and.w	r3, r3, #32
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d105      	bne.n	800553c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005530:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005534:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d009      	beq.n	8005550 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8393 	beq.w	8005c6c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	4798      	blx	r3
      }
      return;
 800554e:	e38d      	b.n	8005c6c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005550:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8123 	beq.w	80057a0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800555a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800555e:	4b8d      	ldr	r3, [pc, #564]	@ (8005794 <HAL_UART_IRQHandler+0x2b8>)
 8005560:	4013      	ands	r3, r2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d106      	bne.n	8005574 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005566:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800556a:	4b8b      	ldr	r3, [pc, #556]	@ (8005798 <HAL_UART_IRQHandler+0x2bc>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 8116 	beq.w	80057a0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005574:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d011      	beq.n	80055a4 <HAL_UART_IRQHandler+0xc8>
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005584:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00b      	beq.n	80055a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559a:	f043 0201 	orr.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d011      	beq.n	80055d4 <HAL_UART_IRQHandler+0xf8>
 80055b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055b4:	f003 0301 	and.w	r3, r3, #1
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d00b      	beq.n	80055d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2202      	movs	r2, #2
 80055c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ca:	f043 0204 	orr.w	r2, r3, #4
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d011      	beq.n	8005604 <HAL_UART_IRQHandler+0x128>
 80055e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e4:	f003 0301 	and.w	r3, r3, #1
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2204      	movs	r2, #4
 80055f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055fa:	f043 0202 	orr.w	r2, r3, #2
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d017      	beq.n	8005640 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005610:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005614:	f003 0320 	and.w	r3, r3, #32
 8005618:	2b00      	cmp	r3, #0
 800561a:	d105      	bne.n	8005628 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800561c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005620:	4b5c      	ldr	r3, [pc, #368]	@ (8005794 <HAL_UART_IRQHandler+0x2b8>)
 8005622:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00b      	beq.n	8005640 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	2208      	movs	r2, #8
 800562e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005636:	f043 0208 	orr.w	r2, r3, #8
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005644:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005648:	2b00      	cmp	r3, #0
 800564a:	d012      	beq.n	8005672 <HAL_UART_IRQHandler+0x196>
 800564c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005650:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005660:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005668:	f043 0220 	orr.w	r2, r3, #32
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 82f9 	beq.w	8005c70 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800567e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	d013      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800568a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d105      	bne.n	80056a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005696:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800569a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d007      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80056b8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056c6:	2b40      	cmp	r3, #64	@ 0x40
 80056c8:	d005      	beq.n	80056d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80056ce:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d054      	beq.n	8005780 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f001 fa18 	bl	8006b0c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056e6:	2b40      	cmp	r3, #64	@ 0x40
 80056e8:	d146      	bne.n	8005778 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005700:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005704:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005708:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	3308      	adds	r3, #8
 8005712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005716:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800571a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800572e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1d9      	bne.n	80056ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800573c:	2b00      	cmp	r3, #0
 800573e:	d017      	beq.n	8005770 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005746:	4a15      	ldr	r2, [pc, #84]	@ (800579c <HAL_UART_IRQHandler+0x2c0>)
 8005748:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005750:	4618      	mov	r0, r3
 8005752:	f7fc fa7b 	bl	8001c4c <HAL_DMA_Abort_IT>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d019      	beq.n	8005790 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005762:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005764:	687a      	ldr	r2, [r7, #4]
 8005766:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800576a:	4610      	mov	r0, r2
 800576c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576e:	e00f      	b.n	8005790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005770:	6878      	ldr	r0, [r7, #4]
 8005772:	f000 fa93 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005776:	e00b      	b.n	8005790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 fa8f 	bl	8005c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800577e:	e007      	b.n	8005790 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f000 fa8b 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2200      	movs	r2, #0
 800578a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800578e:	e26f      	b.n	8005c70 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005790:	bf00      	nop
    return;
 8005792:	e26d      	b.n	8005c70 <HAL_UART_IRQHandler+0x794>
 8005794:	10000001 	.word	0x10000001
 8005798:	04000120 	.word	0x04000120
 800579c:	08006bd9 	.word	0x08006bd9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	f040 8203 	bne.w	8005bb0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80057ae:	f003 0310 	and.w	r3, r3, #16
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	f000 81fc 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80057bc:	f003 0310 	and.w	r3, r3, #16
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 81f5 	beq.w	8005bb0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2210      	movs	r2, #16
 80057cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057d8:	2b40      	cmp	r3, #64	@ 0x40
 80057da:	f040 816d 	bne.w	8005ab8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4aa4      	ldr	r2, [pc, #656]	@ (8005a78 <HAL_UART_IRQHandler+0x59c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d068      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4aa1      	ldr	r2, [pc, #644]	@ (8005a7c <HAL_UART_IRQHandler+0x5a0>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d061      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a9f      	ldr	r2, [pc, #636]	@ (8005a80 <HAL_UART_IRQHandler+0x5a4>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d05a      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a9c      	ldr	r2, [pc, #624]	@ (8005a84 <HAL_UART_IRQHandler+0x5a8>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d053      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a9a      	ldr	r2, [pc, #616]	@ (8005a88 <HAL_UART_IRQHandler+0x5ac>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d04c      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a97      	ldr	r2, [pc, #604]	@ (8005a8c <HAL_UART_IRQHandler+0x5b0>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d045      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a95      	ldr	r2, [pc, #596]	@ (8005a90 <HAL_UART_IRQHandler+0x5b4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d03e      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a92      	ldr	r2, [pc, #584]	@ (8005a94 <HAL_UART_IRQHandler+0x5b8>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d037      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4a90      	ldr	r2, [pc, #576]	@ (8005a98 <HAL_UART_IRQHandler+0x5bc>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d030      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a8d      	ldr	r2, [pc, #564]	@ (8005a9c <HAL_UART_IRQHandler+0x5c0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d029      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a8b      	ldr	r2, [pc, #556]	@ (8005aa0 <HAL_UART_IRQHandler+0x5c4>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a88      	ldr	r2, [pc, #544]	@ (8005aa4 <HAL_UART_IRQHandler+0x5c8>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d01b      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a86      	ldr	r2, [pc, #536]	@ (8005aa8 <HAL_UART_IRQHandler+0x5cc>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d014      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a83      	ldr	r2, [pc, #524]	@ (8005aac <HAL_UART_IRQHandler+0x5d0>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d00d      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a81      	ldr	r2, [pc, #516]	@ (8005ab0 <HAL_UART_IRQHandler+0x5d4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d006      	beq.n	80058be <HAL_UART_IRQHandler+0x3e2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a7e      	ldr	r2, [pc, #504]	@ (8005ab4 <HAL_UART_IRQHandler+0x5d8>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d106      	bne.n	80058cc <HAL_UART_IRQHandler+0x3f0>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	e005      	b.n	80058d8 <HAL_UART_IRQHandler+0x3fc>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80058dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f000 80ad 	beq.w	8005a40 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80058ec:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058f0:	429a      	cmp	r2, r3
 80058f2:	f080 80a5 	bcs.w	8005a40 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80058fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800590c:	f000 8087 	beq.w	8005a1e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800591c:	e853 3f00 	ldrex	r3, [r3]
 8005920:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005924:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005928:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800592c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	461a      	mov	r2, r3
 8005936:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800593a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800593e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005942:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005946:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800594a:	e841 2300 	strex	r3, r2, [r1]
 800594e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005952:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1da      	bne.n	8005910 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	3308      	adds	r3, #8
 8005960:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005962:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005964:	e853 3f00 	ldrex	r3, [r3]
 8005968:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800596a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800596c:	f023 0301 	bic.w	r3, r3, #1
 8005970:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	3308      	adds	r3, #8
 800597a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800597e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005982:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005986:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800598a:	e841 2300 	strex	r3, r2, [r1]
 800598e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1e1      	bne.n	800595a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80059a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80059a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3308      	adds	r3, #8
 80059b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80059ba:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80059bc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80059c0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80059c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059e4:	e853 3f00 	ldrex	r3, [r3]
 80059e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80059ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ec:	f023 0310 	bic.w	r3, r3, #16
 80059f0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	461a      	mov	r2, r3
 80059fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80059fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005a00:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005a04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005a06:	e841 2300 	strex	r3, r2, [r1]
 8005a0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005a0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d1e4      	bne.n	80059dc <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fb fdf9 	bl	8001610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2202      	movs	r2, #2
 8005a22:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	4619      	mov	r1, r3
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 f939 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8005a3e:	e119      	b.n	8005c74 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	f040 8112 	bne.w	8005c74 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a56:	69db      	ldr	r3, [r3, #28]
 8005a58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a5c:	f040 810a 	bne.w	8005c74 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2202      	movs	r2, #2
 8005a64:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f91e 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
      return;
 8005a74:	e0fe      	b.n	8005c74 <HAL_UART_IRQHandler+0x798>
 8005a76:	bf00      	nop
 8005a78:	40020010 	.word	0x40020010
 8005a7c:	40020028 	.word	0x40020028
 8005a80:	40020040 	.word	0x40020040
 8005a84:	40020058 	.word	0x40020058
 8005a88:	40020070 	.word	0x40020070
 8005a8c:	40020088 	.word	0x40020088
 8005a90:	400200a0 	.word	0x400200a0
 8005a94:	400200b8 	.word	0x400200b8
 8005a98:	40020410 	.word	0x40020410
 8005a9c:	40020428 	.word	0x40020428
 8005aa0:	40020440 	.word	0x40020440
 8005aa4:	40020458 	.word	0x40020458
 8005aa8:	40020470 	.word	0x40020470
 8005aac:	40020488 	.word	0x40020488
 8005ab0:	400204a0 	.word	0x400204a0
 8005ab4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80cf 	beq.w	8005c78 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005ada:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f000 80ca 	beq.w	8005c78 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aec:	e853 3f00 	ldrex	r3, [r3]
 8005af0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	461a      	mov	r2, r3
 8005b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005b06:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b08:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b0e:	e841 2300 	strex	r3, r2, [r1]
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1e4      	bne.n	8005ae4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	3308      	adds	r3, #8
 8005b20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	e853 3f00 	ldrex	r3, [r3]
 8005b28:	623b      	str	r3, [r7, #32]
   return(result);
 8005b2a:	6a3a      	ldr	r2, [r7, #32]
 8005b2c:	4b55      	ldr	r3, [pc, #340]	@ (8005c84 <HAL_UART_IRQHandler+0x7a8>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	3308      	adds	r3, #8
 8005b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b46:	e841 2300 	strex	r3, r2, [r1]
 8005b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1e3      	bne.n	8005b1a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2220      	movs	r2, #32
 8005b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0310 	bic.w	r3, r3, #16
 8005b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005b88:	61fb      	str	r3, [r7, #28]
 8005b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	69b9      	ldr	r1, [r7, #24]
 8005b8e:	69fa      	ldr	r2, [r7, #28]
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	617b      	str	r3, [r7, #20]
   return(result);
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e4      	bne.n	8005b66 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f881 	bl	8005cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bae:	e063      	b.n	8005c78 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d00e      	beq.n	8005bda <HAL_UART_IRQHandler+0x6fe>
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d008      	beq.n	8005bda <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f001 f83d 	bl	8006c52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bd8:	e051      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d014      	beq.n	8005c10 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d105      	bne.n	8005bfe <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d03a      	beq.n	8005c7c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
    }
    return;
 8005c0e:	e035      	b.n	8005c7c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d009      	beq.n	8005c30 <HAL_UART_IRQHandler+0x754>
 8005c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d003      	beq.n	8005c30 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 ffe7 	bl	8006bfc <UART_EndTransmit_IT>
    return;
 8005c2e:	e026      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <HAL_UART_IRQHandler+0x774>
 8005c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d003      	beq.n	8005c50 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f001 f816 	bl	8006c7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c4e:	e016      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d010      	beq.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	da0c      	bge.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fffe 	bl	8006c66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c6a:	e008      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c6c:	bf00      	nop
 8005c6e:	e006      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
    return;
 8005c70:	bf00      	nop
 8005c72:	e004      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c74:	bf00      	nop
 8005c76:	e002      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
      return;
 8005c78:	bf00      	nop
 8005c7a:	e000      	b.n	8005c7e <HAL_UART_IRQHandler+0x7a2>
    return;
 8005c7c:	bf00      	nop
  }
}
 8005c7e:	37e8      	adds	r7, #232	@ 0xe8
 8005c80:	46bd      	mov	sp, r7
 8005c82:	bd80      	pop	{r7, pc}
 8005c84:	effffffe 	.word	0xeffffffe

08005c88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ca4:	bf00      	nop
 8005ca6:	370c      	adds	r7, #12
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr

08005cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cbc:	bf00      	nop
 8005cbe:	370c      	adds	r7, #12
 8005cc0:	46bd      	mov	sp, r7
 8005cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc6:	4770      	bx	lr

08005cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ccc:	b092      	sub	sp, #72	@ 0x48
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	689a      	ldr	r2, [r3, #8]
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	695b      	ldr	r3, [r3, #20]
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	69db      	ldr	r3, [r3, #28]
 8005cec:	4313      	orrs	r3, r2
 8005cee:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	681a      	ldr	r2, [r3, #0]
 8005cf6:	4bbe      	ldr	r3, [pc, #760]	@ (8005ff0 <UART_SetConfig+0x328>)
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	6812      	ldr	r2, [r2, #0]
 8005cfe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d00:	430b      	orrs	r3, r1
 8005d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	68da      	ldr	r2, [r3, #12]
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	699b      	ldr	r3, [r3, #24]
 8005d1e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4ab3      	ldr	r2, [pc, #716]	@ (8005ff4 <UART_SetConfig+0x32c>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d30:	4313      	orrs	r3, r2
 8005d32:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	689a      	ldr	r2, [r3, #8]
 8005d3a:	4baf      	ldr	r3, [pc, #700]	@ (8005ff8 <UART_SetConfig+0x330>)
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	6812      	ldr	r2, [r2, #0]
 8005d42:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005d44:	430b      	orrs	r3, r1
 8005d46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d48:	697b      	ldr	r3, [r7, #20]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4e:	f023 010f 	bic.w	r1, r3, #15
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4aa6      	ldr	r2, [pc, #664]	@ (8005ffc <UART_SetConfig+0x334>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d177      	bne.n	8005e58 <UART_SetConfig+0x190>
 8005d68:	4ba5      	ldr	r3, [pc, #660]	@ (8006000 <UART_SetConfig+0x338>)
 8005d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d70:	2b28      	cmp	r3, #40	@ 0x28
 8005d72:	d86d      	bhi.n	8005e50 <UART_SetConfig+0x188>
 8005d74:	a201      	add	r2, pc, #4	@ (adr r2, 8005d7c <UART_SetConfig+0xb4>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005e21 	.word	0x08005e21
 8005d80:	08005e51 	.word	0x08005e51
 8005d84:	08005e51 	.word	0x08005e51
 8005d88:	08005e51 	.word	0x08005e51
 8005d8c:	08005e51 	.word	0x08005e51
 8005d90:	08005e51 	.word	0x08005e51
 8005d94:	08005e51 	.word	0x08005e51
 8005d98:	08005e51 	.word	0x08005e51
 8005d9c:	08005e29 	.word	0x08005e29
 8005da0:	08005e51 	.word	0x08005e51
 8005da4:	08005e51 	.word	0x08005e51
 8005da8:	08005e51 	.word	0x08005e51
 8005dac:	08005e51 	.word	0x08005e51
 8005db0:	08005e51 	.word	0x08005e51
 8005db4:	08005e51 	.word	0x08005e51
 8005db8:	08005e51 	.word	0x08005e51
 8005dbc:	08005e31 	.word	0x08005e31
 8005dc0:	08005e51 	.word	0x08005e51
 8005dc4:	08005e51 	.word	0x08005e51
 8005dc8:	08005e51 	.word	0x08005e51
 8005dcc:	08005e51 	.word	0x08005e51
 8005dd0:	08005e51 	.word	0x08005e51
 8005dd4:	08005e51 	.word	0x08005e51
 8005dd8:	08005e51 	.word	0x08005e51
 8005ddc:	08005e39 	.word	0x08005e39
 8005de0:	08005e51 	.word	0x08005e51
 8005de4:	08005e51 	.word	0x08005e51
 8005de8:	08005e51 	.word	0x08005e51
 8005dec:	08005e51 	.word	0x08005e51
 8005df0:	08005e51 	.word	0x08005e51
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e51 	.word	0x08005e51
 8005dfc:	08005e41 	.word	0x08005e41
 8005e00:	08005e51 	.word	0x08005e51
 8005e04:	08005e51 	.word	0x08005e51
 8005e08:	08005e51 	.word	0x08005e51
 8005e0c:	08005e51 	.word	0x08005e51
 8005e10:	08005e51 	.word	0x08005e51
 8005e14:	08005e51 	.word	0x08005e51
 8005e18:	08005e51 	.word	0x08005e51
 8005e1c:	08005e49 	.word	0x08005e49
 8005e20:	2301      	movs	r3, #1
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e222      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e28:	2304      	movs	r3, #4
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e21e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e30:	2308      	movs	r3, #8
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e21a      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e38:	2310      	movs	r3, #16
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e216      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e40:	2320      	movs	r3, #32
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e212      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e48:	2340      	movs	r3, #64	@ 0x40
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e20e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e50:	2380      	movs	r3, #128	@ 0x80
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e20a      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	4a69      	ldr	r2, [pc, #420]	@ (8006004 <UART_SetConfig+0x33c>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d130      	bne.n	8005ec4 <UART_SetConfig+0x1fc>
 8005e62:	4b67      	ldr	r3, [pc, #412]	@ (8006000 <UART_SetConfig+0x338>)
 8005e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e66:	f003 0307 	and.w	r3, r3, #7
 8005e6a:	2b05      	cmp	r3, #5
 8005e6c:	d826      	bhi.n	8005ebc <UART_SetConfig+0x1f4>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <UART_SetConfig+0x1ac>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005e8d 	.word	0x08005e8d
 8005e78:	08005e95 	.word	0x08005e95
 8005e7c:	08005e9d 	.word	0x08005e9d
 8005e80:	08005ea5 	.word	0x08005ea5
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005eb5 	.word	0x08005eb5
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e1ec      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e94:	2304      	movs	r3, #4
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e1e8      	b.n	800626e <UART_SetConfig+0x5a6>
 8005e9c:	2308      	movs	r3, #8
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e1e4      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ea4:	2310      	movs	r3, #16
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e1e0      	b.n	800626e <UART_SetConfig+0x5a6>
 8005eac:	2320      	movs	r3, #32
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e1dc      	b.n	800626e <UART_SetConfig+0x5a6>
 8005eb4:	2340      	movs	r3, #64	@ 0x40
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e1d8      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ebc:	2380      	movs	r3, #128	@ 0x80
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e1d4      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8006008 <UART_SetConfig+0x340>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d130      	bne.n	8005f30 <UART_SetConfig+0x268>
 8005ece:	4b4c      	ldr	r3, [pc, #304]	@ (8006000 <UART_SetConfig+0x338>)
 8005ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ed2:	f003 0307 	and.w	r3, r3, #7
 8005ed6:	2b05      	cmp	r3, #5
 8005ed8:	d826      	bhi.n	8005f28 <UART_SetConfig+0x260>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x218>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005ef9 	.word	0x08005ef9
 8005ee4:	08005f01 	.word	0x08005f01
 8005ee8:	08005f09 	.word	0x08005f09
 8005eec:	08005f11 	.word	0x08005f11
 8005ef0:	08005f19 	.word	0x08005f19
 8005ef4:	08005f21 	.word	0x08005f21
 8005ef8:	2300      	movs	r3, #0
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e1b6      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f00:	2304      	movs	r3, #4
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e1b2      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f08:	2308      	movs	r3, #8
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f0e:	e1ae      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f10:	2310      	movs	r3, #16
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f16:	e1aa      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f18:	2320      	movs	r3, #32
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f1e:	e1a6      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f20:	2340      	movs	r3, #64	@ 0x40
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f26:	e1a2      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f28:	2380      	movs	r3, #128	@ 0x80
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2e:	e19e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a35      	ldr	r2, [pc, #212]	@ (800600c <UART_SetConfig+0x344>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d130      	bne.n	8005f9c <UART_SetConfig+0x2d4>
 8005f3a:	4b31      	ldr	r3, [pc, #196]	@ (8006000 <UART_SetConfig+0x338>)
 8005f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3e:	f003 0307 	and.w	r3, r3, #7
 8005f42:	2b05      	cmp	r3, #5
 8005f44:	d826      	bhi.n	8005f94 <UART_SetConfig+0x2cc>
 8005f46:	a201      	add	r2, pc, #4	@ (adr r2, 8005f4c <UART_SetConfig+0x284>)
 8005f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f4c:	08005f65 	.word	0x08005f65
 8005f50:	08005f6d 	.word	0x08005f6d
 8005f54:	08005f75 	.word	0x08005f75
 8005f58:	08005f7d 	.word	0x08005f7d
 8005f5c:	08005f85 	.word	0x08005f85
 8005f60:	08005f8d 	.word	0x08005f8d
 8005f64:	2300      	movs	r3, #0
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6a:	e180      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f6c:	2304      	movs	r3, #4
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f72:	e17c      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f74:	2308      	movs	r3, #8
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f7a:	e178      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f7c:	2310      	movs	r3, #16
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f82:	e174      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f84:	2320      	movs	r3, #32
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f8a:	e170      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f8c:	2340      	movs	r3, #64	@ 0x40
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f92:	e16c      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f94:	2380      	movs	r3, #128	@ 0x80
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9a:	e168      	b.n	800626e <UART_SetConfig+0x5a6>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a1b      	ldr	r2, [pc, #108]	@ (8006010 <UART_SetConfig+0x348>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d142      	bne.n	800602c <UART_SetConfig+0x364>
 8005fa6:	4b16      	ldr	r3, [pc, #88]	@ (8006000 <UART_SetConfig+0x338>)
 8005fa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005faa:	f003 0307 	and.w	r3, r3, #7
 8005fae:	2b05      	cmp	r3, #5
 8005fb0:	d838      	bhi.n	8006024 <UART_SetConfig+0x35c>
 8005fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb8 <UART_SetConfig+0x2f0>)
 8005fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb8:	08005fd1 	.word	0x08005fd1
 8005fbc:	08005fd9 	.word	0x08005fd9
 8005fc0:	08005fe1 	.word	0x08005fe1
 8005fc4:	08005fe9 	.word	0x08005fe9
 8005fc8:	08006015 	.word	0x08006015
 8005fcc:	0800601d 	.word	0x0800601d
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd6:	e14a      	b.n	800626e <UART_SetConfig+0x5a6>
 8005fd8:	2304      	movs	r3, #4
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fde:	e146      	b.n	800626e <UART_SetConfig+0x5a6>
 8005fe0:	2308      	movs	r3, #8
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe6:	e142      	b.n	800626e <UART_SetConfig+0x5a6>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fee:	e13e      	b.n	800626e <UART_SetConfig+0x5a6>
 8005ff0:	cfff69f3 	.word	0xcfff69f3
 8005ff4:	58000c00 	.word	0x58000c00
 8005ff8:	11fff4ff 	.word	0x11fff4ff
 8005ffc:	40011000 	.word	0x40011000
 8006000:	58024400 	.word	0x58024400
 8006004:	40004400 	.word	0x40004400
 8006008:	40004800 	.word	0x40004800
 800600c:	40004c00 	.word	0x40004c00
 8006010:	40005000 	.word	0x40005000
 8006014:	2320      	movs	r3, #32
 8006016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800601a:	e128      	b.n	800626e <UART_SetConfig+0x5a6>
 800601c:	2340      	movs	r3, #64	@ 0x40
 800601e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006022:	e124      	b.n	800626e <UART_SetConfig+0x5a6>
 8006024:	2380      	movs	r3, #128	@ 0x80
 8006026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800602a:	e120      	b.n	800626e <UART_SetConfig+0x5a6>
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4acb      	ldr	r2, [pc, #812]	@ (8006360 <UART_SetConfig+0x698>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d176      	bne.n	8006124 <UART_SetConfig+0x45c>
 8006036:	4bcb      	ldr	r3, [pc, #812]	@ (8006364 <UART_SetConfig+0x69c>)
 8006038:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800603a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800603e:	2b28      	cmp	r3, #40	@ 0x28
 8006040:	d86c      	bhi.n	800611c <UART_SetConfig+0x454>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <UART_SetConfig+0x380>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	080060ed 	.word	0x080060ed
 800604c:	0800611d 	.word	0x0800611d
 8006050:	0800611d 	.word	0x0800611d
 8006054:	0800611d 	.word	0x0800611d
 8006058:	0800611d 	.word	0x0800611d
 800605c:	0800611d 	.word	0x0800611d
 8006060:	0800611d 	.word	0x0800611d
 8006064:	0800611d 	.word	0x0800611d
 8006068:	080060f5 	.word	0x080060f5
 800606c:	0800611d 	.word	0x0800611d
 8006070:	0800611d 	.word	0x0800611d
 8006074:	0800611d 	.word	0x0800611d
 8006078:	0800611d 	.word	0x0800611d
 800607c:	0800611d 	.word	0x0800611d
 8006080:	0800611d 	.word	0x0800611d
 8006084:	0800611d 	.word	0x0800611d
 8006088:	080060fd 	.word	0x080060fd
 800608c:	0800611d 	.word	0x0800611d
 8006090:	0800611d 	.word	0x0800611d
 8006094:	0800611d 	.word	0x0800611d
 8006098:	0800611d 	.word	0x0800611d
 800609c:	0800611d 	.word	0x0800611d
 80060a0:	0800611d 	.word	0x0800611d
 80060a4:	0800611d 	.word	0x0800611d
 80060a8:	08006105 	.word	0x08006105
 80060ac:	0800611d 	.word	0x0800611d
 80060b0:	0800611d 	.word	0x0800611d
 80060b4:	0800611d 	.word	0x0800611d
 80060b8:	0800611d 	.word	0x0800611d
 80060bc:	0800611d 	.word	0x0800611d
 80060c0:	0800611d 	.word	0x0800611d
 80060c4:	0800611d 	.word	0x0800611d
 80060c8:	0800610d 	.word	0x0800610d
 80060cc:	0800611d 	.word	0x0800611d
 80060d0:	0800611d 	.word	0x0800611d
 80060d4:	0800611d 	.word	0x0800611d
 80060d8:	0800611d 	.word	0x0800611d
 80060dc:	0800611d 	.word	0x0800611d
 80060e0:	0800611d 	.word	0x0800611d
 80060e4:	0800611d 	.word	0x0800611d
 80060e8:	08006115 	.word	0x08006115
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f2:	e0bc      	b.n	800626e <UART_SetConfig+0x5a6>
 80060f4:	2304      	movs	r3, #4
 80060f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fa:	e0b8      	b.n	800626e <UART_SetConfig+0x5a6>
 80060fc:	2308      	movs	r3, #8
 80060fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006102:	e0b4      	b.n	800626e <UART_SetConfig+0x5a6>
 8006104:	2310      	movs	r3, #16
 8006106:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610a:	e0b0      	b.n	800626e <UART_SetConfig+0x5a6>
 800610c:	2320      	movs	r3, #32
 800610e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006112:	e0ac      	b.n	800626e <UART_SetConfig+0x5a6>
 8006114:	2340      	movs	r3, #64	@ 0x40
 8006116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800611a:	e0a8      	b.n	800626e <UART_SetConfig+0x5a6>
 800611c:	2380      	movs	r3, #128	@ 0x80
 800611e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006122:	e0a4      	b.n	800626e <UART_SetConfig+0x5a6>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a8f      	ldr	r2, [pc, #572]	@ (8006368 <UART_SetConfig+0x6a0>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d130      	bne.n	8006190 <UART_SetConfig+0x4c8>
 800612e:	4b8d      	ldr	r3, [pc, #564]	@ (8006364 <UART_SetConfig+0x69c>)
 8006130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006132:	f003 0307 	and.w	r3, r3, #7
 8006136:	2b05      	cmp	r3, #5
 8006138:	d826      	bhi.n	8006188 <UART_SetConfig+0x4c0>
 800613a:	a201      	add	r2, pc, #4	@ (adr r2, 8006140 <UART_SetConfig+0x478>)
 800613c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006140:	08006159 	.word	0x08006159
 8006144:	08006161 	.word	0x08006161
 8006148:	08006169 	.word	0x08006169
 800614c:	08006171 	.word	0x08006171
 8006150:	08006179 	.word	0x08006179
 8006154:	08006181 	.word	0x08006181
 8006158:	2300      	movs	r3, #0
 800615a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615e:	e086      	b.n	800626e <UART_SetConfig+0x5a6>
 8006160:	2304      	movs	r3, #4
 8006162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006166:	e082      	b.n	800626e <UART_SetConfig+0x5a6>
 8006168:	2308      	movs	r3, #8
 800616a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616e:	e07e      	b.n	800626e <UART_SetConfig+0x5a6>
 8006170:	2310      	movs	r3, #16
 8006172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006176:	e07a      	b.n	800626e <UART_SetConfig+0x5a6>
 8006178:	2320      	movs	r3, #32
 800617a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617e:	e076      	b.n	800626e <UART_SetConfig+0x5a6>
 8006180:	2340      	movs	r3, #64	@ 0x40
 8006182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006186:	e072      	b.n	800626e <UART_SetConfig+0x5a6>
 8006188:	2380      	movs	r3, #128	@ 0x80
 800618a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800618e:	e06e      	b.n	800626e <UART_SetConfig+0x5a6>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a75      	ldr	r2, [pc, #468]	@ (800636c <UART_SetConfig+0x6a4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d130      	bne.n	80061fc <UART_SetConfig+0x534>
 800619a:	4b72      	ldr	r3, [pc, #456]	@ (8006364 <UART_SetConfig+0x69c>)
 800619c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800619e:	f003 0307 	and.w	r3, r3, #7
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d826      	bhi.n	80061f4 <UART_SetConfig+0x52c>
 80061a6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ac <UART_SetConfig+0x4e4>)
 80061a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ac:	080061c5 	.word	0x080061c5
 80061b0:	080061cd 	.word	0x080061cd
 80061b4:	080061d5 	.word	0x080061d5
 80061b8:	080061dd 	.word	0x080061dd
 80061bc:	080061e5 	.word	0x080061e5
 80061c0:	080061ed 	.word	0x080061ed
 80061c4:	2300      	movs	r3, #0
 80061c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ca:	e050      	b.n	800626e <UART_SetConfig+0x5a6>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061d2:	e04c      	b.n	800626e <UART_SetConfig+0x5a6>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061da:	e048      	b.n	800626e <UART_SetConfig+0x5a6>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061e2:	e044      	b.n	800626e <UART_SetConfig+0x5a6>
 80061e4:	2320      	movs	r3, #32
 80061e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061ea:	e040      	b.n	800626e <UART_SetConfig+0x5a6>
 80061ec:	2340      	movs	r3, #64	@ 0x40
 80061ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061f2:	e03c      	b.n	800626e <UART_SetConfig+0x5a6>
 80061f4:	2380      	movs	r3, #128	@ 0x80
 80061f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80061fa:	e038      	b.n	800626e <UART_SetConfig+0x5a6>
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a5b      	ldr	r2, [pc, #364]	@ (8006370 <UART_SetConfig+0x6a8>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d130      	bne.n	8006268 <UART_SetConfig+0x5a0>
 8006206:	4b57      	ldr	r3, [pc, #348]	@ (8006364 <UART_SetConfig+0x69c>)
 8006208:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800620a:	f003 0307 	and.w	r3, r3, #7
 800620e:	2b05      	cmp	r3, #5
 8006210:	d826      	bhi.n	8006260 <UART_SetConfig+0x598>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0x550>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006231 	.word	0x08006231
 800621c:	08006239 	.word	0x08006239
 8006220:	08006241 	.word	0x08006241
 8006224:	08006249 	.word	0x08006249
 8006228:	08006251 	.word	0x08006251
 800622c:	08006259 	.word	0x08006259
 8006230:	2302      	movs	r3, #2
 8006232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006236:	e01a      	b.n	800626e <UART_SetConfig+0x5a6>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800623e:	e016      	b.n	800626e <UART_SetConfig+0x5a6>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006246:	e012      	b.n	800626e <UART_SetConfig+0x5a6>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800624e:	e00e      	b.n	800626e <UART_SetConfig+0x5a6>
 8006250:	2320      	movs	r3, #32
 8006252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006256:	e00a      	b.n	800626e <UART_SetConfig+0x5a6>
 8006258:	2340      	movs	r3, #64	@ 0x40
 800625a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800625e:	e006      	b.n	800626e <UART_SetConfig+0x5a6>
 8006260:	2380      	movs	r3, #128	@ 0x80
 8006262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006266:	e002      	b.n	800626e <UART_SetConfig+0x5a6>
 8006268:	2380      	movs	r3, #128	@ 0x80
 800626a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	4a3f      	ldr	r2, [pc, #252]	@ (8006370 <UART_SetConfig+0x6a8>)
 8006274:	4293      	cmp	r3, r2
 8006276:	f040 80f8 	bne.w	800646a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800627a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800627e:	2b20      	cmp	r3, #32
 8006280:	dc46      	bgt.n	8006310 <UART_SetConfig+0x648>
 8006282:	2b02      	cmp	r3, #2
 8006284:	f2c0 8082 	blt.w	800638c <UART_SetConfig+0x6c4>
 8006288:	3b02      	subs	r3, #2
 800628a:	2b1e      	cmp	r3, #30
 800628c:	d87e      	bhi.n	800638c <UART_SetConfig+0x6c4>
 800628e:	a201      	add	r2, pc, #4	@ (adr r2, 8006294 <UART_SetConfig+0x5cc>)
 8006290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006294:	08006317 	.word	0x08006317
 8006298:	0800638d 	.word	0x0800638d
 800629c:	0800631f 	.word	0x0800631f
 80062a0:	0800638d 	.word	0x0800638d
 80062a4:	0800638d 	.word	0x0800638d
 80062a8:	0800638d 	.word	0x0800638d
 80062ac:	0800632f 	.word	0x0800632f
 80062b0:	0800638d 	.word	0x0800638d
 80062b4:	0800638d 	.word	0x0800638d
 80062b8:	0800638d 	.word	0x0800638d
 80062bc:	0800638d 	.word	0x0800638d
 80062c0:	0800638d 	.word	0x0800638d
 80062c4:	0800638d 	.word	0x0800638d
 80062c8:	0800638d 	.word	0x0800638d
 80062cc:	0800633f 	.word	0x0800633f
 80062d0:	0800638d 	.word	0x0800638d
 80062d4:	0800638d 	.word	0x0800638d
 80062d8:	0800638d 	.word	0x0800638d
 80062dc:	0800638d 	.word	0x0800638d
 80062e0:	0800638d 	.word	0x0800638d
 80062e4:	0800638d 	.word	0x0800638d
 80062e8:	0800638d 	.word	0x0800638d
 80062ec:	0800638d 	.word	0x0800638d
 80062f0:	0800638d 	.word	0x0800638d
 80062f4:	0800638d 	.word	0x0800638d
 80062f8:	0800638d 	.word	0x0800638d
 80062fc:	0800638d 	.word	0x0800638d
 8006300:	0800638d 	.word	0x0800638d
 8006304:	0800638d 	.word	0x0800638d
 8006308:	0800638d 	.word	0x0800638d
 800630c:	0800637f 	.word	0x0800637f
 8006310:	2b40      	cmp	r3, #64	@ 0x40
 8006312:	d037      	beq.n	8006384 <UART_SetConfig+0x6bc>
 8006314:	e03a      	b.n	800638c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006316:	f7fe fb29 	bl	800496c <HAL_RCCEx_GetD3PCLK1Freq>
 800631a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800631c:	e03c      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fb38 	bl	8004998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e034      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800632e:	f107 0318 	add.w	r3, r7, #24
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fc84 	bl	8004c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e02c      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800633e:	4b09      	ldr	r3, [pc, #36]	@ (8006364 <UART_SetConfig+0x69c>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d016      	beq.n	8006378 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634a:	4b06      	ldr	r3, [pc, #24]	@ (8006364 <UART_SetConfig+0x69c>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	4a07      	ldr	r2, [pc, #28]	@ (8006374 <UART_SetConfig+0x6ac>)
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800635c:	e01c      	b.n	8006398 <UART_SetConfig+0x6d0>
 800635e:	bf00      	nop
 8006360:	40011400 	.word	0x40011400
 8006364:	58024400 	.word	0x58024400
 8006368:	40007800 	.word	0x40007800
 800636c:	40007c00 	.word	0x40007c00
 8006370:	58000c00 	.word	0x58000c00
 8006374:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8006378:	4b9d      	ldr	r3, [pc, #628]	@ (80065f0 <UART_SetConfig+0x928>)
 800637a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800637c:	e00c      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800637e:	4b9d      	ldr	r3, [pc, #628]	@ (80065f4 <UART_SetConfig+0x92c>)
 8006380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006382:	e009      	b.n	8006398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006384:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006388:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800638a:	e005      	b.n	8006398 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800638c:	2300      	movs	r3, #0
 800638e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006396:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006398:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	f000 81de 	beq.w	800675c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a4:	4a94      	ldr	r2, [pc, #592]	@ (80065f8 <UART_SetConfig+0x930>)
 80063a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80063b2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	685a      	ldr	r2, [r3, #4]
 80063b8:	4613      	mov	r3, r2
 80063ba:	005b      	lsls	r3, r3, #1
 80063bc:	4413      	add	r3, r2
 80063be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063c0:	429a      	cmp	r2, r3
 80063c2:	d305      	bcc.n	80063d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d903      	bls.n	80063d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80063d6:	e1c1      	b.n	800675c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063da:	2200      	movs	r2, #0
 80063dc:	60bb      	str	r3, [r7, #8]
 80063de:	60fa      	str	r2, [r7, #12]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063e4:	4a84      	ldr	r2, [pc, #528]	@ (80065f8 <UART_SetConfig+0x930>)
 80063e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2200      	movs	r2, #0
 80063ee:	603b      	str	r3, [r7, #0]
 80063f0:	607a      	str	r2, [r7, #4]
 80063f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80063fa:	f7f9 ffc1 	bl	8000380 <__aeabi_uldivmod>
 80063fe:	4602      	mov	r2, r0
 8006400:	460b      	mov	r3, r1
 8006402:	4610      	mov	r0, r2
 8006404:	4619      	mov	r1, r3
 8006406:	f04f 0200 	mov.w	r2, #0
 800640a:	f04f 0300 	mov.w	r3, #0
 800640e:	020b      	lsls	r3, r1, #8
 8006410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006414:	0202      	lsls	r2, r0, #8
 8006416:	6979      	ldr	r1, [r7, #20]
 8006418:	6849      	ldr	r1, [r1, #4]
 800641a:	0849      	lsrs	r1, r1, #1
 800641c:	2000      	movs	r0, #0
 800641e:	460c      	mov	r4, r1
 8006420:	4605      	mov	r5, r0
 8006422:	eb12 0804 	adds.w	r8, r2, r4
 8006426:	eb43 0905 	adc.w	r9, r3, r5
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	469a      	mov	sl, r3
 8006432:	4693      	mov	fp, r2
 8006434:	4652      	mov	r2, sl
 8006436:	465b      	mov	r3, fp
 8006438:	4640      	mov	r0, r8
 800643a:	4649      	mov	r1, r9
 800643c:	f7f9 ffa0 	bl	8000380 <__aeabi_uldivmod>
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4613      	mov	r3, r2
 8006446:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800644e:	d308      	bcc.n	8006462 <UART_SetConfig+0x79a>
 8006450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006452:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006456:	d204      	bcs.n	8006462 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800645e:	60da      	str	r2, [r3, #12]
 8006460:	e17c      	b.n	800675c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006468:	e178      	b.n	800675c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006472:	f040 80c5 	bne.w	8006600 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8006476:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800647a:	2b20      	cmp	r3, #32
 800647c:	dc48      	bgt.n	8006510 <UART_SetConfig+0x848>
 800647e:	2b00      	cmp	r3, #0
 8006480:	db7b      	blt.n	800657a <UART_SetConfig+0x8b2>
 8006482:	2b20      	cmp	r3, #32
 8006484:	d879      	bhi.n	800657a <UART_SetConfig+0x8b2>
 8006486:	a201      	add	r2, pc, #4	@ (adr r2, 800648c <UART_SetConfig+0x7c4>)
 8006488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648c:	08006517 	.word	0x08006517
 8006490:	0800651f 	.word	0x0800651f
 8006494:	0800657b 	.word	0x0800657b
 8006498:	0800657b 	.word	0x0800657b
 800649c:	08006527 	.word	0x08006527
 80064a0:	0800657b 	.word	0x0800657b
 80064a4:	0800657b 	.word	0x0800657b
 80064a8:	0800657b 	.word	0x0800657b
 80064ac:	08006537 	.word	0x08006537
 80064b0:	0800657b 	.word	0x0800657b
 80064b4:	0800657b 	.word	0x0800657b
 80064b8:	0800657b 	.word	0x0800657b
 80064bc:	0800657b 	.word	0x0800657b
 80064c0:	0800657b 	.word	0x0800657b
 80064c4:	0800657b 	.word	0x0800657b
 80064c8:	0800657b 	.word	0x0800657b
 80064cc:	08006547 	.word	0x08006547
 80064d0:	0800657b 	.word	0x0800657b
 80064d4:	0800657b 	.word	0x0800657b
 80064d8:	0800657b 	.word	0x0800657b
 80064dc:	0800657b 	.word	0x0800657b
 80064e0:	0800657b 	.word	0x0800657b
 80064e4:	0800657b 	.word	0x0800657b
 80064e8:	0800657b 	.word	0x0800657b
 80064ec:	0800657b 	.word	0x0800657b
 80064f0:	0800657b 	.word	0x0800657b
 80064f4:	0800657b 	.word	0x0800657b
 80064f8:	0800657b 	.word	0x0800657b
 80064fc:	0800657b 	.word	0x0800657b
 8006500:	0800657b 	.word	0x0800657b
 8006504:	0800657b 	.word	0x0800657b
 8006508:	0800657b 	.word	0x0800657b
 800650c:	0800656d 	.word	0x0800656d
 8006510:	2b40      	cmp	r3, #64	@ 0x40
 8006512:	d02e      	beq.n	8006572 <UART_SetConfig+0x8aa>
 8006514:	e031      	b.n	800657a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006516:	f7fc fff3 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 800651a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800651c:	e033      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651e:	f7fd f805 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 8006522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006524:	e02f      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006526:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fa34 	bl	8004998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006534:	e027      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006536:	f107 0318 	add.w	r3, r7, #24
 800653a:	4618      	mov	r0, r3
 800653c:	f7fe fb80 	bl	8004c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006544:	e01f      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006546:	4b2d      	ldr	r3, [pc, #180]	@ (80065fc <UART_SetConfig+0x934>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b00      	cmp	r3, #0
 8006550:	d009      	beq.n	8006566 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006552:	4b2a      	ldr	r3, [pc, #168]	@ (80065fc <UART_SetConfig+0x934>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	08db      	lsrs	r3, r3, #3
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	4a24      	ldr	r2, [pc, #144]	@ (80065f0 <UART_SetConfig+0x928>)
 800655e:	fa22 f303 	lsr.w	r3, r2, r3
 8006562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006564:	e00f      	b.n	8006586 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006566:	4b22      	ldr	r3, [pc, #136]	@ (80065f0 <UART_SetConfig+0x928>)
 8006568:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800656a:	e00c      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800656c:	4b21      	ldr	r3, [pc, #132]	@ (80065f4 <UART_SetConfig+0x92c>)
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006570:	e009      	b.n	8006586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006572:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006578:	e005      	b.n	8006586 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800657a:	2300      	movs	r3, #0
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80e7 	beq.w	800675c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006592:	4a19      	ldr	r2, [pc, #100]	@ (80065f8 <UART_SetConfig+0x930>)
 8006594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006598:	461a      	mov	r2, r3
 800659a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800659c:	fbb3 f3f2 	udiv	r3, r3, r2
 80065a0:	005a      	lsls	r2, r3, #1
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	085b      	lsrs	r3, r3, #1
 80065a8:	441a      	add	r2, r3
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	2b0f      	cmp	r3, #15
 80065b8:	d916      	bls.n	80065e8 <UART_SetConfig+0x920>
 80065ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c0:	d212      	bcs.n	80065e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f023 030f 	bic.w	r3, r3, #15
 80065ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	085b      	lsrs	r3, r3, #1
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	b29a      	uxth	r2, r3
 80065d8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80065da:	4313      	orrs	r3, r2
 80065dc:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80065e4:	60da      	str	r2, [r3, #12]
 80065e6:	e0b9      	b.n	800675c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80065ee:	e0b5      	b.n	800675c <UART_SetConfig+0xa94>
 80065f0:	03d09000 	.word	0x03d09000
 80065f4:	003d0900 	.word	0x003d0900
 80065f8:	08007d58 	.word	0x08007d58
 80065fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006600:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006604:	2b20      	cmp	r3, #32
 8006606:	dc49      	bgt.n	800669c <UART_SetConfig+0x9d4>
 8006608:	2b00      	cmp	r3, #0
 800660a:	db7c      	blt.n	8006706 <UART_SetConfig+0xa3e>
 800660c:	2b20      	cmp	r3, #32
 800660e:	d87a      	bhi.n	8006706 <UART_SetConfig+0xa3e>
 8006610:	a201      	add	r2, pc, #4	@ (adr r2, 8006618 <UART_SetConfig+0x950>)
 8006612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006616:	bf00      	nop
 8006618:	080066a3 	.word	0x080066a3
 800661c:	080066ab 	.word	0x080066ab
 8006620:	08006707 	.word	0x08006707
 8006624:	08006707 	.word	0x08006707
 8006628:	080066b3 	.word	0x080066b3
 800662c:	08006707 	.word	0x08006707
 8006630:	08006707 	.word	0x08006707
 8006634:	08006707 	.word	0x08006707
 8006638:	080066c3 	.word	0x080066c3
 800663c:	08006707 	.word	0x08006707
 8006640:	08006707 	.word	0x08006707
 8006644:	08006707 	.word	0x08006707
 8006648:	08006707 	.word	0x08006707
 800664c:	08006707 	.word	0x08006707
 8006650:	08006707 	.word	0x08006707
 8006654:	08006707 	.word	0x08006707
 8006658:	080066d3 	.word	0x080066d3
 800665c:	08006707 	.word	0x08006707
 8006660:	08006707 	.word	0x08006707
 8006664:	08006707 	.word	0x08006707
 8006668:	08006707 	.word	0x08006707
 800666c:	08006707 	.word	0x08006707
 8006670:	08006707 	.word	0x08006707
 8006674:	08006707 	.word	0x08006707
 8006678:	08006707 	.word	0x08006707
 800667c:	08006707 	.word	0x08006707
 8006680:	08006707 	.word	0x08006707
 8006684:	08006707 	.word	0x08006707
 8006688:	08006707 	.word	0x08006707
 800668c:	08006707 	.word	0x08006707
 8006690:	08006707 	.word	0x08006707
 8006694:	08006707 	.word	0x08006707
 8006698:	080066f9 	.word	0x080066f9
 800669c:	2b40      	cmp	r3, #64	@ 0x40
 800669e:	d02e      	beq.n	80066fe <UART_SetConfig+0xa36>
 80066a0:	e031      	b.n	8006706 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a2:	f7fc ff2d 	bl	8003500 <HAL_RCC_GetPCLK1Freq>
 80066a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066a8:	e033      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066aa:	f7fc ff3f 	bl	800352c <HAL_RCC_GetPCLK2Freq>
 80066ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80066b0:	e02f      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80066b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7fe f96e 	bl	8004998 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80066bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066c0:	e027      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80066c2:	f107 0318 	add.w	r3, r7, #24
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7fe faba 	bl	8004c40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066d0:	e01f      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066d2:	4b2d      	ldr	r3, [pc, #180]	@ (8006788 <UART_SetConfig+0xac0>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d009      	beq.n	80066f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80066de:	4b2a      	ldr	r3, [pc, #168]	@ (8006788 <UART_SetConfig+0xac0>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	08db      	lsrs	r3, r3, #3
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	4a28      	ldr	r2, [pc, #160]	@ (800678c <UART_SetConfig+0xac4>)
 80066ea:	fa22 f303 	lsr.w	r3, r2, r3
 80066ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80066f0:	e00f      	b.n	8006712 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80066f2:	4b26      	ldr	r3, [pc, #152]	@ (800678c <UART_SetConfig+0xac4>)
 80066f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066f6:	e00c      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80066f8:	4b25      	ldr	r3, [pc, #148]	@ (8006790 <UART_SetConfig+0xac8>)
 80066fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80066fc:	e009      	b.n	8006712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006704:	e005      	b.n	8006712 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006706:	2300      	movs	r3, #0
 8006708:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800670a:	2301      	movs	r3, #1
 800670c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006710:	bf00      	nop
    }

    if (pclk != 0U)
 8006712:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d021      	beq.n	800675c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800671c:	4a1d      	ldr	r2, [pc, #116]	@ (8006794 <UART_SetConfig+0xacc>)
 800671e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006722:	461a      	mov	r2, r3
 8006724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006726:	fbb3 f2f2 	udiv	r2, r3, r2
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	085b      	lsrs	r3, r3, #1
 8006730:	441a      	add	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	685b      	ldr	r3, [r3, #4]
 8006736:	fbb2 f3f3 	udiv	r3, r2, r3
 800673a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	2b0f      	cmp	r3, #15
 8006740:	d909      	bls.n	8006756 <UART_SetConfig+0xa8e>
 8006742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006748:	d205      	bcs.n	8006756 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800674a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800674c:	b29a      	uxth	r2, r3
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	60da      	str	r2, [r3, #12]
 8006754:	e002      	b.n	800675c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	2201      	movs	r2, #1
 8006760:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006764:	697b      	ldr	r3, [r7, #20]
 8006766:	2201      	movs	r2, #1
 8006768:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2200      	movs	r2, #0
 8006770:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	2200      	movs	r2, #0
 8006776:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006778:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800677c:	4618      	mov	r0, r3
 800677e:	3748      	adds	r7, #72	@ 0x48
 8006780:	46bd      	mov	sp, r7
 8006782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006786:	bf00      	nop
 8006788:	58024400 	.word	0x58024400
 800678c:	03d09000 	.word	0x03d09000
 8006790:	003d0900 	.word	0x003d0900
 8006794:	08007d58 	.word	0x08007d58

08006798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006798:	b480      	push	{r7}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	430a      	orrs	r2, r1
 8006804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	685b      	ldr	r3, [r3, #4]
 8006818:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	430a      	orrs	r2, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800682c:	f003 0310 	and.w	r3, r3, #16
 8006830:	2b00      	cmp	r3, #0
 8006832:	d00a      	beq.n	800684a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	430a      	orrs	r2, r1
 8006848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00a      	beq.n	800686c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	430a      	orrs	r2, r1
 800686a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01a      	beq.n	80068ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	685b      	ldr	r3, [r3, #4]
 800687e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	430a      	orrs	r2, r1
 800688c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006892:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006896:	d10a      	bne.n	80068ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	430a      	orrs	r2, r1
 80068ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d00a      	beq.n	80068d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	685b      	ldr	r3, [r3, #4]
 80068c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	430a      	orrs	r2, r1
 80068ce:	605a      	str	r2, [r3, #4]
  }
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b098      	sub	sp, #96	@ 0x60
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068ec:	f7fa fccc 	bl	8001288 <HAL_GetTick>
 80068f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d12f      	bne.n	8006960 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006900:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006908:	2200      	movs	r2, #0
 800690a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f88e 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d022      	beq.n	8006960 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006922:	e853 3f00 	ldrex	r3, [r3]
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800692e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	461a      	mov	r2, r3
 8006936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006938:	647b      	str	r3, [r7, #68]	@ 0x44
 800693a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800693c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800693e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006940:	e841 2300 	strex	r3, r2, [r1]
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006948:	2b00      	cmp	r3, #0
 800694a:	d1e6      	bne.n	800691a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2220      	movs	r2, #32
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e063      	b.n	8006a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b04      	cmp	r3, #4
 800696c:	d149      	bne.n	8006a02 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800696e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006972:	9300      	str	r3, [sp, #0]
 8006974:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006976:	2200      	movs	r2, #0
 8006978:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f000 f857 	bl	8006a30 <UART_WaitOnFlagUntilTimeout>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d03c      	beq.n	8006a02 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	623b      	str	r3, [r7, #32]
   return(result);
 8006996:	6a3b      	ldr	r3, [r7, #32]
 8006998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800699c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80069a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80069ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80069b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e6      	bne.n	8006988 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	3308      	adds	r3, #8
 80069c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3308      	adds	r3, #8
 80069d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069da:	61fa      	str	r2, [r7, #28]
 80069dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069de:	69b9      	ldr	r1, [r7, #24]
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	e841 2300 	strex	r3, r2, [r1]
 80069e6:	617b      	str	r3, [r7, #20]
   return(result);
 80069e8:	697b      	ldr	r3, [r7, #20]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1e5      	bne.n	80069ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2220      	movs	r2, #32
 80069f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069fe:	2303      	movs	r3, #3
 8006a00:	e012      	b.n	8006a28 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a26:	2300      	movs	r3, #0
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3758      	adds	r7, #88	@ 0x58
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	603b      	str	r3, [r7, #0]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a40:	e04f      	b.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a42:	69bb      	ldr	r3, [r7, #24]
 8006a44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a48:	d04b      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a4a:	f7fa fc1d 	bl	8001288 <HAL_GetTick>
 8006a4e:	4602      	mov	r2, r0
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	69ba      	ldr	r2, [r7, #24]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d302      	bcc.n	8006a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d101      	bne.n	8006a64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a60:	2303      	movs	r3, #3
 8006a62:	e04e      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d037      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b80      	cmp	r3, #128	@ 0x80
 8006a76:	d034      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	2b40      	cmp	r3, #64	@ 0x40
 8006a7c:	d031      	beq.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	69db      	ldr	r3, [r3, #28]
 8006a84:	f003 0308 	and.w	r3, r3, #8
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d110      	bne.n	8006aae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2208      	movs	r2, #8
 8006a92:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f839 	bl	8006b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2208      	movs	r2, #8
 8006a9e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006aaa:	2301      	movs	r3, #1
 8006aac:	e029      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ab8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006abc:	d111      	bne.n	8006ae2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ac6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f000 f81f 	bl	8006b0c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2220      	movs	r2, #32
 8006ad2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006ade:	2303      	movs	r3, #3
 8006ae0:	e00f      	b.n	8006b02 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	69da      	ldr	r2, [r3, #28]
 8006ae8:	68bb      	ldr	r3, [r7, #8]
 8006aea:	4013      	ands	r3, r2
 8006aec:	68ba      	ldr	r2, [r7, #8]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	79fb      	ldrb	r3, [r7, #7]
 8006afc:	429a      	cmp	r2, r3
 8006afe:	d0a0      	beq.n	8006a42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b00:	2300      	movs	r3, #0
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b095      	sub	sp, #84	@ 0x54
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b32:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b34:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e6      	bne.n	8006b14 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4e:	6a3b      	ldr	r3, [r7, #32]
 8006b50:	e853 3f00 	ldrex	r3, [r3]
 8006b54:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b56:	69fa      	ldr	r2, [r7, #28]
 8006b58:	4b1e      	ldr	r3, [pc, #120]	@ (8006bd4 <UART_EndRxTransfer+0xc8>)
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	3308      	adds	r3, #8
 8006b64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006b68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006b6e:	e841 2300 	strex	r3, r2, [r1]
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d1e5      	bne.n	8006b46 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b7e:	2b01      	cmp	r3, #1
 8006b80:	d118      	bne.n	8006bb4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	f023 0310 	bic.w	r3, r3, #16
 8006b96:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	461a      	mov	r2, r3
 8006b9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ba0:	61bb      	str	r3, [r7, #24]
 8006ba2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6979      	ldr	r1, [r7, #20]
 8006ba6:	69ba      	ldr	r2, [r7, #24]
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	613b      	str	r3, [r7, #16]
   return(result);
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e6      	bne.n	8006b82 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2220      	movs	r2, #32
 8006bb8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006bc8:	bf00      	nop
 8006bca:	3754      	adds	r7, #84	@ 0x54
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr
 8006bd4:	effffffe 	.word	0xeffffffe

08006bd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f7ff f854 	bl	8005c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bf4:	bf00      	nop
 8006bf6:	3710      	adds	r7, #16
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	bd80      	pop	{r7, pc}

08006bfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bfc:	b580      	push	{r7, lr}
 8006bfe:	b088      	sub	sp, #32
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c18:	61fb      	str	r3, [r7, #28]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	461a      	mov	r2, r3
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	61bb      	str	r3, [r7, #24]
 8006c24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c26:	6979      	ldr	r1, [r7, #20]
 8006c28:	69ba      	ldr	r2, [r7, #24]
 8006c2a:	e841 2300 	strex	r3, r2, [r1]
 8006c2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1e6      	bne.n	8006c04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2220      	movs	r2, #32
 8006c3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7ff f81f 	bl	8005c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c4a:	bf00      	nop
 8006c4c:	3720      	adds	r7, #32
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b083      	sub	sp, #12
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006c82:	bf00      	nop
 8006c84:	370c      	adds	r7, #12
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr

08006c8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006c8e:	b480      	push	{r7}
 8006c90:	b085      	sub	sp, #20
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d101      	bne.n	8006ca4 <HAL_UARTEx_DisableFifoMode+0x16>
 8006ca0:	2302      	movs	r3, #2
 8006ca2:	e027      	b.n	8006cf4 <HAL_UARTEx_DisableFifoMode+0x66>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	@ 0x24
 8006cb0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0201 	bic.w	r2, r2, #1
 8006cca:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006cd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2220      	movs	r2, #32
 8006ce6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006cf2:	2300      	movs	r3, #0
}
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	3714      	adds	r7, #20
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e02d      	b.n	8006d74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2224      	movs	r2, #36	@ 0x24
 8006d24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681a      	ldr	r2, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f022 0201 	bic.w	r2, r2, #1
 8006d3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	689b      	ldr	r3, [r3, #8]
 8006d46:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	430a      	orrs	r2, r1
 8006d52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f84f 	bl	8006df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68fa      	ldr	r2, [r7, #12]
 8006d60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3710      	adds	r7, #16
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
 8006d84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e02d      	b.n	8006df0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2224      	movs	r2, #36	@ 0x24
 8006da0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	681a      	ldr	r2, [r3, #0]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f022 0201 	bic.w	r2, r2, #1
 8006dba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	430a      	orrs	r2, r1
 8006dce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f811 	bl	8006df8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b085      	sub	sp, #20
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d108      	bne.n	8006e1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e18:	e031      	b.n	8006e7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e1a:	2310      	movs	r3, #16
 8006e1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e1e:	2310      	movs	r3, #16
 8006e20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	0e5b      	lsrs	r3, r3, #25
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	f003 0307 	and.w	r3, r3, #7
 8006e30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	0f5b      	lsrs	r3, r3, #29
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f003 0307 	and.w	r3, r3, #7
 8006e40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e42:	7bbb      	ldrb	r3, [r7, #14]
 8006e44:	7b3a      	ldrb	r2, [r7, #12]
 8006e46:	4911      	ldr	r1, [pc, #68]	@ (8006e8c <UARTEx_SetNbDataToProcess+0x94>)
 8006e48:	5c8a      	ldrb	r2, [r1, r2]
 8006e4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e4e:	7b3a      	ldrb	r2, [r7, #12]
 8006e50:	490f      	ldr	r1, [pc, #60]	@ (8006e90 <UARTEx_SetNbDataToProcess+0x98>)
 8006e52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e54:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
 8006e62:	7b7a      	ldrb	r2, [r7, #13]
 8006e64:	4909      	ldr	r1, [pc, #36]	@ (8006e8c <UARTEx_SetNbDataToProcess+0x94>)
 8006e66:	5c8a      	ldrb	r2, [r1, r2]
 8006e68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e6c:	7b7a      	ldrb	r2, [r7, #13]
 8006e6e:	4908      	ldr	r1, [pc, #32]	@ (8006e90 <UARTEx_SetNbDataToProcess+0x98>)
 8006e70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e72:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006e7e:	bf00      	nop
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	08007d70 	.word	0x08007d70
 8006e90:	08007d78 	.word	0x08007d78

08006e94 <std>:
 8006e94:	2300      	movs	r3, #0
 8006e96:	b510      	push	{r4, lr}
 8006e98:	4604      	mov	r4, r0
 8006e9a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ea2:	6083      	str	r3, [r0, #8]
 8006ea4:	8181      	strh	r1, [r0, #12]
 8006ea6:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ea8:	81c2      	strh	r2, [r0, #14]
 8006eaa:	6183      	str	r3, [r0, #24]
 8006eac:	4619      	mov	r1, r3
 8006eae:	2208      	movs	r2, #8
 8006eb0:	305c      	adds	r0, #92	@ 0x5c
 8006eb2:	f000 f906 	bl	80070c2 <memset>
 8006eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8006eec <std+0x58>)
 8006eb8:	6263      	str	r3, [r4, #36]	@ 0x24
 8006eba:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef0 <std+0x5c>)
 8006ebc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef4 <std+0x60>)
 8006ec0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ef8 <std+0x64>)
 8006ec4:	6323      	str	r3, [r4, #48]	@ 0x30
 8006ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8006efc <std+0x68>)
 8006ec8:	6224      	str	r4, [r4, #32]
 8006eca:	429c      	cmp	r4, r3
 8006ecc:	d006      	beq.n	8006edc <std+0x48>
 8006ece:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006ed2:	4294      	cmp	r4, r2
 8006ed4:	d002      	beq.n	8006edc <std+0x48>
 8006ed6:	33d0      	adds	r3, #208	@ 0xd0
 8006ed8:	429c      	cmp	r4, r3
 8006eda:	d105      	bne.n	8006ee8 <std+0x54>
 8006edc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ee4:	f000 b966 	b.w	80071b4 <__retarget_lock_init_recursive>
 8006ee8:	bd10      	pop	{r4, pc}
 8006eea:	bf00      	nop
 8006eec:	0800703d 	.word	0x0800703d
 8006ef0:	0800705f 	.word	0x0800705f
 8006ef4:	08007097 	.word	0x08007097
 8006ef8:	080070bb 	.word	0x080070bb
 8006efc:	2400013c 	.word	0x2400013c

08006f00 <stdio_exit_handler>:
 8006f00:	4a02      	ldr	r2, [pc, #8]	@ (8006f0c <stdio_exit_handler+0xc>)
 8006f02:	4903      	ldr	r1, [pc, #12]	@ (8006f10 <stdio_exit_handler+0x10>)
 8006f04:	4803      	ldr	r0, [pc, #12]	@ (8006f14 <stdio_exit_handler+0x14>)
 8006f06:	f000 b869 	b.w	8006fdc <_fwalk_sglue>
 8006f0a:	bf00      	nop
 8006f0c:	24000014 	.word	0x24000014
 8006f10:	08007a51 	.word	0x08007a51
 8006f14:	24000024 	.word	0x24000024

08006f18 <cleanup_stdio>:
 8006f18:	6841      	ldr	r1, [r0, #4]
 8006f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006f4c <cleanup_stdio+0x34>)
 8006f1c:	4299      	cmp	r1, r3
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	4604      	mov	r4, r0
 8006f22:	d001      	beq.n	8006f28 <cleanup_stdio+0x10>
 8006f24:	f000 fd94 	bl	8007a50 <_fflush_r>
 8006f28:	68a1      	ldr	r1, [r4, #8]
 8006f2a:	4b09      	ldr	r3, [pc, #36]	@ (8006f50 <cleanup_stdio+0x38>)
 8006f2c:	4299      	cmp	r1, r3
 8006f2e:	d002      	beq.n	8006f36 <cleanup_stdio+0x1e>
 8006f30:	4620      	mov	r0, r4
 8006f32:	f000 fd8d 	bl	8007a50 <_fflush_r>
 8006f36:	68e1      	ldr	r1, [r4, #12]
 8006f38:	4b06      	ldr	r3, [pc, #24]	@ (8006f54 <cleanup_stdio+0x3c>)
 8006f3a:	4299      	cmp	r1, r3
 8006f3c:	d004      	beq.n	8006f48 <cleanup_stdio+0x30>
 8006f3e:	4620      	mov	r0, r4
 8006f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f44:	f000 bd84 	b.w	8007a50 <_fflush_r>
 8006f48:	bd10      	pop	{r4, pc}
 8006f4a:	bf00      	nop
 8006f4c:	2400013c 	.word	0x2400013c
 8006f50:	240001a4 	.word	0x240001a4
 8006f54:	2400020c 	.word	0x2400020c

08006f58 <global_stdio_init.part.0>:
 8006f58:	b510      	push	{r4, lr}
 8006f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f88 <global_stdio_init.part.0+0x30>)
 8006f5c:	4c0b      	ldr	r4, [pc, #44]	@ (8006f8c <global_stdio_init.part.0+0x34>)
 8006f5e:	4a0c      	ldr	r2, [pc, #48]	@ (8006f90 <global_stdio_init.part.0+0x38>)
 8006f60:	601a      	str	r2, [r3, #0]
 8006f62:	4620      	mov	r0, r4
 8006f64:	2200      	movs	r2, #0
 8006f66:	2104      	movs	r1, #4
 8006f68:	f7ff ff94 	bl	8006e94 <std>
 8006f6c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006f70:	2201      	movs	r2, #1
 8006f72:	2109      	movs	r1, #9
 8006f74:	f7ff ff8e 	bl	8006e94 <std>
 8006f78:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006f7c:	2202      	movs	r2, #2
 8006f7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f82:	2112      	movs	r1, #18
 8006f84:	f7ff bf86 	b.w	8006e94 <std>
 8006f88:	24000274 	.word	0x24000274
 8006f8c:	2400013c 	.word	0x2400013c
 8006f90:	08006f01 	.word	0x08006f01

08006f94 <__sfp_lock_acquire>:
 8006f94:	4801      	ldr	r0, [pc, #4]	@ (8006f9c <__sfp_lock_acquire+0x8>)
 8006f96:	f000 b90e 	b.w	80071b6 <__retarget_lock_acquire_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	2400027d 	.word	0x2400027d

08006fa0 <__sfp_lock_release>:
 8006fa0:	4801      	ldr	r0, [pc, #4]	@ (8006fa8 <__sfp_lock_release+0x8>)
 8006fa2:	f000 b909 	b.w	80071b8 <__retarget_lock_release_recursive>
 8006fa6:	bf00      	nop
 8006fa8:	2400027d 	.word	0x2400027d

08006fac <__sinit>:
 8006fac:	b510      	push	{r4, lr}
 8006fae:	4604      	mov	r4, r0
 8006fb0:	f7ff fff0 	bl	8006f94 <__sfp_lock_acquire>
 8006fb4:	6a23      	ldr	r3, [r4, #32]
 8006fb6:	b11b      	cbz	r3, 8006fc0 <__sinit+0x14>
 8006fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fbc:	f7ff bff0 	b.w	8006fa0 <__sfp_lock_release>
 8006fc0:	4b04      	ldr	r3, [pc, #16]	@ (8006fd4 <__sinit+0x28>)
 8006fc2:	6223      	str	r3, [r4, #32]
 8006fc4:	4b04      	ldr	r3, [pc, #16]	@ (8006fd8 <__sinit+0x2c>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1f5      	bne.n	8006fb8 <__sinit+0xc>
 8006fcc:	f7ff ffc4 	bl	8006f58 <global_stdio_init.part.0>
 8006fd0:	e7f2      	b.n	8006fb8 <__sinit+0xc>
 8006fd2:	bf00      	nop
 8006fd4:	08006f19 	.word	0x08006f19
 8006fd8:	24000274 	.word	0x24000274

08006fdc <_fwalk_sglue>:
 8006fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe0:	4607      	mov	r7, r0
 8006fe2:	4688      	mov	r8, r1
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	2600      	movs	r6, #0
 8006fe8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006fec:	f1b9 0901 	subs.w	r9, r9, #1
 8006ff0:	d505      	bpl.n	8006ffe <_fwalk_sglue+0x22>
 8006ff2:	6824      	ldr	r4, [r4, #0]
 8006ff4:	2c00      	cmp	r4, #0
 8006ff6:	d1f7      	bne.n	8006fe8 <_fwalk_sglue+0xc>
 8006ff8:	4630      	mov	r0, r6
 8006ffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d907      	bls.n	8007014 <_fwalk_sglue+0x38>
 8007004:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007008:	3301      	adds	r3, #1
 800700a:	d003      	beq.n	8007014 <_fwalk_sglue+0x38>
 800700c:	4629      	mov	r1, r5
 800700e:	4638      	mov	r0, r7
 8007010:	47c0      	blx	r8
 8007012:	4306      	orrs	r6, r0
 8007014:	3568      	adds	r5, #104	@ 0x68
 8007016:	e7e9      	b.n	8006fec <_fwalk_sglue+0x10>

08007018 <iprintf>:
 8007018:	b40f      	push	{r0, r1, r2, r3}
 800701a:	b507      	push	{r0, r1, r2, lr}
 800701c:	4906      	ldr	r1, [pc, #24]	@ (8007038 <iprintf+0x20>)
 800701e:	ab04      	add	r3, sp, #16
 8007020:	6808      	ldr	r0, [r1, #0]
 8007022:	f853 2b04 	ldr.w	r2, [r3], #4
 8007026:	6881      	ldr	r1, [r0, #8]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	f000 f9e9 	bl	8007400 <_vfiprintf_r>
 800702e:	b003      	add	sp, #12
 8007030:	f85d eb04 	ldr.w	lr, [sp], #4
 8007034:	b004      	add	sp, #16
 8007036:	4770      	bx	lr
 8007038:	24000020 	.word	0x24000020

0800703c <__sread>:
 800703c:	b510      	push	{r4, lr}
 800703e:	460c      	mov	r4, r1
 8007040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007044:	f000 f868 	bl	8007118 <_read_r>
 8007048:	2800      	cmp	r0, #0
 800704a:	bfab      	itete	ge
 800704c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800704e:	89a3      	ldrhlt	r3, [r4, #12]
 8007050:	181b      	addge	r3, r3, r0
 8007052:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007056:	bfac      	ite	ge
 8007058:	6563      	strge	r3, [r4, #84]	@ 0x54
 800705a:	81a3      	strhlt	r3, [r4, #12]
 800705c:	bd10      	pop	{r4, pc}

0800705e <__swrite>:
 800705e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007062:	461f      	mov	r7, r3
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	05db      	lsls	r3, r3, #23
 8007068:	4605      	mov	r5, r0
 800706a:	460c      	mov	r4, r1
 800706c:	4616      	mov	r6, r2
 800706e:	d505      	bpl.n	800707c <__swrite+0x1e>
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	2302      	movs	r3, #2
 8007076:	2200      	movs	r2, #0
 8007078:	f000 f83c 	bl	80070f4 <_lseek_r>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007082:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007086:	81a3      	strh	r3, [r4, #12]
 8007088:	4632      	mov	r2, r6
 800708a:	463b      	mov	r3, r7
 800708c:	4628      	mov	r0, r5
 800708e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	f000 b853 	b.w	800713c <_write_r>

08007096 <__sseek>:
 8007096:	b510      	push	{r4, lr}
 8007098:	460c      	mov	r4, r1
 800709a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709e:	f000 f829 	bl	80070f4 <_lseek_r>
 80070a2:	1c43      	adds	r3, r0, #1
 80070a4:	89a3      	ldrh	r3, [r4, #12]
 80070a6:	bf15      	itete	ne
 80070a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80070aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80070ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80070b2:	81a3      	strheq	r3, [r4, #12]
 80070b4:	bf18      	it	ne
 80070b6:	81a3      	strhne	r3, [r4, #12]
 80070b8:	bd10      	pop	{r4, pc}

080070ba <__sclose>:
 80070ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070be:	f000 b809 	b.w	80070d4 <_close_r>

080070c2 <memset>:
 80070c2:	4402      	add	r2, r0
 80070c4:	4603      	mov	r3, r0
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d100      	bne.n	80070cc <memset+0xa>
 80070ca:	4770      	bx	lr
 80070cc:	f803 1b01 	strb.w	r1, [r3], #1
 80070d0:	e7f9      	b.n	80070c6 <memset+0x4>
	...

080070d4 <_close_r>:
 80070d4:	b538      	push	{r3, r4, r5, lr}
 80070d6:	4d06      	ldr	r5, [pc, #24]	@ (80070f0 <_close_r+0x1c>)
 80070d8:	2300      	movs	r3, #0
 80070da:	4604      	mov	r4, r0
 80070dc:	4608      	mov	r0, r1
 80070de:	602b      	str	r3, [r5, #0]
 80070e0:	f7f9 fe2d 	bl	8000d3e <_close>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_close_r+0x1a>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_close_r+0x1a>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	24000278 	.word	0x24000278

080070f4 <_lseek_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d07      	ldr	r5, [pc, #28]	@ (8007114 <_lseek_r+0x20>)
 80070f8:	4604      	mov	r4, r0
 80070fa:	4608      	mov	r0, r1
 80070fc:	4611      	mov	r1, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7f9 fe42 	bl	8000d8c <_lseek>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_lseek_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_lseek_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	24000278 	.word	0x24000278

08007118 <_read_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	@ (8007138 <_read_r+0x20>)
 800711c:	4604      	mov	r4, r0
 800711e:	4608      	mov	r0, r1
 8007120:	4611      	mov	r1, r2
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f7f9 fdd0 	bl	8000ccc <_read>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_read_r+0x1e>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_read_r+0x1e>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	24000278 	.word	0x24000278

0800713c <_write_r>:
 800713c:	b538      	push	{r3, r4, r5, lr}
 800713e:	4d07      	ldr	r5, [pc, #28]	@ (800715c <_write_r+0x20>)
 8007140:	4604      	mov	r4, r0
 8007142:	4608      	mov	r0, r1
 8007144:	4611      	mov	r1, r2
 8007146:	2200      	movs	r2, #0
 8007148:	602a      	str	r2, [r5, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	f7f9 fddb 	bl	8000d06 <_write>
 8007150:	1c43      	adds	r3, r0, #1
 8007152:	d102      	bne.n	800715a <_write_r+0x1e>
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	b103      	cbz	r3, 800715a <_write_r+0x1e>
 8007158:	6023      	str	r3, [r4, #0]
 800715a:	bd38      	pop	{r3, r4, r5, pc}
 800715c:	24000278 	.word	0x24000278

08007160 <__errno>:
 8007160:	4b01      	ldr	r3, [pc, #4]	@ (8007168 <__errno+0x8>)
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	24000020 	.word	0x24000020

0800716c <__libc_init_array>:
 800716c:	b570      	push	{r4, r5, r6, lr}
 800716e:	4d0d      	ldr	r5, [pc, #52]	@ (80071a4 <__libc_init_array+0x38>)
 8007170:	4c0d      	ldr	r4, [pc, #52]	@ (80071a8 <__libc_init_array+0x3c>)
 8007172:	1b64      	subs	r4, r4, r5
 8007174:	10a4      	asrs	r4, r4, #2
 8007176:	2600      	movs	r6, #0
 8007178:	42a6      	cmp	r6, r4
 800717a:	d109      	bne.n	8007190 <__libc_init_array+0x24>
 800717c:	4d0b      	ldr	r5, [pc, #44]	@ (80071ac <__libc_init_array+0x40>)
 800717e:	4c0c      	ldr	r4, [pc, #48]	@ (80071b0 <__libc_init_array+0x44>)
 8007180:	f000 fdb6 	bl	8007cf0 <_init>
 8007184:	1b64      	subs	r4, r4, r5
 8007186:	10a4      	asrs	r4, r4, #2
 8007188:	2600      	movs	r6, #0
 800718a:	42a6      	cmp	r6, r4
 800718c:	d105      	bne.n	800719a <__libc_init_array+0x2e>
 800718e:	bd70      	pop	{r4, r5, r6, pc}
 8007190:	f855 3b04 	ldr.w	r3, [r5], #4
 8007194:	4798      	blx	r3
 8007196:	3601      	adds	r6, #1
 8007198:	e7ee      	b.n	8007178 <__libc_init_array+0xc>
 800719a:	f855 3b04 	ldr.w	r3, [r5], #4
 800719e:	4798      	blx	r3
 80071a0:	3601      	adds	r6, #1
 80071a2:	e7f2      	b.n	800718a <__libc_init_array+0x1e>
 80071a4:	08007dbc 	.word	0x08007dbc
 80071a8:	08007dbc 	.word	0x08007dbc
 80071ac:	08007dbc 	.word	0x08007dbc
 80071b0:	08007dc0 	.word	0x08007dc0

080071b4 <__retarget_lock_init_recursive>:
 80071b4:	4770      	bx	lr

080071b6 <__retarget_lock_acquire_recursive>:
 80071b6:	4770      	bx	lr

080071b8 <__retarget_lock_release_recursive>:
 80071b8:	4770      	bx	lr
	...

080071bc <_free_r>:
 80071bc:	b538      	push	{r3, r4, r5, lr}
 80071be:	4605      	mov	r5, r0
 80071c0:	2900      	cmp	r1, #0
 80071c2:	d041      	beq.n	8007248 <_free_r+0x8c>
 80071c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071c8:	1f0c      	subs	r4, r1, #4
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	bfb8      	it	lt
 80071ce:	18e4      	addlt	r4, r4, r3
 80071d0:	f000 f8e0 	bl	8007394 <__malloc_lock>
 80071d4:	4a1d      	ldr	r2, [pc, #116]	@ (800724c <_free_r+0x90>)
 80071d6:	6813      	ldr	r3, [r2, #0]
 80071d8:	b933      	cbnz	r3, 80071e8 <_free_r+0x2c>
 80071da:	6063      	str	r3, [r4, #4]
 80071dc:	6014      	str	r4, [r2, #0]
 80071de:	4628      	mov	r0, r5
 80071e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071e4:	f000 b8dc 	b.w	80073a0 <__malloc_unlock>
 80071e8:	42a3      	cmp	r3, r4
 80071ea:	d908      	bls.n	80071fe <_free_r+0x42>
 80071ec:	6820      	ldr	r0, [r4, #0]
 80071ee:	1821      	adds	r1, r4, r0
 80071f0:	428b      	cmp	r3, r1
 80071f2:	bf01      	itttt	eq
 80071f4:	6819      	ldreq	r1, [r3, #0]
 80071f6:	685b      	ldreq	r3, [r3, #4]
 80071f8:	1809      	addeq	r1, r1, r0
 80071fa:	6021      	streq	r1, [r4, #0]
 80071fc:	e7ed      	b.n	80071da <_free_r+0x1e>
 80071fe:	461a      	mov	r2, r3
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	b10b      	cbz	r3, 8007208 <_free_r+0x4c>
 8007204:	42a3      	cmp	r3, r4
 8007206:	d9fa      	bls.n	80071fe <_free_r+0x42>
 8007208:	6811      	ldr	r1, [r2, #0]
 800720a:	1850      	adds	r0, r2, r1
 800720c:	42a0      	cmp	r0, r4
 800720e:	d10b      	bne.n	8007228 <_free_r+0x6c>
 8007210:	6820      	ldr	r0, [r4, #0]
 8007212:	4401      	add	r1, r0
 8007214:	1850      	adds	r0, r2, r1
 8007216:	4283      	cmp	r3, r0
 8007218:	6011      	str	r1, [r2, #0]
 800721a:	d1e0      	bne.n	80071de <_free_r+0x22>
 800721c:	6818      	ldr	r0, [r3, #0]
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	6053      	str	r3, [r2, #4]
 8007222:	4408      	add	r0, r1
 8007224:	6010      	str	r0, [r2, #0]
 8007226:	e7da      	b.n	80071de <_free_r+0x22>
 8007228:	d902      	bls.n	8007230 <_free_r+0x74>
 800722a:	230c      	movs	r3, #12
 800722c:	602b      	str	r3, [r5, #0]
 800722e:	e7d6      	b.n	80071de <_free_r+0x22>
 8007230:	6820      	ldr	r0, [r4, #0]
 8007232:	1821      	adds	r1, r4, r0
 8007234:	428b      	cmp	r3, r1
 8007236:	bf04      	itt	eq
 8007238:	6819      	ldreq	r1, [r3, #0]
 800723a:	685b      	ldreq	r3, [r3, #4]
 800723c:	6063      	str	r3, [r4, #4]
 800723e:	bf04      	itt	eq
 8007240:	1809      	addeq	r1, r1, r0
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	6054      	str	r4, [r2, #4]
 8007246:	e7ca      	b.n	80071de <_free_r+0x22>
 8007248:	bd38      	pop	{r3, r4, r5, pc}
 800724a:	bf00      	nop
 800724c:	24000284 	.word	0x24000284

08007250 <sbrk_aligned>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4e0f      	ldr	r6, [pc, #60]	@ (8007290 <sbrk_aligned+0x40>)
 8007254:	460c      	mov	r4, r1
 8007256:	6831      	ldr	r1, [r6, #0]
 8007258:	4605      	mov	r5, r0
 800725a:	b911      	cbnz	r1, 8007262 <sbrk_aligned+0x12>
 800725c:	f000 fcb4 	bl	8007bc8 <_sbrk_r>
 8007260:	6030      	str	r0, [r6, #0]
 8007262:	4621      	mov	r1, r4
 8007264:	4628      	mov	r0, r5
 8007266:	f000 fcaf 	bl	8007bc8 <_sbrk_r>
 800726a:	1c43      	adds	r3, r0, #1
 800726c:	d103      	bne.n	8007276 <sbrk_aligned+0x26>
 800726e:	f04f 34ff 	mov.w	r4, #4294967295
 8007272:	4620      	mov	r0, r4
 8007274:	bd70      	pop	{r4, r5, r6, pc}
 8007276:	1cc4      	adds	r4, r0, #3
 8007278:	f024 0403 	bic.w	r4, r4, #3
 800727c:	42a0      	cmp	r0, r4
 800727e:	d0f8      	beq.n	8007272 <sbrk_aligned+0x22>
 8007280:	1a21      	subs	r1, r4, r0
 8007282:	4628      	mov	r0, r5
 8007284:	f000 fca0 	bl	8007bc8 <_sbrk_r>
 8007288:	3001      	adds	r0, #1
 800728a:	d1f2      	bne.n	8007272 <sbrk_aligned+0x22>
 800728c:	e7ef      	b.n	800726e <sbrk_aligned+0x1e>
 800728e:	bf00      	nop
 8007290:	24000280 	.word	0x24000280

08007294 <_malloc_r>:
 8007294:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007298:	1ccd      	adds	r5, r1, #3
 800729a:	f025 0503 	bic.w	r5, r5, #3
 800729e:	3508      	adds	r5, #8
 80072a0:	2d0c      	cmp	r5, #12
 80072a2:	bf38      	it	cc
 80072a4:	250c      	movcc	r5, #12
 80072a6:	2d00      	cmp	r5, #0
 80072a8:	4606      	mov	r6, r0
 80072aa:	db01      	blt.n	80072b0 <_malloc_r+0x1c>
 80072ac:	42a9      	cmp	r1, r5
 80072ae:	d904      	bls.n	80072ba <_malloc_r+0x26>
 80072b0:	230c      	movs	r3, #12
 80072b2:	6033      	str	r3, [r6, #0]
 80072b4:	2000      	movs	r0, #0
 80072b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007390 <_malloc_r+0xfc>
 80072be:	f000 f869 	bl	8007394 <__malloc_lock>
 80072c2:	f8d8 3000 	ldr.w	r3, [r8]
 80072c6:	461c      	mov	r4, r3
 80072c8:	bb44      	cbnz	r4, 800731c <_malloc_r+0x88>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	f7ff ffbf 	bl	8007250 <sbrk_aligned>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	4604      	mov	r4, r0
 80072d6:	d158      	bne.n	800738a <_malloc_r+0xf6>
 80072d8:	f8d8 4000 	ldr.w	r4, [r8]
 80072dc:	4627      	mov	r7, r4
 80072de:	2f00      	cmp	r7, #0
 80072e0:	d143      	bne.n	800736a <_malloc_r+0xd6>
 80072e2:	2c00      	cmp	r4, #0
 80072e4:	d04b      	beq.n	800737e <_malloc_r+0xea>
 80072e6:	6823      	ldr	r3, [r4, #0]
 80072e8:	4639      	mov	r1, r7
 80072ea:	4630      	mov	r0, r6
 80072ec:	eb04 0903 	add.w	r9, r4, r3
 80072f0:	f000 fc6a 	bl	8007bc8 <_sbrk_r>
 80072f4:	4581      	cmp	r9, r0
 80072f6:	d142      	bne.n	800737e <_malloc_r+0xea>
 80072f8:	6821      	ldr	r1, [r4, #0]
 80072fa:	1a6d      	subs	r5, r5, r1
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ffa6 	bl	8007250 <sbrk_aligned>
 8007304:	3001      	adds	r0, #1
 8007306:	d03a      	beq.n	800737e <_malloc_r+0xea>
 8007308:	6823      	ldr	r3, [r4, #0]
 800730a:	442b      	add	r3, r5
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	f8d8 3000 	ldr.w	r3, [r8]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	bb62      	cbnz	r2, 8007370 <_malloc_r+0xdc>
 8007316:	f8c8 7000 	str.w	r7, [r8]
 800731a:	e00f      	b.n	800733c <_malloc_r+0xa8>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	1b52      	subs	r2, r2, r5
 8007320:	d420      	bmi.n	8007364 <_malloc_r+0xd0>
 8007322:	2a0b      	cmp	r2, #11
 8007324:	d917      	bls.n	8007356 <_malloc_r+0xc2>
 8007326:	1961      	adds	r1, r4, r5
 8007328:	42a3      	cmp	r3, r4
 800732a:	6025      	str	r5, [r4, #0]
 800732c:	bf18      	it	ne
 800732e:	6059      	strne	r1, [r3, #4]
 8007330:	6863      	ldr	r3, [r4, #4]
 8007332:	bf08      	it	eq
 8007334:	f8c8 1000 	streq.w	r1, [r8]
 8007338:	5162      	str	r2, [r4, r5]
 800733a:	604b      	str	r3, [r1, #4]
 800733c:	4630      	mov	r0, r6
 800733e:	f000 f82f 	bl	80073a0 <__malloc_unlock>
 8007342:	f104 000b 	add.w	r0, r4, #11
 8007346:	1d23      	adds	r3, r4, #4
 8007348:	f020 0007 	bic.w	r0, r0, #7
 800734c:	1ac2      	subs	r2, r0, r3
 800734e:	bf1c      	itt	ne
 8007350:	1a1b      	subne	r3, r3, r0
 8007352:	50a3      	strne	r3, [r4, r2]
 8007354:	e7af      	b.n	80072b6 <_malloc_r+0x22>
 8007356:	6862      	ldr	r2, [r4, #4]
 8007358:	42a3      	cmp	r3, r4
 800735a:	bf0c      	ite	eq
 800735c:	f8c8 2000 	streq.w	r2, [r8]
 8007360:	605a      	strne	r2, [r3, #4]
 8007362:	e7eb      	b.n	800733c <_malloc_r+0xa8>
 8007364:	4623      	mov	r3, r4
 8007366:	6864      	ldr	r4, [r4, #4]
 8007368:	e7ae      	b.n	80072c8 <_malloc_r+0x34>
 800736a:	463c      	mov	r4, r7
 800736c:	687f      	ldr	r7, [r7, #4]
 800736e:	e7b6      	b.n	80072de <_malloc_r+0x4a>
 8007370:	461a      	mov	r2, r3
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	d1fb      	bne.n	8007370 <_malloc_r+0xdc>
 8007378:	2300      	movs	r3, #0
 800737a:	6053      	str	r3, [r2, #4]
 800737c:	e7de      	b.n	800733c <_malloc_r+0xa8>
 800737e:	230c      	movs	r3, #12
 8007380:	6033      	str	r3, [r6, #0]
 8007382:	4630      	mov	r0, r6
 8007384:	f000 f80c 	bl	80073a0 <__malloc_unlock>
 8007388:	e794      	b.n	80072b4 <_malloc_r+0x20>
 800738a:	6005      	str	r5, [r0, #0]
 800738c:	e7d6      	b.n	800733c <_malloc_r+0xa8>
 800738e:	bf00      	nop
 8007390:	24000284 	.word	0x24000284

08007394 <__malloc_lock>:
 8007394:	4801      	ldr	r0, [pc, #4]	@ (800739c <__malloc_lock+0x8>)
 8007396:	f7ff bf0e 	b.w	80071b6 <__retarget_lock_acquire_recursive>
 800739a:	bf00      	nop
 800739c:	2400027c 	.word	0x2400027c

080073a0 <__malloc_unlock>:
 80073a0:	4801      	ldr	r0, [pc, #4]	@ (80073a8 <__malloc_unlock+0x8>)
 80073a2:	f7ff bf09 	b.w	80071b8 <__retarget_lock_release_recursive>
 80073a6:	bf00      	nop
 80073a8:	2400027c 	.word	0x2400027c

080073ac <__sfputc_r>:
 80073ac:	6893      	ldr	r3, [r2, #8]
 80073ae:	3b01      	subs	r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	b410      	push	{r4}
 80073b4:	6093      	str	r3, [r2, #8]
 80073b6:	da08      	bge.n	80073ca <__sfputc_r+0x1e>
 80073b8:	6994      	ldr	r4, [r2, #24]
 80073ba:	42a3      	cmp	r3, r4
 80073bc:	db01      	blt.n	80073c2 <__sfputc_r+0x16>
 80073be:	290a      	cmp	r1, #10
 80073c0:	d103      	bne.n	80073ca <__sfputc_r+0x1e>
 80073c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c6:	f000 bb6b 	b.w	8007aa0 <__swbuf_r>
 80073ca:	6813      	ldr	r3, [r2, #0]
 80073cc:	1c58      	adds	r0, r3, #1
 80073ce:	6010      	str	r0, [r2, #0]
 80073d0:	7019      	strb	r1, [r3, #0]
 80073d2:	4608      	mov	r0, r1
 80073d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073d8:	4770      	bx	lr

080073da <__sfputs_r>:
 80073da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073dc:	4606      	mov	r6, r0
 80073de:	460f      	mov	r7, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	18d5      	adds	r5, r2, r3
 80073e4:	42ac      	cmp	r4, r5
 80073e6:	d101      	bne.n	80073ec <__sfputs_r+0x12>
 80073e8:	2000      	movs	r0, #0
 80073ea:	e007      	b.n	80073fc <__sfputs_r+0x22>
 80073ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073f0:	463a      	mov	r2, r7
 80073f2:	4630      	mov	r0, r6
 80073f4:	f7ff ffda 	bl	80073ac <__sfputc_r>
 80073f8:	1c43      	adds	r3, r0, #1
 80073fa:	d1f3      	bne.n	80073e4 <__sfputs_r+0xa>
 80073fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007400 <_vfiprintf_r>:
 8007400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007404:	460d      	mov	r5, r1
 8007406:	b09d      	sub	sp, #116	@ 0x74
 8007408:	4614      	mov	r4, r2
 800740a:	4698      	mov	r8, r3
 800740c:	4606      	mov	r6, r0
 800740e:	b118      	cbz	r0, 8007418 <_vfiprintf_r+0x18>
 8007410:	6a03      	ldr	r3, [r0, #32]
 8007412:	b90b      	cbnz	r3, 8007418 <_vfiprintf_r+0x18>
 8007414:	f7ff fdca 	bl	8006fac <__sinit>
 8007418:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800741a:	07d9      	lsls	r1, r3, #31
 800741c:	d405      	bmi.n	800742a <_vfiprintf_r+0x2a>
 800741e:	89ab      	ldrh	r3, [r5, #12]
 8007420:	059a      	lsls	r2, r3, #22
 8007422:	d402      	bmi.n	800742a <_vfiprintf_r+0x2a>
 8007424:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007426:	f7ff fec6 	bl	80071b6 <__retarget_lock_acquire_recursive>
 800742a:	89ab      	ldrh	r3, [r5, #12]
 800742c:	071b      	lsls	r3, r3, #28
 800742e:	d501      	bpl.n	8007434 <_vfiprintf_r+0x34>
 8007430:	692b      	ldr	r3, [r5, #16]
 8007432:	b99b      	cbnz	r3, 800745c <_vfiprintf_r+0x5c>
 8007434:	4629      	mov	r1, r5
 8007436:	4630      	mov	r0, r6
 8007438:	f000 fb70 	bl	8007b1c <__swsetup_r>
 800743c:	b170      	cbz	r0, 800745c <_vfiprintf_r+0x5c>
 800743e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007440:	07dc      	lsls	r4, r3, #31
 8007442:	d504      	bpl.n	800744e <_vfiprintf_r+0x4e>
 8007444:	f04f 30ff 	mov.w	r0, #4294967295
 8007448:	b01d      	add	sp, #116	@ 0x74
 800744a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	0598      	lsls	r0, r3, #22
 8007452:	d4f7      	bmi.n	8007444 <_vfiprintf_r+0x44>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7ff feaf 	bl	80071b8 <__retarget_lock_release_recursive>
 800745a:	e7f3      	b.n	8007444 <_vfiprintf_r+0x44>
 800745c:	2300      	movs	r3, #0
 800745e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007460:	2320      	movs	r3, #32
 8007462:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007466:	f8cd 800c 	str.w	r8, [sp, #12]
 800746a:	2330      	movs	r3, #48	@ 0x30
 800746c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800761c <_vfiprintf_r+0x21c>
 8007470:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007474:	f04f 0901 	mov.w	r9, #1
 8007478:	4623      	mov	r3, r4
 800747a:	469a      	mov	sl, r3
 800747c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007480:	b10a      	cbz	r2, 8007486 <_vfiprintf_r+0x86>
 8007482:	2a25      	cmp	r2, #37	@ 0x25
 8007484:	d1f9      	bne.n	800747a <_vfiprintf_r+0x7a>
 8007486:	ebba 0b04 	subs.w	fp, sl, r4
 800748a:	d00b      	beq.n	80074a4 <_vfiprintf_r+0xa4>
 800748c:	465b      	mov	r3, fp
 800748e:	4622      	mov	r2, r4
 8007490:	4629      	mov	r1, r5
 8007492:	4630      	mov	r0, r6
 8007494:	f7ff ffa1 	bl	80073da <__sfputs_r>
 8007498:	3001      	adds	r0, #1
 800749a:	f000 80a7 	beq.w	80075ec <_vfiprintf_r+0x1ec>
 800749e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074a0:	445a      	add	r2, fp
 80074a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074a4:	f89a 3000 	ldrb.w	r3, [sl]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 809f 	beq.w	80075ec <_vfiprintf_r+0x1ec>
 80074ae:	2300      	movs	r3, #0
 80074b0:	f04f 32ff 	mov.w	r2, #4294967295
 80074b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074b8:	f10a 0a01 	add.w	sl, sl, #1
 80074bc:	9304      	str	r3, [sp, #16]
 80074be:	9307      	str	r3, [sp, #28]
 80074c0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074c4:	931a      	str	r3, [sp, #104]	@ 0x68
 80074c6:	4654      	mov	r4, sl
 80074c8:	2205      	movs	r2, #5
 80074ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074ce:	4853      	ldr	r0, [pc, #332]	@ (800761c <_vfiprintf_r+0x21c>)
 80074d0:	f7f8 ff06 	bl	80002e0 <memchr>
 80074d4:	9a04      	ldr	r2, [sp, #16]
 80074d6:	b9d8      	cbnz	r0, 8007510 <_vfiprintf_r+0x110>
 80074d8:	06d1      	lsls	r1, r2, #27
 80074da:	bf44      	itt	mi
 80074dc:	2320      	movmi	r3, #32
 80074de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074e2:	0713      	lsls	r3, r2, #28
 80074e4:	bf44      	itt	mi
 80074e6:	232b      	movmi	r3, #43	@ 0x2b
 80074e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80074ec:	f89a 3000 	ldrb.w	r3, [sl]
 80074f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80074f2:	d015      	beq.n	8007520 <_vfiprintf_r+0x120>
 80074f4:	9a07      	ldr	r2, [sp, #28]
 80074f6:	4654      	mov	r4, sl
 80074f8:	2000      	movs	r0, #0
 80074fa:	f04f 0c0a 	mov.w	ip, #10
 80074fe:	4621      	mov	r1, r4
 8007500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007504:	3b30      	subs	r3, #48	@ 0x30
 8007506:	2b09      	cmp	r3, #9
 8007508:	d94b      	bls.n	80075a2 <_vfiprintf_r+0x1a2>
 800750a:	b1b0      	cbz	r0, 800753a <_vfiprintf_r+0x13a>
 800750c:	9207      	str	r2, [sp, #28]
 800750e:	e014      	b.n	800753a <_vfiprintf_r+0x13a>
 8007510:	eba0 0308 	sub.w	r3, r0, r8
 8007514:	fa09 f303 	lsl.w	r3, r9, r3
 8007518:	4313      	orrs	r3, r2
 800751a:	9304      	str	r3, [sp, #16]
 800751c:	46a2      	mov	sl, r4
 800751e:	e7d2      	b.n	80074c6 <_vfiprintf_r+0xc6>
 8007520:	9b03      	ldr	r3, [sp, #12]
 8007522:	1d19      	adds	r1, r3, #4
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	9103      	str	r1, [sp, #12]
 8007528:	2b00      	cmp	r3, #0
 800752a:	bfbb      	ittet	lt
 800752c:	425b      	neglt	r3, r3
 800752e:	f042 0202 	orrlt.w	r2, r2, #2
 8007532:	9307      	strge	r3, [sp, #28]
 8007534:	9307      	strlt	r3, [sp, #28]
 8007536:	bfb8      	it	lt
 8007538:	9204      	strlt	r2, [sp, #16]
 800753a:	7823      	ldrb	r3, [r4, #0]
 800753c:	2b2e      	cmp	r3, #46	@ 0x2e
 800753e:	d10a      	bne.n	8007556 <_vfiprintf_r+0x156>
 8007540:	7863      	ldrb	r3, [r4, #1]
 8007542:	2b2a      	cmp	r3, #42	@ 0x2a
 8007544:	d132      	bne.n	80075ac <_vfiprintf_r+0x1ac>
 8007546:	9b03      	ldr	r3, [sp, #12]
 8007548:	1d1a      	adds	r2, r3, #4
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	9203      	str	r2, [sp, #12]
 800754e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007552:	3402      	adds	r4, #2
 8007554:	9305      	str	r3, [sp, #20]
 8007556:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800762c <_vfiprintf_r+0x22c>
 800755a:	7821      	ldrb	r1, [r4, #0]
 800755c:	2203      	movs	r2, #3
 800755e:	4650      	mov	r0, sl
 8007560:	f7f8 febe 	bl	80002e0 <memchr>
 8007564:	b138      	cbz	r0, 8007576 <_vfiprintf_r+0x176>
 8007566:	9b04      	ldr	r3, [sp, #16]
 8007568:	eba0 000a 	sub.w	r0, r0, sl
 800756c:	2240      	movs	r2, #64	@ 0x40
 800756e:	4082      	lsls	r2, r0
 8007570:	4313      	orrs	r3, r2
 8007572:	3401      	adds	r4, #1
 8007574:	9304      	str	r3, [sp, #16]
 8007576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800757a:	4829      	ldr	r0, [pc, #164]	@ (8007620 <_vfiprintf_r+0x220>)
 800757c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007580:	2206      	movs	r2, #6
 8007582:	f7f8 fead 	bl	80002e0 <memchr>
 8007586:	2800      	cmp	r0, #0
 8007588:	d03f      	beq.n	800760a <_vfiprintf_r+0x20a>
 800758a:	4b26      	ldr	r3, [pc, #152]	@ (8007624 <_vfiprintf_r+0x224>)
 800758c:	bb1b      	cbnz	r3, 80075d6 <_vfiprintf_r+0x1d6>
 800758e:	9b03      	ldr	r3, [sp, #12]
 8007590:	3307      	adds	r3, #7
 8007592:	f023 0307 	bic.w	r3, r3, #7
 8007596:	3308      	adds	r3, #8
 8007598:	9303      	str	r3, [sp, #12]
 800759a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800759c:	443b      	add	r3, r7
 800759e:	9309      	str	r3, [sp, #36]	@ 0x24
 80075a0:	e76a      	b.n	8007478 <_vfiprintf_r+0x78>
 80075a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075a6:	460c      	mov	r4, r1
 80075a8:	2001      	movs	r0, #1
 80075aa:	e7a8      	b.n	80074fe <_vfiprintf_r+0xfe>
 80075ac:	2300      	movs	r3, #0
 80075ae:	3401      	adds	r4, #1
 80075b0:	9305      	str	r3, [sp, #20]
 80075b2:	4619      	mov	r1, r3
 80075b4:	f04f 0c0a 	mov.w	ip, #10
 80075b8:	4620      	mov	r0, r4
 80075ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075be:	3a30      	subs	r2, #48	@ 0x30
 80075c0:	2a09      	cmp	r2, #9
 80075c2:	d903      	bls.n	80075cc <_vfiprintf_r+0x1cc>
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d0c6      	beq.n	8007556 <_vfiprintf_r+0x156>
 80075c8:	9105      	str	r1, [sp, #20]
 80075ca:	e7c4      	b.n	8007556 <_vfiprintf_r+0x156>
 80075cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80075d0:	4604      	mov	r4, r0
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f0      	b.n	80075b8 <_vfiprintf_r+0x1b8>
 80075d6:	ab03      	add	r3, sp, #12
 80075d8:	9300      	str	r3, [sp, #0]
 80075da:	462a      	mov	r2, r5
 80075dc:	4b12      	ldr	r3, [pc, #72]	@ (8007628 <_vfiprintf_r+0x228>)
 80075de:	a904      	add	r1, sp, #16
 80075e0:	4630      	mov	r0, r6
 80075e2:	f3af 8000 	nop.w
 80075e6:	4607      	mov	r7, r0
 80075e8:	1c78      	adds	r0, r7, #1
 80075ea:	d1d6      	bne.n	800759a <_vfiprintf_r+0x19a>
 80075ec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80075ee:	07d9      	lsls	r1, r3, #31
 80075f0:	d405      	bmi.n	80075fe <_vfiprintf_r+0x1fe>
 80075f2:	89ab      	ldrh	r3, [r5, #12]
 80075f4:	059a      	lsls	r2, r3, #22
 80075f6:	d402      	bmi.n	80075fe <_vfiprintf_r+0x1fe>
 80075f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80075fa:	f7ff fddd 	bl	80071b8 <__retarget_lock_release_recursive>
 80075fe:	89ab      	ldrh	r3, [r5, #12]
 8007600:	065b      	lsls	r3, r3, #25
 8007602:	f53f af1f 	bmi.w	8007444 <_vfiprintf_r+0x44>
 8007606:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007608:	e71e      	b.n	8007448 <_vfiprintf_r+0x48>
 800760a:	ab03      	add	r3, sp, #12
 800760c:	9300      	str	r3, [sp, #0]
 800760e:	462a      	mov	r2, r5
 8007610:	4b05      	ldr	r3, [pc, #20]	@ (8007628 <_vfiprintf_r+0x228>)
 8007612:	a904      	add	r1, sp, #16
 8007614:	4630      	mov	r0, r6
 8007616:	f000 f879 	bl	800770c <_printf_i>
 800761a:	e7e4      	b.n	80075e6 <_vfiprintf_r+0x1e6>
 800761c:	08007d80 	.word	0x08007d80
 8007620:	08007d8a 	.word	0x08007d8a
 8007624:	00000000 	.word	0x00000000
 8007628:	080073db 	.word	0x080073db
 800762c:	08007d86 	.word	0x08007d86

08007630 <_printf_common>:
 8007630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007634:	4616      	mov	r6, r2
 8007636:	4698      	mov	r8, r3
 8007638:	688a      	ldr	r2, [r1, #8]
 800763a:	690b      	ldr	r3, [r1, #16]
 800763c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007640:	4293      	cmp	r3, r2
 8007642:	bfb8      	it	lt
 8007644:	4613      	movlt	r3, r2
 8007646:	6033      	str	r3, [r6, #0]
 8007648:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800764c:	4607      	mov	r7, r0
 800764e:	460c      	mov	r4, r1
 8007650:	b10a      	cbz	r2, 8007656 <_printf_common+0x26>
 8007652:	3301      	adds	r3, #1
 8007654:	6033      	str	r3, [r6, #0]
 8007656:	6823      	ldr	r3, [r4, #0]
 8007658:	0699      	lsls	r1, r3, #26
 800765a:	bf42      	ittt	mi
 800765c:	6833      	ldrmi	r3, [r6, #0]
 800765e:	3302      	addmi	r3, #2
 8007660:	6033      	strmi	r3, [r6, #0]
 8007662:	6825      	ldr	r5, [r4, #0]
 8007664:	f015 0506 	ands.w	r5, r5, #6
 8007668:	d106      	bne.n	8007678 <_printf_common+0x48>
 800766a:	f104 0a19 	add.w	sl, r4, #25
 800766e:	68e3      	ldr	r3, [r4, #12]
 8007670:	6832      	ldr	r2, [r6, #0]
 8007672:	1a9b      	subs	r3, r3, r2
 8007674:	42ab      	cmp	r3, r5
 8007676:	dc26      	bgt.n	80076c6 <_printf_common+0x96>
 8007678:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	3b00      	subs	r3, #0
 8007680:	bf18      	it	ne
 8007682:	2301      	movne	r3, #1
 8007684:	0692      	lsls	r2, r2, #26
 8007686:	d42b      	bmi.n	80076e0 <_printf_common+0xb0>
 8007688:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800768c:	4641      	mov	r1, r8
 800768e:	4638      	mov	r0, r7
 8007690:	47c8      	blx	r9
 8007692:	3001      	adds	r0, #1
 8007694:	d01e      	beq.n	80076d4 <_printf_common+0xa4>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	6922      	ldr	r2, [r4, #16]
 800769a:	f003 0306 	and.w	r3, r3, #6
 800769e:	2b04      	cmp	r3, #4
 80076a0:	bf02      	ittt	eq
 80076a2:	68e5      	ldreq	r5, [r4, #12]
 80076a4:	6833      	ldreq	r3, [r6, #0]
 80076a6:	1aed      	subeq	r5, r5, r3
 80076a8:	68a3      	ldr	r3, [r4, #8]
 80076aa:	bf0c      	ite	eq
 80076ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076b0:	2500      	movne	r5, #0
 80076b2:	4293      	cmp	r3, r2
 80076b4:	bfc4      	itt	gt
 80076b6:	1a9b      	subgt	r3, r3, r2
 80076b8:	18ed      	addgt	r5, r5, r3
 80076ba:	2600      	movs	r6, #0
 80076bc:	341a      	adds	r4, #26
 80076be:	42b5      	cmp	r5, r6
 80076c0:	d11a      	bne.n	80076f8 <_printf_common+0xc8>
 80076c2:	2000      	movs	r0, #0
 80076c4:	e008      	b.n	80076d8 <_printf_common+0xa8>
 80076c6:	2301      	movs	r3, #1
 80076c8:	4652      	mov	r2, sl
 80076ca:	4641      	mov	r1, r8
 80076cc:	4638      	mov	r0, r7
 80076ce:	47c8      	blx	r9
 80076d0:	3001      	adds	r0, #1
 80076d2:	d103      	bne.n	80076dc <_printf_common+0xac>
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076dc:	3501      	adds	r5, #1
 80076de:	e7c6      	b.n	800766e <_printf_common+0x3e>
 80076e0:	18e1      	adds	r1, r4, r3
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	2030      	movs	r0, #48	@ 0x30
 80076e6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80076ea:	4422      	add	r2, r4
 80076ec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80076f0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80076f4:	3302      	adds	r3, #2
 80076f6:	e7c7      	b.n	8007688 <_printf_common+0x58>
 80076f8:	2301      	movs	r3, #1
 80076fa:	4622      	mov	r2, r4
 80076fc:	4641      	mov	r1, r8
 80076fe:	4638      	mov	r0, r7
 8007700:	47c8      	blx	r9
 8007702:	3001      	adds	r0, #1
 8007704:	d0e6      	beq.n	80076d4 <_printf_common+0xa4>
 8007706:	3601      	adds	r6, #1
 8007708:	e7d9      	b.n	80076be <_printf_common+0x8e>
	...

0800770c <_printf_i>:
 800770c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	7e0f      	ldrb	r7, [r1, #24]
 8007712:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007714:	2f78      	cmp	r7, #120	@ 0x78
 8007716:	4691      	mov	r9, r2
 8007718:	4680      	mov	r8, r0
 800771a:	460c      	mov	r4, r1
 800771c:	469a      	mov	sl, r3
 800771e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007722:	d807      	bhi.n	8007734 <_printf_i+0x28>
 8007724:	2f62      	cmp	r7, #98	@ 0x62
 8007726:	d80a      	bhi.n	800773e <_printf_i+0x32>
 8007728:	2f00      	cmp	r7, #0
 800772a:	f000 80d1 	beq.w	80078d0 <_printf_i+0x1c4>
 800772e:	2f58      	cmp	r7, #88	@ 0x58
 8007730:	f000 80b8 	beq.w	80078a4 <_printf_i+0x198>
 8007734:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007738:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800773c:	e03a      	b.n	80077b4 <_printf_i+0xa8>
 800773e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007742:	2b15      	cmp	r3, #21
 8007744:	d8f6      	bhi.n	8007734 <_printf_i+0x28>
 8007746:	a101      	add	r1, pc, #4	@ (adr r1, 800774c <_printf_i+0x40>)
 8007748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800774c:	080077a5 	.word	0x080077a5
 8007750:	080077b9 	.word	0x080077b9
 8007754:	08007735 	.word	0x08007735
 8007758:	08007735 	.word	0x08007735
 800775c:	08007735 	.word	0x08007735
 8007760:	08007735 	.word	0x08007735
 8007764:	080077b9 	.word	0x080077b9
 8007768:	08007735 	.word	0x08007735
 800776c:	08007735 	.word	0x08007735
 8007770:	08007735 	.word	0x08007735
 8007774:	08007735 	.word	0x08007735
 8007778:	080078b7 	.word	0x080078b7
 800777c:	080077e3 	.word	0x080077e3
 8007780:	08007871 	.word	0x08007871
 8007784:	08007735 	.word	0x08007735
 8007788:	08007735 	.word	0x08007735
 800778c:	080078d9 	.word	0x080078d9
 8007790:	08007735 	.word	0x08007735
 8007794:	080077e3 	.word	0x080077e3
 8007798:	08007735 	.word	0x08007735
 800779c:	08007735 	.word	0x08007735
 80077a0:	08007879 	.word	0x08007879
 80077a4:	6833      	ldr	r3, [r6, #0]
 80077a6:	1d1a      	adds	r2, r3, #4
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	6032      	str	r2, [r6, #0]
 80077ac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077b0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80077b4:	2301      	movs	r3, #1
 80077b6:	e09c      	b.n	80078f2 <_printf_i+0x1e6>
 80077b8:	6833      	ldr	r3, [r6, #0]
 80077ba:	6820      	ldr	r0, [r4, #0]
 80077bc:	1d19      	adds	r1, r3, #4
 80077be:	6031      	str	r1, [r6, #0]
 80077c0:	0606      	lsls	r6, r0, #24
 80077c2:	d501      	bpl.n	80077c8 <_printf_i+0xbc>
 80077c4:	681d      	ldr	r5, [r3, #0]
 80077c6:	e003      	b.n	80077d0 <_printf_i+0xc4>
 80077c8:	0645      	lsls	r5, r0, #25
 80077ca:	d5fb      	bpl.n	80077c4 <_printf_i+0xb8>
 80077cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80077d0:	2d00      	cmp	r5, #0
 80077d2:	da03      	bge.n	80077dc <_printf_i+0xd0>
 80077d4:	232d      	movs	r3, #45	@ 0x2d
 80077d6:	426d      	negs	r5, r5
 80077d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077dc:	4858      	ldr	r0, [pc, #352]	@ (8007940 <_printf_i+0x234>)
 80077de:	230a      	movs	r3, #10
 80077e0:	e011      	b.n	8007806 <_printf_i+0xfa>
 80077e2:	6821      	ldr	r1, [r4, #0]
 80077e4:	6833      	ldr	r3, [r6, #0]
 80077e6:	0608      	lsls	r0, r1, #24
 80077e8:	f853 5b04 	ldr.w	r5, [r3], #4
 80077ec:	d402      	bmi.n	80077f4 <_printf_i+0xe8>
 80077ee:	0649      	lsls	r1, r1, #25
 80077f0:	bf48      	it	mi
 80077f2:	b2ad      	uxthmi	r5, r5
 80077f4:	2f6f      	cmp	r7, #111	@ 0x6f
 80077f6:	4852      	ldr	r0, [pc, #328]	@ (8007940 <_printf_i+0x234>)
 80077f8:	6033      	str	r3, [r6, #0]
 80077fa:	bf14      	ite	ne
 80077fc:	230a      	movne	r3, #10
 80077fe:	2308      	moveq	r3, #8
 8007800:	2100      	movs	r1, #0
 8007802:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007806:	6866      	ldr	r6, [r4, #4]
 8007808:	60a6      	str	r6, [r4, #8]
 800780a:	2e00      	cmp	r6, #0
 800780c:	db05      	blt.n	800781a <_printf_i+0x10e>
 800780e:	6821      	ldr	r1, [r4, #0]
 8007810:	432e      	orrs	r6, r5
 8007812:	f021 0104 	bic.w	r1, r1, #4
 8007816:	6021      	str	r1, [r4, #0]
 8007818:	d04b      	beq.n	80078b2 <_printf_i+0x1a6>
 800781a:	4616      	mov	r6, r2
 800781c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007820:	fb03 5711 	mls	r7, r3, r1, r5
 8007824:	5dc7      	ldrb	r7, [r0, r7]
 8007826:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800782a:	462f      	mov	r7, r5
 800782c:	42bb      	cmp	r3, r7
 800782e:	460d      	mov	r5, r1
 8007830:	d9f4      	bls.n	800781c <_printf_i+0x110>
 8007832:	2b08      	cmp	r3, #8
 8007834:	d10b      	bne.n	800784e <_printf_i+0x142>
 8007836:	6823      	ldr	r3, [r4, #0]
 8007838:	07df      	lsls	r7, r3, #31
 800783a:	d508      	bpl.n	800784e <_printf_i+0x142>
 800783c:	6923      	ldr	r3, [r4, #16]
 800783e:	6861      	ldr	r1, [r4, #4]
 8007840:	4299      	cmp	r1, r3
 8007842:	bfde      	ittt	le
 8007844:	2330      	movle	r3, #48	@ 0x30
 8007846:	f806 3c01 	strble.w	r3, [r6, #-1]
 800784a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800784e:	1b92      	subs	r2, r2, r6
 8007850:	6122      	str	r2, [r4, #16]
 8007852:	f8cd a000 	str.w	sl, [sp]
 8007856:	464b      	mov	r3, r9
 8007858:	aa03      	add	r2, sp, #12
 800785a:	4621      	mov	r1, r4
 800785c:	4640      	mov	r0, r8
 800785e:	f7ff fee7 	bl	8007630 <_printf_common>
 8007862:	3001      	adds	r0, #1
 8007864:	d14a      	bne.n	80078fc <_printf_i+0x1f0>
 8007866:	f04f 30ff 	mov.w	r0, #4294967295
 800786a:	b004      	add	sp, #16
 800786c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007870:	6823      	ldr	r3, [r4, #0]
 8007872:	f043 0320 	orr.w	r3, r3, #32
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	4832      	ldr	r0, [pc, #200]	@ (8007944 <_printf_i+0x238>)
 800787a:	2778      	movs	r7, #120	@ 0x78
 800787c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007880:	6823      	ldr	r3, [r4, #0]
 8007882:	6831      	ldr	r1, [r6, #0]
 8007884:	061f      	lsls	r7, r3, #24
 8007886:	f851 5b04 	ldr.w	r5, [r1], #4
 800788a:	d402      	bmi.n	8007892 <_printf_i+0x186>
 800788c:	065f      	lsls	r7, r3, #25
 800788e:	bf48      	it	mi
 8007890:	b2ad      	uxthmi	r5, r5
 8007892:	6031      	str	r1, [r6, #0]
 8007894:	07d9      	lsls	r1, r3, #31
 8007896:	bf44      	itt	mi
 8007898:	f043 0320 	orrmi.w	r3, r3, #32
 800789c:	6023      	strmi	r3, [r4, #0]
 800789e:	b11d      	cbz	r5, 80078a8 <_printf_i+0x19c>
 80078a0:	2310      	movs	r3, #16
 80078a2:	e7ad      	b.n	8007800 <_printf_i+0xf4>
 80078a4:	4826      	ldr	r0, [pc, #152]	@ (8007940 <_printf_i+0x234>)
 80078a6:	e7e9      	b.n	800787c <_printf_i+0x170>
 80078a8:	6823      	ldr	r3, [r4, #0]
 80078aa:	f023 0320 	bic.w	r3, r3, #32
 80078ae:	6023      	str	r3, [r4, #0]
 80078b0:	e7f6      	b.n	80078a0 <_printf_i+0x194>
 80078b2:	4616      	mov	r6, r2
 80078b4:	e7bd      	b.n	8007832 <_printf_i+0x126>
 80078b6:	6833      	ldr	r3, [r6, #0]
 80078b8:	6825      	ldr	r5, [r4, #0]
 80078ba:	6961      	ldr	r1, [r4, #20]
 80078bc:	1d18      	adds	r0, r3, #4
 80078be:	6030      	str	r0, [r6, #0]
 80078c0:	062e      	lsls	r6, r5, #24
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	d501      	bpl.n	80078ca <_printf_i+0x1be>
 80078c6:	6019      	str	r1, [r3, #0]
 80078c8:	e002      	b.n	80078d0 <_printf_i+0x1c4>
 80078ca:	0668      	lsls	r0, r5, #25
 80078cc:	d5fb      	bpl.n	80078c6 <_printf_i+0x1ba>
 80078ce:	8019      	strh	r1, [r3, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	6123      	str	r3, [r4, #16]
 80078d4:	4616      	mov	r6, r2
 80078d6:	e7bc      	b.n	8007852 <_printf_i+0x146>
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	1d1a      	adds	r2, r3, #4
 80078dc:	6032      	str	r2, [r6, #0]
 80078de:	681e      	ldr	r6, [r3, #0]
 80078e0:	6862      	ldr	r2, [r4, #4]
 80078e2:	2100      	movs	r1, #0
 80078e4:	4630      	mov	r0, r6
 80078e6:	f7f8 fcfb 	bl	80002e0 <memchr>
 80078ea:	b108      	cbz	r0, 80078f0 <_printf_i+0x1e4>
 80078ec:	1b80      	subs	r0, r0, r6
 80078ee:	6060      	str	r0, [r4, #4]
 80078f0:	6863      	ldr	r3, [r4, #4]
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	2300      	movs	r3, #0
 80078f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078fa:	e7aa      	b.n	8007852 <_printf_i+0x146>
 80078fc:	6923      	ldr	r3, [r4, #16]
 80078fe:	4632      	mov	r2, r6
 8007900:	4649      	mov	r1, r9
 8007902:	4640      	mov	r0, r8
 8007904:	47d0      	blx	sl
 8007906:	3001      	adds	r0, #1
 8007908:	d0ad      	beq.n	8007866 <_printf_i+0x15a>
 800790a:	6823      	ldr	r3, [r4, #0]
 800790c:	079b      	lsls	r3, r3, #30
 800790e:	d413      	bmi.n	8007938 <_printf_i+0x22c>
 8007910:	68e0      	ldr	r0, [r4, #12]
 8007912:	9b03      	ldr	r3, [sp, #12]
 8007914:	4298      	cmp	r0, r3
 8007916:	bfb8      	it	lt
 8007918:	4618      	movlt	r0, r3
 800791a:	e7a6      	b.n	800786a <_printf_i+0x15e>
 800791c:	2301      	movs	r3, #1
 800791e:	4632      	mov	r2, r6
 8007920:	4649      	mov	r1, r9
 8007922:	4640      	mov	r0, r8
 8007924:	47d0      	blx	sl
 8007926:	3001      	adds	r0, #1
 8007928:	d09d      	beq.n	8007866 <_printf_i+0x15a>
 800792a:	3501      	adds	r5, #1
 800792c:	68e3      	ldr	r3, [r4, #12]
 800792e:	9903      	ldr	r1, [sp, #12]
 8007930:	1a5b      	subs	r3, r3, r1
 8007932:	42ab      	cmp	r3, r5
 8007934:	dcf2      	bgt.n	800791c <_printf_i+0x210>
 8007936:	e7eb      	b.n	8007910 <_printf_i+0x204>
 8007938:	2500      	movs	r5, #0
 800793a:	f104 0619 	add.w	r6, r4, #25
 800793e:	e7f5      	b.n	800792c <_printf_i+0x220>
 8007940:	08007d91 	.word	0x08007d91
 8007944:	08007da2 	.word	0x08007da2

08007948 <__sflush_r>:
 8007948:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800794c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007950:	0716      	lsls	r6, r2, #28
 8007952:	4605      	mov	r5, r0
 8007954:	460c      	mov	r4, r1
 8007956:	d454      	bmi.n	8007a02 <__sflush_r+0xba>
 8007958:	684b      	ldr	r3, [r1, #4]
 800795a:	2b00      	cmp	r3, #0
 800795c:	dc02      	bgt.n	8007964 <__sflush_r+0x1c>
 800795e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007960:	2b00      	cmp	r3, #0
 8007962:	dd48      	ble.n	80079f6 <__sflush_r+0xae>
 8007964:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007966:	2e00      	cmp	r6, #0
 8007968:	d045      	beq.n	80079f6 <__sflush_r+0xae>
 800796a:	2300      	movs	r3, #0
 800796c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007970:	682f      	ldr	r7, [r5, #0]
 8007972:	6a21      	ldr	r1, [r4, #32]
 8007974:	602b      	str	r3, [r5, #0]
 8007976:	d030      	beq.n	80079da <__sflush_r+0x92>
 8007978:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800797a:	89a3      	ldrh	r3, [r4, #12]
 800797c:	0759      	lsls	r1, r3, #29
 800797e:	d505      	bpl.n	800798c <__sflush_r+0x44>
 8007980:	6863      	ldr	r3, [r4, #4]
 8007982:	1ad2      	subs	r2, r2, r3
 8007984:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007986:	b10b      	cbz	r3, 800798c <__sflush_r+0x44>
 8007988:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800798a:	1ad2      	subs	r2, r2, r3
 800798c:	2300      	movs	r3, #0
 800798e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007990:	6a21      	ldr	r1, [r4, #32]
 8007992:	4628      	mov	r0, r5
 8007994:	47b0      	blx	r6
 8007996:	1c43      	adds	r3, r0, #1
 8007998:	89a3      	ldrh	r3, [r4, #12]
 800799a:	d106      	bne.n	80079aa <__sflush_r+0x62>
 800799c:	6829      	ldr	r1, [r5, #0]
 800799e:	291d      	cmp	r1, #29
 80079a0:	d82b      	bhi.n	80079fa <__sflush_r+0xb2>
 80079a2:	4a2a      	ldr	r2, [pc, #168]	@ (8007a4c <__sflush_r+0x104>)
 80079a4:	40ca      	lsrs	r2, r1
 80079a6:	07d6      	lsls	r6, r2, #31
 80079a8:	d527      	bpl.n	80079fa <__sflush_r+0xb2>
 80079aa:	2200      	movs	r2, #0
 80079ac:	6062      	str	r2, [r4, #4]
 80079ae:	04d9      	lsls	r1, r3, #19
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	6022      	str	r2, [r4, #0]
 80079b4:	d504      	bpl.n	80079c0 <__sflush_r+0x78>
 80079b6:	1c42      	adds	r2, r0, #1
 80079b8:	d101      	bne.n	80079be <__sflush_r+0x76>
 80079ba:	682b      	ldr	r3, [r5, #0]
 80079bc:	b903      	cbnz	r3, 80079c0 <__sflush_r+0x78>
 80079be:	6560      	str	r0, [r4, #84]	@ 0x54
 80079c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80079c2:	602f      	str	r7, [r5, #0]
 80079c4:	b1b9      	cbz	r1, 80079f6 <__sflush_r+0xae>
 80079c6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80079ca:	4299      	cmp	r1, r3
 80079cc:	d002      	beq.n	80079d4 <__sflush_r+0x8c>
 80079ce:	4628      	mov	r0, r5
 80079d0:	f7ff fbf4 	bl	80071bc <_free_r>
 80079d4:	2300      	movs	r3, #0
 80079d6:	6363      	str	r3, [r4, #52]	@ 0x34
 80079d8:	e00d      	b.n	80079f6 <__sflush_r+0xae>
 80079da:	2301      	movs	r3, #1
 80079dc:	4628      	mov	r0, r5
 80079de:	47b0      	blx	r6
 80079e0:	4602      	mov	r2, r0
 80079e2:	1c50      	adds	r0, r2, #1
 80079e4:	d1c9      	bne.n	800797a <__sflush_r+0x32>
 80079e6:	682b      	ldr	r3, [r5, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0c6      	beq.n	800797a <__sflush_r+0x32>
 80079ec:	2b1d      	cmp	r3, #29
 80079ee:	d001      	beq.n	80079f4 <__sflush_r+0xac>
 80079f0:	2b16      	cmp	r3, #22
 80079f2:	d11e      	bne.n	8007a32 <__sflush_r+0xea>
 80079f4:	602f      	str	r7, [r5, #0]
 80079f6:	2000      	movs	r0, #0
 80079f8:	e022      	b.n	8007a40 <__sflush_r+0xf8>
 80079fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80079fe:	b21b      	sxth	r3, r3
 8007a00:	e01b      	b.n	8007a3a <__sflush_r+0xf2>
 8007a02:	690f      	ldr	r7, [r1, #16]
 8007a04:	2f00      	cmp	r7, #0
 8007a06:	d0f6      	beq.n	80079f6 <__sflush_r+0xae>
 8007a08:	0793      	lsls	r3, r2, #30
 8007a0a:	680e      	ldr	r6, [r1, #0]
 8007a0c:	bf08      	it	eq
 8007a0e:	694b      	ldreq	r3, [r1, #20]
 8007a10:	600f      	str	r7, [r1, #0]
 8007a12:	bf18      	it	ne
 8007a14:	2300      	movne	r3, #0
 8007a16:	eba6 0807 	sub.w	r8, r6, r7
 8007a1a:	608b      	str	r3, [r1, #8]
 8007a1c:	f1b8 0f00 	cmp.w	r8, #0
 8007a20:	dde9      	ble.n	80079f6 <__sflush_r+0xae>
 8007a22:	6a21      	ldr	r1, [r4, #32]
 8007a24:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007a26:	4643      	mov	r3, r8
 8007a28:	463a      	mov	r2, r7
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	47b0      	blx	r6
 8007a2e:	2800      	cmp	r0, #0
 8007a30:	dc08      	bgt.n	8007a44 <__sflush_r+0xfc>
 8007a32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a3a:	81a3      	strh	r3, [r4, #12]
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a44:	4407      	add	r7, r0
 8007a46:	eba8 0800 	sub.w	r8, r8, r0
 8007a4a:	e7e7      	b.n	8007a1c <__sflush_r+0xd4>
 8007a4c:	20400001 	.word	0x20400001

08007a50 <_fflush_r>:
 8007a50:	b538      	push	{r3, r4, r5, lr}
 8007a52:	690b      	ldr	r3, [r1, #16]
 8007a54:	4605      	mov	r5, r0
 8007a56:	460c      	mov	r4, r1
 8007a58:	b913      	cbnz	r3, 8007a60 <_fflush_r+0x10>
 8007a5a:	2500      	movs	r5, #0
 8007a5c:	4628      	mov	r0, r5
 8007a5e:	bd38      	pop	{r3, r4, r5, pc}
 8007a60:	b118      	cbz	r0, 8007a6a <_fflush_r+0x1a>
 8007a62:	6a03      	ldr	r3, [r0, #32]
 8007a64:	b90b      	cbnz	r3, 8007a6a <_fflush_r+0x1a>
 8007a66:	f7ff faa1 	bl	8006fac <__sinit>
 8007a6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d0f3      	beq.n	8007a5a <_fflush_r+0xa>
 8007a72:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007a74:	07d0      	lsls	r0, r2, #31
 8007a76:	d404      	bmi.n	8007a82 <_fflush_r+0x32>
 8007a78:	0599      	lsls	r1, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_fflush_r+0x32>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a7e:	f7ff fb9a 	bl	80071b6 <__retarget_lock_acquire_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	4621      	mov	r1, r4
 8007a86:	f7ff ff5f 	bl	8007948 <__sflush_r>
 8007a8a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007a8c:	07da      	lsls	r2, r3, #31
 8007a8e:	4605      	mov	r5, r0
 8007a90:	d4e4      	bmi.n	8007a5c <_fflush_r+0xc>
 8007a92:	89a3      	ldrh	r3, [r4, #12]
 8007a94:	059b      	lsls	r3, r3, #22
 8007a96:	d4e1      	bmi.n	8007a5c <_fflush_r+0xc>
 8007a98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007a9a:	f7ff fb8d 	bl	80071b8 <__retarget_lock_release_recursive>
 8007a9e:	e7dd      	b.n	8007a5c <_fflush_r+0xc>

08007aa0 <__swbuf_r>:
 8007aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa2:	460e      	mov	r6, r1
 8007aa4:	4614      	mov	r4, r2
 8007aa6:	4605      	mov	r5, r0
 8007aa8:	b118      	cbz	r0, 8007ab2 <__swbuf_r+0x12>
 8007aaa:	6a03      	ldr	r3, [r0, #32]
 8007aac:	b90b      	cbnz	r3, 8007ab2 <__swbuf_r+0x12>
 8007aae:	f7ff fa7d 	bl	8006fac <__sinit>
 8007ab2:	69a3      	ldr	r3, [r4, #24]
 8007ab4:	60a3      	str	r3, [r4, #8]
 8007ab6:	89a3      	ldrh	r3, [r4, #12]
 8007ab8:	071a      	lsls	r2, r3, #28
 8007aba:	d501      	bpl.n	8007ac0 <__swbuf_r+0x20>
 8007abc:	6923      	ldr	r3, [r4, #16]
 8007abe:	b943      	cbnz	r3, 8007ad2 <__swbuf_r+0x32>
 8007ac0:	4621      	mov	r1, r4
 8007ac2:	4628      	mov	r0, r5
 8007ac4:	f000 f82a 	bl	8007b1c <__swsetup_r>
 8007ac8:	b118      	cbz	r0, 8007ad2 <__swbuf_r+0x32>
 8007aca:	f04f 37ff 	mov.w	r7, #4294967295
 8007ace:	4638      	mov	r0, r7
 8007ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ad2:	6823      	ldr	r3, [r4, #0]
 8007ad4:	6922      	ldr	r2, [r4, #16]
 8007ad6:	1a98      	subs	r0, r3, r2
 8007ad8:	6963      	ldr	r3, [r4, #20]
 8007ada:	b2f6      	uxtb	r6, r6
 8007adc:	4283      	cmp	r3, r0
 8007ade:	4637      	mov	r7, r6
 8007ae0:	dc05      	bgt.n	8007aee <__swbuf_r+0x4e>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f7ff ffb3 	bl	8007a50 <_fflush_r>
 8007aea:	2800      	cmp	r0, #0
 8007aec:	d1ed      	bne.n	8007aca <__swbuf_r+0x2a>
 8007aee:	68a3      	ldr	r3, [r4, #8]
 8007af0:	3b01      	subs	r3, #1
 8007af2:	60a3      	str	r3, [r4, #8]
 8007af4:	6823      	ldr	r3, [r4, #0]
 8007af6:	1c5a      	adds	r2, r3, #1
 8007af8:	6022      	str	r2, [r4, #0]
 8007afa:	701e      	strb	r6, [r3, #0]
 8007afc:	6962      	ldr	r2, [r4, #20]
 8007afe:	1c43      	adds	r3, r0, #1
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d004      	beq.n	8007b0e <__swbuf_r+0x6e>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	07db      	lsls	r3, r3, #31
 8007b08:	d5e1      	bpl.n	8007ace <__swbuf_r+0x2e>
 8007b0a:	2e0a      	cmp	r6, #10
 8007b0c:	d1df      	bne.n	8007ace <__swbuf_r+0x2e>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f7ff ff9d 	bl	8007a50 <_fflush_r>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	d0d9      	beq.n	8007ace <__swbuf_r+0x2e>
 8007b1a:	e7d6      	b.n	8007aca <__swbuf_r+0x2a>

08007b1c <__swsetup_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	4b29      	ldr	r3, [pc, #164]	@ (8007bc4 <__swsetup_r+0xa8>)
 8007b20:	4605      	mov	r5, r0
 8007b22:	6818      	ldr	r0, [r3, #0]
 8007b24:	460c      	mov	r4, r1
 8007b26:	b118      	cbz	r0, 8007b30 <__swsetup_r+0x14>
 8007b28:	6a03      	ldr	r3, [r0, #32]
 8007b2a:	b90b      	cbnz	r3, 8007b30 <__swsetup_r+0x14>
 8007b2c:	f7ff fa3e 	bl	8006fac <__sinit>
 8007b30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b34:	0719      	lsls	r1, r3, #28
 8007b36:	d422      	bmi.n	8007b7e <__swsetup_r+0x62>
 8007b38:	06da      	lsls	r2, r3, #27
 8007b3a:	d407      	bmi.n	8007b4c <__swsetup_r+0x30>
 8007b3c:	2209      	movs	r2, #9
 8007b3e:	602a      	str	r2, [r5, #0]
 8007b40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b44:	81a3      	strh	r3, [r4, #12]
 8007b46:	f04f 30ff 	mov.w	r0, #4294967295
 8007b4a:	e033      	b.n	8007bb4 <__swsetup_r+0x98>
 8007b4c:	0758      	lsls	r0, r3, #29
 8007b4e:	d512      	bpl.n	8007b76 <__swsetup_r+0x5a>
 8007b50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007b52:	b141      	cbz	r1, 8007b66 <__swsetup_r+0x4a>
 8007b54:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007b58:	4299      	cmp	r1, r3
 8007b5a:	d002      	beq.n	8007b62 <__swsetup_r+0x46>
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f7ff fb2d 	bl	80071bc <_free_r>
 8007b62:	2300      	movs	r3, #0
 8007b64:	6363      	str	r3, [r4, #52]	@ 0x34
 8007b66:	89a3      	ldrh	r3, [r4, #12]
 8007b68:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007b6c:	81a3      	strh	r3, [r4, #12]
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6063      	str	r3, [r4, #4]
 8007b72:	6923      	ldr	r3, [r4, #16]
 8007b74:	6023      	str	r3, [r4, #0]
 8007b76:	89a3      	ldrh	r3, [r4, #12]
 8007b78:	f043 0308 	orr.w	r3, r3, #8
 8007b7c:	81a3      	strh	r3, [r4, #12]
 8007b7e:	6923      	ldr	r3, [r4, #16]
 8007b80:	b94b      	cbnz	r3, 8007b96 <__swsetup_r+0x7a>
 8007b82:	89a3      	ldrh	r3, [r4, #12]
 8007b84:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007b88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b8c:	d003      	beq.n	8007b96 <__swsetup_r+0x7a>
 8007b8e:	4621      	mov	r1, r4
 8007b90:	4628      	mov	r0, r5
 8007b92:	f000 f84f 	bl	8007c34 <__smakebuf_r>
 8007b96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b9a:	f013 0201 	ands.w	r2, r3, #1
 8007b9e:	d00a      	beq.n	8007bb6 <__swsetup_r+0x9a>
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	60a2      	str	r2, [r4, #8]
 8007ba4:	6962      	ldr	r2, [r4, #20]
 8007ba6:	4252      	negs	r2, r2
 8007ba8:	61a2      	str	r2, [r4, #24]
 8007baa:	6922      	ldr	r2, [r4, #16]
 8007bac:	b942      	cbnz	r2, 8007bc0 <__swsetup_r+0xa4>
 8007bae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007bb2:	d1c5      	bne.n	8007b40 <__swsetup_r+0x24>
 8007bb4:	bd38      	pop	{r3, r4, r5, pc}
 8007bb6:	0799      	lsls	r1, r3, #30
 8007bb8:	bf58      	it	pl
 8007bba:	6962      	ldrpl	r2, [r4, #20]
 8007bbc:	60a2      	str	r2, [r4, #8]
 8007bbe:	e7f4      	b.n	8007baa <__swsetup_r+0x8e>
 8007bc0:	2000      	movs	r0, #0
 8007bc2:	e7f7      	b.n	8007bb4 <__swsetup_r+0x98>
 8007bc4:	24000020 	.word	0x24000020

08007bc8 <_sbrk_r>:
 8007bc8:	b538      	push	{r3, r4, r5, lr}
 8007bca:	4d06      	ldr	r5, [pc, #24]	@ (8007be4 <_sbrk_r+0x1c>)
 8007bcc:	2300      	movs	r3, #0
 8007bce:	4604      	mov	r4, r0
 8007bd0:	4608      	mov	r0, r1
 8007bd2:	602b      	str	r3, [r5, #0]
 8007bd4:	f7f9 f8e8 	bl	8000da8 <_sbrk>
 8007bd8:	1c43      	adds	r3, r0, #1
 8007bda:	d102      	bne.n	8007be2 <_sbrk_r+0x1a>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	b103      	cbz	r3, 8007be2 <_sbrk_r+0x1a>
 8007be0:	6023      	str	r3, [r4, #0]
 8007be2:	bd38      	pop	{r3, r4, r5, pc}
 8007be4:	24000278 	.word	0x24000278

08007be8 <__swhatbuf_r>:
 8007be8:	b570      	push	{r4, r5, r6, lr}
 8007bea:	460c      	mov	r4, r1
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	2900      	cmp	r1, #0
 8007bf2:	b096      	sub	sp, #88	@ 0x58
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	461e      	mov	r6, r3
 8007bf8:	da0d      	bge.n	8007c16 <__swhatbuf_r+0x2e>
 8007bfa:	89a3      	ldrh	r3, [r4, #12]
 8007bfc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007c00:	f04f 0100 	mov.w	r1, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2340      	movne	r3, #64	@ 0x40
 8007c08:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007c0c:	2000      	movs	r0, #0
 8007c0e:	6031      	str	r1, [r6, #0]
 8007c10:	602b      	str	r3, [r5, #0]
 8007c12:	b016      	add	sp, #88	@ 0x58
 8007c14:	bd70      	pop	{r4, r5, r6, pc}
 8007c16:	466a      	mov	r2, sp
 8007c18:	f000 f848 	bl	8007cac <_fstat_r>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	dbec      	blt.n	8007bfa <__swhatbuf_r+0x12>
 8007c20:	9901      	ldr	r1, [sp, #4]
 8007c22:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c26:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c2a:	4259      	negs	r1, r3
 8007c2c:	4159      	adcs	r1, r3
 8007c2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c32:	e7eb      	b.n	8007c0c <__swhatbuf_r+0x24>

08007c34 <__smakebuf_r>:
 8007c34:	898b      	ldrh	r3, [r1, #12]
 8007c36:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c38:	079d      	lsls	r5, r3, #30
 8007c3a:	4606      	mov	r6, r0
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	d507      	bpl.n	8007c50 <__smakebuf_r+0x1c>
 8007c40:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	6123      	str	r3, [r4, #16]
 8007c48:	2301      	movs	r3, #1
 8007c4a:	6163      	str	r3, [r4, #20]
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c50:	ab01      	add	r3, sp, #4
 8007c52:	466a      	mov	r2, sp
 8007c54:	f7ff ffc8 	bl	8007be8 <__swhatbuf_r>
 8007c58:	9f00      	ldr	r7, [sp, #0]
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	4639      	mov	r1, r7
 8007c5e:	4630      	mov	r0, r6
 8007c60:	f7ff fb18 	bl	8007294 <_malloc_r>
 8007c64:	b948      	cbnz	r0, 8007c7a <__smakebuf_r+0x46>
 8007c66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c6a:	059a      	lsls	r2, r3, #22
 8007c6c:	d4ee      	bmi.n	8007c4c <__smakebuf_r+0x18>
 8007c6e:	f023 0303 	bic.w	r3, r3, #3
 8007c72:	f043 0302 	orr.w	r3, r3, #2
 8007c76:	81a3      	strh	r3, [r4, #12]
 8007c78:	e7e2      	b.n	8007c40 <__smakebuf_r+0xc>
 8007c7a:	89a3      	ldrh	r3, [r4, #12]
 8007c7c:	6020      	str	r0, [r4, #0]
 8007c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c82:	81a3      	strh	r3, [r4, #12]
 8007c84:	9b01      	ldr	r3, [sp, #4]
 8007c86:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c8a:	b15b      	cbz	r3, 8007ca4 <__smakebuf_r+0x70>
 8007c8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c90:	4630      	mov	r0, r6
 8007c92:	f000 f81d 	bl	8007cd0 <_isatty_r>
 8007c96:	b128      	cbz	r0, 8007ca4 <__smakebuf_r+0x70>
 8007c98:	89a3      	ldrh	r3, [r4, #12]
 8007c9a:	f023 0303 	bic.w	r3, r3, #3
 8007c9e:	f043 0301 	orr.w	r3, r3, #1
 8007ca2:	81a3      	strh	r3, [r4, #12]
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	431d      	orrs	r5, r3
 8007ca8:	81a5      	strh	r5, [r4, #12]
 8007caa:	e7cf      	b.n	8007c4c <__smakebuf_r+0x18>

08007cac <_fstat_r>:
 8007cac:	b538      	push	{r3, r4, r5, lr}
 8007cae:	4d07      	ldr	r5, [pc, #28]	@ (8007ccc <_fstat_r+0x20>)
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	4604      	mov	r4, r0
 8007cb4:	4608      	mov	r0, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	602b      	str	r3, [r5, #0]
 8007cba:	f7f9 f84c 	bl	8000d56 <_fstat>
 8007cbe:	1c43      	adds	r3, r0, #1
 8007cc0:	d102      	bne.n	8007cc8 <_fstat_r+0x1c>
 8007cc2:	682b      	ldr	r3, [r5, #0]
 8007cc4:	b103      	cbz	r3, 8007cc8 <_fstat_r+0x1c>
 8007cc6:	6023      	str	r3, [r4, #0]
 8007cc8:	bd38      	pop	{r3, r4, r5, pc}
 8007cca:	bf00      	nop
 8007ccc:	24000278 	.word	0x24000278

08007cd0 <_isatty_r>:
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4d06      	ldr	r5, [pc, #24]	@ (8007cec <_isatty_r+0x1c>)
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	4608      	mov	r0, r1
 8007cda:	602b      	str	r3, [r5, #0]
 8007cdc:	f7f9 f84b 	bl	8000d76 <_isatty>
 8007ce0:	1c43      	adds	r3, r0, #1
 8007ce2:	d102      	bne.n	8007cea <_isatty_r+0x1a>
 8007ce4:	682b      	ldr	r3, [r5, #0]
 8007ce6:	b103      	cbz	r3, 8007cea <_isatty_r+0x1a>
 8007ce8:	6023      	str	r3, [r4, #0]
 8007cea:	bd38      	pop	{r3, r4, r5, pc}
 8007cec:	24000278 	.word	0x24000278

08007cf0 <_init>:
 8007cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cf2:	bf00      	nop
 8007cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cf6:	bc08      	pop	{r3}
 8007cf8:	469e      	mov	lr, r3
 8007cfa:	4770      	bx	lr

08007cfc <_fini>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	bf00      	nop
 8007d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d02:	bc08      	pop	{r3}
 8007d04:	469e      	mov	lr, r3
 8007d06:	4770      	bx	lr
