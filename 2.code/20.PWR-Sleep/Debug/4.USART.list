
4.USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007348  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080075e0  080075e0  000085e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007618  08007618  00008618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007620  08007620  00008620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007624  08007624  00008624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007628  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  24000010  08007638  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400010c  08007638  0000910c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011ba7  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000260f  00000000  00000000  0001abe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b68  00000000  00000000  0001d1f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008b4  00000000  00000000  0001dd60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371ec  00000000  00000000  0001e614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001501c  00000000  00000000  00055800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001595b1  00000000  00000000  0006a81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c3dcd  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d2c  00000000  00000000  001c3e10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001c6b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080075c8 	.word	0x080075c8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	080075c8 	.word	0x080075c8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fcde 	bl	8001ffc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fb21 	bl	8001c9c <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 faf4 	bl	8001c9c <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fae8 	bl	8001c9c <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fc62 	bl	8001ffc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fc5d 	bl	8001ffc <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fa9f 	bl	8001c9c <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fa91 	bl	8001c9c <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fa08 	bl	8000bb4 <MX_USART1_UART_Init>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ae:	f000 f8bd 	bl	800092c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fae9 	bl	8000d88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f83f 	bl	8000838 <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007ba:	f7ff ffe9 	bl	8000790 <bsp_init>
  // 初始化缓冲区指针
  rx_buffer.head = 0;
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <main+0x84>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  rx_buffer.tail = 0;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <main+0x84>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  // 启动接收中断
  HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	4917      	ldr	r1, [pc, #92]	@ (8000830 <main+0x88>)
 80007d2:	4818      	ldr	r0, [pc, #96]	@ (8000834 <main+0x8c>)
 80007d4:	f004 fb56 	bl	8004e84 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx_buffer.head != rx_buffer.tail) // 检查缓冲区是否有数据
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <main+0x84>)
 80007da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <main+0x84>)
 80007e2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d0f5      	beq.n	80007d8 <main+0x30>
	  {
	      // 从缓冲区读取数据
	      uint8_t tx_byte = rx_buffer.data[rx_buffer.tail];
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <main+0x84>)
 80007ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <main+0x84>)
 80007f8:	5c9b      	ldrb	r3, [r3, r2]
 80007fa:	71fb      	strb	r3, [r7, #7]
	      rx_buffer.tail = (rx_buffer.tail + 1) % BUFFER_SIZE;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <main+0x84>)
 80007fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	425a      	negs	r2, r3
 8000808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800080c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000810:	bf58      	it	pl
 8000812:	4253      	negpl	r3, r2
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	@ (800082c <main+0x84>)
 8000818:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	      // 发送数据
	      HAL_UART_Transmit(&huart1, &tx_byte, 1, HAL_MAX_DELAY);
 800081c:	1df9      	adds	r1, r7, #7
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2201      	movs	r2, #1
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <main+0x8c>)
 8000826:	f004 fa9f 	bl	8004d68 <HAL_UART_Transmit>
	  if(rx_buffer.head != rx_buffer.tail) // 检查缓冲区是否有数据
 800082a:	e7d5      	b.n	80007d8 <main+0x30>
 800082c:	2400002c 	.word	0x2400002c
 8000830:	24000070 	.word	0x24000070
 8000834:	24000074 	.word	0x24000074

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	@ 0x70
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	224c      	movs	r2, #76	@ 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fe92 	bl	8007570 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fe8c 	bl	8007570 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000858:	2002      	movs	r0, #2
 800085a:	f001 fbe9 	bl	8002030 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <SystemClock_Config+0xec>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <SystemClock_Config+0xec>)
 8000868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <SystemClock_Config+0xec>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <SystemClock_Config+0xf0>)
 800087a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087c:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <SystemClock_Config+0xf0>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <SystemClock_Config+0xf0>)
 8000886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <SystemClock_Config+0xec>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008b6:	23f0      	movs	r3, #240	@ 0xf0
 80008b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008c6:	2308      	movs	r3, #8
 80008c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fbe4 	bl	80020a4 <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008e2:	f000 f84f 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	233f      	movs	r3, #63	@ 0x3f
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008f2:	2308      	movs	r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f6:	2340      	movs	r3, #64	@ 0x40
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2104      	movs	r1, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f002 f823 	bl	8002958 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000918:	f000 f834 	bl	8000984 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024800 	.word	0x58024800
 8000928:	58000400 	.word	0x58000400

0800092c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800093e:	f000 fbd1 	bl	80010e4 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000942:	2301      	movs	r3, #1
 8000944:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000946:	2300      	movs	r3, #0
 8000948:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800094e:	231f      	movs	r3, #31
 8000950:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000952:	2387      	movs	r3, #135	@ 0x87
 8000954:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000956:	2300      	movs	r3, #0
 8000958:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800095a:	2300      	movs	r3, #0
 800095c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800095e:	2301      	movs	r3, #1
 8000960:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000962:	2301      	movs	r3, #1
 8000964:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800096e:	463b      	mov	r3, r7
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fbef 	bl	8001154 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fbcc 	bl	8001114 <HAL_MPU_Enable>

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_MspInit+0x30>)
 8000998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800099c:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x30>)
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x30>)
 80009a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	58024400 	.word	0x58024400

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 fa27 	bl	8000e6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <USART1_IRQHandler+0x10>)
 8000a36:	f004 fa71 	bl	8004f1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000074 	.word	0x24000074

08000a44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a48:	4b43      	ldr	r3, [pc, #268]	@ (8000b58 <SystemInit+0x114>)
 8000a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a4e:	4a42      	ldr	r2, [pc, #264]	@ (8000b58 <SystemInit+0x114>)
 8000a50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a58:	4b40      	ldr	r3, [pc, #256]	@ (8000b5c <SystemInit+0x118>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	f003 030f 	and.w	r3, r3, #15
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	d807      	bhi.n	8000a74 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a64:	4b3d      	ldr	r3, [pc, #244]	@ (8000b5c <SystemInit+0x118>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f023 030f 	bic.w	r3, r3, #15
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	@ (8000b5c <SystemInit+0x118>)
 8000a6e:	f043 0307 	orr.w	r3, r3, #7
 8000a72:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a74:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <SystemInit+0x11c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a39      	ldr	r2, [pc, #228]	@ (8000b60 <SystemInit+0x11c>)
 8000a7a:	f043 0301 	orr.w	r3, r3, #1
 8000a7e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a80:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <SystemInit+0x11c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a86:	4b36      	ldr	r3, [pc, #216]	@ (8000b60 <SystemInit+0x11c>)
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	4935      	ldr	r1, [pc, #212]	@ (8000b60 <SystemInit+0x11c>)
 8000a8c:	4b35      	ldr	r3, [pc, #212]	@ (8000b64 <SystemInit+0x120>)
 8000a8e:	4013      	ands	r3, r2
 8000a90:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a92:	4b32      	ldr	r3, [pc, #200]	@ (8000b5c <SystemInit+0x118>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d007      	beq.n	8000aae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a9e:	4b2f      	ldr	r3, [pc, #188]	@ (8000b5c <SystemInit+0x118>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f023 030f 	bic.w	r3, r3, #15
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8000b5c <SystemInit+0x118>)
 8000aa8:	f043 0307 	orr.w	r3, r3, #7
 8000aac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aae:	4b2c      	ldr	r3, [pc, #176]	@ (8000b60 <SystemInit+0x11c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8000b60 <SystemInit+0x11c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aba:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <SystemInit+0x11c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <SystemInit+0x11c>)
 8000ac2:	4a29      	ldr	r2, [pc, #164]	@ (8000b68 <SystemInit+0x124>)
 8000ac4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ac6:	4b26      	ldr	r3, [pc, #152]	@ (8000b60 <SystemInit+0x11c>)
 8000ac8:	4a28      	ldr	r2, [pc, #160]	@ (8000b6c <SystemInit+0x128>)
 8000aca:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000acc:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <SystemInit+0x11c>)
 8000ace:	4a28      	ldr	r2, [pc, #160]	@ (8000b70 <SystemInit+0x12c>)
 8000ad0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000ad2:	4b23      	ldr	r3, [pc, #140]	@ (8000b60 <SystemInit+0x11c>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ad8:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <SystemInit+0x11c>)
 8000ada:	4a25      	ldr	r2, [pc, #148]	@ (8000b70 <SystemInit+0x12c>)
 8000adc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ade:	4b20      	ldr	r3, [pc, #128]	@ (8000b60 <SystemInit+0x11c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ae4:	4b1e      	ldr	r3, [pc, #120]	@ (8000b60 <SystemInit+0x11c>)
 8000ae6:	4a22      	ldr	r2, [pc, #136]	@ (8000b70 <SystemInit+0x12c>)
 8000ae8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000aea:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <SystemInit+0x11c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000af0:	4b1b      	ldr	r3, [pc, #108]	@ (8000b60 <SystemInit+0x11c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b60 <SystemInit+0x11c>)
 8000af6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000afa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000afc:	4b18      	ldr	r3, [pc, #96]	@ (8000b60 <SystemInit+0x11c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b02:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <SystemInit+0x130>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	4b1c      	ldr	r3, [pc, #112]	@ (8000b78 <SystemInit+0x134>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b0e:	d202      	bcs.n	8000b16 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b10:	4b1a      	ldr	r3, [pc, #104]	@ (8000b7c <SystemInit+0x138>)
 8000b12:	2201      	movs	r2, #1
 8000b14:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b16:	4b12      	ldr	r3, [pc, #72]	@ (8000b60 <SystemInit+0x11c>)
 8000b18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b1c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d113      	bne.n	8000b4c <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b24:	4b0e      	ldr	r3, [pc, #56]	@ (8000b60 <SystemInit+0x11c>)
 8000b26:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b2a:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <SystemInit+0x11c>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b30:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b34:	4b12      	ldr	r3, [pc, #72]	@ (8000b80 <SystemInit+0x13c>)
 8000b36:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b3a:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <SystemInit+0x11c>)
 8000b3e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b42:	4a07      	ldr	r2, [pc, #28]	@ (8000b60 <SystemInit+0x11c>)
 8000b44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b48:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00
 8000b5c:	52002000 	.word	0x52002000
 8000b60:	58024400 	.word	0x58024400
 8000b64:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b68:	02020200 	.word	0x02020200
 8000b6c:	01ff0000 	.word	0x01ff0000
 8000b70:	01010280 	.word	0x01010280
 8000b74:	5c001000 	.word	0x5c001000
 8000b78:	ffff0000 	.word	0xffff0000
 8000b7c:	51008108 	.word	0x51008108
 8000b80:	52004000 	.word	0x52004000

08000b84 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000b88:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <ExitRun0Mode+0x2c>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <ExitRun0Mode+0x2c>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000b94:	bf00      	nop
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <ExitRun0Mode+0x2c>)
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d0f9      	beq.n	8000b96 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	58024800 	.word	0x58024800

08000bb4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb8:	4b22      	ldr	r3, [pc, #136]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bba:	4a23      	ldr	r2, [pc, #140]	@ (8000c48 <MX_USART1_UART_Init+0x94>)
 8000bbc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bbe:	4b21      	ldr	r3, [pc, #132]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bc4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bda:	220c      	movs	r2, #12
 8000bdc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bde:	4b19      	ldr	r3, [pc, #100]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be4:	4b17      	ldr	r3, [pc, #92]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bea:	4b16      	ldr	r3, [pc, #88]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000bfc:	4811      	ldr	r0, [pc, #68]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000bfe:	f004 f863 	bl	8004cc8 <HAL_UART_Init>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d001      	beq.n	8000c0c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c08:	f7ff febc 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c0c:	2100      	movs	r1, #0
 8000c0e:	480d      	ldr	r0, [pc, #52]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c10:	f006 fbe3 	bl	80073da <HAL_UARTEx_SetTxFifoThreshold>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c1a:	f7ff feb3 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4808      	ldr	r0, [pc, #32]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c22:	f006 fc18 	bl	8007456 <HAL_UARTEx_SetRxFifoThreshold>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f7ff feaa 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	@ (8000c44 <MX_USART1_UART_Init+0x90>)
 8000c32:	f006 fb99 	bl	8007368 <HAL_UARTEx_DisableFifoMode>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c3c:	f7ff fea2 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	24000074 	.word	0x24000074
 8000c48:	40011000 	.word	0x40011000

08000c4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0ba      	sub	sp, #232	@ 0xe8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	22c0      	movs	r2, #192	@ 0xc0
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f006 fc7f 	bl	8007570 <memset>
  if(uartHandle->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a2b      	ldr	r2, [pc, #172]	@ (8000d24 <HAL_UART_MspInit+0xd8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d14e      	bne.n	8000d1a <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7c:	f04f 0201 	mov.w	r2, #1
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 f9ec 	bl	8003070 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c9e:	f7ff fe71 	bl	8000984 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca2:	4b21      	ldr	r3, [pc, #132]	@ (8000d28 <HAL_UART_MspInit+0xdc>)
 8000ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <HAL_UART_MspInit+0xdc>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d28 <HAL_UART_MspInit+0xdc>)
 8000cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b19      	ldr	r3, [pc, #100]	@ (8000d28 <HAL_UART_MspInit+0xdc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4a18      	ldr	r2, [pc, #96]	@ (8000d28 <HAL_UART_MspInit+0xdc>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <HAL_UART_MspInit+0xdc>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000cde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cec:	2301      	movs	r3, #1
 8000cee:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d02:	4619      	mov	r1, r3
 8000d04:	4809      	ldr	r0, [pc, #36]	@ (8000d2c <HAL_UART_MspInit+0xe0>)
 8000d06:	f000 ffc9 	bl	8001c9c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	2025      	movs	r0, #37	@ 0x25
 8000d10:	f000 f9b3 	bl	800107a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d14:	2025      	movs	r0, #37	@ 0x25
 8000d16:	f000 f9ca 	bl	80010ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d1a:	bf00      	nop
 8000d1c:	37e8      	adds	r7, #232	@ 0xe8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40011000 	.word	0x40011000
 8000d28:	58024400 	.word	0x58024400
 8000d2c:	58020000 	.word	0x58020000

08000d30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d30:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000d6c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000d34:	f7ff ff26 	bl	8000b84 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d38:	f7ff fe84 	bl	8000a44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d3c:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d3e:	490d      	ldr	r1, [pc, #52]	@ (8000d74 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d40:	4a0d      	ldr	r2, [pc, #52]	@ (8000d78 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d44:	e002      	b.n	8000d4c <LoopCopyDataInit>

08000d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d4a:	3304      	adds	r3, #4

08000d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d50:	d3f9      	bcc.n	8000d46 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d52:	4a0a      	ldr	r2, [pc, #40]	@ (8000d7c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d54:	4c0a      	ldr	r4, [pc, #40]	@ (8000d80 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d58:	e001      	b.n	8000d5e <LoopFillZerobss>

08000d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d5c:	3204      	adds	r2, #4

08000d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d60:	d3fb      	bcc.n	8000d5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d62:	f006 fc0d 	bl	8007580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d66:	f7ff fd1f 	bl	80007a8 <main>
  bx  lr
 8000d6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d6c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d70:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d74:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d78:	08007628 	.word	0x08007628
  ldr r2, =_sbss
 8000d7c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d80:	2400010c 	.word	0x2400010c

08000d84 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d84:	e7fe      	b.n	8000d84 <ADC3_IRQHandler>
	...

08000d88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f000 f968 	bl	8001064 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d94:	f001 ff96 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	4b15      	ldr	r3, [pc, #84]	@ (8000df0 <HAL_Init+0x68>)
 8000d9c:	699b      	ldr	r3, [r3, #24]
 8000d9e:	0a1b      	lsrs	r3, r3, #8
 8000da0:	f003 030f 	and.w	r3, r3, #15
 8000da4:	4913      	ldr	r1, [pc, #76]	@ (8000df4 <HAL_Init+0x6c>)
 8000da6:	5ccb      	ldrb	r3, [r1, r3]
 8000da8:	f003 031f 	and.w	r3, r3, #31
 8000dac:	fa22 f303 	lsr.w	r3, r2, r3
 8000db0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000db2:	4b0f      	ldr	r3, [pc, #60]	@ (8000df0 <HAL_Init+0x68>)
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	4a0e      	ldr	r2, [pc, #56]	@ (8000df4 <HAL_Init+0x6c>)
 8000dbc:	5cd3      	ldrb	r3, [r2, r3]
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	687a      	ldr	r2, [r7, #4]
 8000dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8000dc8:	4a0b      	ldr	r2, [pc, #44]	@ (8000df8 <HAL_Init+0x70>)
 8000dca:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000dcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000dfc <HAL_Init+0x74>)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000dd2:	200f      	movs	r0, #15
 8000dd4:	f000 f814 	bl	8000e00 <HAL_InitTick>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e002      	b.n	8000de8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000de2:	f7ff fdd5 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de6:	2300      	movs	r3, #0
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	58024400 	.word	0x58024400
 8000df4:	080075e0 	.word	0x080075e0
 8000df8:	24000004 	.word	0x24000004
 8000dfc:	24000000 	.word	0x24000000

08000e00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e08:	4b15      	ldr	r3, [pc, #84]	@ (8000e60 <HAL_InitTick+0x60>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d101      	bne.n	8000e14 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	e021      	b.n	8000e58 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <HAL_InitTick+0x64>)
 8000e16:	681a      	ldr	r2, [r3, #0]
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <HAL_InitTick+0x60>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f94d 	bl	80010ca <HAL_SYSTICK_Config>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e00e      	b.n	8000e58 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2b0f      	cmp	r3, #15
 8000e3e:	d80a      	bhi.n	8000e56 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e40:	2200      	movs	r2, #0
 8000e42:	6879      	ldr	r1, [r7, #4]
 8000e44:	f04f 30ff 	mov.w	r0, #4294967295
 8000e48:	f000 f917 	bl	800107a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e4c:	4a06      	ldr	r2, [pc, #24]	@ (8000e68 <HAL_InitTick+0x68>)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e52:	2300      	movs	r3, #0
 8000e54:	e000      	b.n	8000e58 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	3708      	adds	r7, #8
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	2400000c 	.word	0x2400000c
 8000e64:	24000000 	.word	0x24000000
 8000e68:	24000008 	.word	0x24000008

08000e6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e70:	4b06      	ldr	r3, [pc, #24]	@ (8000e8c <HAL_IncTick+0x20>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	461a      	mov	r2, r3
 8000e76:	4b06      	ldr	r3, [pc, #24]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4413      	add	r3, r2
 8000e7c:	4a04      	ldr	r2, [pc, #16]	@ (8000e90 <HAL_IncTick+0x24>)
 8000e7e:	6013      	str	r3, [r2, #0]
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	2400000c 	.word	0x2400000c
 8000e90:	24000108 	.word	0x24000108

08000e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return uwTick;
 8000e98:	4b03      	ldr	r3, [pc, #12]	@ (8000ea8 <HAL_GetTick+0x14>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	24000108 	.word	0x24000108

08000eac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000eb0:	4b03      	ldr	r3, [pc, #12]	@ (8000ec0 <HAL_GetREVID+0x14>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	0c1b      	lsrs	r3, r3, #16
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	5c001000 	.word	0x5c001000

08000ec4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ed6:	68db      	ldr	r3, [r3, #12]
 8000ed8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eda:	68ba      	ldr	r2, [r7, #8]
 8000edc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000eec:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <__NVIC_SetPriorityGrouping+0x44>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ef2:	4a04      	ldr	r2, [pc, #16]	@ (8000f04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	60d3      	str	r3, [r2, #12]
}
 8000ef8:	bf00      	nop
 8000efa:	3714      	adds	r7, #20
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00
 8000f08:	05fa0000 	.word	0x05fa0000

08000f0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f10:	4b04      	ldr	r3, [pc, #16]	@ (8000f24 <__NVIC_GetPriorityGrouping+0x18>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	0a1b      	lsrs	r3, r3, #8
 8000f16:	f003 0307 	and.w	r3, r3, #7
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	db0b      	blt.n	8000f52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f3a:	88fb      	ldrh	r3, [r7, #6]
 8000f3c:	f003 021f 	and.w	r2, r3, #31
 8000f40:	4907      	ldr	r1, [pc, #28]	@ (8000f60 <__NVIC_EnableIRQ+0x38>)
 8000f42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	2001      	movs	r0, #1
 8000f4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	e000e100 	.word	0xe000e100

08000f64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b083      	sub	sp, #12
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	6039      	str	r1, [r7, #0]
 8000f6e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	db0a      	blt.n	8000f8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	b2da      	uxtb	r2, r3
 8000f7c:	490c      	ldr	r1, [pc, #48]	@ (8000fb0 <__NVIC_SetPriority+0x4c>)
 8000f7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f82:	0112      	lsls	r2, r2, #4
 8000f84:	b2d2      	uxtb	r2, r2
 8000f86:	440b      	add	r3, r1
 8000f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f8c:	e00a      	b.n	8000fa4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4908      	ldr	r1, [pc, #32]	@ (8000fb4 <__NVIC_SetPriority+0x50>)
 8000f94:	88fb      	ldrh	r3, [r7, #6]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	3b04      	subs	r3, #4
 8000f9c:	0112      	lsls	r2, r2, #4
 8000f9e:	b2d2      	uxtb	r2, r2
 8000fa0:	440b      	add	r3, r1
 8000fa2:	761a      	strb	r2, [r3, #24]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr
 8000fb0:	e000e100 	.word	0xe000e100
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	60f8      	str	r0, [r7, #12]
 8000fc0:	60b9      	str	r1, [r7, #8]
 8000fc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	f003 0307 	and.w	r3, r3, #7
 8000fca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f1c3 0307 	rsb	r3, r3, #7
 8000fd2:	2b04      	cmp	r3, #4
 8000fd4:	bf28      	it	cs
 8000fd6:	2304      	movcs	r3, #4
 8000fd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fda:	69fb      	ldr	r3, [r7, #28]
 8000fdc:	3304      	adds	r3, #4
 8000fde:	2b06      	cmp	r3, #6
 8000fe0:	d902      	bls.n	8000fe8 <NVIC_EncodePriority+0x30>
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	3b03      	subs	r3, #3
 8000fe6:	e000      	b.n	8000fea <NVIC_EncodePriority+0x32>
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff0:	69bb      	ldr	r3, [r7, #24]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	fa01 f303 	lsl.w	r3, r1, r3
 800100a:	43d9      	mvns	r1, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001010:	4313      	orrs	r3, r2
         );
}
 8001012:	4618      	mov	r0, r3
 8001014:	3724      	adds	r7, #36	@ 0x24
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
	...

08001020 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001030:	d301      	bcc.n	8001036 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001032:	2301      	movs	r3, #1
 8001034:	e00f      	b.n	8001056 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <SysTick_Config+0x40>)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	3b01      	subs	r3, #1
 800103c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800103e:	210f      	movs	r1, #15
 8001040:	f04f 30ff 	mov.w	r0, #4294967295
 8001044:	f7ff ff8e 	bl	8000f64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001048:	4b05      	ldr	r3, [pc, #20]	@ (8001060 <SysTick_Config+0x40>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800104e:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <SysTick_Config+0x40>)
 8001050:	2207      	movs	r2, #7
 8001052:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	e000e010 	.word	0xe000e010

08001064 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f7ff ff29 	bl	8000ec4 <__NVIC_SetPriorityGrouping>
}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b086      	sub	sp, #24
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001088:	f7ff ff40 	bl	8000f0c <__NVIC_GetPriorityGrouping>
 800108c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800108e:	687a      	ldr	r2, [r7, #4]
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	6978      	ldr	r0, [r7, #20]
 8001094:	f7ff ff90 	bl	8000fb8 <NVIC_EncodePriority>
 8001098:	4602      	mov	r2, r0
 800109a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800109e:	4611      	mov	r1, r2
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff5f 	bl	8000f64 <__NVIC_SetPriority>
}
 80010a6:	bf00      	nop
 80010a8:	3718      	adds	r7, #24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ae:	b580      	push	{r7, lr}
 80010b0:	b082      	sub	sp, #8
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	4603      	mov	r3, r0
 80010b6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff ff33 	bl	8000f28 <__NVIC_EnableIRQ>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ffa4 	bl	8001020 <SysTick_Config>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
	...

080010e4 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80010e8:	f3bf 8f5f 	dmb	sy
}
 80010ec:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80010ee:	4b07      	ldr	r3, [pc, #28]	@ (800110c <HAL_MPU_Disable+0x28>)
 80010f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010f2:	4a06      	ldr	r2, [pc, #24]	@ (800110c <HAL_MPU_Disable+0x28>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <HAL_MPU_Disable+0x2c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	e000ed90 	.word	0xe000ed90

08001114 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800111c:	4a0b      	ldr	r2, [pc, #44]	@ (800114c <HAL_MPU_Enable+0x38>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001126:	4b0a      	ldr	r3, [pc, #40]	@ (8001150 <HAL_MPU_Enable+0x3c>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800112a:	4a09      	ldr	r2, [pc, #36]	@ (8001150 <HAL_MPU_Enable+0x3c>)
 800112c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001130:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001132:	f3bf 8f4f 	dsb	sy
}
 8001136:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001138:	f3bf 8f6f 	isb	sy
}
 800113c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed90 	.word	0xe000ed90
 8001150:	e000ed00 	.word	0xe000ed00

08001154 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	785a      	ldrb	r2, [r3, #1]
 8001160:	4b1b      	ldr	r3, [pc, #108]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001162:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001164:	4b1a      	ldr	r3, [pc, #104]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	4a19      	ldr	r2, [pc, #100]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 800116a:	f023 0301 	bic.w	r3, r3, #1
 800116e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001170:	4a17      	ldr	r2, [pc, #92]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	7b1b      	ldrb	r3, [r3, #12]
 800117c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	7adb      	ldrb	r3, [r3, #11]
 8001182:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001184:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	7a9b      	ldrb	r3, [r3, #10]
 800118a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800118c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7b5b      	ldrb	r3, [r3, #13]
 8001192:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001194:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	7b9b      	ldrb	r3, [r3, #14]
 800119a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800119c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	7bdb      	ldrb	r3, [r3, #15]
 80011a2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80011a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7a5b      	ldrb	r3, [r3, #9]
 80011aa:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80011ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	7a1b      	ldrb	r3, [r3, #8]
 80011b2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80011b4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	7812      	ldrb	r2, [r2, #0]
 80011ba:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011bc:	4a04      	ldr	r2, [pc, #16]	@ (80011d0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80011be:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011c0:	6113      	str	r3, [r2, #16]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed90 	.word	0xe000ed90

080011d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b086      	sub	sp, #24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80011dc:	f7ff fe5a 	bl	8000e94 <HAL_GetTick>
 80011e0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e2dc      	b.n	80017a6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d008      	beq.n	800120a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2280      	movs	r2, #128	@ 0x80
 80011fc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e2cd      	b.n	80017a6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a76      	ldr	r2, [pc, #472]	@ (80013e8 <HAL_DMA_Abort+0x214>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d04a      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a74      	ldr	r2, [pc, #464]	@ (80013ec <HAL_DMA_Abort+0x218>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d045      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a73      	ldr	r2, [pc, #460]	@ (80013f0 <HAL_DMA_Abort+0x21c>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d040      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	4a71      	ldr	r2, [pc, #452]	@ (80013f4 <HAL_DMA_Abort+0x220>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d03b      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a70      	ldr	r2, [pc, #448]	@ (80013f8 <HAL_DMA_Abort+0x224>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d036      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6e      	ldr	r2, [pc, #440]	@ (80013fc <HAL_DMA_Abort+0x228>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d031      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a6d      	ldr	r2, [pc, #436]	@ (8001400 <HAL_DMA_Abort+0x22c>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d02c      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a6b      	ldr	r2, [pc, #428]	@ (8001404 <HAL_DMA_Abort+0x230>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d027      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a6a      	ldr	r2, [pc, #424]	@ (8001408 <HAL_DMA_Abort+0x234>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d022      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a68      	ldr	r2, [pc, #416]	@ (800140c <HAL_DMA_Abort+0x238>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d01d      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a67      	ldr	r2, [pc, #412]	@ (8001410 <HAL_DMA_Abort+0x23c>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d018      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a65      	ldr	r2, [pc, #404]	@ (8001414 <HAL_DMA_Abort+0x240>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d013      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a64      	ldr	r2, [pc, #400]	@ (8001418 <HAL_DMA_Abort+0x244>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d00e      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a62      	ldr	r2, [pc, #392]	@ (800141c <HAL_DMA_Abort+0x248>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d009      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a61      	ldr	r2, [pc, #388]	@ (8001420 <HAL_DMA_Abort+0x24c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d004      	beq.n	80012aa <HAL_DMA_Abort+0xd6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a5f      	ldr	r2, [pc, #380]	@ (8001424 <HAL_DMA_Abort+0x250>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d101      	bne.n	80012ae <HAL_DMA_Abort+0xda>
 80012aa:	2301      	movs	r3, #1
 80012ac:	e000      	b.n	80012b0 <HAL_DMA_Abort+0xdc>
 80012ae:	2300      	movs	r3, #0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 021e 	bic.w	r2, r2, #30
 80012c2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	695a      	ldr	r2, [r3, #20]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012d2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	617b      	str	r3, [r7, #20]
 80012da:	e00a      	b.n	80012f2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 020e 	bic.w	r2, r2, #14
 80012ea:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a3c      	ldr	r2, [pc, #240]	@ (80013e8 <HAL_DMA_Abort+0x214>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d072      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a3a      	ldr	r2, [pc, #232]	@ (80013ec <HAL_DMA_Abort+0x218>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d06d      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a39      	ldr	r2, [pc, #228]	@ (80013f0 <HAL_DMA_Abort+0x21c>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d068      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a37      	ldr	r2, [pc, #220]	@ (80013f4 <HAL_DMA_Abort+0x220>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d063      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a36      	ldr	r2, [pc, #216]	@ (80013f8 <HAL_DMA_Abort+0x224>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d05e      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a34      	ldr	r2, [pc, #208]	@ (80013fc <HAL_DMA_Abort+0x228>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d059      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a33      	ldr	r2, [pc, #204]	@ (8001400 <HAL_DMA_Abort+0x22c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d054      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a31      	ldr	r2, [pc, #196]	@ (8001404 <HAL_DMA_Abort+0x230>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d04f      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a30      	ldr	r2, [pc, #192]	@ (8001408 <HAL_DMA_Abort+0x234>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d04a      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a2e      	ldr	r2, [pc, #184]	@ (800140c <HAL_DMA_Abort+0x238>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d045      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a2d      	ldr	r2, [pc, #180]	@ (8001410 <HAL_DMA_Abort+0x23c>)
 800135c:	4293      	cmp	r3, r2
 800135e:	d040      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a2b      	ldr	r2, [pc, #172]	@ (8001414 <HAL_DMA_Abort+0x240>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d03b      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a2a      	ldr	r2, [pc, #168]	@ (8001418 <HAL_DMA_Abort+0x244>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d036      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a28      	ldr	r2, [pc, #160]	@ (800141c <HAL_DMA_Abort+0x248>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d031      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a27      	ldr	r2, [pc, #156]	@ (8001420 <HAL_DMA_Abort+0x24c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d02c      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a25      	ldr	r2, [pc, #148]	@ (8001424 <HAL_DMA_Abort+0x250>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d027      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a24      	ldr	r2, [pc, #144]	@ (8001428 <HAL_DMA_Abort+0x254>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d022      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a22      	ldr	r2, [pc, #136]	@ (800142c <HAL_DMA_Abort+0x258>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d01d      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a21      	ldr	r2, [pc, #132]	@ (8001430 <HAL_DMA_Abort+0x25c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d018      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a1f      	ldr	r2, [pc, #124]	@ (8001434 <HAL_DMA_Abort+0x260>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d013      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a1e      	ldr	r2, [pc, #120]	@ (8001438 <HAL_DMA_Abort+0x264>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d00e      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a1c      	ldr	r2, [pc, #112]	@ (800143c <HAL_DMA_Abort+0x268>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d009      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a1b      	ldr	r2, [pc, #108]	@ (8001440 <HAL_DMA_Abort+0x26c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d004      	beq.n	80013e2 <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a19      	ldr	r2, [pc, #100]	@ (8001444 <HAL_DMA_Abort+0x270>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d132      	bne.n	8001448 <HAL_DMA_Abort+0x274>
 80013e2:	2301      	movs	r3, #1
 80013e4:	e031      	b.n	800144a <HAL_DMA_Abort+0x276>
 80013e6:	bf00      	nop
 80013e8:	40020010 	.word	0x40020010
 80013ec:	40020028 	.word	0x40020028
 80013f0:	40020040 	.word	0x40020040
 80013f4:	40020058 	.word	0x40020058
 80013f8:	40020070 	.word	0x40020070
 80013fc:	40020088 	.word	0x40020088
 8001400:	400200a0 	.word	0x400200a0
 8001404:	400200b8 	.word	0x400200b8
 8001408:	40020410 	.word	0x40020410
 800140c:	40020428 	.word	0x40020428
 8001410:	40020440 	.word	0x40020440
 8001414:	40020458 	.word	0x40020458
 8001418:	40020470 	.word	0x40020470
 800141c:	40020488 	.word	0x40020488
 8001420:	400204a0 	.word	0x400204a0
 8001424:	400204b8 	.word	0x400204b8
 8001428:	58025408 	.word	0x58025408
 800142c:	5802541c 	.word	0x5802541c
 8001430:	58025430 	.word	0x58025430
 8001434:	58025444 	.word	0x58025444
 8001438:	58025458 	.word	0x58025458
 800143c:	5802546c 	.word	0x5802546c
 8001440:	58025480 	.word	0x58025480
 8001444:	58025494 	.word	0x58025494
 8001448:	2300      	movs	r3, #0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d007      	beq.n	800145e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001458:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800145c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6d      	ldr	r2, [pc, #436]	@ (8001618 <HAL_DMA_Abort+0x444>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d04a      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a6b      	ldr	r2, [pc, #428]	@ (800161c <HAL_DMA_Abort+0x448>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d045      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a6a      	ldr	r2, [pc, #424]	@ (8001620 <HAL_DMA_Abort+0x44c>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d040      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a68      	ldr	r2, [pc, #416]	@ (8001624 <HAL_DMA_Abort+0x450>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d03b      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a67      	ldr	r2, [pc, #412]	@ (8001628 <HAL_DMA_Abort+0x454>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d036      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a65      	ldr	r2, [pc, #404]	@ (800162c <HAL_DMA_Abort+0x458>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d031      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a64      	ldr	r2, [pc, #400]	@ (8001630 <HAL_DMA_Abort+0x45c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d02c      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a62      	ldr	r2, [pc, #392]	@ (8001634 <HAL_DMA_Abort+0x460>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d027      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a61      	ldr	r2, [pc, #388]	@ (8001638 <HAL_DMA_Abort+0x464>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d022      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5f      	ldr	r2, [pc, #380]	@ (800163c <HAL_DMA_Abort+0x468>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d01d      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a5e      	ldr	r2, [pc, #376]	@ (8001640 <HAL_DMA_Abort+0x46c>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d018      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a5c      	ldr	r2, [pc, #368]	@ (8001644 <HAL_DMA_Abort+0x470>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d013      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a5b      	ldr	r2, [pc, #364]	@ (8001648 <HAL_DMA_Abort+0x474>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d00e      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a59      	ldr	r2, [pc, #356]	@ (800164c <HAL_DMA_Abort+0x478>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d009      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a58      	ldr	r2, [pc, #352]	@ (8001650 <HAL_DMA_Abort+0x47c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d004      	beq.n	80014fe <HAL_DMA_Abort+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a56      	ldr	r2, [pc, #344]	@ (8001654 <HAL_DMA_Abort+0x480>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d108      	bne.n	8001510 <HAL_DMA_Abort+0x33c>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e007      	b.n	8001520 <HAL_DMA_Abort+0x34c>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001520:	e013      	b.n	800154a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001522:	f7ff fcb7 	bl	8000e94 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	2b05      	cmp	r3, #5
 800152e:	d90c      	bls.n	800154a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2220      	movs	r2, #32
 8001534:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2203      	movs	r2, #3
 800153a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2200      	movs	r2, #0
 8001542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e12d      	b.n	80017a6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1e5      	bne.n	8001522 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a2f      	ldr	r2, [pc, #188]	@ (8001618 <HAL_DMA_Abort+0x444>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d04a      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2d      	ldr	r2, [pc, #180]	@ (800161c <HAL_DMA_Abort+0x448>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d045      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2c      	ldr	r2, [pc, #176]	@ (8001620 <HAL_DMA_Abort+0x44c>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d040      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2a      	ldr	r2, [pc, #168]	@ (8001624 <HAL_DMA_Abort+0x450>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d03b      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a29      	ldr	r2, [pc, #164]	@ (8001628 <HAL_DMA_Abort+0x454>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d036      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a27      	ldr	r2, [pc, #156]	@ (800162c <HAL_DMA_Abort+0x458>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d031      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a26      	ldr	r2, [pc, #152]	@ (8001630 <HAL_DMA_Abort+0x45c>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d02c      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a24      	ldr	r2, [pc, #144]	@ (8001634 <HAL_DMA_Abort+0x460>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d027      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a23      	ldr	r2, [pc, #140]	@ (8001638 <HAL_DMA_Abort+0x464>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d022      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a21      	ldr	r2, [pc, #132]	@ (800163c <HAL_DMA_Abort+0x468>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d01d      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a20      	ldr	r2, [pc, #128]	@ (8001640 <HAL_DMA_Abort+0x46c>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d018      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a1e      	ldr	r2, [pc, #120]	@ (8001644 <HAL_DMA_Abort+0x470>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d013      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a1d      	ldr	r2, [pc, #116]	@ (8001648 <HAL_DMA_Abort+0x474>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d00e      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1b      	ldr	r2, [pc, #108]	@ (800164c <HAL_DMA_Abort+0x478>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d009      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1a      	ldr	r2, [pc, #104]	@ (8001650 <HAL_DMA_Abort+0x47c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d004      	beq.n	80015f6 <HAL_DMA_Abort+0x422>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <HAL_DMA_Abort+0x480>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d101      	bne.n	80015fa <HAL_DMA_Abort+0x426>
 80015f6:	2301      	movs	r3, #1
 80015f8:	e000      	b.n	80015fc <HAL_DMA_Abort+0x428>
 80015fa:	2300      	movs	r3, #0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d02b      	beq.n	8001658 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001604:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800160a:	f003 031f 	and.w	r3, r3, #31
 800160e:	223f      	movs	r2, #63	@ 0x3f
 8001610:	409a      	lsls	r2, r3
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e02a      	b.n	800166e <HAL_DMA_Abort+0x49a>
 8001618:	40020010 	.word	0x40020010
 800161c:	40020028 	.word	0x40020028
 8001620:	40020040 	.word	0x40020040
 8001624:	40020058 	.word	0x40020058
 8001628:	40020070 	.word	0x40020070
 800162c:	40020088 	.word	0x40020088
 8001630:	400200a0 	.word	0x400200a0
 8001634:	400200b8 	.word	0x400200b8
 8001638:	40020410 	.word	0x40020410
 800163c:	40020428 	.word	0x40020428
 8001640:	40020440 	.word	0x40020440
 8001644:	40020458 	.word	0x40020458
 8001648:	40020470 	.word	0x40020470
 800164c:	40020488 	.word	0x40020488
 8001650:	400204a0 	.word	0x400204a0
 8001654:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800165c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001662:	f003 031f 	and.w	r3, r3, #31
 8001666:	2201      	movs	r2, #1
 8001668:	409a      	lsls	r2, r3
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a4f      	ldr	r2, [pc, #316]	@ (80017b0 <HAL_DMA_Abort+0x5dc>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d072      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a4d      	ldr	r2, [pc, #308]	@ (80017b4 <HAL_DMA_Abort+0x5e0>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d06d      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a4c      	ldr	r2, [pc, #304]	@ (80017b8 <HAL_DMA_Abort+0x5e4>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d068      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a4a      	ldr	r2, [pc, #296]	@ (80017bc <HAL_DMA_Abort+0x5e8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d063      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a49      	ldr	r2, [pc, #292]	@ (80017c0 <HAL_DMA_Abort+0x5ec>)
 800169c:	4293      	cmp	r3, r2
 800169e:	d05e      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a47      	ldr	r2, [pc, #284]	@ (80017c4 <HAL_DMA_Abort+0x5f0>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d059      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4a46      	ldr	r2, [pc, #280]	@ (80017c8 <HAL_DMA_Abort+0x5f4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d054      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a44      	ldr	r2, [pc, #272]	@ (80017cc <HAL_DMA_Abort+0x5f8>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d04f      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a43      	ldr	r2, [pc, #268]	@ (80017d0 <HAL_DMA_Abort+0x5fc>)
 80016c4:	4293      	cmp	r3, r2
 80016c6:	d04a      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a41      	ldr	r2, [pc, #260]	@ (80017d4 <HAL_DMA_Abort+0x600>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d045      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a40      	ldr	r2, [pc, #256]	@ (80017d8 <HAL_DMA_Abort+0x604>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d040      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a3e      	ldr	r2, [pc, #248]	@ (80017dc <HAL_DMA_Abort+0x608>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d03b      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a3d      	ldr	r2, [pc, #244]	@ (80017e0 <HAL_DMA_Abort+0x60c>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d036      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a3b      	ldr	r2, [pc, #236]	@ (80017e4 <HAL_DMA_Abort+0x610>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d031      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a3a      	ldr	r2, [pc, #232]	@ (80017e8 <HAL_DMA_Abort+0x614>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d02c      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a38      	ldr	r2, [pc, #224]	@ (80017ec <HAL_DMA_Abort+0x618>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d027      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a37      	ldr	r2, [pc, #220]	@ (80017f0 <HAL_DMA_Abort+0x61c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d022      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a35      	ldr	r2, [pc, #212]	@ (80017f4 <HAL_DMA_Abort+0x620>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d01d      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a34      	ldr	r2, [pc, #208]	@ (80017f8 <HAL_DMA_Abort+0x624>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d018      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a32      	ldr	r2, [pc, #200]	@ (80017fc <HAL_DMA_Abort+0x628>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d013      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a31      	ldr	r2, [pc, #196]	@ (8001800 <HAL_DMA_Abort+0x62c>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d00e      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a2f      	ldr	r2, [pc, #188]	@ (8001804 <HAL_DMA_Abort+0x630>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d009      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a2e      	ldr	r2, [pc, #184]	@ (8001808 <HAL_DMA_Abort+0x634>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d004      	beq.n	800175e <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2c      	ldr	r2, [pc, #176]	@ (800180c <HAL_DMA_Abort+0x638>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_DMA_Abort+0x58e>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_DMA_Abort+0x590>
 8001762:	2300      	movs	r3, #0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d015      	beq.n	8001794 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001770:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001784:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001788:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001792:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3718      	adds	r7, #24
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40020010 	.word	0x40020010
 80017b4:	40020028 	.word	0x40020028
 80017b8:	40020040 	.word	0x40020040
 80017bc:	40020058 	.word	0x40020058
 80017c0:	40020070 	.word	0x40020070
 80017c4:	40020088 	.word	0x40020088
 80017c8:	400200a0 	.word	0x400200a0
 80017cc:	400200b8 	.word	0x400200b8
 80017d0:	40020410 	.word	0x40020410
 80017d4:	40020428 	.word	0x40020428
 80017d8:	40020440 	.word	0x40020440
 80017dc:	40020458 	.word	0x40020458
 80017e0:	40020470 	.word	0x40020470
 80017e4:	40020488 	.word	0x40020488
 80017e8:	400204a0 	.word	0x400204a0
 80017ec:	400204b8 	.word	0x400204b8
 80017f0:	58025408 	.word	0x58025408
 80017f4:	5802541c 	.word	0x5802541c
 80017f8:	58025430 	.word	0x58025430
 80017fc:	58025444 	.word	0x58025444
 8001800:	58025458 	.word	0x58025458
 8001804:	5802546c 	.word	0x5802546c
 8001808:	58025480 	.word	0x58025480
 800180c:	58025494 	.word	0x58025494

08001810 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e237      	b.n	8001c92 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d004      	beq.n	8001838 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2280      	movs	r2, #128	@ 0x80
 8001832:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e22c      	b.n	8001c92 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a5c      	ldr	r2, [pc, #368]	@ (80019b0 <HAL_DMA_Abort_IT+0x1a0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d04a      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a5b      	ldr	r2, [pc, #364]	@ (80019b4 <HAL_DMA_Abort_IT+0x1a4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d045      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a59      	ldr	r2, [pc, #356]	@ (80019b8 <HAL_DMA_Abort_IT+0x1a8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d040      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <HAL_DMA_Abort_IT+0x1ac>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d03b      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a56      	ldr	r2, [pc, #344]	@ (80019c0 <HAL_DMA_Abort_IT+0x1b0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d036      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a55      	ldr	r2, [pc, #340]	@ (80019c4 <HAL_DMA_Abort_IT+0x1b4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d031      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a53      	ldr	r2, [pc, #332]	@ (80019c8 <HAL_DMA_Abort_IT+0x1b8>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d02c      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a52      	ldr	r2, [pc, #328]	@ (80019cc <HAL_DMA_Abort_IT+0x1bc>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d027      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a50      	ldr	r2, [pc, #320]	@ (80019d0 <HAL_DMA_Abort_IT+0x1c0>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d022      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a4f      	ldr	r2, [pc, #316]	@ (80019d4 <HAL_DMA_Abort_IT+0x1c4>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d01d      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	@ (80019d8 <HAL_DMA_Abort_IT+0x1c8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d018      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a4c      	ldr	r2, [pc, #304]	@ (80019dc <HAL_DMA_Abort_IT+0x1cc>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d013      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a4a      	ldr	r2, [pc, #296]	@ (80019e0 <HAL_DMA_Abort_IT+0x1d0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d00e      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a49      	ldr	r2, [pc, #292]	@ (80019e4 <HAL_DMA_Abort_IT+0x1d4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d009      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a47      	ldr	r2, [pc, #284]	@ (80019e8 <HAL_DMA_Abort_IT+0x1d8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d004      	beq.n	80018d8 <HAL_DMA_Abort_IT+0xc8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a46      	ldr	r2, [pc, #280]	@ (80019ec <HAL_DMA_Abort_IT+0x1dc>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d101      	bne.n	80018dc <HAL_DMA_Abort_IT+0xcc>
 80018d8:	2301      	movs	r3, #1
 80018da:	e000      	b.n	80018de <HAL_DMA_Abort_IT+0xce>
 80018dc:	2300      	movs	r3, #0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 8086 	beq.w	80019f0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2204      	movs	r2, #4
 80018e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a2f      	ldr	r2, [pc, #188]	@ (80019b0 <HAL_DMA_Abort_IT+0x1a0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d04a      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a2e      	ldr	r2, [pc, #184]	@ (80019b4 <HAL_DMA_Abort_IT+0x1a4>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d045      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a2c      	ldr	r2, [pc, #176]	@ (80019b8 <HAL_DMA_Abort_IT+0x1a8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d040      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a2b      	ldr	r2, [pc, #172]	@ (80019bc <HAL_DMA_Abort_IT+0x1ac>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d03b      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a29      	ldr	r2, [pc, #164]	@ (80019c0 <HAL_DMA_Abort_IT+0x1b0>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d036      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a28      	ldr	r2, [pc, #160]	@ (80019c4 <HAL_DMA_Abort_IT+0x1b4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d031      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a26      	ldr	r2, [pc, #152]	@ (80019c8 <HAL_DMA_Abort_IT+0x1b8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d02c      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a25      	ldr	r2, [pc, #148]	@ (80019cc <HAL_DMA_Abort_IT+0x1bc>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d027      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a23      	ldr	r2, [pc, #140]	@ (80019d0 <HAL_DMA_Abort_IT+0x1c0>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d022      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a22      	ldr	r2, [pc, #136]	@ (80019d4 <HAL_DMA_Abort_IT+0x1c4>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d01d      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a20      	ldr	r2, [pc, #128]	@ (80019d8 <HAL_DMA_Abort_IT+0x1c8>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d018      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a1f      	ldr	r2, [pc, #124]	@ (80019dc <HAL_DMA_Abort_IT+0x1cc>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a1d      	ldr	r2, [pc, #116]	@ (80019e0 <HAL_DMA_Abort_IT+0x1d0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00e      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a1c      	ldr	r2, [pc, #112]	@ (80019e4 <HAL_DMA_Abort_IT+0x1d4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d009      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a1a      	ldr	r2, [pc, #104]	@ (80019e8 <HAL_DMA_Abort_IT+0x1d8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d004      	beq.n	800198c <HAL_DMA_Abort_IT+0x17c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a19      	ldr	r2, [pc, #100]	@ (80019ec <HAL_DMA_Abort_IT+0x1dc>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d108      	bne.n	800199e <HAL_DMA_Abort_IT+0x18e>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 0201 	bic.w	r2, r2, #1
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e178      	b.n	8001c90 <HAL_DMA_Abort_IT+0x480>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 0201 	bic.w	r2, r2, #1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e16f      	b.n	8001c90 <HAL_DMA_Abort_IT+0x480>
 80019b0:	40020010 	.word	0x40020010
 80019b4:	40020028 	.word	0x40020028
 80019b8:	40020040 	.word	0x40020040
 80019bc:	40020058 	.word	0x40020058
 80019c0:	40020070 	.word	0x40020070
 80019c4:	40020088 	.word	0x40020088
 80019c8:	400200a0 	.word	0x400200a0
 80019cc:	400200b8 	.word	0x400200b8
 80019d0:	40020410 	.word	0x40020410
 80019d4:	40020428 	.word	0x40020428
 80019d8:	40020440 	.word	0x40020440
 80019dc:	40020458 	.word	0x40020458
 80019e0:	40020470 	.word	0x40020470
 80019e4:	40020488 	.word	0x40020488
 80019e8:	400204a0 	.word	0x400204a0
 80019ec:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 020e 	bic.w	r2, r2, #14
 80019fe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6c      	ldr	r2, [pc, #432]	@ (8001bb8 <HAL_DMA_Abort_IT+0x3a8>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d04a      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a6b      	ldr	r2, [pc, #428]	@ (8001bbc <HAL_DMA_Abort_IT+0x3ac>)
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d045      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a69      	ldr	r2, [pc, #420]	@ (8001bc0 <HAL_DMA_Abort_IT+0x3b0>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d040      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a68      	ldr	r2, [pc, #416]	@ (8001bc4 <HAL_DMA_Abort_IT+0x3b4>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d03b      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a66      	ldr	r2, [pc, #408]	@ (8001bc8 <HAL_DMA_Abort_IT+0x3b8>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d036      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a65      	ldr	r2, [pc, #404]	@ (8001bcc <HAL_DMA_Abort_IT+0x3bc>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d031      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a63      	ldr	r2, [pc, #396]	@ (8001bd0 <HAL_DMA_Abort_IT+0x3c0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d02c      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a62      	ldr	r2, [pc, #392]	@ (8001bd4 <HAL_DMA_Abort_IT+0x3c4>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d027      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a60      	ldr	r2, [pc, #384]	@ (8001bd8 <HAL_DMA_Abort_IT+0x3c8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d022      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a5f      	ldr	r2, [pc, #380]	@ (8001bdc <HAL_DMA_Abort_IT+0x3cc>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d01d      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a5d      	ldr	r2, [pc, #372]	@ (8001be0 <HAL_DMA_Abort_IT+0x3d0>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d018      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a5c      	ldr	r2, [pc, #368]	@ (8001be4 <HAL_DMA_Abort_IT+0x3d4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d013      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a5a      	ldr	r2, [pc, #360]	@ (8001be8 <HAL_DMA_Abort_IT+0x3d8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00e      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a59      	ldr	r2, [pc, #356]	@ (8001bec <HAL_DMA_Abort_IT+0x3dc>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d009      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a57      	ldr	r2, [pc, #348]	@ (8001bf0 <HAL_DMA_Abort_IT+0x3e0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d004      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x290>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a56      	ldr	r2, [pc, #344]	@ (8001bf4 <HAL_DMA_Abort_IT+0x3e4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d108      	bne.n	8001ab2 <HAL_DMA_Abort_IT+0x2a2>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f022 0201 	bic.w	r2, r2, #1
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	e007      	b.n	8001ac2 <HAL_DMA_Abort_IT+0x2b2>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0201 	bic.w	r2, r2, #1
 8001ac0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3c      	ldr	r2, [pc, #240]	@ (8001bb8 <HAL_DMA_Abort_IT+0x3a8>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d072      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a3a      	ldr	r2, [pc, #232]	@ (8001bbc <HAL_DMA_Abort_IT+0x3ac>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d06d      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a39      	ldr	r2, [pc, #228]	@ (8001bc0 <HAL_DMA_Abort_IT+0x3b0>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d068      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a37      	ldr	r2, [pc, #220]	@ (8001bc4 <HAL_DMA_Abort_IT+0x3b4>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d063      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a36      	ldr	r2, [pc, #216]	@ (8001bc8 <HAL_DMA_Abort_IT+0x3b8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d05e      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a34      	ldr	r2, [pc, #208]	@ (8001bcc <HAL_DMA_Abort_IT+0x3bc>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d059      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a33      	ldr	r2, [pc, #204]	@ (8001bd0 <HAL_DMA_Abort_IT+0x3c0>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d054      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a31      	ldr	r2, [pc, #196]	@ (8001bd4 <HAL_DMA_Abort_IT+0x3c4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d04f      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a30      	ldr	r2, [pc, #192]	@ (8001bd8 <HAL_DMA_Abort_IT+0x3c8>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04a      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2e      	ldr	r2, [pc, #184]	@ (8001bdc <HAL_DMA_Abort_IT+0x3cc>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d045      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	@ (8001be0 <HAL_DMA_Abort_IT+0x3d0>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d040      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2b      	ldr	r2, [pc, #172]	@ (8001be4 <HAL_DMA_Abort_IT+0x3d4>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d03b      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	@ (8001be8 <HAL_DMA_Abort_IT+0x3d8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d036      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a28      	ldr	r2, [pc, #160]	@ (8001bec <HAL_DMA_Abort_IT+0x3dc>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a27      	ldr	r2, [pc, #156]	@ (8001bf0 <HAL_DMA_Abort_IT+0x3e0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d02c      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	@ (8001bf4 <HAL_DMA_Abort_IT+0x3e4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d027      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	@ (8001bf8 <HAL_DMA_Abort_IT+0x3e8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a22      	ldr	r2, [pc, #136]	@ (8001bfc <HAL_DMA_Abort_IT+0x3ec>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a21      	ldr	r2, [pc, #132]	@ (8001c00 <HAL_DMA_Abort_IT+0x3f0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	@ (8001c04 <HAL_DMA_Abort_IT+0x3f4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	@ (8001c08 <HAL_DMA_Abort_IT+0x3f8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	@ (8001c0c <HAL_DMA_Abort_IT+0x3fc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	@ (8001c10 <HAL_DMA_Abort_IT+0x400>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_Abort_IT+0x3a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	@ (8001c14 <HAL_DMA_Abort_IT+0x404>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d132      	bne.n	8001c18 <HAL_DMA_Abort_IT+0x408>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e031      	b.n	8001c1a <HAL_DMA_Abort_IT+0x40a>
 8001bb6:	bf00      	nop
 8001bb8:	40020010 	.word	0x40020010
 8001bbc:	40020028 	.word	0x40020028
 8001bc0:	40020040 	.word	0x40020040
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	40020070 	.word	0x40020070
 8001bcc:	40020088 	.word	0x40020088
 8001bd0:	400200a0 	.word	0x400200a0
 8001bd4:	400200b8 	.word	0x400200b8
 8001bd8:	40020410 	.word	0x40020410
 8001bdc:	40020428 	.word	0x40020428
 8001be0:	40020440 	.word	0x40020440
 8001be4:	40020458 	.word	0x40020458
 8001be8:	40020470 	.word	0x40020470
 8001bec:	40020488 	.word	0x40020488
 8001bf0:	400204a0 	.word	0x400204a0
 8001bf4:	400204b8 	.word	0x400204b8
 8001bf8:	58025408 	.word	0x58025408
 8001bfc:	5802541c 	.word	0x5802541c
 8001c00:	58025430 	.word	0x58025430
 8001c04:	58025444 	.word	0x58025444
 8001c08:	58025458 	.word	0x58025458
 8001c0c:	5802546c 	.word	0x5802546c
 8001c10:	58025480 	.word	0x58025480
 8001c14:	58025494 	.word	0x58025494
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d028      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c2c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c32:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c38:	f003 031f 	and.w	r3, r3, #31
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c4c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d00c      	beq.n	8001c70 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c64:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c6e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2201      	movs	r2, #1
 8001c74:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop

08001c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	@ 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001caa:	4b89      	ldr	r3, [pc, #548]	@ (8001ed0 <HAL_GPIO_Init+0x234>)
 8001cac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cae:	e194      	b.n	8001fda <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2101      	movs	r1, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 8186 	beq.w	8001fd4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0303 	and.w	r3, r3, #3
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d005      	beq.n	8001ce0 <HAL_GPIO_Init+0x44>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d130      	bne.n	8001d42 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	68da      	ldr	r2, [r3, #12]
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	69ba      	ldr	r2, [r7, #24]
 8001d0e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d16:	2201      	movs	r2, #1
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	4013      	ands	r3, r2
 8001d24:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	091b      	lsrs	r3, r3, #4
 8001d2c:	f003 0201 	and.w	r2, r3, #1
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	69ba      	ldr	r2, [r7, #24]
 8001d40:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d017      	beq.n	8001d7e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	005b      	lsls	r3, r3, #1
 8001d58:	2203      	movs	r2, #3
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	43db      	mvns	r3, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4013      	ands	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	689a      	ldr	r2, [r3, #8]
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4313      	orrs	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d123      	bne.n	8001dd2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	08da      	lsrs	r2, r3, #3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	3208      	adds	r2, #8
 8001d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	220f      	movs	r2, #15
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	4013      	ands	r3, r2
 8001dac:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	691a      	ldr	r2, [r3, #16]
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	08da      	lsrs	r2, r3, #3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3208      	adds	r2, #8
 8001dcc:	69b9      	ldr	r1, [r7, #24]
 8001dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	2203      	movs	r2, #3
 8001dde:	fa02 f303 	lsl.w	r3, r2, r3
 8001de2:	43db      	mvns	r3, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4013      	ands	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0203 	and.w	r2, r3, #3
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	005b      	lsls	r3, r3, #1
 8001df6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80e0 	beq.w	8001fd4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e14:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed4 <HAL_GPIO_Init+0x238>)
 8001e16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ed4 <HAL_GPIO_Init+0x238>)
 8001e1c:	f043 0302 	orr.w	r3, r3, #2
 8001e20:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e24:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed4 <HAL_GPIO_Init+0x238>)
 8001e26:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	60fb      	str	r3, [r7, #12]
 8001e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e32:	4a29      	ldr	r2, [pc, #164]	@ (8001ed8 <HAL_GPIO_Init+0x23c>)
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	089b      	lsrs	r3, r3, #2
 8001e38:	3302      	adds	r3, #2
 8001e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	f003 0303 	and.w	r3, r3, #3
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	220f      	movs	r2, #15
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4a20      	ldr	r2, [pc, #128]	@ (8001edc <HAL_GPIO_Init+0x240>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d052      	beq.n	8001f04 <HAL_GPIO_Init+0x268>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	4a1f      	ldr	r2, [pc, #124]	@ (8001ee0 <HAL_GPIO_Init+0x244>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d031      	beq.n	8001eca <HAL_GPIO_Init+0x22e>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	4a1e      	ldr	r2, [pc, #120]	@ (8001ee4 <HAL_GPIO_Init+0x248>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d02b      	beq.n	8001ec6 <HAL_GPIO_Init+0x22a>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4a1d      	ldr	r2, [pc, #116]	@ (8001ee8 <HAL_GPIO_Init+0x24c>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d025      	beq.n	8001ec2 <HAL_GPIO_Init+0x226>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	4a1c      	ldr	r2, [pc, #112]	@ (8001eec <HAL_GPIO_Init+0x250>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d01f      	beq.n	8001ebe <HAL_GPIO_Init+0x222>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a1b      	ldr	r2, [pc, #108]	@ (8001ef0 <HAL_GPIO_Init+0x254>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d019      	beq.n	8001eba <HAL_GPIO_Init+0x21e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	4a1a      	ldr	r2, [pc, #104]	@ (8001ef4 <HAL_GPIO_Init+0x258>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d013      	beq.n	8001eb6 <HAL_GPIO_Init+0x21a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_GPIO_Init+0x25c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00d      	beq.n	8001eb2 <HAL_GPIO_Init+0x216>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a18      	ldr	r2, [pc, #96]	@ (8001efc <HAL_GPIO_Init+0x260>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d007      	beq.n	8001eae <HAL_GPIO_Init+0x212>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a17      	ldr	r2, [pc, #92]	@ (8001f00 <HAL_GPIO_Init+0x264>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d101      	bne.n	8001eaa <HAL_GPIO_Init+0x20e>
 8001ea6:	2309      	movs	r3, #9
 8001ea8:	e02d      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001eaa:	230a      	movs	r3, #10
 8001eac:	e02b      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001eae:	2308      	movs	r3, #8
 8001eb0:	e029      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	e027      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001eb6:	2306      	movs	r3, #6
 8001eb8:	e025      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001eba:	2305      	movs	r3, #5
 8001ebc:	e023      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001ebe:	2304      	movs	r3, #4
 8001ec0:	e021      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e01f      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001ec6:	2302      	movs	r3, #2
 8001ec8:	e01d      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e01b      	b.n	8001f06 <HAL_GPIO_Init+0x26a>
 8001ece:	bf00      	nop
 8001ed0:	58000080 	.word	0x58000080
 8001ed4:	58024400 	.word	0x58024400
 8001ed8:	58000400 	.word	0x58000400
 8001edc:	58020000 	.word	0x58020000
 8001ee0:	58020400 	.word	0x58020400
 8001ee4:	58020800 	.word	0x58020800
 8001ee8:	58020c00 	.word	0x58020c00
 8001eec:	58021000 	.word	0x58021000
 8001ef0:	58021400 	.word	0x58021400
 8001ef4:	58021800 	.word	0x58021800
 8001ef8:	58021c00 	.word	0x58021c00
 8001efc:	58022000 	.word	0x58022000
 8001f00:	58022400 	.word	0x58022400
 8001f04:	2300      	movs	r3, #0
 8001f06:	69fa      	ldr	r2, [r7, #28]
 8001f08:	f002 0203 	and.w	r2, r2, #3
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	4093      	lsls	r3, r2
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f16:	4938      	ldr	r1, [pc, #224]	@ (8001ff8 <HAL_GPIO_Init+0x35c>)
 8001f18:	69fb      	ldr	r3, [r7, #28]
 8001f1a:	089b      	lsrs	r3, r3, #2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f24:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d003      	beq.n	8001f4a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001f4a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001f52:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	4013      	ands	r3, r2
 8001f62:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001f78:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d003      	beq.n	8001fa4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	69ba      	ldr	r2, [r7, #24]
 8001fb6:	4013      	ands	r3, r2
 8001fb8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d003      	beq.n	8001fce <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001fc6:	69ba      	ldr	r2, [r7, #24]
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f47f ae63 	bne.w	8001cb0 <HAL_GPIO_Init+0x14>
  }
}
 8001fea:	bf00      	nop
 8001fec:	bf00      	nop
 8001fee:	3724      	adds	r7, #36	@ 0x24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr
 8001ff8:	58000400 	.word	0x58000400

08001ffc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	807b      	strh	r3, [r7, #2]
 8002008:	4613      	mov	r3, r2
 800200a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800200c:	787b      	ldrb	r3, [r7, #1]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002012:	887a      	ldrh	r2, [r7, #2]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002018:	e003      	b.n	8002022 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	041a      	lsls	r2, r3, #16
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	619a      	str	r2, [r3, #24]
}
 8002022:	bf00      	nop
 8002024:	370c      	adds	r7, #12
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
	...

08002030 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002038:	4b19      	ldr	r3, [pc, #100]	@ (80020a0 <HAL_PWREx_ConfigSupply+0x70>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0304 	and.w	r3, r3, #4
 8002040:	2b04      	cmp	r3, #4
 8002042:	d00a      	beq.n	800205a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002044:	4b16      	ldr	r3, [pc, #88]	@ (80020a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	f003 0307 	and.w	r3, r3, #7
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	429a      	cmp	r2, r3
 8002050:	d001      	beq.n	8002056 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e01f      	b.n	8002096 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e01d      	b.n	8002096 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800205a:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <HAL_PWREx_ConfigSupply+0x70>)
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f023 0207 	bic.w	r2, r3, #7
 8002062:	490f      	ldr	r1, [pc, #60]	@ (80020a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4313      	orrs	r3, r2
 8002068:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800206a:	f7fe ff13 	bl	8000e94 <HAL_GetTick>
 800206e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002070:	e009      	b.n	8002086 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002072:	f7fe ff0f 	bl	8000e94 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002080:	d901      	bls.n	8002086 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e007      	b.n	8002096 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002086:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <HAL_PWREx_ConfigSupply+0x70>)
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800208e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002092:	d1ee      	bne.n	8002072 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	58024800 	.word	0x58024800

080020a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08c      	sub	sp, #48	@ 0x30
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d102      	bne.n	80020b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f000 bc48 	b.w	8002948 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8088 	beq.w	80021d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020c6:	4b99      	ldr	r3, [pc, #612]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020d0:	4b96      	ldr	r3, [pc, #600]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80020d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80020d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d007      	beq.n	80020ec <HAL_RCC_OscConfig+0x48>
 80020dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020de:	2b18      	cmp	r3, #24
 80020e0:	d111      	bne.n	8002106 <HAL_RCC_OscConfig+0x62>
 80020e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d10c      	bne.n	8002106 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4b8f      	ldr	r3, [pc, #572]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d06d      	beq.n	80021d4 <HAL_RCC_OscConfig+0x130>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d169      	bne.n	80021d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	f000 bc21 	b.w	8002948 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x7a>
 8002110:	4b86      	ldr	r3, [pc, #536]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a85      	ldr	r2, [pc, #532]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e02e      	b.n	800217c <HAL_RCC_OscConfig+0xd8>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x9c>
 8002126:	4b81      	ldr	r3, [pc, #516]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a80      	ldr	r2, [pc, #512]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b7e      	ldr	r3, [pc, #504]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a7d      	ldr	r2, [pc, #500]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xd8>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0xc0>
 800214a:	4b78      	ldr	r3, [pc, #480]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a77      	ldr	r2, [pc, #476]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b75      	ldr	r3, [pc, #468]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a74      	ldr	r2, [pc, #464]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xd8>
 8002164:	4b71      	ldr	r3, [pc, #452]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a70      	ldr	r2, [pc, #448]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b6e      	ldr	r3, [pc, #440]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a6d      	ldr	r2, [pc, #436]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800217a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7fe fe86 	bl	8000e94 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7fe fe82 	bl	8000e94 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	@ 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e3d4      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800219e:	4b63      	ldr	r3, [pc, #396]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xe8>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ac:	f7fe fe72 	bl	8000e94 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7fe fe6e 	bl	8000e94 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	@ 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e3c0      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80021c6:	4b59      	ldr	r3, [pc, #356]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x110>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 80ca 	beq.w	8002378 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021e4:	4b51      	ldr	r3, [pc, #324]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80021ee:	4b4f      	ldr	r3, [pc, #316]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80021f4:	6a3b      	ldr	r3, [r7, #32]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_RCC_OscConfig+0x166>
 80021fa:	6a3b      	ldr	r3, [r7, #32]
 80021fc:	2b18      	cmp	r3, #24
 80021fe:	d156      	bne.n	80022ae <HAL_RCC_OscConfig+0x20a>
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f003 0303 	and.w	r3, r3, #3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d151      	bne.n	80022ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220a:	4b48      	ldr	r3, [pc, #288]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0304 	and.w	r3, r3, #4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x17e>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e392      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002222:	4b42      	ldr	r3, [pc, #264]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 0219 	bic.w	r2, r3, #25
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	493f      	ldr	r1, [pc, #252]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002234:	f7fe fe2e 	bl	8000e94 <HAL_GetTick>
 8002238:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223c:	f7fe fe2a 	bl	8000e94 <HAL_GetTick>
 8002240:	4602      	mov	r2, r0
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e37c      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224e:	4b37      	ldr	r3, [pc, #220]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	f7fe fe27 	bl	8000eac <HAL_GetREVID>
 800225e:	4603      	mov	r3, r0
 8002260:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002264:	4293      	cmp	r3, r2
 8002266:	d817      	bhi.n	8002298 <HAL_RCC_OscConfig+0x1f4>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	2b40      	cmp	r3, #64	@ 0x40
 800226e:	d108      	bne.n	8002282 <HAL_RCC_OscConfig+0x1de>
 8002270:	4b2e      	ldr	r3, [pc, #184]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002278:	4a2c      	ldr	r2, [pc, #176]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800227a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800227e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002280:	e07a      	b.n	8002378 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002282:	4b2a      	ldr	r3, [pc, #168]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	031b      	lsls	r3, r3, #12
 8002290:	4926      	ldr	r1, [pc, #152]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002296:	e06f      	b.n	8002378 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002298:	4b24      	ldr	r3, [pc, #144]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	4921      	ldr	r1, [pc, #132]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ac:	e064      	b.n	8002378 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	68db      	ldr	r3, [r3, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d047      	beq.n	8002346 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80022b6:	4b1d      	ldr	r3, [pc, #116]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f023 0219 	bic.w	r2, r3, #25
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	491a      	ldr	r1, [pc, #104]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80022c4:	4313      	orrs	r3, r2
 80022c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe fde4 	bl	8000e94 <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7fe fde0 	bl	8000e94 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e332      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022e2:	4b12      	ldr	r3, [pc, #72]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ee:	f7fe fddd 	bl	8000eac <HAL_GetREVID>
 80022f2:	4603      	mov	r3, r0
 80022f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d819      	bhi.n	8002330 <HAL_RCC_OscConfig+0x28c>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	2b40      	cmp	r3, #64	@ 0x40
 8002302:	d108      	bne.n	8002316 <HAL_RCC_OscConfig+0x272>
 8002304:	4b09      	ldr	r3, [pc, #36]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800230c:	4a07      	ldr	r2, [pc, #28]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 800230e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002312:	6053      	str	r3, [r2, #4]
 8002314:	e030      	b.n	8002378 <HAL_RCC_OscConfig+0x2d4>
 8002316:	4b05      	ldr	r3, [pc, #20]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	031b      	lsls	r3, r3, #12
 8002324:	4901      	ldr	r1, [pc, #4]	@ (800232c <HAL_RCC_OscConfig+0x288>)
 8002326:	4313      	orrs	r3, r2
 8002328:	604b      	str	r3, [r1, #4]
 800232a:	e025      	b.n	8002378 <HAL_RCC_OscConfig+0x2d4>
 800232c:	58024400 	.word	0x58024400
 8002330:	4b9a      	ldr	r3, [pc, #616]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	061b      	lsls	r3, r3, #24
 800233e:	4997      	ldr	r1, [pc, #604]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002340:	4313      	orrs	r3, r2
 8002342:	604b      	str	r3, [r1, #4]
 8002344:	e018      	b.n	8002378 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002346:	4b95      	ldr	r3, [pc, #596]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a94      	ldr	r2, [pc, #592]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800234c:	f023 0301 	bic.w	r3, r3, #1
 8002350:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fd9f 	bl	8000e94 <HAL_GetTick>
 8002356:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800235a:	f7fe fd9b 	bl	8000e94 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b02      	cmp	r3, #2
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e2ed      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800236c:	4b8b      	ldr	r3, [pc, #556]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 0304 	and.w	r3, r3, #4
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1f0      	bne.n	800235a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0310 	and.w	r3, r3, #16
 8002380:	2b00      	cmp	r3, #0
 8002382:	f000 80a9 	beq.w	80024d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002386:	4b85      	ldr	r3, [pc, #532]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800238e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002390:	4b82      	ldr	r3, [pc, #520]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002394:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d007      	beq.n	80023ac <HAL_RCC_OscConfig+0x308>
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	2b18      	cmp	r3, #24
 80023a0:	d13a      	bne.n	8002418 <HAL_RCC_OscConfig+0x374>
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d135      	bne.n	8002418 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023ac:	4b7b      	ldr	r3, [pc, #492]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_OscConfig+0x320>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	69db      	ldr	r3, [r3, #28]
 80023bc:	2b80      	cmp	r3, #128	@ 0x80
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e2c1      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023c4:	f7fe fd72 	bl	8000eac <HAL_GetREVID>
 80023c8:	4603      	mov	r3, r0
 80023ca:	f241 0203 	movw	r2, #4099	@ 0x1003
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d817      	bhi.n	8002402 <HAL_RCC_OscConfig+0x35e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	2b20      	cmp	r3, #32
 80023d8:	d108      	bne.n	80023ec <HAL_RCC_OscConfig+0x348>
 80023da:	4b70      	ldr	r3, [pc, #448]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80023e2:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80023e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80023e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023ea:	e075      	b.n	80024d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ec:	4b6b      	ldr	r3, [pc, #428]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	069b      	lsls	r3, r3, #26
 80023fa:	4968      	ldr	r1, [pc, #416]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002400:	e06a      	b.n	80024d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002402:	4b66      	ldr	r3, [pc, #408]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	061b      	lsls	r3, r3, #24
 8002410:	4962      	ldr	r1, [pc, #392]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002412:	4313      	orrs	r3, r2
 8002414:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002416:	e05f      	b.n	80024d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d042      	beq.n	80024a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002420:	4b5e      	ldr	r3, [pc, #376]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a5d      	ldr	r2, [pc, #372]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002426:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800242a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fd32 	bl	8000e94 <HAL_GetTick>
 8002430:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002434:	f7fe fd2e 	bl	8000e94 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e280      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002446:	4b55      	ldr	r3, [pc, #340]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d0f0      	beq.n	8002434 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002452:	f7fe fd2b 	bl	8000eac <HAL_GetREVID>
 8002456:	4603      	mov	r3, r0
 8002458:	f241 0203 	movw	r2, #4099	@ 0x1003
 800245c:	4293      	cmp	r3, r2
 800245e:	d817      	bhi.n	8002490 <HAL_RCC_OscConfig+0x3ec>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6a1b      	ldr	r3, [r3, #32]
 8002464:	2b20      	cmp	r3, #32
 8002466:	d108      	bne.n	800247a <HAL_RCC_OscConfig+0x3d6>
 8002468:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002470:	4a4a      	ldr	r2, [pc, #296]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002472:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002476:	6053      	str	r3, [r2, #4]
 8002478:	e02e      	b.n	80024d8 <HAL_RCC_OscConfig+0x434>
 800247a:	4b48      	ldr	r3, [pc, #288]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	069b      	lsls	r3, r3, #26
 8002488:	4944      	ldr	r1, [pc, #272]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	604b      	str	r3, [r1, #4]
 800248e:	e023      	b.n	80024d8 <HAL_RCC_OscConfig+0x434>
 8002490:	4b42      	ldr	r3, [pc, #264]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a1b      	ldr	r3, [r3, #32]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	493f      	ldr	r1, [pc, #252]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60cb      	str	r3, [r1, #12]
 80024a4:	e018      	b.n	80024d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80024a6:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3c      	ldr	r2, [pc, #240]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80024ac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fcef 	bl	8000e94 <HAL_GetTick>
 80024b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024b8:	e008      	b.n	80024cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024ba:	f7fe fceb 	bl	8000e94 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d901      	bls.n	80024cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e23d      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80024cc:	4b33      	ldr	r3, [pc, #204]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d1f0      	bne.n	80024ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d036      	beq.n	8002552 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d019      	beq.n	8002520 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ec:	4b2b      	ldr	r3, [pc, #172]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80024ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f0:	4a2a      	ldr	r2, [pc, #168]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 80024f2:	f043 0301 	orr.w	r3, r3, #1
 80024f6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024f8:	f7fe fccc 	bl	8000e94 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002500:	f7fe fcc8 	bl	8000e94 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e21a      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002512:	4b22      	ldr	r3, [pc, #136]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002514:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x45c>
 800251e:	e018      	b.n	8002552 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002520:	4b1e      	ldr	r3, [pc, #120]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002522:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002524:	4a1d      	ldr	r2, [pc, #116]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002526:	f023 0301 	bic.w	r3, r3, #1
 800252a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800252c:	f7fe fcb2 	bl	8000e94 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002534:	f7fe fcae 	bl	8000e94 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e200      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002546:	4b15      	ldr	r3, [pc, #84]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d039      	beq.n	80025d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	699b      	ldr	r3, [r3, #24]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d01c      	beq.n	80025a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a0c      	ldr	r2, [pc, #48]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800256c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002570:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002572:	f7fe fc8f 	bl	8000e94 <HAL_GetTick>
 8002576:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800257a:	f7fe fc8b 	bl	8000e94 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1dd      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800258c:	4b03      	ldr	r3, [pc, #12]	@ (800259c <HAL_RCC_OscConfig+0x4f8>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x4d6>
 8002598:	e01b      	b.n	80025d2 <HAL_RCC_OscConfig+0x52e>
 800259a:	bf00      	nop
 800259c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025a0:	4b9b      	ldr	r3, [pc, #620]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a9a      	ldr	r2, [pc, #616]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80025a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ac:	f7fe fc72 	bl	8000e94 <HAL_GetTick>
 80025b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025b2:	e008      	b.n	80025c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025b4:	f7fe fc6e 	bl	8000e94 <HAL_GetTick>
 80025b8:	4602      	mov	r2, r0
 80025ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025bc:	1ad3      	subs	r3, r2, r3
 80025be:	2b02      	cmp	r3, #2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e1c0      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80025c6:	4b92      	ldr	r3, [pc, #584]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1f0      	bne.n	80025b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f003 0304 	and.w	r3, r3, #4
 80025da:	2b00      	cmp	r3, #0
 80025dc:	f000 8081 	beq.w	80026e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80025e0:	4b8c      	ldr	r3, [pc, #560]	@ (8002814 <HAL_RCC_OscConfig+0x770>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a8b      	ldr	r2, [pc, #556]	@ (8002814 <HAL_RCC_OscConfig+0x770>)
 80025e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025ec:	f7fe fc52 	bl	8000e94 <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025f4:	f7fe fc4e 	bl	8000e94 <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b64      	cmp	r3, #100	@ 0x64
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e1a0      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002606:	4b83      	ldr	r3, [pc, #524]	@ (8002814 <HAL_RCC_OscConfig+0x770>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d106      	bne.n	8002628 <HAL_RCC_OscConfig+0x584>
 800261a:	4b7d      	ldr	r3, [pc, #500]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800261c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800261e:	4a7c      	ldr	r2, [pc, #496]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002620:	f043 0301 	orr.w	r3, r3, #1
 8002624:	6713      	str	r3, [r2, #112]	@ 0x70
 8002626:	e02d      	b.n	8002684 <HAL_RCC_OscConfig+0x5e0>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10c      	bne.n	800264a <HAL_RCC_OscConfig+0x5a6>
 8002630:	4b77      	ldr	r3, [pc, #476]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002632:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002634:	4a76      	ldr	r2, [pc, #472]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6713      	str	r3, [r2, #112]	@ 0x70
 800263c:	4b74      	ldr	r3, [pc, #464]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800263e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002640:	4a73      	ldr	r2, [pc, #460]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002642:	f023 0304 	bic.w	r3, r3, #4
 8002646:	6713      	str	r3, [r2, #112]	@ 0x70
 8002648:	e01c      	b.n	8002684 <HAL_RCC_OscConfig+0x5e0>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	2b05      	cmp	r3, #5
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x5c8>
 8002652:	4b6f      	ldr	r3, [pc, #444]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002654:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002656:	4a6e      	ldr	r2, [pc, #440]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002658:	f043 0304 	orr.w	r3, r3, #4
 800265c:	6713      	str	r3, [r2, #112]	@ 0x70
 800265e:	4b6c      	ldr	r3, [pc, #432]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002662:	4a6b      	ldr	r2, [pc, #428]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6713      	str	r3, [r2, #112]	@ 0x70
 800266a:	e00b      	b.n	8002684 <HAL_RCC_OscConfig+0x5e0>
 800266c:	4b68      	ldr	r3, [pc, #416]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800266e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002670:	4a67      	ldr	r2, [pc, #412]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002672:	f023 0301 	bic.w	r3, r3, #1
 8002676:	6713      	str	r3, [r2, #112]	@ 0x70
 8002678:	4b65      	ldr	r3, [pc, #404]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800267a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800267c:	4a64      	ldr	r2, [pc, #400]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800267e:	f023 0304 	bic.w	r3, r3, #4
 8002682:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268c:	f7fe fc02 	bl	8000e94 <HAL_GetTick>
 8002690:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002692:	e00a      	b.n	80026aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002694:	f7fe fbfe 	bl	8000e94 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e14e      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026aa:	4b59      	ldr	r3, [pc, #356]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ae:	f003 0302 	and.w	r3, r3, #2
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0ee      	beq.n	8002694 <HAL_RCC_OscConfig+0x5f0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b8:	f7fe fbec 	bl	8000e94 <HAL_GetTick>
 80026bc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026be:	e00a      	b.n	80026d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c0:	f7fe fbe8 	bl	8000e94 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e138      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026d6:	4b4e      	ldr	r3, [pc, #312]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1ee      	bne.n	80026c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f000 812d 	beq.w	8002946 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80026ec:	4b48      	ldr	r3, [pc, #288]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026f4:	2b18      	cmp	r3, #24
 80026f6:	f000 80bd 	beq.w	8002874 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026fe:	2b02      	cmp	r3, #2
 8002700:	f040 809e 	bne.w	8002840 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002704:	4b42      	ldr	r3, [pc, #264]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a41      	ldr	r2, [pc, #260]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800270a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800270e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002710:	f7fe fbc0 	bl	8000e94 <HAL_GetTick>
 8002714:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002716:	e008      	b.n	800272a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002718:	f7fe fbbc 	bl	8000e94 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	2b02      	cmp	r3, #2
 8002724:	d901      	bls.n	800272a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	e10e      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800272a:	4b39      	ldr	r3, [pc, #228]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1f0      	bne.n	8002718 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002736:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002738:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800273a:	4b37      	ldr	r3, [pc, #220]	@ (8002818 <HAL_RCC_OscConfig+0x774>)
 800273c:	4013      	ands	r3, r2
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002746:	0112      	lsls	r2, r2, #4
 8002748:	430a      	orrs	r2, r1
 800274a:	4931      	ldr	r1, [pc, #196]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800274c:	4313      	orrs	r3, r2
 800274e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002754:	3b01      	subs	r3, #1
 8002756:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800275e:	3b01      	subs	r3, #1
 8002760:	025b      	lsls	r3, r3, #9
 8002762:	b29b      	uxth	r3, r3
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800276a:	3b01      	subs	r3, #1
 800276c:	041b      	lsls	r3, r3, #16
 800276e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002778:	3b01      	subs	r3, #1
 800277a:	061b      	lsls	r3, r3, #24
 800277c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002780:	4923      	ldr	r1, [pc, #140]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002786:	4b22      	ldr	r3, [pc, #136]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278a:	4a21      	ldr	r2, [pc, #132]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002792:	4b1f      	ldr	r3, [pc, #124]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002796:	4b21      	ldr	r3, [pc, #132]	@ (800281c <HAL_RCC_OscConfig+0x778>)
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800279e:	00d2      	lsls	r2, r2, #3
 80027a0:	491b      	ldr	r1, [pc, #108]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027a2:	4313      	orrs	r3, r2
 80027a4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80027a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027aa:	f023 020c 	bic.w	r2, r3, #12
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	4917      	ldr	r1, [pc, #92]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80027b8:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027bc:	f023 0202 	bic.w	r2, r3, #2
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c4:	4912      	ldr	r1, [pc, #72]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80027ca:	4b11      	ldr	r3, [pc, #68]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ce:	4a10      	ldr	r2, [pc, #64]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027da:	4a0d      	ldr	r2, [pc, #52]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80027e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f2:	4a07      	ldr	r2, [pc, #28]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027fa:	4b05      	ldr	r3, [pc, #20]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a04      	ldr	r2, [pc, #16]	@ (8002810 <HAL_RCC_OscConfig+0x76c>)
 8002800:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002806:	f7fe fb45 	bl	8000e94 <HAL_GetTick>
 800280a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800280c:	e011      	b.n	8002832 <HAL_RCC_OscConfig+0x78e>
 800280e:	bf00      	nop
 8002810:	58024400 	.word	0x58024400
 8002814:	58024800 	.word	0x58024800
 8002818:	fffffc0c 	.word	0xfffffc0c
 800281c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002820:	f7fe fb38 	bl	8000e94 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e08a      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002832:	4b47      	ldr	r3, [pc, #284]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x77c>
 800283e:	e082      	b.n	8002946 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002840:	4b43      	ldr	r3, [pc, #268]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a42      	ldr	r2, [pc, #264]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002846:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800284a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800284c:	f7fe fb22 	bl	8000e94 <HAL_GetTick>
 8002850:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002854:	f7fe fb1e 	bl	8000e94 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e070      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002866:	4b3a      	ldr	r3, [pc, #232]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x7b0>
 8002872:	e068      	b.n	8002946 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002874:	4b36      	ldr	r3, [pc, #216]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002878:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800287a:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002884:	2b01      	cmp	r3, #1
 8002886:	d031      	beq.n	80028ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	f003 0203 	and.w	r2, r3, #3
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d12a      	bne.n	80028ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d122      	bne.n	80028ec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d11a      	bne.n	80028ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	0a5b      	lsrs	r3, r3, #9
 80028ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d111      	bne.n	80028ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	0c1b      	lsrs	r3, r3, #16
 80028cc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	0e1b      	lsrs	r3, r3, #24
 80028de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028e6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e02b      	b.n	8002948 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80028f0:	4b17      	ldr	r3, [pc, #92]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 80028f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028f4:	08db      	lsrs	r3, r3, #3
 80028f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028fa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	429a      	cmp	r2, r3
 8002904:	d01f      	beq.n	8002946 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800290a:	4a11      	ldr	r2, [pc, #68]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 800290c:	f023 0301 	bic.w	r3, r3, #1
 8002910:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002912:	f7fe fabf 	bl	8000e94 <HAL_GetTick>
 8002916:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002918:	bf00      	nop
 800291a:	f7fe fabb 	bl	8000e94 <HAL_GetTick>
 800291e:	4602      	mov	r2, r0
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002922:	4293      	cmp	r3, r2
 8002924:	d0f9      	beq.n	800291a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002926:	4b0a      	ldr	r3, [pc, #40]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002928:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800292a:	4b0a      	ldr	r3, [pc, #40]	@ (8002954 <HAL_RCC_OscConfig+0x8b0>)
 800292c:	4013      	ands	r3, r2
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002932:	00d2      	lsls	r2, r2, #3
 8002934:	4906      	ldr	r1, [pc, #24]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002936:	4313      	orrs	r3, r2
 8002938:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800293a:	4b05      	ldr	r3, [pc, #20]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 800293c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293e:	4a04      	ldr	r2, [pc, #16]	@ (8002950 <HAL_RCC_OscConfig+0x8ac>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3730      	adds	r7, #48	@ 0x30
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	58024400 	.word	0x58024400
 8002954:	ffff0007 	.word	0xffff0007

08002958 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b086      	sub	sp, #24
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e19c      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800296c:	4b8a      	ldr	r3, [pc, #552]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 030f 	and.w	r3, r3, #15
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d910      	bls.n	800299c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297a:	4b87      	ldr	r3, [pc, #540]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f023 020f 	bic.w	r2, r3, #15
 8002982:	4985      	ldr	r1, [pc, #532]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	4313      	orrs	r3, r2
 8002988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800298a:	4b83      	ldr	r3, [pc, #524]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d001      	beq.n	800299c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e184      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0304 	and.w	r3, r3, #4
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d010      	beq.n	80029ca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	691a      	ldr	r2, [r3, #16]
 80029ac:	4b7b      	ldr	r3, [pc, #492]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d908      	bls.n	80029ca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80029b8:	4b78      	ldr	r3, [pc, #480]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	4975      	ldr	r1, [pc, #468]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d010      	beq.n	80029f8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695a      	ldr	r2, [r3, #20]
 80029da:	4b70      	ldr	r3, [pc, #448]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029e2:	429a      	cmp	r2, r3
 80029e4:	d908      	bls.n	80029f8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80029e6:	4b6d      	ldr	r3, [pc, #436]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	496a      	ldr	r1, [pc, #424]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d010      	beq.n	8002a26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	699a      	ldr	r2, [r3, #24]
 8002a08:	4b64      	ldr	r3, [pc, #400]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a0a:	69db      	ldr	r3, [r3, #28]
 8002a0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d908      	bls.n	8002a26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a14:	4b61      	ldr	r3, [pc, #388]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	495e      	ldr	r1, [pc, #376]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0320 	and.w	r3, r3, #32
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d010      	beq.n	8002a54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	4b59      	ldr	r3, [pc, #356]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d908      	bls.n	8002a54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002a42:	4b56      	ldr	r3, [pc, #344]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	4953      	ldr	r1, [pc, #332]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d010      	beq.n	8002a82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68da      	ldr	r2, [r3, #12]
 8002a64:	4b4d      	ldr	r3, [pc, #308]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a66:	699b      	ldr	r3, [r3, #24]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	d908      	bls.n	8002a82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a70:	4b4a      	ldr	r3, [pc, #296]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f023 020f 	bic.w	r2, r3, #15
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	4947      	ldr	r1, [pc, #284]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0301 	and.w	r3, r3, #1
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d055      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a8e:	4b43      	ldr	r3, [pc, #268]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a90:	699b      	ldr	r3, [r3, #24]
 8002a92:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	4940      	ldr	r1, [pc, #256]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d107      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002aa8:	4b3c      	ldr	r3, [pc, #240]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d121      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0f6      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d107      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ac0:	4b36      	ldr	r3, [pc, #216]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d115      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0ea      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002ad8:	4b30      	ldr	r3, [pc, #192]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0de      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ae8:	4b2c      	ldr	r3, [pc, #176]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0304 	and.w	r3, r3, #4
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0d6      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002af8:	4b28      	ldr	r3, [pc, #160]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002afa:	691b      	ldr	r3, [r3, #16]
 8002afc:	f023 0207 	bic.w	r2, r3, #7
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	4925      	ldr	r1, [pc, #148]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b0a:	f7fe f9c3 	bl	8000e94 <HAL_GetTick>
 8002b0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b12:	f7fe f9bf 	bl	8000e94 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d901      	bls.n	8002b28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e0be      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b28:	4b1c      	ldr	r3, [pc, #112]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b2a:	691b      	ldr	r3, [r3, #16]
 8002b2c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d1eb      	bne.n	8002b12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d010      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	68da      	ldr	r2, [r3, #12]
 8002b4a:	4b14      	ldr	r3, [pc, #80]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d208      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b56:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f023 020f 	bic.w	r2, r3, #15
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	490e      	ldr	r1, [pc, #56]	@ (8002b9c <HAL_RCC_ClockConfig+0x244>)
 8002b64:	4313      	orrs	r3, r2
 8002b66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 030f 	and.w	r3, r3, #15
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d214      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 020f 	bic.w	r2, r3, #15
 8002b7e:	4906      	ldr	r1, [pc, #24]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b04      	ldr	r3, [pc, #16]	@ (8002b98 <HAL_RCC_ClockConfig+0x240>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 030f 	and.w	r3, r3, #15
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d005      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e086      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x34e>
 8002b98:	52002000 	.word	0x52002000
 8002b9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d010      	beq.n	8002bce <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	4b3f      	ldr	r3, [pc, #252]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002bb8:	429a      	cmp	r2, r3
 8002bba:	d208      	bcs.n	8002bce <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4939      	ldr	r1, [pc, #228]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0308 	and.w	r3, r3, #8
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d010      	beq.n	8002bfc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	4b34      	ldr	r3, [pc, #208]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d208      	bcs.n	8002bfc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002bea:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	492e      	ldr	r1, [pc, #184]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 0310 	and.w	r3, r3, #16
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d010      	beq.n	8002c2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c0e:	69db      	ldr	r3, [r3, #28]
 8002c10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d208      	bcs.n	8002c2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c18:	4b25      	ldr	r3, [pc, #148]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c1a:	69db      	ldr	r3, [r3, #28]
 8002c1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	4922      	ldr	r1, [pc, #136]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c26:	4313      	orrs	r3, r2
 8002c28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	69da      	ldr	r2, [r3, #28]
 8002c3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
 8002c3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d208      	bcs.n	8002c58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002c46:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	4917      	ldr	r1, [pc, #92]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c54:	4313      	orrs	r3, r2
 8002c56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002c58:	f000 f834 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b14      	ldr	r3, [pc, #80]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 030f 	and.w	r3, r3, #15
 8002c68:	4912      	ldr	r1, [pc, #72]	@ (8002cb4 <HAL_RCC_ClockConfig+0x35c>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
 8002c74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c76:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb0 <HAL_RCC_ClockConfig+0x358>)
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	f003 030f 	and.w	r3, r3, #15
 8002c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <HAL_RCC_ClockConfig+0x35c>)
 8002c80:	5cd3      	ldrb	r3, [r2, r3]
 8002c82:	f003 031f 	and.w	r3, r3, #31
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <HAL_RCC_ClockConfig+0x360>)
 8002c8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c90:	4a0a      	ldr	r2, [pc, #40]	@ (8002cbc <HAL_RCC_ClockConfig+0x364>)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	@ (8002cc0 <HAL_RCC_ClockConfig+0x368>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f7fe f8b0 	bl	8000e00 <HAL_InitTick>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3718      	adds	r7, #24
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	58024400 	.word	0x58024400
 8002cb4:	080075e0 	.word	0x080075e0
 8002cb8:	24000004 	.word	0x24000004
 8002cbc:	24000000 	.word	0x24000000
 8002cc0:	24000008 	.word	0x24000008

08002cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b089      	sub	sp, #36	@ 0x24
 8002cc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cca:	4bb3      	ldr	r3, [pc, #716]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	f200 8155 	bhi.w	8002f82 <HAL_RCC_GetSysClockFreq+0x2be>
 8002cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cde:	bf00      	nop
 8002ce0:	08002d45 	.word	0x08002d45
 8002ce4:	08002f83 	.word	0x08002f83
 8002ce8:	08002f83 	.word	0x08002f83
 8002cec:	08002f83 	.word	0x08002f83
 8002cf0:	08002f83 	.word	0x08002f83
 8002cf4:	08002f83 	.word	0x08002f83
 8002cf8:	08002f83 	.word	0x08002f83
 8002cfc:	08002f83 	.word	0x08002f83
 8002d00:	08002d6b 	.word	0x08002d6b
 8002d04:	08002f83 	.word	0x08002f83
 8002d08:	08002f83 	.word	0x08002f83
 8002d0c:	08002f83 	.word	0x08002f83
 8002d10:	08002f83 	.word	0x08002f83
 8002d14:	08002f83 	.word	0x08002f83
 8002d18:	08002f83 	.word	0x08002f83
 8002d1c:	08002f83 	.word	0x08002f83
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002f83 	.word	0x08002f83
 8002d28:	08002f83 	.word	0x08002f83
 8002d2c:	08002f83 	.word	0x08002f83
 8002d30:	08002f83 	.word	0x08002f83
 8002d34:	08002f83 	.word	0x08002f83
 8002d38:	08002f83 	.word	0x08002f83
 8002d3c:	08002f83 	.word	0x08002f83
 8002d40:	08002d77 	.word	0x08002d77
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d44:	4b94      	ldr	r3, [pc, #592]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d50:	4b91      	ldr	r3, [pc, #580]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	4a90      	ldr	r2, [pc, #576]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d60:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002d62:	e111      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d64:	4b8d      	ldr	r3, [pc, #564]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d66:	61bb      	str	r3, [r7, #24]
      break;
 8002d68:	e10e      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d6c:	61bb      	str	r3, [r7, #24]
      break;
 8002d6e:	e10b      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d70:	4b8c      	ldr	r3, [pc, #560]	@ (8002fa4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d72:	61bb      	str	r3, [r7, #24]
      break;
 8002d74:	e108      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d76:	4b88      	ldr	r3, [pc, #544]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7a:	f003 0303 	and.w	r3, r3, #3
 8002d7e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d80:	4b85      	ldr	r3, [pc, #532]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	091b      	lsrs	r3, r3, #4
 8002d86:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d8a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d8c:	4b82      	ldr	r3, [pc, #520]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d96:	4b80      	ldr	r3, [pc, #512]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d9a:	08db      	lsrs	r3, r3, #3
 8002d9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80e1 	beq.w	8002f7c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f000 8083 	beq.w	8002ec8 <HAL_RCC_GetSysClockFreq+0x204>
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	f200 80a1 	bhi.w	8002f0c <HAL_RCC_GetSysClockFreq+0x248>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x114>
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d056      	beq.n	8002e84 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002dd6:	e099      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0320 	and.w	r3, r3, #32
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d02d      	beq.n	8002e40 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002de4:	4b6c      	ldr	r3, [pc, #432]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	08db      	lsrs	r3, r3, #3
 8002dea:	f003 0303 	and.w	r3, r3, #3
 8002dee:	4a6b      	ldr	r2, [pc, #428]	@ (8002f9c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002df0:	fa22 f303 	lsr.w	r3, r2, r3
 8002df4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	ee07 3a90 	vmov	s15, r3
 8002dfc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e0e:	4b62      	ldr	r3, [pc, #392]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e16:	ee07 3a90 	vmov	s15, r3
 8002e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e22:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002e3e:	e087      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	ee07 3a90 	vmov	s15, r3
 8002e46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002fac <HAL_RCC_GetSysClockFreq+0x2e8>
 8002e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e52:	4b51      	ldr	r3, [pc, #324]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e66:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e82:	e065      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002fb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e96:	4b40      	ldr	r3, [pc, #256]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ea6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eaa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ec6:	e043      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002fb4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eda:	4b2f      	ldr	r3, [pc, #188]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eea:	ed97 6a02 	vldr	s12, [r7, #8]
 8002eee:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f0a:	e021      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f0c:	693b      	ldr	r3, [r7, #16]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002fb0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1e:	4b1e      	ldr	r3, [pc, #120]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f32:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002fa8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f4e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f54:	0a5b      	lsrs	r3, r3, #9
 8002f56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	ee07 3a90 	vmov	s15, r3
 8002f64:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f74:	ee17 3a90 	vmov	r3, s15
 8002f78:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f7a:	e005      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	61bb      	str	r3, [r7, #24]
      break;
 8002f80:	e002      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f82:	4b07      	ldr	r3, [pc, #28]	@ (8002fa0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f84:	61bb      	str	r3, [r7, #24]
      break;
 8002f86:	bf00      	nop
  }

  return sysclockfreq;
 8002f88:	69bb      	ldr	r3, [r7, #24]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3724      	adds	r7, #36	@ 0x24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f94:	4770      	bx	lr
 8002f96:	bf00      	nop
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	03d09000 	.word	0x03d09000
 8002fa0:	003d0900 	.word	0x003d0900
 8002fa4:	007a1200 	.word	0x007a1200
 8002fa8:	46000000 	.word	0x46000000
 8002fac:	4c742400 	.word	0x4c742400
 8002fb0:	4a742400 	.word	0x4a742400
 8002fb4:	4af42400 	.word	0x4af42400

08002fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002fbe:	f7ff fe81 	bl	8002cc4 <HAL_RCC_GetSysClockFreq>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	4b10      	ldr	r3, [pc, #64]	@ (8003008 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	0a1b      	lsrs	r3, r3, #8
 8002fca:	f003 030f 	and.w	r3, r3, #15
 8002fce:	490f      	ldr	r1, [pc, #60]	@ (800300c <HAL_RCC_GetHCLKFreq+0x54>)
 8002fd0:	5ccb      	ldrb	r3, [r1, r3]
 8002fd2:	f003 031f 	and.w	r3, r3, #31
 8002fd6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8003008 <HAL_RCC_GetHCLKFreq+0x50>)
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	4a09      	ldr	r2, [pc, #36]	@ (800300c <HAL_RCC_GetHCLKFreq+0x54>)
 8002fe6:	5cd3      	ldrb	r3, [r2, r3]
 8002fe8:	f003 031f 	and.w	r3, r3, #31
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff2:	4a07      	ldr	r2, [pc, #28]	@ (8003010 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ff4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ff6:	4a07      	ldr	r2, [pc, #28]	@ (8003014 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ffc:	4b04      	ldr	r3, [pc, #16]	@ (8003010 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	58024400 	.word	0x58024400
 800300c:	080075e0 	.word	0x080075e0
 8003010:	24000004 	.word	0x24000004
 8003014:	24000000 	.word	0x24000000

08003018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800301c:	f7ff ffcc 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b06      	ldr	r3, [pc, #24]	@ (800303c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	091b      	lsrs	r3, r3, #4
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	4904      	ldr	r1, [pc, #16]	@ (8003040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003038:	4618      	mov	r0, r3
 800303a:	bd80      	pop	{r7, pc}
 800303c:	58024400 	.word	0x58024400
 8003040:	080075e0 	.word	0x080075e0

08003044 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003048:	f7ff ffb6 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 800304c:	4602      	mov	r2, r0
 800304e:	4b06      	ldr	r3, [pc, #24]	@ (8003068 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003050:	69db      	ldr	r3, [r3, #28]
 8003052:	0a1b      	lsrs	r3, r3, #8
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	4904      	ldr	r1, [pc, #16]	@ (800306c <HAL_RCC_GetPCLK2Freq+0x28>)
 800305a:	5ccb      	ldrb	r3, [r1, r3]
 800305c:	f003 031f 	and.w	r3, r3, #31
 8003060:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003064:	4618      	mov	r0, r3
 8003066:	bd80      	pop	{r7, pc}
 8003068:	58024400 	.word	0x58024400
 800306c:	080075e0 	.word	0x080075e0

08003070 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003074:	b0ca      	sub	sp, #296	@ 0x128
 8003076:	af00      	add	r7, sp, #0
 8003078:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003082:	2300      	movs	r3, #0
 8003084:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800308c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003090:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003094:	2500      	movs	r5, #0
 8003096:	ea54 0305 	orrs.w	r3, r4, r5
 800309a:	d049      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030a2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030a6:	d02f      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80030a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80030ac:	d828      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030ae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030b2:	d01a      	beq.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80030b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030b8:	d822      	bhi.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80030be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80030c2:	d007      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80030c4:	e01c      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030c6:	4bb8      	ldr	r3, [pc, #736]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ca:	4ab7      	ldr	r2, [pc, #732]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030d2:	e01a      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030d8:	3308      	adds	r3, #8
 80030da:	2102      	movs	r1, #2
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 fc8f 	bl	8004a00 <RCCEx_PLL2_Config>
 80030e2:	4603      	mov	r3, r0
 80030e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030e8:	e00f      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ee:	3328      	adds	r3, #40	@ 0x28
 80030f0:	2102      	movs	r1, #2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 fd36 	bl	8004b64 <RCCEx_PLL3_Config>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80030fe:	e004      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003106:	e000      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003108:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003112:	4ba5      	ldr	r3, [pc, #660]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003114:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003116:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800311e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003120:	4aa1      	ldr	r2, [pc, #644]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003122:	430b      	orrs	r3, r1
 8003124:	6513      	str	r3, [r2, #80]	@ 0x50
 8003126:	e003      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003128:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003138:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800313c:	f04f 0900 	mov.w	r9, #0
 8003140:	ea58 0309 	orrs.w	r3, r8, r9
 8003144:	d047      	beq.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800314a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800314c:	2b04      	cmp	r3, #4
 800314e:	d82a      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003150:	a201      	add	r2, pc, #4	@ (adr r2, 8003158 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003156:	bf00      	nop
 8003158:	0800316d 	.word	0x0800316d
 800315c:	0800317b 	.word	0x0800317b
 8003160:	08003191 	.word	0x08003191
 8003164:	080031af 	.word	0x080031af
 8003168:	080031af 	.word	0x080031af
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800316c:	4b8e      	ldr	r3, [pc, #568]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800316e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003170:	4a8d      	ldr	r2, [pc, #564]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003172:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003176:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003178:	e01a      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800317a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800317e:	3308      	adds	r3, #8
 8003180:	2100      	movs	r1, #0
 8003182:	4618      	mov	r0, r3
 8003184:	f001 fc3c 	bl	8004a00 <RCCEx_PLL2_Config>
 8003188:	4603      	mov	r3, r0
 800318a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800318e:	e00f      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003194:	3328      	adds	r3, #40	@ 0x28
 8003196:	2100      	movs	r1, #0
 8003198:	4618      	mov	r0, r3
 800319a:	f001 fce3 	bl	8004b64 <RCCEx_PLL3_Config>
 800319e:	4603      	mov	r3, r0
 80031a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031a4:	e004      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031ac:	e000      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80031ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10a      	bne.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b8:	4b7b      	ldr	r3, [pc, #492]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031bc:	f023 0107 	bic.w	r1, r3, #7
 80031c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c6:	4a78      	ldr	r2, [pc, #480]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031c8:	430b      	orrs	r3, r1
 80031ca:	6513      	str	r3, [r2, #80]	@ 0x50
 80031cc:	e003      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031de:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80031e2:	f04f 0b00 	mov.w	fp, #0
 80031e6:	ea5a 030b 	orrs.w	r3, sl, fp
 80031ea:	d04c      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80031ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031f6:	d030      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fc:	d829      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003200:	d02d      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003202:	2bc0      	cmp	r3, #192	@ 0xc0
 8003204:	d825      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003206:	2b80      	cmp	r3, #128	@ 0x80
 8003208:	d018      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800320a:	2b80      	cmp	r3, #128	@ 0x80
 800320c:	d821      	bhi.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800320e:	2b00      	cmp	r3, #0
 8003210:	d002      	beq.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003212:	2b40      	cmp	r3, #64	@ 0x40
 8003214:	d007      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003216:	e01c      	b.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003218:	4b63      	ldr	r3, [pc, #396]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800321a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800321c:	4a62      	ldr	r2, [pc, #392]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800321e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003224:	e01c      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800322a:	3308      	adds	r3, #8
 800322c:	2100      	movs	r1, #0
 800322e:	4618      	mov	r0, r3
 8003230:	f001 fbe6 	bl	8004a00 <RCCEx_PLL2_Config>
 8003234:	4603      	mov	r3, r0
 8003236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800323a:	e011      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800323c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003240:	3328      	adds	r3, #40	@ 0x28
 8003242:	2100      	movs	r1, #0
 8003244:	4618      	mov	r0, r3
 8003246:	f001 fc8d 	bl	8004b64 <RCCEx_PLL3_Config>
 800324a:	4603      	mov	r3, r0
 800324c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003250:	e006      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003258:	e002      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800325a:	bf00      	nop
 800325c:	e000      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800325e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10a      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003268:	4b4f      	ldr	r3, [pc, #316]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800326a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800326c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003276:	4a4c      	ldr	r2, [pc, #304]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003278:	430b      	orrs	r3, r1
 800327a:	6513      	str	r3, [r2, #80]	@ 0x50
 800327c:	e003      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003282:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800328a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800328e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003292:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003296:	2300      	movs	r3, #0
 8003298:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800329c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80032a0:	460b      	mov	r3, r1
 80032a2:	4313      	orrs	r3, r2
 80032a4:	d053      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80032a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80032ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032b2:	d035      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80032b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80032b8:	d82e      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032ba:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80032be:	d031      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80032c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80032c4:	d828      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032ca:	d01a      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80032cc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80032d0:	d822      	bhi.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80032d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80032da:	d007      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80032dc:	e01c      	b.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032de:	4b32      	ldr	r3, [pc, #200]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e2:	4a31      	ldr	r2, [pc, #196]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032ea:	e01c      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f0:	3308      	adds	r3, #8
 80032f2:	2100      	movs	r1, #0
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fb83 	bl	8004a00 <RCCEx_PLL2_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003300:	e011      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003306:	3328      	adds	r3, #40	@ 0x28
 8003308:	2100      	movs	r1, #0
 800330a:	4618      	mov	r0, r3
 800330c:	f001 fc2a 	bl	8004b64 <RCCEx_PLL3_Config>
 8003310:	4603      	mov	r3, r0
 8003312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003316:	e006      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800331e:	e002      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003320:	bf00      	nop
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003324:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003326:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800332e:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003332:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003336:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800333a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800333e:	4a1a      	ldr	r2, [pc, #104]	@ (80033a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003340:	430b      	orrs	r3, r1
 8003342:	6593      	str	r3, [r2, #88]	@ 0x58
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800334a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800335a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800335e:	2300      	movs	r3, #0
 8003360:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003364:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003368:	460b      	mov	r3, r1
 800336a:	4313      	orrs	r3, r2
 800336c:	d056      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800336e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003372:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003376:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800337a:	d038      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800337c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003380:	d831      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003382:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003386:	d034      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003388:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800338c:	d82b      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800338e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003392:	d01d      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003394:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003398:	d825      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800339a:	2b00      	cmp	r3, #0
 800339c:	d006      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800339e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033a2:	d00a      	beq.n	80033ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80033a4:	e01f      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033a6:	bf00      	nop
 80033a8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ac:	4ba2      	ldr	r3, [pc, #648]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033b0:	4aa1      	ldr	r2, [pc, #644]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033b8:	e01c      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033be:	3308      	adds	r3, #8
 80033c0:	2100      	movs	r1, #0
 80033c2:	4618      	mov	r0, r3
 80033c4:	f001 fb1c 	bl	8004a00 <RCCEx_PLL2_Config>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80033ce:	e011      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033d4:	3328      	adds	r3, #40	@ 0x28
 80033d6:	2100      	movs	r1, #0
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fbc3 	bl	8004b64 <RCCEx_PLL3_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10b      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80033fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003408:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800340c:	4a8a      	ldr	r2, [pc, #552]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800340e:	430b      	orrs	r3, r1
 8003410:	6593      	str	r3, [r2, #88]	@ 0x58
 8003412:	e003      	b.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003414:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003418:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800341c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003424:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800342c:	2300      	movs	r3, #0
 800342e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003432:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003436:	460b      	mov	r3, r1
 8003438:	4313      	orrs	r3, r2
 800343a:	d03a      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800343c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003442:	2b30      	cmp	r3, #48	@ 0x30
 8003444:	d01f      	beq.n	8003486 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003446:	2b30      	cmp	r3, #48	@ 0x30
 8003448:	d819      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800344a:	2b20      	cmp	r3, #32
 800344c:	d00c      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800344e:	2b20      	cmp	r3, #32
 8003450:	d815      	bhi.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003456:	2b10      	cmp	r3, #16
 8003458:	d111      	bne.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345a:	4b77      	ldr	r3, [pc, #476]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800345c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345e:	4a76      	ldr	r2, [pc, #472]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003466:	e011      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800346c:	3308      	adds	r3, #8
 800346e:	2102      	movs	r1, #2
 8003470:	4618      	mov	r0, r3
 8003472:	f001 fac5 	bl	8004a00 <RCCEx_PLL2_Config>
 8003476:	4603      	mov	r3, r0
 8003478:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800347c:	e006      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003484:	e002      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003486:	bf00      	nop
 8003488:	e000      	b.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800348a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003490:	2b00      	cmp	r3, #0
 8003492:	d10a      	bne.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003494:	4b68      	ldr	r3, [pc, #416]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003496:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003498:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800349c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034a2:	4a65      	ldr	r2, [pc, #404]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a4:	430b      	orrs	r3, r1
 80034a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034a8:	e003      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ba:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80034be:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80034c2:	2300      	movs	r3, #0
 80034c4:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80034c8:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4313      	orrs	r3, r2
 80034d0:	d051      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034dc:	d035      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80034de:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80034e2:	d82e      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034e4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034e8:	d031      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80034ea:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80034ee:	d828      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034f4:	d01a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fa:	d822      	bhi.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003500:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003504:	d007      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003506:	e01c      	b.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b4b      	ldr	r3, [pc, #300]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a4a      	ldr	r2, [pc, #296]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003514:	e01c      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	3308      	adds	r3, #8
 800351c:	2100      	movs	r1, #0
 800351e:	4618      	mov	r0, r3
 8003520:	f001 fa6e 	bl	8004a00 <RCCEx_PLL2_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800352a:	e011      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800352c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003530:	3328      	adds	r3, #40	@ 0x28
 8003532:	2100      	movs	r1, #0
 8003534:	4618      	mov	r0, r3
 8003536:	f001 fb15 	bl	8004b64 <RCCEx_PLL3_Config>
 800353a:	4603      	mov	r3, r0
 800353c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003540:	e006      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003548:	e002      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800354a:	bf00      	nop
 800354c:	e000      	b.n	8003550 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800354e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003550:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003558:	4b37      	ldr	r3, [pc, #220]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800355a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800355c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003566:	4a34      	ldr	r2, [pc, #208]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003568:	430b      	orrs	r3, r1
 800356a:	6513      	str	r3, [r2, #80]	@ 0x50
 800356c:	e003      	b.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800356e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003572:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800357e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003582:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003586:	2300      	movs	r3, #0
 8003588:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800358c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003590:	460b      	mov	r3, r1
 8003592:	4313      	orrs	r3, r2
 8003594:	d056      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800359c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a0:	d033      	beq.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80035a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a6:	d82c      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035a8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035ac:	d02f      	beq.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80035ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80035b2:	d826      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035b4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035b8:	d02b      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80035ba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80035be:	d820      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035c4:	d012      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80035c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80035ca:	d81a      	bhi.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80035d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035d4:	d115      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80035d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035da:	3308      	adds	r3, #8
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fa0e 	bl	8004a00 <RCCEx_PLL2_Config>
 80035e4:	4603      	mov	r3, r0
 80035e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80035ea:	e015      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80035ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f0:	3328      	adds	r3, #40	@ 0x28
 80035f2:	2101      	movs	r1, #1
 80035f4:	4618      	mov	r0, r3
 80035f6:	f001 fab5 	bl	8004b64 <RCCEx_PLL3_Config>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003600:	e00a      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003608:	e006      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800360a:	bf00      	nop
 800360c:	e004      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800360e:	bf00      	nop
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10d      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003624:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800362e:	4a02      	ldr	r2, [pc, #8]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003630:	430b      	orrs	r3, r1
 8003632:	6513      	str	r3, [r2, #80]	@ 0x50
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003636:	bf00      	nop
 8003638:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003640:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003644:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003648:	e9d3 2300 	ldrd	r2, r3, [r3]
 800364c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003650:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800365a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800365e:	460b      	mov	r3, r1
 8003660:	4313      	orrs	r3, r2
 8003662:	d055      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800366c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003670:	d033      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003676:	d82c      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800367c:	d02f      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003682:	d826      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003684:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003688:	d02b      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800368a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800368e:	d820      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003690:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003694:	d012      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800369a:	d81a      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800369c:	2b00      	cmp	r3, #0
 800369e:	d022      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 80036a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80036a4:	d115      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036aa:	3308      	adds	r3, #8
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f9a6 	bl	8004a00 <RCCEx_PLL2_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036ba:	e015      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	3328      	adds	r3, #40	@ 0x28
 80036c2:	2101      	movs	r1, #1
 80036c4:	4618      	mov	r0, r3
 80036c6:	f001 fa4d 	bl	8004b64 <RCCEx_PLL3_Config>
 80036ca:	4603      	mov	r3, r0
 80036cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80036d0:	e00a      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d8:	e006      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036da:	bf00      	nop
 80036dc:	e004      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036de:	bf00      	nop
 80036e0:	e002      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036e2:	bf00      	nop
 80036e4:	e000      	b.n	80036e8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80036e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d10b      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80036f0:	4ba3      	ldr	r3, [pc, #652]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036f4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80036f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003700:	4a9f      	ldr	r2, [pc, #636]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003702:	430b      	orrs	r3, r1
 8003704:	6593      	str	r3, [r2, #88]	@ 0x58
 8003706:	e003      	b.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003708:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003710:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003718:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800371c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800372a:	460b      	mov	r3, r1
 800372c:	4313      	orrs	r3, r2
 800372e:	d037      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003734:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003736:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800373a:	d00e      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800373c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003740:	d816      	bhi.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003742:	2b00      	cmp	r3, #0
 8003744:	d018      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003746:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800374a:	d111      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800374c:	4b8c      	ldr	r3, [pc, #560]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800374e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003750:	4a8b      	ldr	r2, [pc, #556]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003752:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003756:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003758:	e00f      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800375a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800375e:	3308      	adds	r3, #8
 8003760:	2101      	movs	r1, #1
 8003762:	4618      	mov	r0, r3
 8003764:	f001 f94c 	bl	8004a00 <RCCEx_PLL2_Config>
 8003768:	4603      	mov	r3, r0
 800376a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800376e:	e004      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003776:	e000      	b.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003778:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800377e:	2b00      	cmp	r3, #0
 8003780:	d10a      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003782:	4b7f      	ldr	r3, [pc, #508]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003784:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003786:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003790:	4a7b      	ldr	r2, [pc, #492]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003792:	430b      	orrs	r3, r1
 8003794:	6513      	str	r3, [r2, #80]	@ 0x50
 8003796:	e003      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800379c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80037ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80037b0:	2300      	movs	r3, #0
 80037b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80037b6:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4313      	orrs	r3, r2
 80037be:	d039      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80037c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c6:	2b03      	cmp	r3, #3
 80037c8:	d81c      	bhi.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80037ca:	a201      	add	r2, pc, #4	@ (adr r2, 80037d0 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80037cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d0:	0800380d 	.word	0x0800380d
 80037d4:	080037e1 	.word	0x080037e1
 80037d8:	080037ef 	.word	0x080037ef
 80037dc:	0800380d 	.word	0x0800380d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037e0:	4b67      	ldr	r3, [pc, #412]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e4:	4a66      	ldr	r2, [pc, #408]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80037ec:	e00f      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	3308      	adds	r3, #8
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f001 f902 	bl	8004a00 <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003802:	e004      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800380a:	e000      	b.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800380c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800380e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003816:	4b5a      	ldr	r3, [pc, #360]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800381a:	f023 0103 	bic.w	r1, r3, #3
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003822:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003824:	4a56      	ldr	r2, [pc, #344]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003826:	430b      	orrs	r3, r1
 8003828:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800382a:	e003      	b.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800382c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003830:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003840:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003844:	2300      	movs	r3, #0
 8003846:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800384a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800384e:	460b      	mov	r3, r1
 8003850:	4313      	orrs	r3, r2
 8003852:	f000 809f 	beq.w	8003994 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003856:	4b4b      	ldr	r3, [pc, #300]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a4a      	ldr	r2, [pc, #296]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800385c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003860:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003862:	f7fd fb17 	bl	8000e94 <HAL_GetTick>
 8003866:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800386a:	e00b      	b.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800386c:	f7fd fb12 	bl	8000e94 <HAL_GetTick>
 8003870:	4602      	mov	r2, r0
 8003872:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	2b64      	cmp	r3, #100	@ 0x64
 800387a:	d903      	bls.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003882:	e005      	b.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003884:	4b3f      	ldr	r3, [pc, #252]	@ (8003984 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0ed      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003890:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003894:	2b00      	cmp	r3, #0
 8003896:	d179      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003898:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038a4:	4053      	eors	r3, r2
 80038a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d015      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80038ae:	4b34      	ldr	r3, [pc, #208]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b6:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038ba:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	4a30      	ldr	r2, [pc, #192]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038c6:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ca:	4a2d      	ldr	r2, [pc, #180]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80038d2:	4a2b      	ldr	r2, [pc, #172]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038d8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80038da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038e6:	d118      	bne.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e8:	f7fd fad4 	bl	8000e94 <HAL_GetTick>
 80038ec:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038f0:	e00d      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038f2:	f7fd facf 	bl	8000e94 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80038fc:	1ad2      	subs	r2, r2, r3
 80038fe:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003902:	429a      	cmp	r2, r3
 8003904:	d903      	bls.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800390c:	e005      	b.n	800391a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800390e:	4b1c      	ldr	r3, [pc, #112]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003910:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003912:	f003 0302 	and.w	r3, r3, #2
 8003916:	2b00      	cmp	r3, #0
 8003918:	d0eb      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800391a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800391e:	2b00      	cmp	r3, #0
 8003920:	d129      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003926:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800392a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800392e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003932:	d10e      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003934:	4b12      	ldr	r3, [pc, #72]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800393c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003940:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003944:	091a      	lsrs	r2, r3, #4
 8003946:	4b10      	ldr	r3, [pc, #64]	@ (8003988 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003948:	4013      	ands	r3, r2
 800394a:	4a0d      	ldr	r2, [pc, #52]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800394c:	430b      	orrs	r3, r1
 800394e:	6113      	str	r3, [r2, #16]
 8003950:	e005      	b.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003954:	691b      	ldr	r3, [r3, #16]
 8003956:	4a0a      	ldr	r2, [pc, #40]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003958:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800395c:	6113      	str	r3, [r2, #16]
 800395e:	4b08      	ldr	r3, [pc, #32]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003960:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800396a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800396e:	4a04      	ldr	r2, [pc, #16]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003970:	430b      	orrs	r3, r1
 8003972:	6713      	str	r3, [r2, #112]	@ 0x70
 8003974:	e00e      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003976:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800397a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800397e:	e009      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003980:	58024400 	.word	0x58024400
 8003984:	58024800 	.word	0x58024800
 8003988:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800398c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003990:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800399c:	f002 0301 	and.w	r3, r2, #1
 80039a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80039a4:	2300      	movs	r3, #0
 80039a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80039aa:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80039ae:	460b      	mov	r3, r1
 80039b0:	4313      	orrs	r3, r2
 80039b2:	f000 8089 	beq.w	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039bc:	2b28      	cmp	r3, #40	@ 0x28
 80039be:	d86b      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80039c0:	a201      	add	r2, pc, #4	@ (adr r2, 80039c8 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	08003aa1 	.word	0x08003aa1
 80039cc:	08003a99 	.word	0x08003a99
 80039d0:	08003a99 	.word	0x08003a99
 80039d4:	08003a99 	.word	0x08003a99
 80039d8:	08003a99 	.word	0x08003a99
 80039dc:	08003a99 	.word	0x08003a99
 80039e0:	08003a99 	.word	0x08003a99
 80039e4:	08003a99 	.word	0x08003a99
 80039e8:	08003a6d 	.word	0x08003a6d
 80039ec:	08003a99 	.word	0x08003a99
 80039f0:	08003a99 	.word	0x08003a99
 80039f4:	08003a99 	.word	0x08003a99
 80039f8:	08003a99 	.word	0x08003a99
 80039fc:	08003a99 	.word	0x08003a99
 8003a00:	08003a99 	.word	0x08003a99
 8003a04:	08003a99 	.word	0x08003a99
 8003a08:	08003a83 	.word	0x08003a83
 8003a0c:	08003a99 	.word	0x08003a99
 8003a10:	08003a99 	.word	0x08003a99
 8003a14:	08003a99 	.word	0x08003a99
 8003a18:	08003a99 	.word	0x08003a99
 8003a1c:	08003a99 	.word	0x08003a99
 8003a20:	08003a99 	.word	0x08003a99
 8003a24:	08003a99 	.word	0x08003a99
 8003a28:	08003aa1 	.word	0x08003aa1
 8003a2c:	08003a99 	.word	0x08003a99
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003a99 	.word	0x08003a99
 8003a38:	08003a99 	.word	0x08003a99
 8003a3c:	08003a99 	.word	0x08003a99
 8003a40:	08003a99 	.word	0x08003a99
 8003a44:	08003a99 	.word	0x08003a99
 8003a48:	08003aa1 	.word	0x08003aa1
 8003a4c:	08003a99 	.word	0x08003a99
 8003a50:	08003a99 	.word	0x08003a99
 8003a54:	08003a99 	.word	0x08003a99
 8003a58:	08003a99 	.word	0x08003a99
 8003a5c:	08003a99 	.word	0x08003a99
 8003a60:	08003a99 	.word	0x08003a99
 8003a64:	08003a99 	.word	0x08003a99
 8003a68:	08003aa1 	.word	0x08003aa1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a70:	3308      	adds	r3, #8
 8003a72:	2101      	movs	r1, #1
 8003a74:	4618      	mov	r0, r3
 8003a76:	f000 ffc3 	bl	8004a00 <RCCEx_PLL2_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a86:	3328      	adds	r3, #40	@ 0x28
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f86a 	bl	8004b64 <RCCEx_PLL3_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003aaa:	4bbf      	ldr	r3, [pc, #764]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003ab8:	4abb      	ldr	r2, [pc, #748]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 0302 	and.w	r3, r2, #2
 8003ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003ade:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d041      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003aee:	2b05      	cmp	r3, #5
 8003af0:	d824      	bhi.n	8003b3c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b45 	.word	0x08003b45
 8003afc:	08003b11 	.word	0x08003b11
 8003b00:	08003b27 	.word	0x08003b27
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b45 	.word	0x08003b45
 8003b0c:	08003b45 	.word	0x08003b45
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b14:	3308      	adds	r3, #8
 8003b16:	2101      	movs	r1, #1
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 ff71 	bl	8004a00 <RCCEx_PLL2_Config>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b24:	e00f      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2a:	3328      	adds	r3, #40	@ 0x28
 8003b2c:	2101      	movs	r1, #1
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f001 f818 	bl	8004b64 <RCCEx_PLL3_Config>
 8003b34:	4603      	mov	r3, r0
 8003b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b3a:	e004      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003b44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10a      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003b4e:	4b96      	ldr	r3, [pc, #600]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b52:	f023 0107 	bic.w	r1, r3, #7
 8003b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b5c:	4a92      	ldr	r2, [pc, #584]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b5e:	430b      	orrs	r3, r1
 8003b60:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b62:	e003      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b68:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b74:	f002 0304 	and.w	r3, r2, #4
 8003b78:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003b82:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003b86:	460b      	mov	r3, r1
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	d044      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b94:	2b05      	cmp	r3, #5
 8003b96:	d825      	bhi.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b98:	a201      	add	r2, pc, #4	@ (adr r2, 8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9e:	bf00      	nop
 8003ba0:	08003bed 	.word	0x08003bed
 8003ba4:	08003bb9 	.word	0x08003bb9
 8003ba8:	08003bcf 	.word	0x08003bcf
 8003bac:	08003bed 	.word	0x08003bed
 8003bb0:	08003bed 	.word	0x08003bed
 8003bb4:	08003bed 	.word	0x08003bed
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bbc:	3308      	adds	r3, #8
 8003bbe:	2101      	movs	r1, #1
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f000 ff1d 	bl	8004a00 <RCCEx_PLL2_Config>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003bcc:	e00f      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	3328      	adds	r3, #40	@ 0x28
 8003bd4:	2101      	movs	r1, #1
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	f000 ffc4 	bl	8004b64 <RCCEx_PLL3_Config>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003be2:	e004      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bea:	e000      	b.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003bec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d10b      	bne.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bf6:	4b6c      	ldr	r3, [pc, #432]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bfa:	f023 0107 	bic.w	r1, r3, #7
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c06:	4a68      	ldr	r2, [pc, #416]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c08:	430b      	orrs	r3, r1
 8003c0a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c0c:	e003      	b.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c12:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1e:	f002 0320 	and.w	r3, r2, #32
 8003c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c26:	2300      	movs	r3, #0
 8003c28:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003c30:	460b      	mov	r3, r1
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d055      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c42:	d033      	beq.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003c44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c48:	d82c      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c4e:	d02f      	beq.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c54:	d826      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c5a:	d02b      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c60:	d820      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c66:	d012      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c68:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c6c:	d81a      	bhi.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d022      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c72:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c76:	d115      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	2100      	movs	r1, #0
 8003c80:	4618      	mov	r0, r3
 8003c82:	f000 febd 	bl	8004a00 <RCCEx_PLL2_Config>
 8003c86:	4603      	mov	r3, r0
 8003c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c8c:	e015      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	3328      	adds	r3, #40	@ 0x28
 8003c94:	2102      	movs	r1, #2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 ff64 	bl	8004b64 <RCCEx_PLL3_Config>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003ca2:	e00a      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003caa:	e006      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cac:	bf00      	nop
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cb0:	bf00      	nop
 8003cb2:	e002      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cb4:	bf00      	nop
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10b      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003cc2:	4b39      	ldr	r3, [pc, #228]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cc6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cd2:	4a35      	ldr	r2, [pc, #212]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cd4:	430b      	orrs	r3, r1
 8003cd6:	6553      	str	r3, [r2, #84]	@ 0x54
 8003cd8:	e003      	b.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cde:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cea:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003cee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003cf8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	d058      	beq.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d0a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d0e:	d033      	beq.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d10:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d14:	d82c      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d1a:	d02f      	beq.n	8003d7c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d20:	d826      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d22:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d26:	d02b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003d28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d2c:	d820      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d2e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d32:	d012      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003d34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003d38:	d81a      	bhi.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d022      	beq.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d42:	d115      	bne.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d48:	3308      	adds	r3, #8
 8003d4a:	2100      	movs	r1, #0
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f000 fe57 	bl	8004a00 <RCCEx_PLL2_Config>
 8003d52:	4603      	mov	r3, r0
 8003d54:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d58:	e015      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	3328      	adds	r3, #40	@ 0x28
 8003d60:	2102      	movs	r1, #2
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fefe 	bl	8004b64 <RCCEx_PLL3_Config>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d6e:	e00a      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d76:	e006      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d78:	bf00      	nop
 8003d7a:	e004      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d7c:	bf00      	nop
 8003d7e:	e002      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d80:	bf00      	nop
 8003d82:	e000      	b.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10e      	bne.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d8e:	4b06      	ldr	r3, [pc, #24]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d92:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d9e:	4a02      	ldr	r2, [pc, #8]	@ (8003da8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003da0:	430b      	orrs	r3, r1
 8003da2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003da4:	e006      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003da6:	bf00      	nop
 8003da8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003db0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dbc:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003dca:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003dce:	460b      	mov	r3, r1
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	d055      	beq.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ddc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003de0:	d033      	beq.n	8003e4a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003de2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003de6:	d82c      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dec:	d02f      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003dee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003df2:	d826      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003df4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003df8:	d02b      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003dfa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003dfe:	d820      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e00:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e04:	d012      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e0a:	d81a      	bhi.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d022      	beq.n	8003e56 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e14:	d115      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1a:	3308      	adds	r3, #8
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fdee 	bl	8004a00 <RCCEx_PLL2_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e2a:	e015      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e30:	3328      	adds	r3, #40	@ 0x28
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fe95 	bl	8004b64 <RCCEx_PLL3_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003e40:	e00a      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e48:	e006      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e4a:	bf00      	nop
 8003e4c:	e004      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e002      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e52:	bf00      	nop
 8003e54:	e000      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003e56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e58:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10b      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003e60:	4ba1      	ldr	r3, [pc, #644]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e64:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e70:	4a9d      	ldr	r2, [pc, #628]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e76:	e003      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f002 0308 	and.w	r3, r2, #8
 8003e8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003e96:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d01e      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ea8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eac:	d10c      	bne.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003eae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eb2:	3328      	adds	r3, #40	@ 0x28
 8003eb4:	2102      	movs	r1, #2
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fe54 	bl	8004b64 <RCCEx_PLL3_Config>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ec8:	4b87      	ldr	r3, [pc, #540]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ecc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ed4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ed8:	4a83      	ldr	r2, [pc, #524]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eda:	430b      	orrs	r3, r1
 8003edc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f002 0310 	and.w	r3, r2, #16
 8003eea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003eee:	2300      	movs	r3, #0
 8003ef0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003ef4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003ef8:	460b      	mov	r3, r1
 8003efa:	4313      	orrs	r3, r2
 8003efc:	d01e      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003efe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f0a:	d10c      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f10:	3328      	adds	r3, #40	@ 0x28
 8003f12:	2102      	movs	r1, #2
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 fe25 	bl	8004b64 <RCCEx_PLL3_Config>
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d002      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f26:	4b70      	ldr	r3, [pc, #448]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f32:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f36:	4a6c      	ldr	r2, [pc, #432]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f38:	430b      	orrs	r3, r1
 8003f3a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003f48:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003f52:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003f56:	460b      	mov	r3, r1
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	d03e      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003f5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003f64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f68:	d022      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f6a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003f6e:	d81b      	bhi.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f7a:	e015      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f80:	3308      	adds	r3, #8
 8003f82:	2100      	movs	r1, #0
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fd3b 	bl	8004a00 <RCCEx_PLL2_Config>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f90:	e00f      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f96:	3328      	adds	r3, #40	@ 0x28
 8003f98:	2102      	movs	r1, #2
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f000 fde2 	bl	8004b64 <RCCEx_PLL3_Config>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003fa6:	e004      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fae:	e000      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10b      	bne.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003fba:	4b4b      	ldr	r3, [pc, #300]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fbe:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fca:	4a47      	ldr	r2, [pc, #284]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fcc:	430b      	orrs	r3, r1
 8003fce:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd0:	e003      	b.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003fe8:	2300      	movs	r3, #0
 8003fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003fec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	d03b      	beq.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004002:	d01f      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004004:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004008:	d818      	bhi.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800400a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800400e:	d003      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004010:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004014:	d007      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004016:	e011      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004018:	4b33      	ldr	r3, [pc, #204]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800401c:	4a32      	ldr	r2, [pc, #200]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800401e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004022:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004024:	e00f      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	3328      	adds	r3, #40	@ 0x28
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fd98 	bl	8004b64 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800403a:	e004      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004042:	e000      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004044:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004046:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10b      	bne.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800404e:	4b26      	ldr	r3, [pc, #152]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004052:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800405e:	4a22      	ldr	r2, [pc, #136]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004060:	430b      	orrs	r3, r1
 8004062:	6553      	str	r3, [r2, #84]	@ 0x54
 8004064:	e003      	b.n	800406e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004066:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800406a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004076:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800407a:	673b      	str	r3, [r7, #112]	@ 0x70
 800407c:	2300      	movs	r3, #0
 800407e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004080:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004084:	460b      	mov	r3, r1
 8004086:	4313      	orrs	r3, r2
 8004088:	d034      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800408a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800408e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004090:	2b00      	cmp	r3, #0
 8004092:	d003      	beq.n	800409c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004094:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004098:	d007      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800409a:	e011      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800409c:	4b12      	ldr	r3, [pc, #72]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800409e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a0:	4a11      	ldr	r2, [pc, #68]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040a8:	e00e      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80040aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ae:	3308      	adds	r3, #8
 80040b0:	2102      	movs	r1, #2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 fca4 	bl	8004a00 <RCCEx_PLL2_Config>
 80040b8:	4603      	mov	r3, r0
 80040ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80040be:	e003      	b.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10d      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80040d0:	4b05      	ldr	r3, [pc, #20]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040d4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80040d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80040de:	4a02      	ldr	r2, [pc, #8]	@ (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040e0:	430b      	orrs	r3, r1
 80040e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80040e6:	bf00      	nop
 80040e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040fc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004100:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004102:	2300      	movs	r3, #0
 8004104:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004106:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800410a:	460b      	mov	r3, r1
 800410c:	4313      	orrs	r3, r2
 800410e:	d00c      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004114:	3328      	adds	r3, #40	@ 0x28
 8004116:	2102      	movs	r1, #2
 8004118:	4618      	mov	r0, r3
 800411a:	f000 fd23 	bl	8004b64 <RCCEx_PLL3_Config>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d002      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800412a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004136:	663b      	str	r3, [r7, #96]	@ 0x60
 8004138:	2300      	movs	r3, #0
 800413a:	667b      	str	r3, [r7, #100]	@ 0x64
 800413c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004140:	460b      	mov	r3, r1
 8004142:	4313      	orrs	r3, r2
 8004144:	d038      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004146:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800414e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004152:	d018      	beq.n	8004186 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004154:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004158:	d811      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800415a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800415e:	d014      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004164:	d80b      	bhi.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d011      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800416a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800416e:	d106      	bne.n	800417e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004170:	4bc3      	ldr	r3, [pc, #780]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004172:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004174:	4ac2      	ldr	r2, [pc, #776]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004176:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800417a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800417c:	e008      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004184:	e004      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004186:	bf00      	nop
 8004188:	e002      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800418a:	bf00      	nop
 800418c:	e000      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800418e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004190:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004194:	2b00      	cmp	r3, #0
 8004196:	d10b      	bne.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004198:	4bb9      	ldr	r3, [pc, #740]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800419a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800419c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041a8:	4ab5      	ldr	r2, [pc, #724]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041aa:	430b      	orrs	r3, r1
 80041ac:	6553      	str	r3, [r2, #84]	@ 0x54
 80041ae:	e003      	b.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80041b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80041c4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80041c6:	2300      	movs	r3, #0
 80041c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041ca:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80041ce:	460b      	mov	r3, r1
 80041d0:	4313      	orrs	r3, r2
 80041d2:	d009      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80041d4:	4baa      	ldr	r3, [pc, #680]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041d8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80041dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e2:	4aa7      	ldr	r2, [pc, #668]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e4:	430b      	orrs	r3, r1
 80041e6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80041e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80041f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80041f6:	2300      	movs	r3, #0
 80041f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80041fa:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80041fe:	460b      	mov	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	d00a      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004204:	4b9e      	ldr	r3, [pc, #632]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800420c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004210:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004214:	4a9a      	ldr	r2, [pc, #616]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004216:	430b      	orrs	r3, r1
 8004218:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004226:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004228:	2300      	movs	r3, #0
 800422a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800422c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004230:	460b      	mov	r3, r1
 8004232:	4313      	orrs	r3, r2
 8004234:	d009      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004236:	4b92      	ldr	r3, [pc, #584]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004238:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800423e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004244:	4a8e      	ldr	r2, [pc, #568]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004246:	430b      	orrs	r3, r1
 8004248:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004256:	643b      	str	r3, [r7, #64]	@ 0x40
 8004258:	2300      	movs	r3, #0
 800425a:	647b      	str	r3, [r7, #68]	@ 0x44
 800425c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004260:	460b      	mov	r3, r1
 8004262:	4313      	orrs	r3, r2
 8004264:	d00e      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004266:	4b86      	ldr	r3, [pc, #536]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004268:	691b      	ldr	r3, [r3, #16]
 800426a:	4a85      	ldr	r2, [pc, #532]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004270:	6113      	str	r3, [r2, #16]
 8004272:	4b83      	ldr	r3, [pc, #524]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004274:	6919      	ldr	r1, [r3, #16]
 8004276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800427a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800427e:	4a80      	ldr	r2, [pc, #512]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004280:	430b      	orrs	r3, r1
 8004282:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004290:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004292:	2300      	movs	r3, #0
 8004294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004296:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800429a:	460b      	mov	r3, r1
 800429c:	4313      	orrs	r3, r2
 800429e:	d009      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80042a0:	4b77      	ldr	r3, [pc, #476]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ae:	4a74      	ldr	r2, [pc, #464]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b0:	430b      	orrs	r3, r1
 80042b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80042b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042bc:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80042c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80042c2:	2300      	movs	r3, #0
 80042c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80042c6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80042ca:	460b      	mov	r3, r1
 80042cc:	4313      	orrs	r3, r2
 80042ce:	d00a      	beq.n	80042e6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80042d0:	4b6b      	ldr	r3, [pc, #428]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d4:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80042d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80042e0:	4a67      	ldr	r2, [pc, #412]	@ (8004480 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e2:	430b      	orrs	r3, r1
 80042e4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	2100      	movs	r1, #0
 80042f0:	62b9      	str	r1, [r7, #40]	@ 0x28
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042f8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80042fc:	460b      	mov	r3, r1
 80042fe:	4313      	orrs	r3, r2
 8004300:	d011      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004306:	3308      	adds	r3, #8
 8004308:	2100      	movs	r1, #0
 800430a:	4618      	mov	r0, r3
 800430c:	f000 fb78 	bl	8004a00 <RCCEx_PLL2_Config>
 8004310:	4603      	mov	r3, r0
 8004312:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800431a:	2b00      	cmp	r3, #0
 800431c:	d003      	beq.n	8004326 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800431e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004322:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	2100      	movs	r1, #0
 8004330:	6239      	str	r1, [r7, #32]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	627b      	str	r3, [r7, #36]	@ 0x24
 8004338:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800433c:	460b      	mov	r3, r1
 800433e:	4313      	orrs	r3, r2
 8004340:	d011      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004346:	3308      	adds	r3, #8
 8004348:	2101      	movs	r1, #1
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fb58 	bl	8004a00 <RCCEx_PLL2_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004356:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800435a:	2b00      	cmp	r3, #0
 800435c:	d003      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004362:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800436a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436e:	2100      	movs	r1, #0
 8004370:	61b9      	str	r1, [r7, #24]
 8004372:	f003 0304 	and.w	r3, r3, #4
 8004376:	61fb      	str	r3, [r7, #28]
 8004378:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800437c:	460b      	mov	r3, r1
 800437e:	4313      	orrs	r3, r2
 8004380:	d011      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004386:	3308      	adds	r3, #8
 8004388:	2102      	movs	r1, #2
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fb38 	bl	8004a00 <RCCEx_PLL2_Config>
 8004390:	4603      	mov	r3, r0
 8004392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800439e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80043a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ae:	2100      	movs	r1, #0
 80043b0:	6139      	str	r1, [r7, #16]
 80043b2:	f003 0308 	and.w	r3, r3, #8
 80043b6:	617b      	str	r3, [r7, #20]
 80043b8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80043bc:	460b      	mov	r3, r1
 80043be:	4313      	orrs	r3, r2
 80043c0:	d011      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043c6:	3328      	adds	r3, #40	@ 0x28
 80043c8:	2100      	movs	r1, #0
 80043ca:	4618      	mov	r0, r3
 80043cc:	f000 fbca 	bl	8004b64 <RCCEx_PLL3_Config>
 80043d0:	4603      	mov	r3, r0
 80043d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80043d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80043e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ee:	2100      	movs	r1, #0
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	f003 0310 	and.w	r3, r3, #16
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80043fc:	460b      	mov	r3, r1
 80043fe:	4313      	orrs	r3, r2
 8004400:	d011      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004402:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004406:	3328      	adds	r3, #40	@ 0x28
 8004408:	2101      	movs	r1, #1
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fbaa 	bl	8004b64 <RCCEx_PLL3_Config>
 8004410:	4603      	mov	r3, r0
 8004412:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	2b00      	cmp	r3, #0
 800441c:	d003      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	2100      	movs	r1, #0
 8004430:	6039      	str	r1, [r7, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	e9d7 1200 	ldrd	r1, r2, [r7]
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d011      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	3328      	adds	r3, #40	@ 0x28
 8004448:	2102      	movs	r1, #2
 800444a:	4618      	mov	r0, r3
 800444c:	f000 fb8a 	bl	8004b64 <RCCEx_PLL3_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445a:	2b00      	cmp	r3, #0
 800445c:	d003      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800445e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004462:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004466:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
}
 8004474:	4618      	mov	r0, r3
 8004476:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800447a:	46bd      	mov	sp, r7
 800447c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004480:	58024400 	.word	0x58024400

08004484 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004488:	f7fe fd96 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 800448c:	4602      	mov	r2, r0
 800448e:	4b06      	ldr	r3, [pc, #24]	@ (80044a8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	091b      	lsrs	r3, r3, #4
 8004494:	f003 0307 	and.w	r3, r3, #7
 8004498:	4904      	ldr	r1, [pc, #16]	@ (80044ac <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800449a:	5ccb      	ldrb	r3, [r1, r3]
 800449c:	f003 031f 	and.w	r3, r3, #31
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	58024400 	.word	0x58024400
 80044ac:	080075e0 	.word	0x080075e0

080044b0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	@ 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80044b8:	4ba1      	ldr	r3, [pc, #644]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	f003 0303 	and.w	r3, r3, #3
 80044c0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80044c2:	4b9f      	ldr	r3, [pc, #636]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c6:	0b1b      	lsrs	r3, r3, #12
 80044c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044cc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044ce:	4b9c      	ldr	r3, [pc, #624]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80044da:	4b99      	ldr	r3, [pc, #612]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044de:	08db      	lsrs	r3, r3, #3
 80044e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044e4:	693a      	ldr	r2, [r7, #16]
 80044e6:	fb02 f303 	mul.w	r3, r2, r3
 80044ea:	ee07 3a90 	vmov	s15, r3
 80044ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 8111 	beq.w	8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	2b02      	cmp	r3, #2
 8004502:	f000 8083 	beq.w	800460c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b02      	cmp	r3, #2
 800450a:	f200 80a1 	bhi.w	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	d056      	beq.n	80045c8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800451a:	e099      	b.n	8004650 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800451c:	4b88      	ldr	r3, [pc, #544]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0320 	and.w	r3, r3, #32
 8004524:	2b00      	cmp	r3, #0
 8004526:	d02d      	beq.n	8004584 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004528:	4b85      	ldr	r3, [pc, #532]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	08db      	lsrs	r3, r3, #3
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	4a84      	ldr	r2, [pc, #528]	@ (8004744 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004534:	fa22 f303 	lsr.w	r3, r2, r3
 8004538:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	ee07 3a90 	vmov	s15, r3
 8004540:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	ee07 3a90 	vmov	s15, r3
 800454a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800454e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004552:	4b7b      	ldr	r3, [pc, #492]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455a:	ee07 3a90 	vmov	s15, r3
 800455e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004562:	ed97 6a03 	vldr	s12, [r7, #12]
 8004566:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800456a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800456e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800457a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800457e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004582:	e087      	b.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	ee07 3a90 	vmov	s15, r3
 800458a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800458e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800474c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004596:	4b6a      	ldr	r3, [pc, #424]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045aa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045c6:	e065      	b.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	ee07 3a90 	vmov	s15, r3
 80045ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045d2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045da:	4b59      	ldr	r3, [pc, #356]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045e2:	ee07 3a90 	vmov	s15, r3
 80045e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800460a:	e043      	b.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	ee07 3a90 	vmov	s15, r3
 8004612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004616:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004754 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800461a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800461e:	4b48      	ldr	r3, [pc, #288]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004622:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004626:	ee07 3a90 	vmov	s15, r3
 800462a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800462e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004632:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004636:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800463a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800463e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004642:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800464a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800464e:	e021      	b.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004650:	697b      	ldr	r3, [r7, #20]
 8004652:	ee07 3a90 	vmov	s15, r3
 8004656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800465a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004750 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800465e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004662:	4b37      	ldr	r3, [pc, #220]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004666:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466a:	ee07 3a90 	vmov	s15, r3
 800466e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004672:	ed97 6a03 	vldr	s12, [r7, #12]
 8004676:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004748 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800467a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800467e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004682:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004686:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800468a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800468e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004692:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004694:	4b2a      	ldr	r3, [pc, #168]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004698:	0a5b      	lsrs	r3, r3, #9
 800469a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80046b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ba:	ee17 2a90 	vmov	r2, s15
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80046c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c6:	0c1b      	lsrs	r3, r3, #16
 80046c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046cc:	ee07 3a90 	vmov	s15, r3
 80046d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80046e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046e8:	ee17 2a90 	vmov	r2, s15
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80046f0:	4b13      	ldr	r3, [pc, #76]	@ (8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	0e1b      	lsrs	r3, r3, #24
 80046f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004706:	ee37 7a87 	vadd.f32	s14, s15, s14
 800470a:	edd7 6a07 	vldr	s13, [r7, #28]
 800470e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004716:	ee17 2a90 	vmov	r2, s15
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800471e:	e008      	b.n	8004732 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	609a      	str	r2, [r3, #8]
}
 8004732:	bf00      	nop
 8004734:	3724      	adds	r7, #36	@ 0x24
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	58024400 	.word	0x58024400
 8004744:	03d09000 	.word	0x03d09000
 8004748:	46000000 	.word	0x46000000
 800474c:	4c742400 	.word	0x4c742400
 8004750:	4a742400 	.word	0x4a742400
 8004754:	4af42400 	.word	0x4af42400

08004758 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004758:	b480      	push	{r7}
 800475a:	b089      	sub	sp, #36	@ 0x24
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004760:	4ba1      	ldr	r3, [pc, #644]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	f003 0303 	and.w	r3, r3, #3
 8004768:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800476a:	4b9f      	ldr	r3, [pc, #636]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800476c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476e:	0d1b      	lsrs	r3, r3, #20
 8004770:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004774:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004776:	4b9c      	ldr	r3, [pc, #624]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 0301 	and.w	r3, r3, #1
 8004780:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004782:	4b99      	ldr	r3, [pc, #612]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004786:	08db      	lsrs	r3, r3, #3
 8004788:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	fb02 f303 	mul.w	r3, r2, r3
 8004792:	ee07 3a90 	vmov	s15, r3
 8004796:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	f000 8111 	beq.w	80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	f000 8083 	beq.w	80048b4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	f200 80a1 	bhi.w	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80047b6:	69bb      	ldr	r3, [r7, #24]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80047bc:	69bb      	ldr	r3, [r7, #24]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d056      	beq.n	8004870 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80047c2:	e099      	b.n	80048f8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047c4:	4b88      	ldr	r3, [pc, #544]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0320 	and.w	r3, r3, #32
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d02d      	beq.n	800482c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047d0:	4b85      	ldr	r3, [pc, #532]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	08db      	lsrs	r3, r3, #3
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	4a84      	ldr	r2, [pc, #528]	@ (80049ec <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047dc:	fa22 f303 	lsr.w	r3, r2, r3
 80047e0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	ee07 3a90 	vmov	s15, r3
 80047e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b7b      	ldr	r3, [pc, #492]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a03 	vldr	s12, [r7, #12]
 800480e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800482a:	e087      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049f4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b6a      	ldr	r3, [pc, #424]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486e:	e065      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b59      	ldr	r3, [pc, #356]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b2:	e043      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b48      	ldr	r3, [pc, #288]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	e021      	b.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004902:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b37      	ldr	r3, [pc, #220]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049f0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800493c:	4b2a      	ldr	r3, [pc, #168]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004940:	0a5b      	lsrs	r3, r3, #9
 8004942:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004952:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004956:	edd7 6a07 	vldr	s13, [r7, #28]
 800495a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800495e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004962:	ee17 2a90 	vmov	r2, s15
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800496a:	4b1f      	ldr	r3, [pc, #124]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800496e:	0c1b      	lsrs	r3, r3, #16
 8004970:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004974:	ee07 3a90 	vmov	s15, r3
 8004978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004980:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004984:	edd7 6a07 	vldr	s13, [r7, #28]
 8004988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800498c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004990:	ee17 2a90 	vmov	r2, s15
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004998:	4b13      	ldr	r3, [pc, #76]	@ (80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499c:	0e1b      	lsrs	r3, r3, #24
 800499e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049a2:	ee07 3a90 	vmov	s15, r3
 80049a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80049b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049be:	ee17 2a90 	vmov	r2, s15
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049c6:	e008      	b.n	80049da <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	609a      	str	r2, [r3, #8]
}
 80049da:	bf00      	nop
 80049dc:	3724      	adds	r7, #36	@ 0x24
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	58024400 	.word	0x58024400
 80049ec:	03d09000 	.word	0x03d09000
 80049f0:	46000000 	.word	0x46000000
 80049f4:	4c742400 	.word	0x4c742400
 80049f8:	4a742400 	.word	0x4a742400
 80049fc:	4af42400 	.word	0x4af42400

08004a00 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a0e:	4b53      	ldr	r3, [pc, #332]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	f003 0303 	and.w	r3, r3, #3
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d101      	bne.n	8004a1e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e099      	b.n	8004b52 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a1e:	4b4f      	ldr	r3, [pc, #316]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a4e      	ldr	r2, [pc, #312]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a24:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2a:	f7fc fa33 	bl	8000e94 <HAL_GetTick>
 8004a2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a30:	e008      	b.n	8004a44 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a32:	f7fc fa2f 	bl	8000e94 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e086      	b.n	8004b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a44:	4b45      	ldr	r3, [pc, #276]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a50:	4b42      	ldr	r3, [pc, #264]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	031b      	lsls	r3, r3, #12
 8004a5e:	493f      	ldr	r1, [pc, #252]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a60:	4313      	orrs	r3, r2
 8004a62:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	689b      	ldr	r3, [r3, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	025b      	lsls	r3, r3, #9
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	041b      	lsls	r3, r3, #16
 8004a82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	061b      	lsls	r3, r3, #24
 8004a90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a94:	4931      	ldr	r1, [pc, #196]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a9a:	4b30      	ldr	r3, [pc, #192]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	492d      	ldr	r1, [pc, #180]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004aac:	4b2b      	ldr	r3, [pc, #172]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab0:	f023 0220 	bic.w	r2, r3, #32
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	699b      	ldr	r3, [r3, #24]
 8004ab8:	4928      	ldr	r1, [pc, #160]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004abe:	4b27      	ldr	r3, [pc, #156]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ac2:	4a26      	ldr	r2, [pc, #152]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ac4:	f023 0310 	bic.w	r3, r3, #16
 8004ac8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aca:	4b24      	ldr	r3, [pc, #144]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004acc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ace:	4b24      	ldr	r3, [pc, #144]	@ (8004b60 <RCCEx_PLL2_Config+0x160>)
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	69d2      	ldr	r2, [r2, #28]
 8004ad6:	00d2      	lsls	r2, r2, #3
 8004ad8:	4920      	ldr	r1, [pc, #128]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004ade:	4b1f      	ldr	r3, [pc, #124]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004ae4:	f043 0310 	orr.w	r3, r3, #16
 8004ae8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004af0:	4b1a      	ldr	r3, [pc, #104]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004af6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004afa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004afc:	e00f      	b.n	8004b1e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d106      	bne.n	8004b12 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b04:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	4a14      	ldr	r2, [pc, #80]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b10:	e005      	b.n	8004b1e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b12:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	4a11      	ldr	r2, [pc, #68]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b18:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a0e      	ldr	r2, [pc, #56]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b24:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2a:	f7fc f9b3 	bl	8000e94 <HAL_GetTick>
 8004b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b30:	e008      	b.n	8004b44 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004b32:	f7fc f9af 	bl	8000e94 <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e006      	b.n	8004b52 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b44:	4b05      	ldr	r3, [pc, #20]	@ (8004b5c <RCCEx_PLL2_Config+0x15c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0f0      	beq.n	8004b32 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	58024400 	.word	0x58024400
 8004b60:	ffff0007 	.word	0xffff0007

08004b64 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b72:	4b53      	ldr	r3, [pc, #332]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004b74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d101      	bne.n	8004b82 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e099      	b.n	8004cb6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b82:	4b4f      	ldr	r3, [pc, #316]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a4e      	ldr	r2, [pc, #312]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b8e:	f7fc f981 	bl	8000e94 <HAL_GetTick>
 8004b92:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b94:	e008      	b.n	8004ba8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b96:	f7fc f97d 	bl	8000e94 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e086      	b.n	8004cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004ba8:	4b45      	ldr	r3, [pc, #276]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f0      	bne.n	8004b96 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004bb4:	4b42      	ldr	r3, [pc, #264]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bb8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	051b      	lsls	r3, r3, #20
 8004bc2:	493f      	ldr	r1, [pc, #252]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	689b      	ldr	r3, [r3, #8]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	025b      	lsls	r3, r3, #9
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	431a      	orrs	r2, r3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	3b01      	subs	r3, #1
 8004be4:	041b      	lsls	r3, r3, #16
 8004be6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bea:	431a      	orrs	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	061b      	lsls	r3, r3, #24
 8004bf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bf8:	4931      	ldr	r1, [pc, #196]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bfe:	4b30      	ldr	r3, [pc, #192]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	492d      	ldr	r1, [pc, #180]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c10:	4b2b      	ldr	r3, [pc, #172]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c14:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	4928      	ldr	r1, [pc, #160]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c22:	4b27      	ldr	r3, [pc, #156]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c26:	4a26      	ldr	r2, [pc, #152]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c2e:	4b24      	ldr	r3, [pc, #144]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c32:	4b24      	ldr	r3, [pc, #144]	@ (8004cc4 <RCCEx_PLL3_Config+0x160>)
 8004c34:	4013      	ands	r3, r2
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	69d2      	ldr	r2, [r2, #28]
 8004c3a:	00d2      	lsls	r2, r2, #3
 8004c3c:	4920      	ldr	r1, [pc, #128]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c3e:	4313      	orrs	r3, r2
 8004c40:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c42:	4b1f      	ldr	r3, [pc, #124]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c46:	4a1e      	ldr	r2, [pc, #120]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d106      	bne.n	8004c62 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c54:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	4a19      	ldr	r2, [pc, #100]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c60:	e00f      	b.n	8004c82 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d106      	bne.n	8004c76 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c68:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6c:	4a14      	ldr	r2, [pc, #80]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c6e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c74:	e005      	b.n	8004c82 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	4a11      	ldr	r2, [pc, #68]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c7c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c82:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a0e      	ldr	r2, [pc, #56]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8e:	f7fc f901 	bl	8000e94 <HAL_GetTick>
 8004c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c94:	e008      	b.n	8004ca8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c96:	f7fc f8fd 	bl	8000e94 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e006      	b.n	8004cb6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ca8:	4b05      	ldr	r3, [pc, #20]	@ (8004cc0 <RCCEx_PLL3_Config+0x15c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0f0      	beq.n	8004c96 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	58024400 	.word	0x58024400
 8004cc4:	ffff0007 	.word	0xffff0007

08004cc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e042      	b.n	8004d60 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d106      	bne.n	8004cf2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fb ffad 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2224      	movs	r2, #36	@ 0x24
 8004cf6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	681a      	ldr	r2, [r3, #0]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0201 	bic.w	r2, r2, #1
 8004d08:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d002      	beq.n	8004d18 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f001 fa6a 	bl	80061ec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fcff 	bl	800571c <UART_SetConfig>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d101      	bne.n	8004d28 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e01b      	b.n	8004d60 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	685a      	ldr	r2, [r3, #4]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d36:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689a      	ldr	r2, [r3, #8]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d46:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f001 fae9 	bl	8006330 <UART_CheckIdleState>
 8004d5e:	4603      	mov	r3, r0
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af02      	add	r7, sp, #8
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d7e:	2b20      	cmp	r3, #32
 8004d80:	d17b      	bne.n	8004e7a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d002      	beq.n	8004d8e <HAL_UART_Transmit+0x26>
 8004d88:	88fb      	ldrh	r3, [r7, #6]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d101      	bne.n	8004d92 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e074      	b.n	8004e7c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2221      	movs	r2, #33	@ 0x21
 8004d9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004da2:	f7fc f877 	bl	8000e94 <HAL_GetTick>
 8004da6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	88fa      	ldrh	r2, [r7, #6]
 8004dac:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	88fa      	ldrh	r2, [r7, #6]
 8004db4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004dc0:	d108      	bne.n	8004dd4 <HAL_UART_Transmit+0x6c>
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	e003      	b.n	8004ddc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004ddc:	e030      	b.n	8004e40 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	9300      	str	r3, [sp, #0]
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	2200      	movs	r2, #0
 8004de6:	2180      	movs	r1, #128	@ 0x80
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f001 fb4b 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2220      	movs	r2, #32
 8004df8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e03d      	b.n	8004e7c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e00:	69fb      	ldr	r3, [r7, #28]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d10b      	bne.n	8004e1e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e06:	69bb      	ldr	r3, [r7, #24]
 8004e08:	881b      	ldrh	r3, [r3, #0]
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e14:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e16:	69bb      	ldr	r3, [r7, #24]
 8004e18:	3302      	adds	r3, #2
 8004e1a:	61bb      	str	r3, [r7, #24]
 8004e1c:	e007      	b.n	8004e2e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	781a      	ldrb	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	3301      	adds	r3, #1
 8004e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	3b01      	subs	r3, #1
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004e46:	b29b      	uxth	r3, r3
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d1c8      	bne.n	8004dde <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	9300      	str	r3, [sp, #0]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	2200      	movs	r2, #0
 8004e54:	2140      	movs	r1, #64	@ 0x40
 8004e56:	68f8      	ldr	r0, [r7, #12]
 8004e58:	f001 fb14 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d005      	beq.n	8004e6e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004e6a:	2303      	movs	r3, #3
 8004e6c:	e006      	b.n	8004e7c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2220      	movs	r2, #32
 8004e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004e76:	2300      	movs	r3, #0
 8004e78:	e000      	b.n	8004e7c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004e7a:	2302      	movs	r3, #2
  }
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3720      	adds	r7, #32
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08a      	sub	sp, #40	@ 0x28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	4613      	mov	r3, r2
 8004e90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d137      	bne.n	8004f0c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d002      	beq.n	8004ea8 <HAL_UART_Receive_IT+0x24>
 8004ea2:	88fb      	ldrh	r3, [r7, #6]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d101      	bne.n	8004eac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e030      	b.n	8004f0e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a18      	ldr	r2, [pc, #96]	@ (8004f18 <HAL_UART_Receive_IT+0x94>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d01f      	beq.n	8004efc <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d018      	beq.n	8004efc <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ede:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	69f9      	ldr	r1, [r7, #28]
 8004eee:	6a3a      	ldr	r2, [r7, #32]
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e6      	bne.n	8004eca <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004efc:	88fb      	ldrh	r3, [r7, #6]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68b9      	ldr	r1, [r7, #8]
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f001 fb2c 	bl	8006560 <UART_Start_Receive_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	e000      	b.n	8004f0e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3728      	adds	r7, #40	@ 0x28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	58000c00 	.word	0x58000c00

08004f1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b0ba      	sub	sp, #232	@ 0xe8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	69db      	ldr	r3, [r3, #28]
 8004f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004f42:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004f46:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004f50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11b      	bne.n	8004f90 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5c:	f003 0320 	and.w	r3, r3, #32
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d015      	beq.n	8004f90 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f68:	f003 0320 	and.w	r3, r3, #32
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d105      	bne.n	8004f7c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	f000 8393 	beq.w	80056ac <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	4798      	blx	r3
      }
      return;
 8004f8e:	e38d      	b.n	80056ac <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8123 	beq.w	80051e0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004f9e:	4b8d      	ldr	r3, [pc, #564]	@ (80051d4 <HAL_UART_IRQHandler+0x2b8>)
 8004fa0:	4013      	ands	r3, r2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004fa6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004faa:	4b8b      	ldr	r3, [pc, #556]	@ (80051d8 <HAL_UART_IRQHandler+0x2bc>)
 8004fac:	4013      	ands	r3, r2
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f000 8116 	beq.w	80051e0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004fb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d011      	beq.n	8004fe4 <HAL_UART_IRQHandler+0xc8>
 8004fc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fda:	f043 0201 	orr.w	r2, r3, #1
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe8:	f003 0302 	and.w	r3, r3, #2
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d011      	beq.n	8005014 <HAL_UART_IRQHandler+0xf8>
 8004ff0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00b      	beq.n	8005014 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2202      	movs	r2, #2
 8005002:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800500a:	f043 0204 	orr.w	r2, r3, #4
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005014:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d011      	beq.n	8005044 <HAL_UART_IRQHandler+0x128>
 8005020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005024:	f003 0301 	and.w	r3, r3, #1
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00b      	beq.n	8005044 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2204      	movs	r2, #4
 8005032:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800503a:	f043 0202 	orr.w	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005044:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b00      	cmp	r3, #0
 800504e:	d017      	beq.n	8005080 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005050:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b00      	cmp	r3, #0
 800505a:	d105      	bne.n	8005068 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800505c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005060:	4b5c      	ldr	r3, [pc, #368]	@ (80051d4 <HAL_UART_IRQHandler+0x2b8>)
 8005062:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00b      	beq.n	8005080 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	2208      	movs	r2, #8
 800506e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005076:	f043 0208 	orr.w	r2, r3, #8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005088:	2b00      	cmp	r3, #0
 800508a:	d012      	beq.n	80050b2 <HAL_UART_IRQHandler+0x196>
 800508c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005090:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00c      	beq.n	80050b2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050a0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f000 82f9 	beq.w	80056b0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80050be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d013      	beq.n	80050f2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80050ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050ce:	f003 0320 	and.w	r3, r3, #32
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d105      	bne.n	80050e2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80050d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80050da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050f8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005106:	2b40      	cmp	r3, #64	@ 0x40
 8005108:	d005      	beq.n	8005116 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800510a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800510e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005112:	2b00      	cmp	r3, #0
 8005114:	d054      	beq.n	80051c0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f001 fb44 	bl	80067a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005126:	2b40      	cmp	r3, #64	@ 0x40
 8005128:	d146      	bne.n	80051b8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005140:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005144:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	3308      	adds	r3, #8
 8005152:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005156:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800515a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005162:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800516e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1d9      	bne.n	800512a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517c:	2b00      	cmp	r3, #0
 800517e:	d017      	beq.n	80051b0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005186:	4a15      	ldr	r2, [pc, #84]	@ (80051dc <HAL_UART_IRQHandler+0x2c0>)
 8005188:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005190:	4618      	mov	r0, r3
 8005192:	f7fc fb3d 	bl	8001810 <HAL_DMA_Abort_IT>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	d019      	beq.n	80051d0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80051aa:	4610      	mov	r0, r2
 80051ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051ae:	e00f      	b.n	80051d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fa9d 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b6:	e00b      	b.n	80051d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa99 	bl	80056f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051be:	e007      	b.n	80051d0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 fa95 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80051ce:	e26f      	b.n	80056b0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d0:	bf00      	nop
    return;
 80051d2:	e26d      	b.n	80056b0 <HAL_UART_IRQHandler+0x794>
 80051d4:	10000001 	.word	0x10000001
 80051d8:	04000120 	.word	0x04000120
 80051dc:	08006871 	.word	0x08006871

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	f040 8203 	bne.w	80055f0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ee:	f003 0310 	and.w	r3, r3, #16
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 81fc 	beq.w	80055f0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80051f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051fc:	f003 0310 	and.w	r3, r3, #16
 8005200:	2b00      	cmp	r3, #0
 8005202:	f000 81f5 	beq.w	80055f0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2210      	movs	r2, #16
 800520c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005218:	2b40      	cmp	r3, #64	@ 0x40
 800521a:	f040 816d 	bne.w	80054f8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4aa4      	ldr	r2, [pc, #656]	@ (80054b8 <HAL_UART_IRQHandler+0x59c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d068      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4aa1      	ldr	r2, [pc, #644]	@ (80054bc <HAL_UART_IRQHandler+0x5a0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d061      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a9f      	ldr	r2, [pc, #636]	@ (80054c0 <HAL_UART_IRQHandler+0x5a4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d05a      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a9c      	ldr	r2, [pc, #624]	@ (80054c4 <HAL_UART_IRQHandler+0x5a8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d053      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a9a      	ldr	r2, [pc, #616]	@ (80054c8 <HAL_UART_IRQHandler+0x5ac>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d04c      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a97      	ldr	r2, [pc, #604]	@ (80054cc <HAL_UART_IRQHandler+0x5b0>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d045      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a95      	ldr	r2, [pc, #596]	@ (80054d0 <HAL_UART_IRQHandler+0x5b4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d03e      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a92      	ldr	r2, [pc, #584]	@ (80054d4 <HAL_UART_IRQHandler+0x5b8>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d037      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a90      	ldr	r2, [pc, #576]	@ (80054d8 <HAL_UART_IRQHandler+0x5bc>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d030      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a8d      	ldr	r2, [pc, #564]	@ (80054dc <HAL_UART_IRQHandler+0x5c0>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d029      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a8b      	ldr	r2, [pc, #556]	@ (80054e0 <HAL_UART_IRQHandler+0x5c4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d022      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a88      	ldr	r2, [pc, #544]	@ (80054e4 <HAL_UART_IRQHandler+0x5c8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d01b      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a86      	ldr	r2, [pc, #536]	@ (80054e8 <HAL_UART_IRQHandler+0x5cc>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d014      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	4a83      	ldr	r2, [pc, #524]	@ (80054ec <HAL_UART_IRQHandler+0x5d0>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00d      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a81      	ldr	r2, [pc, #516]	@ (80054f0 <HAL_UART_IRQHandler+0x5d4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d006      	beq.n	80052fe <HAL_UART_IRQHandler+0x3e2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a7e      	ldr	r2, [pc, #504]	@ (80054f4 <HAL_UART_IRQHandler+0x5d8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d106      	bne.n	800530c <HAL_UART_IRQHandler+0x3f0>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	b29b      	uxth	r3, r3
 800530a:	e005      	b.n	8005318 <HAL_UART_IRQHandler+0x3fc>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	b29b      	uxth	r3, r3
 8005318:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800531c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005320:	2b00      	cmp	r3, #0
 8005322:	f000 80ad 	beq.w	8005480 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800532c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005330:	429a      	cmp	r2, r3
 8005332:	f080 80a5 	bcs.w	8005480 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800533c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800534c:	f000 8087 	beq.w	800545e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005364:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800536c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800537a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800537e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005386:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005392:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005396:	2b00      	cmp	r3, #0
 8005398:	d1da      	bne.n	8005350 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	3308      	adds	r3, #8
 80053a0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80053a4:	e853 3f00 	ldrex	r3, [r3]
 80053a8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80053aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053ac:	f023 0301 	bic.w	r3, r3, #1
 80053b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	3308      	adds	r3, #8
 80053ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80053be:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80053c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80053c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80053d0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e1      	bne.n	800539a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3308      	adds	r3, #8
 80053dc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80053e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80053e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3308      	adds	r3, #8
 80053f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80053fa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80053fc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005400:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005408:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e3      	bne.n	80053d6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2220      	movs	r2, #32
 8005412:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005422:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005424:	e853 3f00 	ldrex	r3, [r3]
 8005428:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800542a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800542c:	f023 0310 	bic.w	r3, r3, #16
 8005430:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	461a      	mov	r2, r3
 800543a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800543e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005440:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005442:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005444:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005446:	e841 2300 	strex	r3, r2, [r1]
 800544a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800544c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800544e:	2b00      	cmp	r3, #0
 8005450:	d1e4      	bne.n	800541c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005458:	4618      	mov	r0, r3
 800545a:	f7fb febb 	bl	80011d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005470:	b29b      	uxth	r3, r3
 8005472:	1ad3      	subs	r3, r2, r3
 8005474:	b29b      	uxth	r3, r3
 8005476:	4619      	mov	r1, r3
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f000 f943 	bl	8005704 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800547e:	e119      	b.n	80056b4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800548a:	429a      	cmp	r2, r3
 800548c:	f040 8112 	bne.w	80056b4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800549c:	f040 810a 	bne.w	80056b4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2202      	movs	r2, #2
 80054a4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f928 	bl	8005704 <HAL_UARTEx_RxEventCallback>
      return;
 80054b4:	e0fe      	b.n	80056b4 <HAL_UART_IRQHandler+0x798>
 80054b6:	bf00      	nop
 80054b8:	40020010 	.word	0x40020010
 80054bc:	40020028 	.word	0x40020028
 80054c0:	40020040 	.word	0x40020040
 80054c4:	40020058 	.word	0x40020058
 80054c8:	40020070 	.word	0x40020070
 80054cc:	40020088 	.word	0x40020088
 80054d0:	400200a0 	.word	0x400200a0
 80054d4:	400200b8 	.word	0x400200b8
 80054d8:	40020410 	.word	0x40020410
 80054dc:	40020428 	.word	0x40020428
 80054e0:	40020440 	.word	0x40020440
 80054e4:	40020458 	.word	0x40020458
 80054e8:	40020470 	.word	0x40020470
 80054ec:	40020488 	.word	0x40020488
 80054f0:	400204a0 	.word	0x400204a0
 80054f4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005504:	b29b      	uxth	r3, r3
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005512:	b29b      	uxth	r3, r3
 8005514:	2b00      	cmp	r3, #0
 8005516:	f000 80cf 	beq.w	80056b8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800551a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 80ca 	beq.w	80056b8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800552a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552c:	e853 3f00 	ldrex	r3, [r3]
 8005530:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005532:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005534:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005538:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	461a      	mov	r2, r3
 8005542:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005546:	647b      	str	r3, [r7, #68]	@ 0x44
 8005548:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800554c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800554e:	e841 2300 	strex	r3, r2, [r1]
 8005552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005554:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1e4      	bne.n	8005524 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3308      	adds	r3, #8
 8005560:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005564:	e853 3f00 	ldrex	r3, [r3]
 8005568:	623b      	str	r3, [r7, #32]
   return(result);
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	4b55      	ldr	r3, [pc, #340]	@ (80056c4 <HAL_UART_IRQHandler+0x7a8>)
 800556e:	4013      	ands	r3, r2
 8005570:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3308      	adds	r3, #8
 800557a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800557e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005580:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005582:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005584:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005586:	e841 2300 	strex	r3, r2, [r1]
 800558a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e3      	bne.n	800555a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	e853 3f00 	ldrex	r3, [r3]
 80055b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f023 0310 	bic.w	r3, r3, #16
 80055ba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	461a      	mov	r2, r3
 80055c4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	e841 2300 	strex	r3, r2, [r1]
 80055d4:	617b      	str	r3, [r7, #20]
   return(result);
 80055d6:	697b      	ldr	r3, [r7, #20]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d1e4      	bne.n	80055a6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2202      	movs	r2, #2
 80055e0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055e6:	4619      	mov	r1, r3
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 f88b 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80055ee:	e063      	b.n	80056b8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80055f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <HAL_UART_IRQHandler+0x6fe>
 80055fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005600:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d008      	beq.n	800561a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005610:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f001 fe8a 	bl	800732c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005618:	e051      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005622:	2b00      	cmp	r3, #0
 8005624:	d014      	beq.n	8005650 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800562a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562e:	2b00      	cmp	r3, #0
 8005630:	d105      	bne.n	800563e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005632:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005636:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d008      	beq.n	8005650 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005642:	2b00      	cmp	r3, #0
 8005644:	d03a      	beq.n	80056bc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	4798      	blx	r3
    }
    return;
 800564e:	e035      	b.n	80056bc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <HAL_UART_IRQHandler+0x754>
 800565c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d003      	beq.n	8005670 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f001 f913 	bl	8006894 <UART_EndTransmit_IT>
    return;
 800566e:	e026      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005674:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d009      	beq.n	8005690 <HAL_UART_IRQHandler+0x774>
 800567c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005680:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f001 fe63 	bl	8007354 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800568e:	e016      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005694:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005698:	2b00      	cmp	r3, #0
 800569a:	d010      	beq.n	80056be <HAL_UART_IRQHandler+0x7a2>
 800569c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	da0c      	bge.n	80056be <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f001 fe4b 	bl	8007340 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80056aa:	e008      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
      return;
 80056ac:	bf00      	nop
 80056ae:	e006      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
    return;
 80056b0:	bf00      	nop
 80056b2:	e004      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
      return;
 80056b4:	bf00      	nop
 80056b6:	e002      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
      return;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <HAL_UART_IRQHandler+0x7a2>
    return;
 80056bc:	bf00      	nop
  }
}
 80056be:	37e8      	adds	r7, #232	@ 0xe8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	effffffe 	.word	0xeffffffe

080056c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	460b      	mov	r3, r1
 800570e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005720:	b092      	sub	sp, #72	@ 0x48
 8005722:	af00      	add	r7, sp, #0
 8005724:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005726:	2300      	movs	r3, #0
 8005728:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	431a      	orrs	r2, r3
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	431a      	orrs	r2, r3
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	4313      	orrs	r3, r2
 8005742:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	4bbe      	ldr	r3, [pc, #760]	@ (8005a44 <UART_SetConfig+0x328>)
 800574c:	4013      	ands	r3, r2
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	6812      	ldr	r2, [r2, #0]
 8005752:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005754:	430b      	orrs	r3, r1
 8005756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4ab3      	ldr	r2, [pc, #716]	@ (8005a48 <UART_SetConfig+0x32c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d004      	beq.n	8005788 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005784:	4313      	orrs	r3, r2
 8005786:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	4baf      	ldr	r3, [pc, #700]	@ (8005a4c <UART_SetConfig+0x330>)
 8005790:	4013      	ands	r3, r2
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005798:	430b      	orrs	r3, r1
 800579a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a2:	f023 010f 	bic.w	r1, r3, #15
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4aa6      	ldr	r2, [pc, #664]	@ (8005a50 <UART_SetConfig+0x334>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d177      	bne.n	80058ac <UART_SetConfig+0x190>
 80057bc:	4ba5      	ldr	r3, [pc, #660]	@ (8005a54 <UART_SetConfig+0x338>)
 80057be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057c4:	2b28      	cmp	r3, #40	@ 0x28
 80057c6:	d86d      	bhi.n	80058a4 <UART_SetConfig+0x188>
 80057c8:	a201      	add	r2, pc, #4	@ (adr r2, 80057d0 <UART_SetConfig+0xb4>)
 80057ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ce:	bf00      	nop
 80057d0:	08005875 	.word	0x08005875
 80057d4:	080058a5 	.word	0x080058a5
 80057d8:	080058a5 	.word	0x080058a5
 80057dc:	080058a5 	.word	0x080058a5
 80057e0:	080058a5 	.word	0x080058a5
 80057e4:	080058a5 	.word	0x080058a5
 80057e8:	080058a5 	.word	0x080058a5
 80057ec:	080058a5 	.word	0x080058a5
 80057f0:	0800587d 	.word	0x0800587d
 80057f4:	080058a5 	.word	0x080058a5
 80057f8:	080058a5 	.word	0x080058a5
 80057fc:	080058a5 	.word	0x080058a5
 8005800:	080058a5 	.word	0x080058a5
 8005804:	080058a5 	.word	0x080058a5
 8005808:	080058a5 	.word	0x080058a5
 800580c:	080058a5 	.word	0x080058a5
 8005810:	08005885 	.word	0x08005885
 8005814:	080058a5 	.word	0x080058a5
 8005818:	080058a5 	.word	0x080058a5
 800581c:	080058a5 	.word	0x080058a5
 8005820:	080058a5 	.word	0x080058a5
 8005824:	080058a5 	.word	0x080058a5
 8005828:	080058a5 	.word	0x080058a5
 800582c:	080058a5 	.word	0x080058a5
 8005830:	0800588d 	.word	0x0800588d
 8005834:	080058a5 	.word	0x080058a5
 8005838:	080058a5 	.word	0x080058a5
 800583c:	080058a5 	.word	0x080058a5
 8005840:	080058a5 	.word	0x080058a5
 8005844:	080058a5 	.word	0x080058a5
 8005848:	080058a5 	.word	0x080058a5
 800584c:	080058a5 	.word	0x080058a5
 8005850:	08005895 	.word	0x08005895
 8005854:	080058a5 	.word	0x080058a5
 8005858:	080058a5 	.word	0x080058a5
 800585c:	080058a5 	.word	0x080058a5
 8005860:	080058a5 	.word	0x080058a5
 8005864:	080058a5 	.word	0x080058a5
 8005868:	080058a5 	.word	0x080058a5
 800586c:	080058a5 	.word	0x080058a5
 8005870:	0800589d 	.word	0x0800589d
 8005874:	2301      	movs	r3, #1
 8005876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800587a:	e222      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 800587c:	2304      	movs	r3, #4
 800587e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005882:	e21e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005884:	2308      	movs	r3, #8
 8005886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800588a:	e21a      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 800588c:	2310      	movs	r3, #16
 800588e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005892:	e216      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005894:	2320      	movs	r3, #32
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800589a:	e212      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 800589c:	2340      	movs	r3, #64	@ 0x40
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058a2:	e20e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80058a4:	2380      	movs	r3, #128	@ 0x80
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e20a      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a69      	ldr	r2, [pc, #420]	@ (8005a58 <UART_SetConfig+0x33c>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d130      	bne.n	8005918 <UART_SetConfig+0x1fc>
 80058b6:	4b67      	ldr	r3, [pc, #412]	@ (8005a54 <UART_SetConfig+0x338>)
 80058b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ba:	f003 0307 	and.w	r3, r3, #7
 80058be:	2b05      	cmp	r3, #5
 80058c0:	d826      	bhi.n	8005910 <UART_SetConfig+0x1f4>
 80058c2:	a201      	add	r2, pc, #4	@ (adr r2, 80058c8 <UART_SetConfig+0x1ac>)
 80058c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c8:	080058e1 	.word	0x080058e1
 80058cc:	080058e9 	.word	0x080058e9
 80058d0:	080058f1 	.word	0x080058f1
 80058d4:	080058f9 	.word	0x080058f9
 80058d8:	08005901 	.word	0x08005901
 80058dc:	08005909 	.word	0x08005909
 80058e0:	2300      	movs	r3, #0
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e1ec      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80058e8:	2304      	movs	r3, #4
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e1e8      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80058f0:	2308      	movs	r3, #8
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e1e4      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80058f8:	2310      	movs	r3, #16
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e1e0      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005900:	2320      	movs	r3, #32
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e1dc      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005908:	2340      	movs	r3, #64	@ 0x40
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e1d8      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005910:	2380      	movs	r3, #128	@ 0x80
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e1d4      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a4f      	ldr	r2, [pc, #316]	@ (8005a5c <UART_SetConfig+0x340>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d130      	bne.n	8005984 <UART_SetConfig+0x268>
 8005922:	4b4c      	ldr	r3, [pc, #304]	@ (8005a54 <UART_SetConfig+0x338>)
 8005924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005926:	f003 0307 	and.w	r3, r3, #7
 800592a:	2b05      	cmp	r3, #5
 800592c:	d826      	bhi.n	800597c <UART_SetConfig+0x260>
 800592e:	a201      	add	r2, pc, #4	@ (adr r2, 8005934 <UART_SetConfig+0x218>)
 8005930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005934:	0800594d 	.word	0x0800594d
 8005938:	08005955 	.word	0x08005955
 800593c:	0800595d 	.word	0x0800595d
 8005940:	08005965 	.word	0x08005965
 8005944:	0800596d 	.word	0x0800596d
 8005948:	08005975 	.word	0x08005975
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e1b6      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005954:	2304      	movs	r3, #4
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e1b2      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 800595c:	2308      	movs	r3, #8
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e1ae      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005964:	2310      	movs	r3, #16
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e1aa      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 800596c:	2320      	movs	r3, #32
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e1a6      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005974:	2340      	movs	r3, #64	@ 0x40
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e1a2      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 800597c:	2380      	movs	r3, #128	@ 0x80
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e19e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a35      	ldr	r2, [pc, #212]	@ (8005a60 <UART_SetConfig+0x344>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d130      	bne.n	80059f0 <UART_SetConfig+0x2d4>
 800598e:	4b31      	ldr	r3, [pc, #196]	@ (8005a54 <UART_SetConfig+0x338>)
 8005990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b05      	cmp	r3, #5
 8005998:	d826      	bhi.n	80059e8 <UART_SetConfig+0x2cc>
 800599a:	a201      	add	r2, pc, #4	@ (adr r2, 80059a0 <UART_SetConfig+0x284>)
 800599c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059a0:	080059b9 	.word	0x080059b9
 80059a4:	080059c1 	.word	0x080059c1
 80059a8:	080059c9 	.word	0x080059c9
 80059ac:	080059d1 	.word	0x080059d1
 80059b0:	080059d9 	.word	0x080059d9
 80059b4:	080059e1 	.word	0x080059e1
 80059b8:	2300      	movs	r3, #0
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e180      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059c0:	2304      	movs	r3, #4
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e17c      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059c8:	2308      	movs	r3, #8
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e178      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059d0:	2310      	movs	r3, #16
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e174      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059d8:	2320      	movs	r3, #32
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e170      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059e0:	2340      	movs	r3, #64	@ 0x40
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e16c      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059e8:	2380      	movs	r3, #128	@ 0x80
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e168      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a1b      	ldr	r2, [pc, #108]	@ (8005a64 <UART_SetConfig+0x348>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d142      	bne.n	8005a80 <UART_SetConfig+0x364>
 80059fa:	4b16      	ldr	r3, [pc, #88]	@ (8005a54 <UART_SetConfig+0x338>)
 80059fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	2b05      	cmp	r3, #5
 8005a04:	d838      	bhi.n	8005a78 <UART_SetConfig+0x35c>
 8005a06:	a201      	add	r2, pc, #4	@ (adr r2, 8005a0c <UART_SetConfig+0x2f0>)
 8005a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a0c:	08005a25 	.word	0x08005a25
 8005a10:	08005a2d 	.word	0x08005a2d
 8005a14:	08005a35 	.word	0x08005a35
 8005a18:	08005a3d 	.word	0x08005a3d
 8005a1c:	08005a69 	.word	0x08005a69
 8005a20:	08005a71 	.word	0x08005a71
 8005a24:	2300      	movs	r3, #0
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e14a      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a2c:	2304      	movs	r3, #4
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e146      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a34:	2308      	movs	r3, #8
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e142      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a3c:	2310      	movs	r3, #16
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e13e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a44:	cfff69f3 	.word	0xcfff69f3
 8005a48:	58000c00 	.word	0x58000c00
 8005a4c:	11fff4ff 	.word	0x11fff4ff
 8005a50:	40011000 	.word	0x40011000
 8005a54:	58024400 	.word	0x58024400
 8005a58:	40004400 	.word	0x40004400
 8005a5c:	40004800 	.word	0x40004800
 8005a60:	40004c00 	.word	0x40004c00
 8005a64:	40005000 	.word	0x40005000
 8005a68:	2320      	movs	r3, #32
 8005a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a6e:	e128      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a70:	2340      	movs	r3, #64	@ 0x40
 8005a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a76:	e124      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a78:	2380      	movs	r3, #128	@ 0x80
 8005a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a7e:	e120      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4acb      	ldr	r2, [pc, #812]	@ (8005db4 <UART_SetConfig+0x698>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d176      	bne.n	8005b78 <UART_SetConfig+0x45c>
 8005a8a:	4bcb      	ldr	r3, [pc, #812]	@ (8005db8 <UART_SetConfig+0x69c>)
 8005a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a92:	2b28      	cmp	r3, #40	@ 0x28
 8005a94:	d86c      	bhi.n	8005b70 <UART_SetConfig+0x454>
 8005a96:	a201      	add	r2, pc, #4	@ (adr r2, 8005a9c <UART_SetConfig+0x380>)
 8005a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a9c:	08005b41 	.word	0x08005b41
 8005aa0:	08005b71 	.word	0x08005b71
 8005aa4:	08005b71 	.word	0x08005b71
 8005aa8:	08005b71 	.word	0x08005b71
 8005aac:	08005b71 	.word	0x08005b71
 8005ab0:	08005b71 	.word	0x08005b71
 8005ab4:	08005b71 	.word	0x08005b71
 8005ab8:	08005b71 	.word	0x08005b71
 8005abc:	08005b49 	.word	0x08005b49
 8005ac0:	08005b71 	.word	0x08005b71
 8005ac4:	08005b71 	.word	0x08005b71
 8005ac8:	08005b71 	.word	0x08005b71
 8005acc:	08005b71 	.word	0x08005b71
 8005ad0:	08005b71 	.word	0x08005b71
 8005ad4:	08005b71 	.word	0x08005b71
 8005ad8:	08005b71 	.word	0x08005b71
 8005adc:	08005b51 	.word	0x08005b51
 8005ae0:	08005b71 	.word	0x08005b71
 8005ae4:	08005b71 	.word	0x08005b71
 8005ae8:	08005b71 	.word	0x08005b71
 8005aec:	08005b71 	.word	0x08005b71
 8005af0:	08005b71 	.word	0x08005b71
 8005af4:	08005b71 	.word	0x08005b71
 8005af8:	08005b71 	.word	0x08005b71
 8005afc:	08005b59 	.word	0x08005b59
 8005b00:	08005b71 	.word	0x08005b71
 8005b04:	08005b71 	.word	0x08005b71
 8005b08:	08005b71 	.word	0x08005b71
 8005b0c:	08005b71 	.word	0x08005b71
 8005b10:	08005b71 	.word	0x08005b71
 8005b14:	08005b71 	.word	0x08005b71
 8005b18:	08005b71 	.word	0x08005b71
 8005b1c:	08005b61 	.word	0x08005b61
 8005b20:	08005b71 	.word	0x08005b71
 8005b24:	08005b71 	.word	0x08005b71
 8005b28:	08005b71 	.word	0x08005b71
 8005b2c:	08005b71 	.word	0x08005b71
 8005b30:	08005b71 	.word	0x08005b71
 8005b34:	08005b71 	.word	0x08005b71
 8005b38:	08005b71 	.word	0x08005b71
 8005b3c:	08005b69 	.word	0x08005b69
 8005b40:	2301      	movs	r3, #1
 8005b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b46:	e0bc      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b48:	2304      	movs	r3, #4
 8005b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4e:	e0b8      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b50:	2308      	movs	r3, #8
 8005b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b56:	e0b4      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b58:	2310      	movs	r3, #16
 8005b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5e:	e0b0      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b60:	2320      	movs	r3, #32
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b66:	e0ac      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b68:	2340      	movs	r3, #64	@ 0x40
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6e:	e0a8      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b70:	2380      	movs	r3, #128	@ 0x80
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b76:	e0a4      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a8f      	ldr	r2, [pc, #572]	@ (8005dbc <UART_SetConfig+0x6a0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d130      	bne.n	8005be4 <UART_SetConfig+0x4c8>
 8005b82:	4b8d      	ldr	r3, [pc, #564]	@ (8005db8 <UART_SetConfig+0x69c>)
 8005b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	2b05      	cmp	r3, #5
 8005b8c:	d826      	bhi.n	8005bdc <UART_SetConfig+0x4c0>
 8005b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005b94 <UART_SetConfig+0x478>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005bad 	.word	0x08005bad
 8005b98:	08005bb5 	.word	0x08005bb5
 8005b9c:	08005bbd 	.word	0x08005bbd
 8005ba0:	08005bc5 	.word	0x08005bc5
 8005ba4:	08005bcd 	.word	0x08005bcd
 8005ba8:	08005bd5 	.word	0x08005bd5
 8005bac:	2300      	movs	r3, #0
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e086      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005bb4:	2304      	movs	r3, #4
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e082      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005bbc:	2308      	movs	r3, #8
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e07e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e07a      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005bcc:	2320      	movs	r3, #32
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e076      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005bd4:	2340      	movs	r3, #64	@ 0x40
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e072      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be2:	e06e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a75      	ldr	r2, [pc, #468]	@ (8005dc0 <UART_SetConfig+0x6a4>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d130      	bne.n	8005c50 <UART_SetConfig+0x534>
 8005bee:	4b72      	ldr	r3, [pc, #456]	@ (8005db8 <UART_SetConfig+0x69c>)
 8005bf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bf2:	f003 0307 	and.w	r3, r3, #7
 8005bf6:	2b05      	cmp	r3, #5
 8005bf8:	d826      	bhi.n	8005c48 <UART_SetConfig+0x52c>
 8005bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8005c00 <UART_SetConfig+0x4e4>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c19 	.word	0x08005c19
 8005c04:	08005c21 	.word	0x08005c21
 8005c08:	08005c29 	.word	0x08005c29
 8005c0c:	08005c31 	.word	0x08005c31
 8005c10:	08005c39 	.word	0x08005c39
 8005c14:	08005c41 	.word	0x08005c41
 8005c18:	2300      	movs	r3, #0
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e050      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c20:	2304      	movs	r3, #4
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e04c      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c28:	2308      	movs	r3, #8
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e048      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c30:	2310      	movs	r3, #16
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e044      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c38:	2320      	movs	r3, #32
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e040      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c40:	2340      	movs	r3, #64	@ 0x40
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e03c      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c48:	2380      	movs	r3, #128	@ 0x80
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4e:	e038      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a5b      	ldr	r2, [pc, #364]	@ (8005dc4 <UART_SetConfig+0x6a8>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d130      	bne.n	8005cbc <UART_SetConfig+0x5a0>
 8005c5a:	4b57      	ldr	r3, [pc, #348]	@ (8005db8 <UART_SetConfig+0x69c>)
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c5e:	f003 0307 	and.w	r3, r3, #7
 8005c62:	2b05      	cmp	r3, #5
 8005c64:	d826      	bhi.n	8005cb4 <UART_SetConfig+0x598>
 8005c66:	a201      	add	r2, pc, #4	@ (adr r2, 8005c6c <UART_SetConfig+0x550>)
 8005c68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c6c:	08005c85 	.word	0x08005c85
 8005c70:	08005c8d 	.word	0x08005c8d
 8005c74:	08005c95 	.word	0x08005c95
 8005c78:	08005c9d 	.word	0x08005c9d
 8005c7c:	08005ca5 	.word	0x08005ca5
 8005c80:	08005cad 	.word	0x08005cad
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e01a      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e016      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e012      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e00e      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005ca4:	2320      	movs	r3, #32
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e00a      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005cac:	2340      	movs	r3, #64	@ 0x40
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e006      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005cb4:	2380      	movs	r3, #128	@ 0x80
 8005cb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cba:	e002      	b.n	8005cc2 <UART_SetConfig+0x5a6>
 8005cbc:	2380      	movs	r3, #128	@ 0x80
 8005cbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a3f      	ldr	r2, [pc, #252]	@ (8005dc4 <UART_SetConfig+0x6a8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	f040 80f8 	bne.w	8005ebe <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005cce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	dc46      	bgt.n	8005d64 <UART_SetConfig+0x648>
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	f2c0 8082 	blt.w	8005de0 <UART_SetConfig+0x6c4>
 8005cdc:	3b02      	subs	r3, #2
 8005cde:	2b1e      	cmp	r3, #30
 8005ce0:	d87e      	bhi.n	8005de0 <UART_SetConfig+0x6c4>
 8005ce2:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce8 <UART_SetConfig+0x5cc>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d6b 	.word	0x08005d6b
 8005cec:	08005de1 	.word	0x08005de1
 8005cf0:	08005d73 	.word	0x08005d73
 8005cf4:	08005de1 	.word	0x08005de1
 8005cf8:	08005de1 	.word	0x08005de1
 8005cfc:	08005de1 	.word	0x08005de1
 8005d00:	08005d83 	.word	0x08005d83
 8005d04:	08005de1 	.word	0x08005de1
 8005d08:	08005de1 	.word	0x08005de1
 8005d0c:	08005de1 	.word	0x08005de1
 8005d10:	08005de1 	.word	0x08005de1
 8005d14:	08005de1 	.word	0x08005de1
 8005d18:	08005de1 	.word	0x08005de1
 8005d1c:	08005de1 	.word	0x08005de1
 8005d20:	08005d93 	.word	0x08005d93
 8005d24:	08005de1 	.word	0x08005de1
 8005d28:	08005de1 	.word	0x08005de1
 8005d2c:	08005de1 	.word	0x08005de1
 8005d30:	08005de1 	.word	0x08005de1
 8005d34:	08005de1 	.word	0x08005de1
 8005d38:	08005de1 	.word	0x08005de1
 8005d3c:	08005de1 	.word	0x08005de1
 8005d40:	08005de1 	.word	0x08005de1
 8005d44:	08005de1 	.word	0x08005de1
 8005d48:	08005de1 	.word	0x08005de1
 8005d4c:	08005de1 	.word	0x08005de1
 8005d50:	08005de1 	.word	0x08005de1
 8005d54:	08005de1 	.word	0x08005de1
 8005d58:	08005de1 	.word	0x08005de1
 8005d5c:	08005de1 	.word	0x08005de1
 8005d60:	08005dd3 	.word	0x08005dd3
 8005d64:	2b40      	cmp	r3, #64	@ 0x40
 8005d66:	d037      	beq.n	8005dd8 <UART_SetConfig+0x6bc>
 8005d68:	e03a      	b.n	8005de0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d6a:	f7fe fb8b 	bl	8004484 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005d70:	e03c      	b.n	8005dec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005d76:	4618      	mov	r0, r3
 8005d78:	f7fe fb9a 	bl	80044b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d80:	e034      	b.n	8005dec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d82:	f107 0318 	add.w	r3, r7, #24
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fce6 	bl	8004758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d90:	e02c      	b.n	8005dec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d92:	4b09      	ldr	r3, [pc, #36]	@ (8005db8 <UART_SetConfig+0x69c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d016      	beq.n	8005dcc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d9e:	4b06      	ldr	r3, [pc, #24]	@ (8005db8 <UART_SetConfig+0x69c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	08db      	lsrs	r3, r3, #3
 8005da4:	f003 0303 	and.w	r3, r3, #3
 8005da8:	4a07      	ldr	r2, [pc, #28]	@ (8005dc8 <UART_SetConfig+0x6ac>)
 8005daa:	fa22 f303 	lsr.w	r3, r2, r3
 8005dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005db0:	e01c      	b.n	8005dec <UART_SetConfig+0x6d0>
 8005db2:	bf00      	nop
 8005db4:	40011400 	.word	0x40011400
 8005db8:	58024400 	.word	0x58024400
 8005dbc:	40007800 	.word	0x40007800
 8005dc0:	40007c00 	.word	0x40007c00
 8005dc4:	58000c00 	.word	0x58000c00
 8005dc8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005dcc:	4b9d      	ldr	r3, [pc, #628]	@ (8006044 <UART_SetConfig+0x928>)
 8005dce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd0:	e00c      	b.n	8005dec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005dd2:	4b9d      	ldr	r3, [pc, #628]	@ (8006048 <UART_SetConfig+0x92c>)
 8005dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dd6:	e009      	b.n	8005dec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dd8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ddc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005dde:	e005      	b.n	8005dec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005dea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005dec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f000 81de 	beq.w	80061b0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	4a94      	ldr	r2, [pc, #592]	@ (800604c <UART_SetConfig+0x930>)
 8005dfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e06:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	685a      	ldr	r2, [r3, #4]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d305      	bcc.n	8005e24 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d903      	bls.n	8005e2c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e2a:	e1c1      	b.n	80061b0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2e:	2200      	movs	r2, #0
 8005e30:	60bb      	str	r3, [r7, #8]
 8005e32:	60fa      	str	r2, [r7, #12]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e38:	4a84      	ldr	r2, [pc, #528]	@ (800604c <UART_SetConfig+0x930>)
 8005e3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	2200      	movs	r2, #0
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e4a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e4e:	f7fa fa43 	bl	80002d8 <__aeabi_uldivmod>
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4610      	mov	r0, r2
 8005e58:	4619      	mov	r1, r3
 8005e5a:	f04f 0200 	mov.w	r2, #0
 8005e5e:	f04f 0300 	mov.w	r3, #0
 8005e62:	020b      	lsls	r3, r1, #8
 8005e64:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e68:	0202      	lsls	r2, r0, #8
 8005e6a:	6979      	ldr	r1, [r7, #20]
 8005e6c:	6849      	ldr	r1, [r1, #4]
 8005e6e:	0849      	lsrs	r1, r1, #1
 8005e70:	2000      	movs	r0, #0
 8005e72:	460c      	mov	r4, r1
 8005e74:	4605      	mov	r5, r0
 8005e76:	eb12 0804 	adds.w	r8, r2, r4
 8005e7a:	eb43 0905 	adc.w	r9, r3, r5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	469a      	mov	sl, r3
 8005e86:	4693      	mov	fp, r2
 8005e88:	4652      	mov	r2, sl
 8005e8a:	465b      	mov	r3, fp
 8005e8c:	4640      	mov	r0, r8
 8005e8e:	4649      	mov	r1, r9
 8005e90:	f7fa fa22 	bl	80002d8 <__aeabi_uldivmod>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4613      	mov	r3, r2
 8005e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ea2:	d308      	bcc.n	8005eb6 <UART_SetConfig+0x79a>
 8005ea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005eaa:	d204      	bcs.n	8005eb6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eb2:	60da      	str	r2, [r3, #12]
 8005eb4:	e17c      	b.n	80061b0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005ebc:	e178      	b.n	80061b0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	69db      	ldr	r3, [r3, #28]
 8005ec2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ec6:	f040 80c5 	bne.w	8006054 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005eca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005ece:	2b20      	cmp	r3, #32
 8005ed0:	dc48      	bgt.n	8005f64 <UART_SetConfig+0x848>
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	db7b      	blt.n	8005fce <UART_SetConfig+0x8b2>
 8005ed6:	2b20      	cmp	r3, #32
 8005ed8:	d879      	bhi.n	8005fce <UART_SetConfig+0x8b2>
 8005eda:	a201      	add	r2, pc, #4	@ (adr r2, 8005ee0 <UART_SetConfig+0x7c4>)
 8005edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee0:	08005f6b 	.word	0x08005f6b
 8005ee4:	08005f73 	.word	0x08005f73
 8005ee8:	08005fcf 	.word	0x08005fcf
 8005eec:	08005fcf 	.word	0x08005fcf
 8005ef0:	08005f7b 	.word	0x08005f7b
 8005ef4:	08005fcf 	.word	0x08005fcf
 8005ef8:	08005fcf 	.word	0x08005fcf
 8005efc:	08005fcf 	.word	0x08005fcf
 8005f00:	08005f8b 	.word	0x08005f8b
 8005f04:	08005fcf 	.word	0x08005fcf
 8005f08:	08005fcf 	.word	0x08005fcf
 8005f0c:	08005fcf 	.word	0x08005fcf
 8005f10:	08005fcf 	.word	0x08005fcf
 8005f14:	08005fcf 	.word	0x08005fcf
 8005f18:	08005fcf 	.word	0x08005fcf
 8005f1c:	08005fcf 	.word	0x08005fcf
 8005f20:	08005f9b 	.word	0x08005f9b
 8005f24:	08005fcf 	.word	0x08005fcf
 8005f28:	08005fcf 	.word	0x08005fcf
 8005f2c:	08005fcf 	.word	0x08005fcf
 8005f30:	08005fcf 	.word	0x08005fcf
 8005f34:	08005fcf 	.word	0x08005fcf
 8005f38:	08005fcf 	.word	0x08005fcf
 8005f3c:	08005fcf 	.word	0x08005fcf
 8005f40:	08005fcf 	.word	0x08005fcf
 8005f44:	08005fcf 	.word	0x08005fcf
 8005f48:	08005fcf 	.word	0x08005fcf
 8005f4c:	08005fcf 	.word	0x08005fcf
 8005f50:	08005fcf 	.word	0x08005fcf
 8005f54:	08005fcf 	.word	0x08005fcf
 8005f58:	08005fcf 	.word	0x08005fcf
 8005f5c:	08005fcf 	.word	0x08005fcf
 8005f60:	08005fc1 	.word	0x08005fc1
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d02e      	beq.n	8005fc6 <UART_SetConfig+0x8aa>
 8005f68:	e031      	b.n	8005fce <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f6a:	f7fd f855 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 8005f6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f70:	e033      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f72:	f7fd f867 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8005f76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f78:	e02f      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fa96 	bl	80044b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f88:	e027      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f8a:	f107 0318 	add.w	r3, r7, #24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fbe2 	bl	8004758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f94:	69fb      	ldr	r3, [r7, #28]
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f98:	e01f      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f9a:	4b2d      	ldr	r3, [pc, #180]	@ (8006050 <UART_SetConfig+0x934>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f003 0320 	and.w	r3, r3, #32
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d009      	beq.n	8005fba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8006050 <UART_SetConfig+0x934>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	08db      	lsrs	r3, r3, #3
 8005fac:	f003 0303 	and.w	r3, r3, #3
 8005fb0:	4a24      	ldr	r2, [pc, #144]	@ (8006044 <UART_SetConfig+0x928>)
 8005fb2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fb8:	e00f      	b.n	8005fda <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005fba:	4b22      	ldr	r3, [pc, #136]	@ (8006044 <UART_SetConfig+0x928>)
 8005fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fbe:	e00c      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fc0:	4b21      	ldr	r3, [pc, #132]	@ (8006048 <UART_SetConfig+0x92c>)
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fc4:	e009      	b.n	8005fda <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fcc:	e005      	b.n	8005fda <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005fd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	f000 80e7 	beq.w	80061b0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	4a19      	ldr	r2, [pc, #100]	@ (800604c <UART_SetConfig+0x930>)
 8005fe8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fec:	461a      	mov	r2, r3
 8005fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ff0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ff4:	005a      	lsls	r2, r3, #1
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	085b      	lsrs	r3, r3, #1
 8005ffc:	441a      	add	r2, r3
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	685b      	ldr	r3, [r3, #4]
 8006002:	fbb2 f3f3 	udiv	r3, r2, r3
 8006006:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006008:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600a:	2b0f      	cmp	r3, #15
 800600c:	d916      	bls.n	800603c <UART_SetConfig+0x920>
 800600e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006014:	d212      	bcs.n	800603c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006016:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006018:	b29b      	uxth	r3, r3
 800601a:	f023 030f 	bic.w	r3, r3, #15
 800601e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006020:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006022:	085b      	lsrs	r3, r3, #1
 8006024:	b29b      	uxth	r3, r3
 8006026:	f003 0307 	and.w	r3, r3, #7
 800602a:	b29a      	uxth	r2, r3
 800602c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800602e:	4313      	orrs	r3, r2
 8006030:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006038:	60da      	str	r2, [r3, #12]
 800603a:	e0b9      	b.n	80061b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006042:	e0b5      	b.n	80061b0 <UART_SetConfig+0xa94>
 8006044:	03d09000 	.word	0x03d09000
 8006048:	003d0900 	.word	0x003d0900
 800604c:	080075f0 	.word	0x080075f0
 8006050:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006054:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006058:	2b20      	cmp	r3, #32
 800605a:	dc49      	bgt.n	80060f0 <UART_SetConfig+0x9d4>
 800605c:	2b00      	cmp	r3, #0
 800605e:	db7c      	blt.n	800615a <UART_SetConfig+0xa3e>
 8006060:	2b20      	cmp	r3, #32
 8006062:	d87a      	bhi.n	800615a <UART_SetConfig+0xa3e>
 8006064:	a201      	add	r2, pc, #4	@ (adr r2, 800606c <UART_SetConfig+0x950>)
 8006066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800606a:	bf00      	nop
 800606c:	080060f7 	.word	0x080060f7
 8006070:	080060ff 	.word	0x080060ff
 8006074:	0800615b 	.word	0x0800615b
 8006078:	0800615b 	.word	0x0800615b
 800607c:	08006107 	.word	0x08006107
 8006080:	0800615b 	.word	0x0800615b
 8006084:	0800615b 	.word	0x0800615b
 8006088:	0800615b 	.word	0x0800615b
 800608c:	08006117 	.word	0x08006117
 8006090:	0800615b 	.word	0x0800615b
 8006094:	0800615b 	.word	0x0800615b
 8006098:	0800615b 	.word	0x0800615b
 800609c:	0800615b 	.word	0x0800615b
 80060a0:	0800615b 	.word	0x0800615b
 80060a4:	0800615b 	.word	0x0800615b
 80060a8:	0800615b 	.word	0x0800615b
 80060ac:	08006127 	.word	0x08006127
 80060b0:	0800615b 	.word	0x0800615b
 80060b4:	0800615b 	.word	0x0800615b
 80060b8:	0800615b 	.word	0x0800615b
 80060bc:	0800615b 	.word	0x0800615b
 80060c0:	0800615b 	.word	0x0800615b
 80060c4:	0800615b 	.word	0x0800615b
 80060c8:	0800615b 	.word	0x0800615b
 80060cc:	0800615b 	.word	0x0800615b
 80060d0:	0800615b 	.word	0x0800615b
 80060d4:	0800615b 	.word	0x0800615b
 80060d8:	0800615b 	.word	0x0800615b
 80060dc:	0800615b 	.word	0x0800615b
 80060e0:	0800615b 	.word	0x0800615b
 80060e4:	0800615b 	.word	0x0800615b
 80060e8:	0800615b 	.word	0x0800615b
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	2b40      	cmp	r3, #64	@ 0x40
 80060f2:	d02e      	beq.n	8006152 <UART_SetConfig+0xa36>
 80060f4:	e031      	b.n	800615a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060f6:	f7fc ff8f 	bl	8003018 <HAL_RCC_GetPCLK1Freq>
 80060fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80060fc:	e033      	b.n	8006166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060fe:	f7fc ffa1 	bl	8003044 <HAL_RCC_GetPCLK2Freq>
 8006102:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006104:	e02f      	b.n	8006166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006106:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f9d0 	bl	80044b0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006114:	e027      	b.n	8006166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006116:	f107 0318 	add.w	r3, r7, #24
 800611a:	4618      	mov	r0, r3
 800611c:	f7fe fb1c 	bl	8004758 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006124:	e01f      	b.n	8006166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006126:	4b2d      	ldr	r3, [pc, #180]	@ (80061dc <UART_SetConfig+0xac0>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d009      	beq.n	8006146 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006132:	4b2a      	ldr	r3, [pc, #168]	@ (80061dc <UART_SetConfig+0xac0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	08db      	lsrs	r3, r3, #3
 8006138:	f003 0303 	and.w	r3, r3, #3
 800613c:	4a28      	ldr	r2, [pc, #160]	@ (80061e0 <UART_SetConfig+0xac4>)
 800613e:	fa22 f303 	lsr.w	r3, r2, r3
 8006142:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006144:	e00f      	b.n	8006166 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006146:	4b26      	ldr	r3, [pc, #152]	@ (80061e0 <UART_SetConfig+0xac4>)
 8006148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800614a:	e00c      	b.n	8006166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800614c:	4b25      	ldr	r3, [pc, #148]	@ (80061e4 <UART_SetConfig+0xac8>)
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006150:	e009      	b.n	8006166 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006152:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006158:	e005      	b.n	8006166 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800615a:	2300      	movs	r3, #0
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006164:	bf00      	nop
    }

    if (pclk != 0U)
 8006166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006168:	2b00      	cmp	r3, #0
 800616a:	d021      	beq.n	80061b0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	4a1d      	ldr	r2, [pc, #116]	@ (80061e8 <UART_SetConfig+0xacc>)
 8006172:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006176:	461a      	mov	r2, r3
 8006178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800617a:	fbb3 f2f2 	udiv	r2, r3, r2
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	441a      	add	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d909      	bls.n	80061aa <UART_SetConfig+0xa8e>
 8006196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006198:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800619c:	d205      	bcs.n	80061aa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800619e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061a0:	b29a      	uxth	r2, r3
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60da      	str	r2, [r3, #12]
 80061a8:	e002      	b.n	80061b0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2200      	movs	r2, #0
 80061c4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80061c6:	697b      	ldr	r3, [r7, #20]
 80061c8:	2200      	movs	r2, #0
 80061ca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80061cc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3748      	adds	r7, #72	@ 0x48
 80061d4:	46bd      	mov	sp, r7
 80061d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061da:	bf00      	nop
 80061dc:	58024400 	.word	0x58024400
 80061e0:	03d09000 	.word	0x03d09000
 80061e4:	003d0900 	.word	0x003d0900
 80061e8:	080075f0 	.word	0x080075f0

080061ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061f8:	f003 0308 	and.w	r3, r3, #8
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00a      	beq.n	8006216 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	430a      	orrs	r2, r1
 8006214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d00a      	beq.n	8006238 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d00a      	beq.n	800625a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	430a      	orrs	r2, r1
 8006258:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625e:	f003 0304 	and.w	r3, r3, #4
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00a      	beq.n	800627c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	430a      	orrs	r2, r1
 800627a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	2b00      	cmp	r3, #0
 8006286:	d00a      	beq.n	800629e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	430a      	orrs	r2, r1
 800629c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a2:	f003 0320 	and.w	r3, r3, #32
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00a      	beq.n	80062c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01a      	beq.n	8006302 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ea:	d10a      	bne.n	8006302 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	605a      	str	r2, [r3, #4]
  }
}
 8006324:	bf00      	nop
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b098      	sub	sp, #96	@ 0x60
 8006334:	af02      	add	r7, sp, #8
 8006336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006340:	f7fa fda8 	bl	8000e94 <HAL_GetTick>
 8006344:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0308 	and.w	r3, r3, #8
 8006350:	2b08      	cmp	r3, #8
 8006352:	d12f      	bne.n	80063b4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006354:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800635c:	2200      	movs	r2, #0
 800635e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f88e 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d022      	beq.n	80063b4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006376:	e853 3f00 	ldrex	r3, [r3]
 800637a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800637c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800637e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006382:	653b      	str	r3, [r7, #80]	@ 0x50
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800638c:	647b      	str	r3, [r7, #68]	@ 0x44
 800638e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006390:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006392:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006394:	e841 2300 	strex	r3, r2, [r1]
 8006398:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800639a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1e6      	bne.n	800636e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e063      	b.n	800647c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0304 	and.w	r3, r3, #4
 80063be:	2b04      	cmp	r3, #4
 80063c0:	d149      	bne.n	8006456 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063c2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063ca:	2200      	movs	r2, #0
 80063cc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f857 	bl	8006484 <UART_WaitOnFlagUntilTimeout>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d03c      	beq.n	8006456 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063e4:	e853 3f00 	ldrex	r3, [r3]
 80063e8:	623b      	str	r3, [r7, #32]
   return(result);
 80063ea:	6a3b      	ldr	r3, [r7, #32]
 80063ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	461a      	mov	r2, r3
 80063f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063fa:	633b      	str	r3, [r7, #48]	@ 0x30
 80063fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063fe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006400:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006402:	e841 2300 	strex	r3, r2, [r1]
 8006406:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1e6      	bne.n	80063dc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	3308      	adds	r3, #8
 8006414:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	e853 3f00 	ldrex	r3, [r3]
 800641c:	60fb      	str	r3, [r7, #12]
   return(result);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f023 0301 	bic.w	r3, r3, #1
 8006424:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800642e:	61fa      	str	r2, [r7, #28]
 8006430:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006432:	69b9      	ldr	r1, [r7, #24]
 8006434:	69fa      	ldr	r2, [r7, #28]
 8006436:	e841 2300 	strex	r3, r2, [r1]
 800643a:	617b      	str	r3, [r7, #20]
   return(result);
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d1e5      	bne.n	800640e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006452:	2303      	movs	r3, #3
 8006454:	e012      	b.n	800647c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2220      	movs	r2, #32
 8006462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3758      	adds	r7, #88	@ 0x58
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006494:	e04f      	b.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006496:	69bb      	ldr	r3, [r7, #24]
 8006498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800649c:	d04b      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800649e:	f7fa fcf9 	bl	8000e94 <HAL_GetTick>
 80064a2:	4602      	mov	r2, r0
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e04e      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d037      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	2b80      	cmp	r3, #128	@ 0x80
 80064ca:	d034      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	2b40      	cmp	r3, #64	@ 0x40
 80064d0:	d031      	beq.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	69db      	ldr	r3, [r3, #28]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b08      	cmp	r3, #8
 80064de:	d110      	bne.n	8006502 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2208      	movs	r2, #8
 80064e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 f95b 	bl	80067a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2208      	movs	r2, #8
 80064f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e029      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006510:	d111      	bne.n	8006536 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800651a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f941 	bl	80067a4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2220      	movs	r2, #32
 8006526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006532:	2303      	movs	r3, #3
 8006534:	e00f      	b.n	8006556 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69da      	ldr	r2, [r3, #28]
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	4013      	ands	r3, r2
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	429a      	cmp	r2, r3
 8006544:	bf0c      	ite	eq
 8006546:	2301      	moveq	r3, #1
 8006548:	2300      	movne	r3, #0
 800654a:	b2db      	uxtb	r3, r3
 800654c:	461a      	mov	r2, r3
 800654e:	79fb      	ldrb	r3, [r7, #7]
 8006550:	429a      	cmp	r2, r3
 8006552:	d0a0      	beq.n	8006496 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006560:	b480      	push	{r7}
 8006562:	b0a3      	sub	sp, #140	@ 0x8c
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	4613      	mov	r3, r2
 800656c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	68ba      	ldr	r2, [r7, #8]
 8006572:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	88fa      	ldrh	r2, [r7, #6]
 8006578:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	88fa      	ldrh	r2, [r7, #6]
 8006580:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	2200      	movs	r2, #0
 8006588:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	689b      	ldr	r3, [r3, #8]
 800658e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006592:	d10e      	bne.n	80065b2 <UART_Start_Receive_IT+0x52>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <UART_Start_Receive_IT+0x48>
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80065a2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065a6:	e02d      	b.n	8006604 <UART_Start_Receive_IT+0xa4>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	22ff      	movs	r2, #255	@ 0xff
 80065ac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065b0:	e028      	b.n	8006604 <UART_Start_Receive_IT+0xa4>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10d      	bne.n	80065d6 <UART_Start_Receive_IT+0x76>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	691b      	ldr	r3, [r3, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d104      	bne.n	80065cc <UART_Start_Receive_IT+0x6c>
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	22ff      	movs	r2, #255	@ 0xff
 80065c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065ca:	e01b      	b.n	8006604 <UART_Start_Receive_IT+0xa4>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	227f      	movs	r2, #127	@ 0x7f
 80065d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065d4:	e016      	b.n	8006604 <UART_Start_Receive_IT+0xa4>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065de:	d10d      	bne.n	80065fc <UART_Start_Receive_IT+0x9c>
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	691b      	ldr	r3, [r3, #16]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d104      	bne.n	80065f2 <UART_Start_Receive_IT+0x92>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	227f      	movs	r2, #127	@ 0x7f
 80065ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065f0:	e008      	b.n	8006604 <UART_Start_Receive_IT+0xa4>
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	223f      	movs	r2, #63	@ 0x3f
 80065f6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80065fa:	e003      	b.n	8006604 <UART_Start_Receive_IT+0xa4>
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2222      	movs	r2, #34	@ 0x22
 8006610:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	3308      	adds	r3, #8
 800661a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800661c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800661e:	e853 3f00 	ldrex	r3, [r3]
 8006622:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006624:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006638:	673a      	str	r2, [r7, #112]	@ 0x70
 800663a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800663c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800663e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006640:	e841 2300 	strex	r3, r2, [r1]
 8006644:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006646:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006648:	2b00      	cmp	r3, #0
 800664a:	d1e3      	bne.n	8006614 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006650:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006654:	d14f      	bne.n	80066f6 <UART_Start_Receive_IT+0x196>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800665c:	88fa      	ldrh	r2, [r7, #6]
 800665e:	429a      	cmp	r2, r3
 8006660:	d349      	bcc.n	80066f6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800666a:	d107      	bne.n	800667c <UART_Start_Receive_IT+0x11c>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d103      	bne.n	800667c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a47      	ldr	r2, [pc, #284]	@ (8006794 <UART_Start_Receive_IT+0x234>)
 8006678:	675a      	str	r2, [r3, #116]	@ 0x74
 800667a:	e002      	b.n	8006682 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a46      	ldr	r2, [pc, #280]	@ (8006798 <UART_Start_Receive_IT+0x238>)
 8006680:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d01a      	beq.n	80066c0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006698:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800669a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800669e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	461a      	mov	r2, r3
 80066a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80066ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80066ae:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80066b2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80066ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e4      	bne.n	800668a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	3308      	adds	r3, #8
 80066c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ca:	e853 3f00 	ldrex	r3, [r3]
 80066ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80066d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80066e0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80066e2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80066e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80066ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d1e5      	bne.n	80066c0 <UART_Start_Receive_IT+0x160>
 80066f4:	e046      	b.n	8006784 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066fe:	d107      	bne.n	8006710 <UART_Start_Receive_IT+0x1b0>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d103      	bne.n	8006710 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	4a24      	ldr	r2, [pc, #144]	@ (800679c <UART_Start_Receive_IT+0x23c>)
 800670c:	675a      	str	r2, [r3, #116]	@ 0x74
 800670e:	e002      	b.n	8006716 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	4a23      	ldr	r2, [pc, #140]	@ (80067a0 <UART_Start_Receive_IT+0x240>)
 8006714:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d019      	beq.n	8006752 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006726:	e853 3f00 	ldrex	r3, [r3]
 800672a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800672c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006732:	677b      	str	r3, [r7, #116]	@ 0x74
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	461a      	mov	r2, r3
 800673a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800673c:	637b      	str	r3, [r7, #52]	@ 0x34
 800673e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800674a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e6      	bne.n	800671e <UART_Start_Receive_IT+0x1be>
 8006750:	e018      	b.n	8006784 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	613b      	str	r3, [r7, #16]
   return(result);
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f043 0320 	orr.w	r3, r3, #32
 8006766:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	461a      	mov	r2, r3
 800676e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006770:	623b      	str	r3, [r7, #32]
 8006772:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006774:	69f9      	ldr	r1, [r7, #28]
 8006776:	6a3a      	ldr	r2, [r7, #32]
 8006778:	e841 2300 	strex	r3, r2, [r1]
 800677c:	61bb      	str	r3, [r7, #24]
   return(result);
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d1e6      	bne.n	8006752 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	378c      	adds	r7, #140	@ 0x8c
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	08006fc1 	.word	0x08006fc1
 8006798:	08006c5d 	.word	0x08006c5d
 800679c:	08006aa5 	.word	0x08006aa5
 80067a0:	080068ed 	.word	0x080068ed

080067a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b095      	sub	sp, #84	@ 0x54
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80067c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80067ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80067cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067d0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3308      	adds	r3, #8
 80067e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80067ee:	69fa      	ldr	r2, [r7, #28]
 80067f0:	4b1e      	ldr	r3, [pc, #120]	@ (800686c <UART_EndRxTransfer+0xc8>)
 80067f2:	4013      	ands	r3, r2
 80067f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	3308      	adds	r3, #8
 80067fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006800:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006802:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006804:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800680c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680e:	2b00      	cmp	r3, #0
 8006810:	d1e5      	bne.n	80067de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006816:	2b01      	cmp	r3, #1
 8006818:	d118      	bne.n	800684c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	e853 3f00 	ldrex	r3, [r3]
 8006826:	60bb      	str	r3, [r7, #8]
   return(result);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f023 0310 	bic.w	r3, r3, #16
 800682e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	461a      	mov	r2, r3
 8006836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006838:	61bb      	str	r3, [r7, #24]
 800683a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683c:	6979      	ldr	r1, [r7, #20]
 800683e:	69ba      	ldr	r2, [r7, #24]
 8006840:	e841 2300 	strex	r3, r2, [r1]
 8006844:	613b      	str	r3, [r7, #16]
   return(result);
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e6      	bne.n	800681a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2220      	movs	r2, #32
 8006850:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006860:	bf00      	nop
 8006862:	3754      	adds	r7, #84	@ 0x54
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	effffffe 	.word	0xeffffffe

08006870 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800687c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006886:	68f8      	ldr	r0, [r7, #12]
 8006888:	f7fe ff32 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800688c:	bf00      	nop
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b088      	sub	sp, #32
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068b0:	61fb      	str	r3, [r7, #28]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	61bb      	str	r3, [r7, #24]
 80068bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6979      	ldr	r1, [r7, #20]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	613b      	str	r3, [r7, #16]
   return(result);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e6      	bne.n	800689c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2220      	movs	r2, #32
 80068d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2200      	movs	r2, #0
 80068da:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fe fef3 	bl	80056c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068e2:	bf00      	nop
 80068e4:	3720      	adds	r7, #32
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}
	...

080068ec <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b09c      	sub	sp, #112	@ 0x70
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80068fa:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006904:	2b22      	cmp	r3, #34	@ 0x22
 8006906:	f040 80be 	bne.w	8006a86 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006914:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006918:	b2d9      	uxtb	r1, r3
 800691a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800691e:	b2da      	uxtb	r2, r3
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006924:	400a      	ands	r2, r1
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800692e:	1c5a      	adds	r2, r3, #1
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800693a:	b29b      	uxth	r3, r3
 800693c:	3b01      	subs	r3, #1
 800693e:	b29a      	uxth	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800694c:	b29b      	uxth	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	f040 80a1 	bne.w	8006a96 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800695c:	e853 3f00 	ldrex	r3, [r3]
 8006960:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006964:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006968:	66bb      	str	r3, [r7, #104]	@ 0x68
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	461a      	mov	r2, r3
 8006970:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006972:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006974:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006976:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006978:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800697a:	e841 2300 	strex	r3, r2, [r1]
 800697e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1e6      	bne.n	8006954 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	3308      	adds	r3, #8
 800698c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800698e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006990:	e853 3f00 	ldrex	r3, [r3]
 8006994:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006998:	f023 0301 	bic.w	r3, r3, #1
 800699c:	667b      	str	r3, [r7, #100]	@ 0x64
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80069a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80069a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80069ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80069b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d1e5      	bne.n	8006986 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2220      	movs	r2, #32
 80069be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2200      	movs	r2, #0
 80069cc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a33      	ldr	r2, [pc, #204]	@ (8006aa0 <UART_RxISR_8BIT+0x1b4>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d01f      	beq.n	8006a18 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d018      	beq.n	8006a18 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ee:	e853 3f00 	ldrex	r3, [r3]
 80069f2:	623b      	str	r3, [r7, #32]
   return(result);
 80069f4:	6a3b      	ldr	r3, [r7, #32]
 80069f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a04:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a06:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a08:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a0c:	e841 2300 	strex	r3, r2, [r1]
 8006a10:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1e6      	bne.n	80069e6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d12e      	bne.n	8006a7e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	e853 3f00 	ldrex	r3, [r3]
 8006a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0310 	bic.w	r3, r3, #16
 8006a3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	461a      	mov	r2, r3
 8006a42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a44:	61fb      	str	r3, [r7, #28]
 8006a46:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a48:	69b9      	ldr	r1, [r7, #24]
 8006a4a:	69fa      	ldr	r2, [r7, #28]
 8006a4c:	e841 2300 	strex	r3, r2, [r1]
 8006a50:	617b      	str	r3, [r7, #20]
   return(result);
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d1e6      	bne.n	8006a26 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	f003 0310 	and.w	r3, r3, #16
 8006a62:	2b10      	cmp	r3, #16
 8006a64:	d103      	bne.n	8006a6e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2210      	movs	r2, #16
 8006a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7fe fe44 	bl	8005704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a7c:	e00b      	b.n	8006a96 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f7fe fe2c 	bl	80056dc <HAL_UART_RxCpltCallback>
}
 8006a84:	e007      	b.n	8006a96 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	699a      	ldr	r2, [r3, #24]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0208 	orr.w	r2, r2, #8
 8006a94:	619a      	str	r2, [r3, #24]
}
 8006a96:	bf00      	nop
 8006a98:	3770      	adds	r7, #112	@ 0x70
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	58000c00 	.word	0x58000c00

08006aa4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b09c      	sub	sp, #112	@ 0x70
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006ab2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006abc:	2b22      	cmp	r3, #34	@ 0x22
 8006abe:	f040 80be 	bne.w	8006c3e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ac8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006ad2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006ad6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006ada:	4013      	ands	r3, r2
 8006adc:	b29a      	uxth	r2, r3
 8006ade:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006ae0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ae6:	1c9a      	adds	r2, r3, #2
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	3b01      	subs	r3, #1
 8006af6:	b29a      	uxth	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f040 80a1 	bne.w	8006c4e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b1c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b20:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	461a      	mov	r2, r3
 8006b28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b2a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b2c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b30:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e6      	bne.n	8006b0c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b48:	e853 3f00 	ldrex	r3, [r3]
 8006b4c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b50:	f023 0301 	bic.w	r3, r3, #1
 8006b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006b5e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006b64:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006b66:	e841 2300 	strex	r3, r2, [r1]
 8006b6a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d1e5      	bne.n	8006b3e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a33      	ldr	r2, [pc, #204]	@ (8006c58 <UART_RxISR_16BIT+0x1b4>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d01f      	beq.n	8006bd0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d018      	beq.n	8006bd0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006bb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bbe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bc4:	e841 2300 	strex	r3, r2, [r1]
 8006bc8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d1e6      	bne.n	8006b9e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d12e      	bne.n	8006c36 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	f023 0310 	bic.w	r3, r3, #16
 8006bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006bfc:	61bb      	str	r3, [r7, #24]
 8006bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6979      	ldr	r1, [r7, #20]
 8006c02:	69ba      	ldr	r2, [r7, #24]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	613b      	str	r3, [r7, #16]
   return(result);
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	69db      	ldr	r3, [r3, #28]
 8006c16:	f003 0310 	and.w	r3, r3, #16
 8006c1a:	2b10      	cmp	r3, #16
 8006c1c:	d103      	bne.n	8006c26 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2210      	movs	r2, #16
 8006c24:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c2c:	4619      	mov	r1, r3
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f7fe fd68 	bl	8005704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c34:	e00b      	b.n	8006c4e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f7fe fd50 	bl	80056dc <HAL_UART_RxCpltCallback>
}
 8006c3c:	e007      	b.n	8006c4e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f042 0208 	orr.w	r2, r2, #8
 8006c4c:	619a      	str	r2, [r3, #24]
}
 8006c4e:	bf00      	nop
 8006c50:	3770      	adds	r7, #112	@ 0x70
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	58000c00 	.word	0x58000c00

08006c5c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b0ac      	sub	sp, #176	@ 0xb0
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006c6a:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	69db      	ldr	r3, [r3, #28]
 8006c74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c92:	2b22      	cmp	r3, #34	@ 0x22
 8006c94:	f040 8181 	bne.w	8006f9a <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006c9e:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ca2:	e124      	b.n	8006eee <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006caa:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cae:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006cb2:	b2d9      	uxtb	r1, r3
 8006cb4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006cb8:	b2da      	uxtb	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cbe:	400a      	ands	r2, r1
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cc8:	1c5a      	adds	r2, r3, #1
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006cd4:	b29b      	uxth	r3, r3
 8006cd6:	3b01      	subs	r3, #1
 8006cd8:	b29a      	uxth	r2, r3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006cea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cee:	f003 0307 	and.w	r3, r3, #7
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d053      	beq.n	8006d9e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006cf6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006cfa:	f003 0301 	and.w	r3, r3, #1
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d011      	beq.n	8006d26 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006d02:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d00b      	beq.n	8006d26 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2201      	movs	r2, #1
 8006d14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d1c:	f043 0201 	orr.w	r2, r3, #1
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d2a:	f003 0302 	and.w	r3, r3, #2
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d011      	beq.n	8006d56 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d36:	f003 0301 	and.w	r3, r3, #1
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00b      	beq.n	8006d56 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2202      	movs	r2, #2
 8006d44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d4c:	f043 0204 	orr.w	r2, r3, #4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d5a:	f003 0304 	and.w	r3, r3, #4
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d011      	beq.n	8006d86 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d66:	f003 0301 	and.w	r3, r3, #1
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d00b      	beq.n	8006d86 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2204      	movs	r2, #4
 8006d74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d7c:	f043 0202 	orr.w	r2, r3, #2
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d006      	beq.n	8006d9e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7fe fcad 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006da4:	b29b      	uxth	r3, r3
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	f040 80a1 	bne.w	8006eee <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006dc0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006dce:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006dd0:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006dd4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006ddc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e4      	bne.n	8006dac <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	3308      	adds	r3, #8
 8006de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dec:	e853 3f00 	ldrex	r3, [r3]
 8006df0:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006df2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006df4:	4b6f      	ldr	r3, [pc, #444]	@ (8006fb4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006df6:	4013      	ands	r3, r2
 8006df8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e06:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006e08:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006e0c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e0e:	e841 2300 	strex	r3, r2, [r1]
 8006e12:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006e14:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d1e3      	bne.n	8006de2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a61      	ldr	r2, [pc, #388]	@ (8006fb8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d021      	beq.n	8006e7c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d01a      	beq.n	8006e7c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006e54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e5a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	461a      	mov	r2, r3
 8006e64:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006e68:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e6a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006e6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e4      	bne.n	8006e46 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d130      	bne.n	8006ee6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e92:	e853 3f00 	ldrex	r3, [r3]
 8006e96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8006eae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006eb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006eb4:	e841 2300 	strex	r3, r2, [r1]
 8006eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d1e4      	bne.n	8006e8a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	69db      	ldr	r3, [r3, #28]
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d103      	bne.n	8006ed6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2210      	movs	r2, #16
 8006ed4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7fe fc10 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006ee4:	e00e      	b.n	8006f04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f7fe fbf8 	bl	80056dc <HAL_UART_RxCpltCallback>
        break;
 8006eec:	e00a      	b.n	8006f04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eee:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d006      	beq.n	8006f04 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8006ef6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f47f aed0 	bne.w	8006ca4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f0a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f0e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d049      	beq.n	8006faa <UART_RxISR_8BIT_FIFOEN+0x34e>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f1c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d242      	bcs.n	8006faa <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3308      	adds	r3, #8
 8006f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f3a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	3308      	adds	r3, #8
 8006f44:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006f48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e3      	bne.n	8006f24 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	4a17      	ldr	r2, [pc, #92]	@ (8006fbc <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006f60:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f043 0320 	orr.w	r3, r3, #32
 8006f76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006f84:	61bb      	str	r3, [r7, #24]
 8006f86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6979      	ldr	r1, [r7, #20]
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	613b      	str	r3, [r7, #16]
   return(result);
 8006f92:	693b      	ldr	r3, [r7, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e4      	bne.n	8006f62 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f98:	e007      	b.n	8006faa <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	699a      	ldr	r2, [r3, #24]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f042 0208 	orr.w	r2, r2, #8
 8006fa8:	619a      	str	r2, [r3, #24]
}
 8006faa:	bf00      	nop
 8006fac:	37b0      	adds	r7, #176	@ 0xb0
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	bf00      	nop
 8006fb4:	effffffe 	.word	0xeffffffe
 8006fb8:	58000c00 	.word	0x58000c00
 8006fbc:	080068ed 	.word	0x080068ed

08006fc0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b0ae      	sub	sp, #184	@ 0xb8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006fce:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ff6:	2b22      	cmp	r3, #34	@ 0x22
 8006ff8:	f040 8185 	bne.w	8007306 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007002:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007006:	e128      	b.n	800725a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007016:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800701a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800701e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007022:	4013      	ands	r3, r2
 8007024:	b29a      	uxth	r2, r3
 8007026:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800702a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007030:	1c9a      	adds	r2, r3, #2
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800703c:	b29b      	uxth	r3, r3
 800703e:	3b01      	subs	r3, #1
 8007040:	b29a      	uxth	r2, r3
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007056:	f003 0307 	and.w	r3, r3, #7
 800705a:	2b00      	cmp	r3, #0
 800705c:	d053      	beq.n	8007106 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800705e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d011      	beq.n	800708e <UART_RxISR_16BIT_FIFOEN+0xce>
 800706a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800706e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007072:	2b00      	cmp	r3, #0
 8007074:	d00b      	beq.n	800708e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	2201      	movs	r2, #1
 800707c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007084:	f043 0201 	orr.w	r2, r3, #1
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800708e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007092:	f003 0302 	and.w	r3, r3, #2
 8007096:	2b00      	cmp	r3, #0
 8007098:	d011      	beq.n	80070be <UART_RxISR_16BIT_FIFOEN+0xfe>
 800709a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d00b      	beq.n	80070be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2202      	movs	r2, #2
 80070ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b4:	f043 0204 	orr.w	r2, r3, #4
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070c2:	f003 0304 	and.w	r3, r3, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d011      	beq.n	80070ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80070ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80070ce:	f003 0301 	and.w	r3, r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d00b      	beq.n	80070ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2204      	movs	r2, #4
 80070dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e4:	f043 0202 	orr.w	r2, r3, #2
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d006      	beq.n	8007106 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f7fe faf9 	bl	80056f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800710c:	b29b      	uxth	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	f040 80a3 	bne.w	800725a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800711c:	e853 3f00 	ldrex	r3, [r3]
 8007120:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007122:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007124:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007128:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	461a      	mov	r2, r3
 8007132:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007136:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800713a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800713e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e2      	bne.n	8007114 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800715e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007160:	4b6f      	ldr	r3, [pc, #444]	@ (8007320 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007162:	4013      	ands	r3, r2
 8007164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3308      	adds	r3, #8
 800716e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007172:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007174:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007176:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007178:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007180:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e3      	bne.n	800714e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2200      	movs	r2, #0
 8007192:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a61      	ldr	r2, [pc, #388]	@ (8007324 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d021      	beq.n	80071e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d01a      	beq.n	80071e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80071c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80071c2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80071c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80071d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80071d6:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80071da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80071dc:	e841 2300 	strex	r3, r2, [r1]
 80071e0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80071e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d1e4      	bne.n	80071b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d130      	bne.n	8007252 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007206:	f023 0310 	bic.w	r3, r3, #16
 800720a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007218:	647b      	str	r3, [r7, #68]	@ 0x44
 800721a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800721e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007226:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e4      	bne.n	80071f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b10      	cmp	r3, #16
 8007238:	d103      	bne.n	8007242 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2210      	movs	r2, #16
 8007240:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fe fa5a 	bl	8005704 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8007250:	e00e      	b.n	8007270 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7fe fa42 	bl	80056dc <HAL_UART_RxCpltCallback>
        break;
 8007258:	e00a      	b.n	8007270 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800725a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800725e:	2b00      	cmp	r3, #0
 8007260:	d006      	beq.n	8007270 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 8007262:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007266:	f003 0320 	and.w	r3, r3, #32
 800726a:	2b00      	cmp	r3, #0
 800726c:	f47f aecc 	bne.w	8007008 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007276:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800727a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800727e:	2b00      	cmp	r3, #0
 8007280:	d049      	beq.n	8007316 <UART_RxISR_16BIT_FIFOEN+0x356>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007288:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800728c:	429a      	cmp	r2, r3
 800728e:	d242      	bcs.n	8007316 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	3308      	adds	r3, #8
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	e853 3f00 	ldrex	r3, [r3]
 800729e:	623b      	str	r3, [r7, #32]
   return(result);
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80072a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80072b4:	633a      	str	r2, [r7, #48]	@ 0x30
 80072b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80072ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072bc:	e841 2300 	strex	r3, r2, [r1]
 80072c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80072c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1e3      	bne.n	8007290 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a17      	ldr	r2, [pc, #92]	@ (8007328 <UART_RxISR_16BIT_FIFOEN+0x368>)
 80072cc:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d4:	693b      	ldr	r3, [r7, #16]
 80072d6:	e853 3f00 	ldrex	r3, [r3]
 80072da:	60fb      	str	r3, [r7, #12]
   return(result);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f043 0320 	orr.w	r3, r3, #32
 80072e2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	461a      	mov	r2, r3
 80072ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80072f0:	61fb      	str	r3, [r7, #28]
 80072f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f4:	69b9      	ldr	r1, [r7, #24]
 80072f6:	69fa      	ldr	r2, [r7, #28]
 80072f8:	e841 2300 	strex	r3, r2, [r1]
 80072fc:	617b      	str	r3, [r7, #20]
   return(result);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1e4      	bne.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007304:	e007      	b.n	8007316 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	699a      	ldr	r2, [r3, #24]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f042 0208 	orr.w	r2, r2, #8
 8007314:	619a      	str	r2, [r3, #24]
}
 8007316:	bf00      	nop
 8007318:	37b8      	adds	r7, #184	@ 0xb8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	effffffe 	.word	0xeffffffe
 8007324:	58000c00 	.word	0x58000c00
 8007328:	08006aa5 	.word	0x08006aa5

0800732c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800732c:	b480      	push	{r7}
 800732e:	b083      	sub	sp, #12
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007334:	bf00      	nop
 8007336:	370c      	adds	r7, #12
 8007338:	46bd      	mov	sp, r7
 800733a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733e:	4770      	bx	lr

08007340 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007340:	b480      	push	{r7}
 8007342:	b083      	sub	sp, #12
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007348:	bf00      	nop
 800734a:	370c      	adds	r7, #12
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800735c:	bf00      	nop
 800735e:	370c      	adds	r7, #12
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007376:	2b01      	cmp	r3, #1
 8007378:	d101      	bne.n	800737e <HAL_UARTEx_DisableFifoMode+0x16>
 800737a:	2302      	movs	r3, #2
 800737c:	e027      	b.n	80073ce <HAL_UARTEx_DisableFifoMode+0x66>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2201      	movs	r2, #1
 8007382:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2224      	movs	r2, #36	@ 0x24
 800738a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	681a      	ldr	r2, [r3, #0]
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f022 0201 	bic.w	r2, r2, #1
 80073a4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80073ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2200      	movs	r2, #0
 80073c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr

080073da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073da:	b580      	push	{r7, lr}
 80073dc:	b084      	sub	sp, #16
 80073de:	af00      	add	r7, sp, #0
 80073e0:	6078      	str	r0, [r7, #4]
 80073e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073ea:	2b01      	cmp	r3, #1
 80073ec:	d101      	bne.n	80073f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073ee:	2302      	movs	r3, #2
 80073f0:	e02d      	b.n	800744e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2201      	movs	r2, #1
 80073f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2224      	movs	r2, #36	@ 0x24
 80073fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f022 0201 	bic.w	r2, r2, #1
 8007418:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f850 	bl	80074d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2220      	movs	r2, #32
 8007440:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3710      	adds	r7, #16
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b084      	sub	sp, #16
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007466:	2b01      	cmp	r3, #1
 8007468:	d101      	bne.n	800746e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800746a:	2302      	movs	r3, #2
 800746c:	e02d      	b.n	80074ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2224      	movs	r2, #36	@ 0x24
 800747a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 0201 	bic.w	r2, r2, #1
 8007494:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689b      	ldr	r3, [r3, #8]
 800749c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	683a      	ldr	r2, [r7, #0]
 80074a6:	430a      	orrs	r2, r1
 80074a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f812 	bl	80074d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68fa      	ldr	r2, [r7, #12]
 80074b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3710      	adds	r7, #16
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
	...

080074d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d108      	bne.n	80074f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2201      	movs	r2, #1
 80074f0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074f4:	e031      	b.n	800755a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074f6:	2310      	movs	r3, #16
 80074f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074fa:	2310      	movs	r3, #16
 80074fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	0e5b      	lsrs	r3, r3, #25
 8007506:	b2db      	uxtb	r3, r3
 8007508:	f003 0307 	and.w	r3, r3, #7
 800750c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	0f5b      	lsrs	r3, r3, #29
 8007516:	b2db      	uxtb	r3, r3
 8007518:	f003 0307 	and.w	r3, r3, #7
 800751c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800751e:	7bbb      	ldrb	r3, [r7, #14]
 8007520:	7b3a      	ldrb	r2, [r7, #12]
 8007522:	4911      	ldr	r1, [pc, #68]	@ (8007568 <UARTEx_SetNbDataToProcess+0x94>)
 8007524:	5c8a      	ldrb	r2, [r1, r2]
 8007526:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800752a:	7b3a      	ldrb	r2, [r7, #12]
 800752c:	490f      	ldr	r1, [pc, #60]	@ (800756c <UARTEx_SetNbDataToProcess+0x98>)
 800752e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007530:	fb93 f3f2 	sdiv	r3, r3, r2
 8007534:	b29a      	uxth	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800753c:	7bfb      	ldrb	r3, [r7, #15]
 800753e:	7b7a      	ldrb	r2, [r7, #13]
 8007540:	4909      	ldr	r1, [pc, #36]	@ (8007568 <UARTEx_SetNbDataToProcess+0x94>)
 8007542:	5c8a      	ldrb	r2, [r1, r2]
 8007544:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007548:	7b7a      	ldrb	r2, [r7, #13]
 800754a:	4908      	ldr	r1, [pc, #32]	@ (800756c <UARTEx_SetNbDataToProcess+0x98>)
 800754c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800754e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007552:	b29a      	uxth	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	08007608 	.word	0x08007608
 800756c:	08007610 	.word	0x08007610

08007570 <memset>:
 8007570:	4402      	add	r2, r0
 8007572:	4603      	mov	r3, r0
 8007574:	4293      	cmp	r3, r2
 8007576:	d100      	bne.n	800757a <memset+0xa>
 8007578:	4770      	bx	lr
 800757a:	f803 1b01 	strb.w	r1, [r3], #1
 800757e:	e7f9      	b.n	8007574 <memset+0x4>

08007580 <__libc_init_array>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	4d0d      	ldr	r5, [pc, #52]	@ (80075b8 <__libc_init_array+0x38>)
 8007584:	4c0d      	ldr	r4, [pc, #52]	@ (80075bc <__libc_init_array+0x3c>)
 8007586:	1b64      	subs	r4, r4, r5
 8007588:	10a4      	asrs	r4, r4, #2
 800758a:	2600      	movs	r6, #0
 800758c:	42a6      	cmp	r6, r4
 800758e:	d109      	bne.n	80075a4 <__libc_init_array+0x24>
 8007590:	4d0b      	ldr	r5, [pc, #44]	@ (80075c0 <__libc_init_array+0x40>)
 8007592:	4c0c      	ldr	r4, [pc, #48]	@ (80075c4 <__libc_init_array+0x44>)
 8007594:	f000 f818 	bl	80075c8 <_init>
 8007598:	1b64      	subs	r4, r4, r5
 800759a:	10a4      	asrs	r4, r4, #2
 800759c:	2600      	movs	r6, #0
 800759e:	42a6      	cmp	r6, r4
 80075a0:	d105      	bne.n	80075ae <__libc_init_array+0x2e>
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80075a8:	4798      	blx	r3
 80075aa:	3601      	adds	r6, #1
 80075ac:	e7ee      	b.n	800758c <__libc_init_array+0xc>
 80075ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80075b2:	4798      	blx	r3
 80075b4:	3601      	adds	r6, #1
 80075b6:	e7f2      	b.n	800759e <__libc_init_array+0x1e>
 80075b8:	08007620 	.word	0x08007620
 80075bc:	08007620 	.word	0x08007620
 80075c0:	08007620 	.word	0x08007620
 80075c4:	08007624 	.word	0x08007624

080075c8 <_init>:
 80075c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ca:	bf00      	nop
 80075cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ce:	bc08      	pop	{r3}
 80075d0:	469e      	mov	lr, r3
 80075d2:	4770      	bx	lr

080075d4 <_fini>:
 80075d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075d6:	bf00      	nop
 80075d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075da:	bc08      	pop	{r3}
 80075dc:	469e      	mov	lr, r3
 80075de:	4770      	bx	lr
