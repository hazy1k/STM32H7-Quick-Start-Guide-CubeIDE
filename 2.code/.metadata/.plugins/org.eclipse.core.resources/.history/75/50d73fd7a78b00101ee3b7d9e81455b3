#include "dma.h"
#include "usart.h"

DMA_HandleTypeDef dma_handle;
extern UART_HandleTypeDef huart1;

void MX_DMA_Init(DMA_Stream_TypeDef *dma_stream_handle, uint32_t ch)
{
  if((uint32_t)dma_stream_handl > (uint32_t)DMA2)
  {
    __HAL_RCC_DMA2_CLK_ENABLE();
  }
  else
  {
    __HAL_RCC_DMA1_CLK_ENABLE();
  }
  dma_handle.Instance = dma_stream_handle;
  dma_handle.Init.Request = ch; // DMA通道选择
  dma_handle.Init.Direction = DMA_MEMORY_TO_PERIPH;         // 内存到外设
  dma_handle.Init.PeriphInc = DMA_PINC_DISABLE;             // 外设非增量模式
  dma_handle.Init.MemInc = DMA_MINC_ENABLE;                 // 存储器增量模式
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;// 外设数据长度:8位
  dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;   // 存储器数据长度:8位
  dma_handle.Init.Mode = DMA_NORMAL;                        // 外设流控模式
  dma_handle.Init.Priority = DMA_PRIORITY_MEDIUM;           // 中等优先级
  dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;          // 关闭FIFO模式
  dma_handle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;  // FIFO阈值配置
  dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;             // 存储器突发单次传输
  dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;          // 外设突发单次传输
  HAL_DMA_DeInit(&dma_handle);
  HAL_DMA_Init(&dma_handle);
}

/* USER CODE BEGIN 2 */

/* USER CODE END 2 */

