#include "dma.h"
#include "usart.h"

DMA_HandleTypeDef dma_handle;
extern UART_HandleTypeDef huart1;

void MX_DMA_Init(DMA_Stream_TypeDef *dma_stream_handle, uint32_t ch)
{
  // 根据 stream 判断使用哪个 DMA 时钟
  if ((uint32_t)dma_stream_handle >= (uint32_t)DMA2_Stream0)
  {
    __HAL_RCC_DMA2_CLK_ENABLE();
  }
  else
  {
    __HAL_RCC_DMA1_CLK_ENABLE();
  }

  // 先解除链接，再重新链接
  huart1.hdmatx = NULL;
  __HAL_LINKDMA(&huart1, hdmatx, dma_handle);

  dma_handle.Instance = dma_stream_handle;
  dma_handle.Init.Request = ch;                             // DMA通道选择
  dma_handle.Init.Direction = DMA_MEMORY_TO_PERIPH;         // 内存到外设
  dma_handle.Init.PeriphInc = DMA_PINC_DISABLE;             // 外设非增量模式
  dma_handle.Init.MemInc = DMA_MINC_ENABLE;                 // 存储器增量模式
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;// 外设数据长度:8位
  dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;   // 存储器数据长度:8位
  dma_handle.Init.Mode = DMA_NORMAL;                        // 正常模式（非循环）
  dma_handle.Init.Priority = DMA_PRIORITY_MEDIUM;           // 中等优先级
  dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;          // 关闭FIFO模式

  // 对于STM32H7，可能需要设置这些参数
  dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;             // 存储器突发单次传输
  dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;          // 外设突发单次传输

  // 先反初始化，再初始化
  HAL_DMA_DeInit(&dma_handle);
  if (HAL_DMA_Init(&dma_handle) != HAL_OK)
  {
    Error_Handler();
  }

  // 启用DMA传输完成中断
  __HAL_DMA_ENABLE_IT(&dma_handle, DMA_IT_TC);

  // 设置DMA中断优先级并启用
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 3);
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
}



