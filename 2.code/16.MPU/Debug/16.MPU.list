
16.MPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003344  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080035e4  080035e4  000045e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800364c  0800364c  0000464c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003654  08003654  00004654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08003658  08003658  00004658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  24000000  0800365c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000170  24000074  080036d0  00005074  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240001e4  080036d0  000051e4  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00005074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008deb  00000000  00000000  000050a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001bfd  00000000  00000000  0000de8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000788  00000000  00000000  0000fa90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000056c  00000000  00000000  00010218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00036dcd  00000000  00000000  00010784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000c99f  00000000  00000000  00047551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001531c3  00000000  00000000  00053ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a70b3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002440  00000000  00000000  001a70f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001a9538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080035cc 	.word	0x080035cc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	080035cc 	.word	0x080035cc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000394:	4b12      	ldr	r3, [pc, #72]	@ (80003e0 <MX_BEEP_GPIO_Init+0x60>)
 8000396:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800039a:	4a11      	ldr	r2, [pc, #68]	@ (80003e0 <MX_BEEP_GPIO_Init+0x60>)
 800039c:	f043 0310 	orr.w	r3, r3, #16
 80003a0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80003a4:	4b0e      	ldr	r3, [pc, #56]	@ (80003e0 <MX_BEEP_GPIO_Init+0x60>)
 80003a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80003aa:	f003 0310 	and.w	r3, r3, #16
 80003ae:	603b      	str	r3, [r7, #0]
 80003b0:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80003b2:	2200      	movs	r2, #0
 80003b4:	2110      	movs	r1, #16
 80003b6:	480b      	ldr	r0, [pc, #44]	@ (80003e4 <MX_BEEP_GPIO_Init+0x64>)
 80003b8:	f001 f80a 	bl	80013d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80003bc:	2310      	movs	r3, #16
 80003be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c0:	2301      	movs	r3, #1
 80003c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c4:	2300      	movs	r3, #0
 80003c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003c8:	2300      	movs	r3, #0
 80003ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80003cc:	1d3b      	adds	r3, r7, #4
 80003ce:	4619      	mov	r1, r3
 80003d0:	4804      	ldr	r0, [pc, #16]	@ (80003e4 <MX_BEEP_GPIO_Init+0x64>)
 80003d2:	f000 fe35 	bl	8001040 <HAL_GPIO_Init>
}
 80003d6:	bf00      	nop
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	58024400 	.word	0x58024400
 80003e4:	58021000 	.word	0x58021000

080003e8 <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b086      	sub	sp, #24
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	1d3b      	adds	r3, r7, #4
 80003f0:	2200      	movs	r2, #0
 80003f2:	601a      	str	r2, [r3, #0]
 80003f4:	605a      	str	r2, [r3, #4]
 80003f6:	609a      	str	r2, [r3, #8]
 80003f8:	60da      	str	r2, [r3, #12]
 80003fa:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fc:	4b14      	ldr	r3, [pc, #80]	@ (8000450 <MX_KEY_GPIO_Init+0x68>)
 80003fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000402:	4a13      	ldr	r2, [pc, #76]	@ (8000450 <MX_KEY_GPIO_Init+0x68>)
 8000404:	f043 0301 	orr.w	r3, r3, #1
 8000408:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <MX_KEY_GPIO_Init+0x68>)
 800040e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	603b      	str	r3, [r7, #0]
 8000418:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800041a:	2301      	movs	r3, #1
 800041c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800041e:	2300      	movs	r3, #0
 8000420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000422:	2302      	movs	r3, #2
 8000424:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4619      	mov	r1, r3
 800042a:	480a      	ldr	r0, [pc, #40]	@ (8000454 <MX_KEY_GPIO_Init+0x6c>)
 800042c:	f000 fe08 	bl	8001040 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8000430:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000434:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000436:	2300      	movs	r3, #0
 8000438:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800043a:	2301      	movs	r3, #1
 800043c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800043e:	1d3b      	adds	r3, r7, #4
 8000440:	4619      	mov	r1, r3
 8000442:	4804      	ldr	r0, [pc, #16]	@ (8000454 <MX_KEY_GPIO_Init+0x6c>)
 8000444:	f000 fdfc 	bl	8001040 <HAL_GPIO_Init>
}
 8000448:	bf00      	nop
 800044a:	3718      	adds	r7, #24
 800044c:	46bd      	mov	sp, r7
 800044e:	bd80      	pop	{r7, pc}
 8000450:	58024400 	.word	0x58024400
 8000454:	58020000 	.word	0x58020000

08000458 <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 8000462:	2300      	movs	r3, #0
 8000464:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 8000466:	79fb      	ldrb	r3, [r7, #7]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d002      	beq.n	8000472 <key_scan+0x1a>
 800046c:	4b30      	ldr	r3, [pc, #192]	@ (8000530 <key_scan+0xd8>)
 800046e:	2201      	movs	r2, #1
 8000470:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 8000472:	2102      	movs	r1, #2
 8000474:	482f      	ldr	r0, [pc, #188]	@ (8000534 <key_scan+0xdc>)
 8000476:	f000 ff93 	bl	80013a0 <HAL_GPIO_ReadPin>
 800047a:	4603      	mov	r3, r0
 800047c:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 800047e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000482:	482c      	ldr	r0, [pc, #176]	@ (8000534 <key_scan+0xdc>)
 8000484:	f000 ff8c 	bl	80013a0 <HAL_GPIO_ReadPin>
 8000488:	4603      	mov	r3, r0
 800048a:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 800048c:	2101      	movs	r1, #1
 800048e:	4829      	ldr	r0, [pc, #164]	@ (8000534 <key_scan+0xdc>)
 8000490:	f000 ff86 	bl	80013a0 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 8000498:	4b25      	ldr	r3, [pc, #148]	@ (8000530 <key_scan+0xd8>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d033      	beq.n	8000508 <key_scan+0xb0>
 80004a0:	7bbb      	ldrb	r3, [r7, #14]
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d005      	beq.n	80004b2 <key_scan+0x5a>
 80004a6:	7b7b      	ldrb	r3, [r7, #13]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d002      	beq.n	80004b2 <key_scan+0x5a>
 80004ac:	7b3b      	ldrb	r3, [r7, #12]
 80004ae:	2b01      	cmp	r3, #1
 80004b0:	d12a      	bne.n	8000508 <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 80004b2:	200a      	movs	r0, #10
 80004b4:	f000 fc38 	bl	8000d28 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 80004b8:	2102      	movs	r1, #2
 80004ba:	481e      	ldr	r0, [pc, #120]	@ (8000534 <key_scan+0xdc>)
 80004bc:	f000 ff70 	bl	80013a0 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 80004c4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004c8:	481a      	ldr	r0, [pc, #104]	@ (8000534 <key_scan+0xdc>)
 80004ca:	f000 ff69 	bl	80013a0 <HAL_GPIO_ReadPin>
 80004ce:	4603      	mov	r3, r0
 80004d0:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 80004d2:	2101      	movs	r1, #1
 80004d4:	4817      	ldr	r0, [pc, #92]	@ (8000534 <key_scan+0xdc>)
 80004d6:	f000 ff63 	bl	80013a0 <HAL_GPIO_ReadPin>
 80004da:	4603      	mov	r3, r0
 80004dc:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 80004de:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <key_scan+0xd8>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 80004e4:	7b3b      	ldrb	r3, [r7, #12]
 80004e6:	2b01      	cmp	r3, #1
 80004e8:	d102      	bne.n	80004f0 <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 80004ea:	2303      	movs	r3, #3
 80004ec:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 80004ee:	e018      	b.n	8000522 <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 80004f0:	7b7b      	ldrb	r3, [r7, #13]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d102      	bne.n	80004fc <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 80004f6:	2302      	movs	r3, #2
 80004f8:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 80004fa:	e012      	b.n	8000522 <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 80004fc:	7bbb      	ldrb	r3, [r7, #14]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d10f      	bne.n	8000522 <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 8000502:	2301      	movs	r3, #1
 8000504:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000506:	e00c      	b.n	8000522 <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 8000508:	7bbb      	ldrb	r3, [r7, #14]
 800050a:	2b01      	cmp	r3, #1
 800050c:	d10a      	bne.n	8000524 <key_scan+0xcc>
 800050e:	7b7b      	ldrb	r3, [r7, #13]
 8000510:	2b01      	cmp	r3, #1
 8000512:	d107      	bne.n	8000524 <key_scan+0xcc>
 8000514:	7b3b      	ldrb	r3, [r7, #12]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d104      	bne.n	8000524 <key_scan+0xcc>
    {
        key_up = 1;
 800051a:	4b05      	ldr	r3, [pc, #20]	@ (8000530 <key_scan+0xd8>)
 800051c:	2201      	movs	r2, #1
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e000      	b.n	8000524 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 8000522:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 8000524:	7bfb      	ldrb	r3, [r7, #15]
}
 8000526:	4618      	mov	r0, r3
 8000528:	3710      	adds	r7, #16
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	24000000 	.word	0x24000000
 8000534:	58020000 	.word	0x58020000

08000538 <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b088      	sub	sp, #32
 800053c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 030c 	add.w	r3, r7, #12
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
 800054c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800054e:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <MX_LED_GPIO_Init+0xa8>)
 8000550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000554:	4a22      	ldr	r2, [pc, #136]	@ (80005e0 <MX_LED_GPIO_Init+0xa8>)
 8000556:	f043 0310 	orr.w	r3, r3, #16
 800055a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800055e:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_LED_GPIO_Init+0xa8>)
 8000560:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000564:	f003 0310 	and.w	r3, r3, #16
 8000568:	60bb      	str	r3, [r7, #8]
 800056a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_LED_GPIO_Init+0xa8>)
 800056e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000572:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <MX_LED_GPIO_Init+0xa8>)
 8000574:	f043 0302 	orr.w	r3, r3, #2
 8000578:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800057c:	4b18      	ldr	r3, [pc, #96]	@ (80005e0 <MX_LED_GPIO_Init+0xa8>)
 800057e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000582:	f003 0302 	and.w	r3, r3, #2
 8000586:	607b      	str	r3, [r7, #4]
 8000588:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800058a:	2201      	movs	r2, #1
 800058c:	2160      	movs	r1, #96	@ 0x60
 800058e:	4815      	ldr	r0, [pc, #84]	@ (80005e4 <MX_LED_GPIO_Init+0xac>)
 8000590:	f000 ff1e 	bl	80013d0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2110      	movs	r1, #16
 8000598:	4813      	ldr	r0, [pc, #76]	@ (80005e8 <MX_LED_GPIO_Init+0xb0>)
 800059a:	f000 ff19 	bl	80013d0 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 800059e:	2360      	movs	r3, #96	@ 0x60
 80005a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a2:	2301      	movs	r3, #1
 80005a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005aa:	2300      	movs	r3, #0
 80005ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	4619      	mov	r1, r3
 80005b4:	480b      	ldr	r0, [pc, #44]	@ (80005e4 <MX_LED_GPIO_Init+0xac>)
 80005b6:	f000 fd43 	bl	8001040 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80005ba:	2310      	movs	r3, #16
 80005bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005be:	2301      	movs	r3, #1
 80005c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c2:	2300      	movs	r3, #0
 80005c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005c6:	2300      	movs	r3, #0
 80005c8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	@ (80005e8 <MX_LED_GPIO_Init+0xb0>)
 80005d2:	f000 fd35 	bl	8001040 <HAL_GPIO_Init>
}
 80005d6:	bf00      	nop
 80005d8:	3720      	adds	r7, #32
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	58024400 	.word	0x58024400
 80005e4:	58021000 	.word	0x58021000
 80005e8:	58020400 	.word	0x58020400

080005ec <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005f0:	f3bf 8f4f 	dsb	sy
}
 80005f4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80005f6:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <__NVIC_SystemReset+0x24>)
 80005f8:	68db      	ldr	r3, [r3, #12]
 80005fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80005fe:	4904      	ldr	r1, [pc, #16]	@ (8000610 <__NVIC_SystemReset+0x24>)
 8000600:	4b04      	ldr	r3, [pc, #16]	@ (8000614 <__NVIC_SystemReset+0x28>)
 8000602:	4313      	orrs	r3, r2
 8000604:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
}
 800060a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800060c:	bf00      	nop
 800060e:	e7fd      	b.n	800060c <__NVIC_SystemReset+0x20>
 8000610:	e000ed00 	.word	0xe000ed00
 8000614:	05fa0004 	.word	0x05fa0004

08000618 <mpu_config>:
 * @param       cen:是否允许cache;0,不允许;1,允许
 * @param       ben:是否允许缓冲;0,不允许;1,允许
 * @retval      0, 成功; 1, 错误;
 */
uint8_t mpu_config(uint32_t baseaddr, uint32_t size, uint32_t rnum, uint8_t de, uint8_t ap, uint8_t sen, uint8_t cen, uint8_t ben)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0
 800061e:	60f8      	str	r0, [r7, #12]
 8000620:	60b9      	str	r1, [r7, #8]
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	70fb      	strb	r3, [r7, #3]
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000626:	f107 0310 	add.w	r3, r7, #16
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
 800062e:	605a      	str	r2, [r3, #4]
 8000630:	609a      	str	r2, [r3, #8]
 8000632:	60da      	str	r2, [r3, #12]
	HAL_MPU_Disable(); // 关闭MPU
 8000634:	f000 fc8c 	bl	8000f50 <HAL_MPU_Disable>
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000638:	2301      	movs	r3, #1
 800063a:	743b      	strb	r3, [r7, #16]
	MPU_InitStruct.Number = rnum; // MPU保护区编号,范围:0~7,最大支持8个保护区域
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	b2db      	uxtb	r3, r3
 8000640:	747b      	strb	r3, [r7, #17]
	MPU_InitStruct.BaseAddress = baseaddr; // MPU保护区域的基址(首地址)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	617b      	str	r3, [r7, #20]
	MPU_InitStruct.Size = size; // MPU保护区域的大小(必须是32的倍数,单位为字节)
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	763b      	strb	r3, [r7, #24]
	MPU_InitStruct.SubRegionDisable = 0x00; // 子区域禁用,0x00,表示不禁用子区域
 800064c:	2300      	movs	r3, #0
 800064e:	767b      	strb	r3, [r7, #25]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0; // 内存类型,详见编程手册
 8000650:	2300      	movs	r3, #0
 8000652:	76bb      	strb	r3, [r7, #26]
	MPU_InitStruct.AccessPermission = ap; // 访问权限
 8000654:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000658:	76fb      	strb	r3, [r7, #27]
	MPU_InitStruct.DisableExec = de; // 禁止指令访问;0,允许指令访问;1,禁止指令访问
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	773b      	strb	r3, [r7, #28]
	MPU_InitStruct.IsShareable = sen; // 是否允许共用;0,不允许;1,允许
 800065e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000662:	777b      	strb	r3, [r7, #29]
	MPU_InitStruct.IsCacheable = cen; // 是否允许cache;0,不允许;1,允许
 8000664:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000668:	77bb      	strb	r3, [r7, #30]
	MPU_InitStruct.IsBufferable = ben; // 是否允许缓冲;0,不允许;1,允许
 800066a:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 800066e:	77fb      	strb	r3, [r7, #31]
	HAL_MPU_ConfigRegion(&MPU_InitStruct); // 配置MPU保护区域
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4618      	mov	r0, r3
 8000676:	f000 fca3 	bl	8000fc0 <HAL_MPU_ConfigRegion>
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT); // 使能MPU
 800067a:	2004      	movs	r0, #4
 800067c:	f000 fc80 	bl	8000f80 <HAL_MPU_Enable>
	return 0;
 8000680:	2300      	movs	r3, #0
}
 8000682:	4618      	mov	r0, r3
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
	...

0800068c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, RESET); //  MemManage错误处理中断
 8000690:	2200      	movs	r2, #0
 8000692:	2140      	movs	r1, #64	@ 0x40
 8000694:	4804      	ldr	r0, [pc, #16]	@ (80006a8 <MemManage_Handler+0x1c>)
 8000696:	f000 fe9b 	bl	80013d0 <HAL_GPIO_WritePin>
	HAL_Delay(1000);
 800069a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800069e:	f000 fb43 	bl	8000d28 <HAL_Delay>
	NVIC_SystemReset(); // 复位
 80006a2:	f7ff ffa3 	bl	80005ec <__NVIC_SystemReset>
 80006a6:	bf00      	nop
 80006a8:	58021000 	.word	0x58021000

080006ac <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 80006b0:	f7ff ff42 	bl	8000538 <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 80006b4:	f7ff fe64 	bl	8000380 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 80006b8:	f7ff fe96 	bl	80003e8 <MX_KEY_GPIO_Init>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}

080006c0 <main>:
// uint8_t mpudata[128] __attribute__((at(0x20002000))); // 定义一个数组,放在0x20002000地址
#define MPU_DATA_ADDR 0x20002000
uint8_t *mpudata = (uint8_t *)MPU_DATA_ADDR; // 直接将指针指向该地址

int main(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b086      	sub	sp, #24
 80006c4:	af04      	add	r7, sp, #16
  uint8_t key_value = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	71bb      	strb	r3, [r7, #6]
  uint8_t i = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	71fb      	strb	r3, [r7, #7]

  HAL_Init();
 80006ce:	f000 fa99 	bl	8000c04 <HAL_Init>
  SystemClock_Config();
 80006d2:	f000 f84b 	bl	800076c <SystemClock_Config>
  bsp_init();
 80006d6:	f7ff ffe9 	bl	80006ac <bsp_init>
  while (1)
  {
	  key_value = key_scan(0);
 80006da:	2000      	movs	r0, #0
 80006dc:	f7ff febc 	bl	8000458 <key_scan>
 80006e0:	4603      	mov	r3, r0
 80006e2:	71bb      	strb	r3, [r7, #6]
	  if(key_value == WKUP_PRES)
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	2b03      	cmp	r3, #3
 80006e8:	d10f      	bne.n	800070a <main+0x4a>
	  {
		  mpu_config(0X20002000, MPU_REGION_SIZE_128B, MPU_REGION_NUMBER0, MPU_INSTRUCTION_ACCESS_ENABLE, MPU_REGION_PRIV_RO_URO,
 80006ea:	2301      	movs	r3, #1
 80006ec:	9303      	str	r3, [sp, #12]
 80006ee:	2300      	movs	r3, #0
 80006f0:	9302      	str	r3, [sp, #8]
 80006f2:	2300      	movs	r3, #0
 80006f4:	9301      	str	r3, [sp, #4]
 80006f6:	2306      	movs	r3, #6
 80006f8:	9300      	str	r3, [sp, #0]
 80006fa:	2300      	movs	r3, #0
 80006fc:	2200      	movs	r2, #0
 80006fe:	2106      	movs	r1, #6
 8000700:	f04f 2020 	mov.w	r0, #536879104	@ 0x20002000
 8000704:	f7ff ff88 	bl	8000618 <mpu_config>
 8000708:	e017      	b.n	800073a <main+0x7a>
              MPU_ACCESS_NOT_SHAREABLE, MPU_ACCESS_NOT_CACHEABLE, MPU_ACCESS_BUFFERABLE);  /* 只读,禁止共用,禁止catch,允许缓冲 */
	  }
	  else if(key_value == KEY0_PRES)
 800070a:	79bb      	ldrb	r3, [r7, #6]
 800070c:	2b01      	cmp	r3, #1
 800070e:	d107      	bne.n	8000720 <main+0x60>
	  {
		  sprintf((char *)mpudata, "MPU test array %d", i);
 8000710:	4b12      	ldr	r3, [pc, #72]	@ (800075c <main+0x9c>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	79fa      	ldrb	r2, [r7, #7]
 8000716:	4912      	ldr	r1, [pc, #72]	@ (8000760 <main+0xa0>)
 8000718:	4618      	mov	r0, r3
 800071a:	f001 ff25 	bl	8002568 <siprintf>
 800071e:	e00c      	b.n	800073a <main+0x7a>
	  }
	  else if(key_value == KEY1_PRES)
 8000720:	79bb      	ldrb	r3, [r7, #6]
 8000722:	2b02      	cmp	r3, #2
 8000724:	d106      	bne.n	8000734 <main+0x74>
	  {
		  printf("mpudata = %s\r\n", mpudata);
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <main+0x9c>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	480d      	ldr	r0, [pc, #52]	@ (8000764 <main+0xa4>)
 800072e:	f001 ff09 	bl	8002544 <iprintf>
 8000732:	e002      	b.n	800073a <main+0x7a>
	  }
	  else
	  {
		HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 faf7 	bl	8000d28 <HAL_Delay>
	  }
	  i++;
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	3301      	adds	r3, #1
 800073e:	71fb      	strb	r3, [r7, #7]
	  HAL_Delay(10);
 8000740:	200a      	movs	r0, #10
 8000742:	f000 faf1 	bl	8000d28 <HAL_Delay>
	  if(i > 20)
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b14      	cmp	r3, #20
 800074a:	d9c6      	bls.n	80006da <main+0x1a>
	  {
		  i = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	71fb      	strb	r3, [r7, #7]
		  HAL_GPIO_TogglePin(LED_BLUE_Port, LED_BLUE_Pin);
 8000750:	2110      	movs	r1, #16
 8000752:	4805      	ldr	r0, [pc, #20]	@ (8000768 <main+0xa8>)
 8000754:	f000 fe55 	bl	8001402 <HAL_GPIO_TogglePin>
	  key_value = key_scan(0);
 8000758:	e7bf      	b.n	80006da <main+0x1a>
 800075a:	bf00      	nop
 800075c:	24000004 	.word	0x24000004
 8000760:	080035e4 	.word	0x080035e4
 8000764:	080035f8 	.word	0x080035f8
 8000768:	58020400 	.word	0x58020400

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	@ 0x70
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000776:	224c      	movs	r2, #76	@ 0x4c
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f001 ff59 	bl	8002632 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	1d3b      	adds	r3, r7, #4
 8000782:	2220      	movs	r2, #32
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f001 ff53 	bl	8002632 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800078c:	2002      	movs	r0, #2
 800078e:	f000 fe53 	bl	8001438 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b30      	ldr	r3, [pc, #192]	@ (8000858 <SystemClock_Config+0xec>)
 8000798:	699b      	ldr	r3, [r3, #24]
 800079a:	4a2f      	ldr	r2, [pc, #188]	@ (8000858 <SystemClock_Config+0xec>)
 800079c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80007a0:	6193      	str	r3, [r2, #24]
 80007a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000858 <SystemClock_Config+0xec>)
 80007a4:	699b      	ldr	r3, [r3, #24]
 80007a6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	4b2b      	ldr	r3, [pc, #172]	@ (800085c <SystemClock_Config+0xf0>)
 80007ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007b0:	4a2a      	ldr	r2, [pc, #168]	@ (800085c <SystemClock_Config+0xf0>)
 80007b2:	f043 0301 	orr.w	r3, r3, #1
 80007b6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80007b8:	4b28      	ldr	r3, [pc, #160]	@ (800085c <SystemClock_Config+0xf0>)
 80007ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	603b      	str	r3, [r7, #0]
 80007c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007c4:	bf00      	nop
 80007c6:	4b24      	ldr	r3, [pc, #144]	@ (8000858 <SystemClock_Config+0xec>)
 80007c8:	699b      	ldr	r3, [r3, #24]
 80007ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80007d2:	d1f8      	bne.n	80007c6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80007dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007de:	2302      	movs	r3, #2
 80007e0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007e2:	2302      	movs	r3, #2
 80007e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80007e6:	2302      	movs	r3, #2
 80007e8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80007ea:	23f0      	movs	r3, #240	@ 0xf0
 80007ec:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80007ee:	2302      	movs	r3, #2
 80007f0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80007f2:	2302      	movs	r3, #2
 80007f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80007fa:	2308      	movs	r3, #8
 80007fc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80007fe:	2300      	movs	r3, #0
 8000800:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fe4e 	bl	80014ac <HAL_RCC_OscConfig>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000816:	f000 f823 	bl	8000860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800081a:	233f      	movs	r3, #63	@ 0x3f
 800081c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800081e:	2303      	movs	r3, #3
 8000820:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000826:	2308      	movs	r3, #8
 8000828:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800082a:	2340      	movs	r3, #64	@ 0x40
 800082c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800082e:	2340      	movs	r3, #64	@ 0x40
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000838:	2340      	movs	r3, #64	@ 0x40
 800083a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2104      	movs	r1, #4
 8000840:	4618      	mov	r0, r3
 8000842:	f001 fa8d 	bl	8001d60 <HAL_RCC_ClockConfig>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 800084c:	f000 f808 	bl	8000860 <Error_Handler>
  }
}
 8000850:	bf00      	nop
 8000852:	3770      	adds	r7, #112	@ 0x70
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	58024800 	.word	0x58024800
 800085c:	58000400 	.word	0x58000400

08000860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000868:	bf00      	nop
 800086a:	e7fd      	b.n	8000868 <Error_Handler+0x8>

0800086c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000872:	4b0a      	ldr	r3, [pc, #40]	@ (800089c <HAL_MspInit+0x30>)
 8000874:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000878:	4a08      	ldr	r2, [pc, #32]	@ (800089c <HAL_MspInit+0x30>)
 800087a:	f043 0302 	orr.w	r3, r3, #2
 800087e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000882:	4b06      	ldr	r3, [pc, #24]	@ (800089c <HAL_MspInit+0x30>)
 8000884:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000888:	f003 0302 	and.w	r3, r3, #2
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	58024400 	.word	0x58024400

080008a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <NMI_Handler+0x4>

080008a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <HardFault_Handler+0x4>

080008b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <BusFault_Handler+0x4>

080008b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008bc:	bf00      	nop
 80008be:	e7fd      	b.n	80008bc <UsageFault_Handler+0x4>

080008c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008c4:	bf00      	nop
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008ea:	b580      	push	{r7, lr}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008ee:	f000 f9fb 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	60f8      	str	r0, [r7, #12]
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000902:	2300      	movs	r3, #0
 8000904:	617b      	str	r3, [r7, #20]
 8000906:	e00a      	b.n	800091e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000908:	f3af 8000 	nop.w
 800090c:	4601      	mov	r1, r0
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	60ba      	str	r2, [r7, #8]
 8000914:	b2ca      	uxtb	r2, r1
 8000916:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	3301      	adds	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
 800091e:	697a      	ldr	r2, [r7, #20]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	429a      	cmp	r2, r3
 8000924:	dbf0      	blt.n	8000908 <_read+0x12>
  }

  return len;
 8000926:	687b      	ldr	r3, [r7, #4]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3718      	adds	r7, #24
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b086      	sub	sp, #24
 8000934:	af00      	add	r7, sp, #0
 8000936:	60f8      	str	r0, [r7, #12]
 8000938:	60b9      	str	r1, [r7, #8]
 800093a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
 8000940:	e009      	b.n	8000956 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	1c5a      	adds	r2, r3, #1
 8000946:	60ba      	str	r2, [r7, #8]
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	4618      	mov	r0, r3
 800094c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	3301      	adds	r3, #1
 8000954:	617b      	str	r3, [r7, #20]
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	429a      	cmp	r2, r3
 800095c:	dbf1      	blt.n	8000942 <_write+0x12>
  }
  return len;
 800095e:	687b      	ldr	r3, [r7, #4]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3718      	adds	r7, #24
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}

08000968 <_close>:

int _close(int file)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000974:	4618      	mov	r0, r3
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr

08000980 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000990:	605a      	str	r2, [r3, #4]
  return 0;
 8000992:	2300      	movs	r3, #0
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <_isatty>:

int _isatty(int file)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009a8:	2301      	movs	r3, #1
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr

080009b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009b6:	b480      	push	{r7}
 80009b8:	b085      	sub	sp, #20
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	60f8      	str	r0, [r7, #12]
 80009be:	60b9      	str	r1, [r7, #8]
 80009c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009c2:	2300      	movs	r3, #0
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009d8:	4a14      	ldr	r2, [pc, #80]	@ (8000a2c <_sbrk+0x5c>)
 80009da:	4b15      	ldr	r3, [pc, #84]	@ (8000a30 <_sbrk+0x60>)
 80009dc:	1ad3      	subs	r3, r2, r3
 80009de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009e4:	4b13      	ldr	r3, [pc, #76]	@ (8000a34 <_sbrk+0x64>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d102      	bne.n	80009f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <_sbrk+0x64>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <_sbrk+0x68>)
 80009f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <_sbrk+0x64>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d207      	bcs.n	8000a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a00:	f001 fe66 	bl	80026d0 <__errno>
 8000a04:	4603      	mov	r3, r0
 8000a06:	220c      	movs	r2, #12
 8000a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	e009      	b.n	8000a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a10:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <_sbrk+0x64>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a16:	4b07      	ldr	r3, [pc, #28]	@ (8000a34 <_sbrk+0x64>)
 8000a18:	681a      	ldr	r2, [r3, #0]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	4413      	add	r3, r2
 8000a1e:	4a05      	ldr	r2, [pc, #20]	@ (8000a34 <_sbrk+0x64>)
 8000a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a22:	68fb      	ldr	r3, [r7, #12]
}
 8000a24:	4618      	mov	r0, r3
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	24080000 	.word	0x24080000
 8000a30:	00000400 	.word	0x00000400
 8000a34:	24000090 	.word	0x24000090
 8000a38:	240001e8 	.word	0x240001e8

08000a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a40:	4b43      	ldr	r3, [pc, #268]	@ (8000b50 <SystemInit+0x114>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a42      	ldr	r2, [pc, #264]	@ (8000b50 <SystemInit+0x114>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a50:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <SystemInit+0x118>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	f003 030f 	and.w	r3, r3, #15
 8000a58:	2b06      	cmp	r3, #6
 8000a5a:	d807      	bhi.n	8000a6c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b54 <SystemInit+0x118>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f023 030f 	bic.w	r3, r3, #15
 8000a64:	4a3b      	ldr	r2, [pc, #236]	@ (8000b54 <SystemInit+0x118>)
 8000a66:	f043 0307 	orr.w	r3, r3, #7
 8000a6a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a6c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b58 <SystemInit+0x11c>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a39      	ldr	r2, [pc, #228]	@ (8000b58 <SystemInit+0x11c>)
 8000a72:	f043 0301 	orr.w	r3, r3, #1
 8000a76:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <SystemInit+0x11c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000a7e:	4b36      	ldr	r3, [pc, #216]	@ (8000b58 <SystemInit+0x11c>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	4935      	ldr	r1, [pc, #212]	@ (8000b58 <SystemInit+0x11c>)
 8000a84:	4b35      	ldr	r3, [pc, #212]	@ (8000b5c <SystemInit+0x120>)
 8000a86:	4013      	ands	r3, r2
 8000a88:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a8a:	4b32      	ldr	r3, [pc, #200]	@ (8000b54 <SystemInit+0x118>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f003 0308 	and.w	r3, r3, #8
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d007      	beq.n	8000aa6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a96:	4b2f      	ldr	r3, [pc, #188]	@ (8000b54 <SystemInit+0x118>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f023 030f 	bic.w	r3, r3, #15
 8000a9e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b54 <SystemInit+0x118>)
 8000aa0:	f043 0307 	orr.w	r3, r3, #7
 8000aa4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aa6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b58 <SystemInit+0x11c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000aac:	4b2a      	ldr	r3, [pc, #168]	@ (8000b58 <SystemInit+0x11c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ab2:	4b29      	ldr	r3, [pc, #164]	@ (8000b58 <SystemInit+0x11c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	@ (8000b58 <SystemInit+0x11c>)
 8000aba:	4a29      	ldr	r2, [pc, #164]	@ (8000b60 <SystemInit+0x124>)
 8000abc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000abe:	4b26      	ldr	r3, [pc, #152]	@ (8000b58 <SystemInit+0x11c>)
 8000ac0:	4a28      	ldr	r2, [pc, #160]	@ (8000b64 <SystemInit+0x128>)
 8000ac2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	@ (8000b58 <SystemInit+0x11c>)
 8000ac6:	4a28      	ldr	r2, [pc, #160]	@ (8000b68 <SystemInit+0x12c>)
 8000ac8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000aca:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <SystemInit+0x11c>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	@ (8000b58 <SystemInit+0x11c>)
 8000ad2:	4a25      	ldr	r2, [pc, #148]	@ (8000b68 <SystemInit+0x12c>)
 8000ad4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ad6:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <SystemInit+0x11c>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000adc:	4b1e      	ldr	r3, [pc, #120]	@ (8000b58 <SystemInit+0x11c>)
 8000ade:	4a22      	ldr	r2, [pc, #136]	@ (8000b68 <SystemInit+0x12c>)
 8000ae0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <SystemInit+0x11c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <SystemInit+0x11c>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a1a      	ldr	r2, [pc, #104]	@ (8000b58 <SystemInit+0x11c>)
 8000aee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000af2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <SystemInit+0x11c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <SystemInit+0x130>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <SystemInit+0x134>)
 8000b00:	4013      	ands	r3, r2
 8000b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b06:	d202      	bcs.n	8000b0e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b08:	4b1a      	ldr	r3, [pc, #104]	@ (8000b74 <SystemInit+0x138>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b0e:	4b12      	ldr	r3, [pc, #72]	@ (8000b58 <SystemInit+0x11c>)
 8000b10:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d113      	bne.n	8000b44 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b58 <SystemInit+0x11c>)
 8000b1e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b22:	4a0d      	ldr	r2, [pc, #52]	@ (8000b58 <SystemInit+0x11c>)
 8000b24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b2c:	4b12      	ldr	r3, [pc, #72]	@ (8000b78 <SystemInit+0x13c>)
 8000b2e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b32:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b34:	4b08      	ldr	r3, [pc, #32]	@ (8000b58 <SystemInit+0x11c>)
 8000b36:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b3a:	4a07      	ldr	r2, [pc, #28]	@ (8000b58 <SystemInit+0x11c>)
 8000b3c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b40:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00
 8000b54:	52002000 	.word	0x52002000
 8000b58:	58024400 	.word	0x58024400
 8000b5c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b60:	02020200 	.word	0x02020200
 8000b64:	01ff0000 	.word	0x01ff0000
 8000b68:	01010280 	.word	0x01010280
 8000b6c:	5c001000 	.word	0x5c001000
 8000b70:	ffff0000 	.word	0xffff0000
 8000b74:	51008108 	.word	0x51008108
 8000b78:	52004000 	.word	0x52004000

08000b7c <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000b80:	4b09      	ldr	r3, [pc, #36]	@ (8000ba8 <ExitRun0Mode+0x2c>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	4a08      	ldr	r2, [pc, #32]	@ (8000ba8 <ExitRun0Mode+0x2c>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000b8c:	bf00      	nop
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <ExitRun0Mode+0x2c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d0f9      	beq.n	8000b8e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000b9a:	bf00      	nop
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	58024800 	.word	0x58024800

08000bac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000bac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000be8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000bb0:	f7ff ffe4 	bl	8000b7c <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000bb4:	f7ff ff42 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	@ (8000bec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	@ (8000bf0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000bf4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	@ (8000bf8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000bfc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f001 fd7d 	bl	80026dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000be2:	f7ff fd6d 	bl	80006c0 <main>
  bx  lr
 8000be6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000be8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000bec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000bf0:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8000bf4:	0800365c 	.word	0x0800365c
  ldr r2, =_sbss
 8000bf8:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8000bfc:	240001e4 	.word	0x240001e4

08000c00 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC3_IRQHandler>
	...

08000c04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0a:	2003      	movs	r0, #3
 8000c0c:	f000 f96e 	bl	8000eec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c10:	f001 fa5c 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8000c14:	4602      	mov	r2, r0
 8000c16:	4b15      	ldr	r3, [pc, #84]	@ (8000c6c <HAL_Init+0x68>)
 8000c18:	699b      	ldr	r3, [r3, #24]
 8000c1a:	0a1b      	lsrs	r3, r3, #8
 8000c1c:	f003 030f 	and.w	r3, r3, #15
 8000c20:	4913      	ldr	r1, [pc, #76]	@ (8000c70 <HAL_Init+0x6c>)
 8000c22:	5ccb      	ldrb	r3, [r1, r3]
 8000c24:	f003 031f 	and.w	r3, r3, #31
 8000c28:	fa22 f303 	lsr.w	r3, r2, r3
 8000c2c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000c2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c6c <HAL_Init+0x68>)
 8000c30:	699b      	ldr	r3, [r3, #24]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	4a0e      	ldr	r2, [pc, #56]	@ (8000c70 <HAL_Init+0x6c>)
 8000c38:	5cd3      	ldrb	r3, [r2, r3]
 8000c3a:	f003 031f 	and.w	r3, r3, #31
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	fa22 f303 	lsr.w	r3, r2, r3
 8000c44:	4a0b      	ldr	r2, [pc, #44]	@ (8000c74 <HAL_Init+0x70>)
 8000c46:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <HAL_Init+0x74>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c4e:	200f      	movs	r0, #15
 8000c50:	f000 f814 	bl	8000c7c <HAL_InitTick>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e002      	b.n	8000c64 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5e:	f7ff fe05 	bl	800086c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3708      	adds	r7, #8
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	58024400 	.word	0x58024400
 8000c70:	08003608 	.word	0x08003608
 8000c74:	2400000c 	.word	0x2400000c
 8000c78:	24000008 	.word	0x24000008

08000c7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000c84:	4b15      	ldr	r3, [pc, #84]	@ (8000cdc <HAL_InitTick+0x60>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d101      	bne.n	8000c90 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e021      	b.n	8000cd4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000c90:	4b13      	ldr	r3, [pc, #76]	@ (8000ce0 <HAL_InitTick+0x64>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b11      	ldr	r3, [pc, #68]	@ (8000cdc <HAL_InitTick+0x60>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f945 	bl	8000f36 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f91d 	bl	8000f02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	@ (8000ce4 <HAL_InitTick+0x68>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	24000014 	.word	0x24000014
 8000ce0:	24000008 	.word	0x24000008
 8000ce4:	24000010 	.word	0x24000010

08000ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cec:	4b06      	ldr	r3, [pc, #24]	@ (8000d08 <HAL_IncTick+0x20>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a04      	ldr	r2, [pc, #16]	@ (8000d0c <HAL_IncTick+0x24>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop
 8000d08:	24000014 	.word	0x24000014
 8000d0c:	24000094 	.word	0x24000094

08000d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  return uwTick;
 8000d14:	4b03      	ldr	r3, [pc, #12]	@ (8000d24 <HAL_GetTick+0x14>)
 8000d16:	681b      	ldr	r3, [r3, #0]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	24000094 	.word	0x24000094

08000d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b084      	sub	sp, #16
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d30:	f7ff ffee 	bl	8000d10 <HAL_GetTick>
 8000d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d3a:	68fb      	ldr	r3, [r7, #12]
 8000d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d40:	d005      	beq.n	8000d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d42:	4b0a      	ldr	r3, [pc, #40]	@ (8000d6c <HAL_Delay+0x44>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d4e:	bf00      	nop
 8000d50:	f7ff ffde 	bl	8000d10 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	68bb      	ldr	r3, [r7, #8]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d8f7      	bhi.n	8000d50 <HAL_Delay+0x28>
  {
  }
}
 8000d60:	bf00      	nop
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	24000014 	.word	0x24000014

08000d70 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <HAL_GetREVID+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	0c1b      	lsrs	r3, r3, #16
}
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	5c001000 	.word	0x5c001000

08000d88 <__NVIC_SetPriorityGrouping>:
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	f003 0307 	and.w	r3, r3, #7
 8000d96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d98:	4b0b      	ldr	r3, [pc, #44]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9e:	68ba      	ldr	r2, [r7, #8]
 8000da0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000da4:	4013      	ands	r3, r2
 8000da6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000db0:	4b06      	ldr	r3, [pc, #24]	@ (8000dcc <__NVIC_SetPriorityGrouping+0x44>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	@ (8000dc8 <__NVIC_SetPriorityGrouping+0x40>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00
 8000dcc:	05fa0000 	.word	0x05fa0000

08000dd0 <__NVIC_GetPriorityGrouping>:
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd4:	4b04      	ldr	r3, [pc, #16]	@ (8000de8 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd6:	68db      	ldr	r3, [r3, #12]
 8000dd8:	0a1b      	lsrs	r3, r3, #8
 8000dda:	f003 0307 	and.w	r3, r3, #7
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_SetPriority>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	@ (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	@ (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	88fb      	ldrh	r3, [r7, #6]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	@ 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	@ 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000eb8:	d301      	bcc.n	8000ebe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e00f      	b.n	8000ede <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ebe:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3b01      	subs	r3, #1
 8000ec4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f7ff ff8e 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ed0:	4b05      	ldr	r3, [pc, #20]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed6:	4b04      	ldr	r3, [pc, #16]	@ (8000ee8 <SysTick_Config+0x40>)
 8000ed8:	2207      	movs	r2, #7
 8000eda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	e000e010 	.word	0xe000e010

08000eec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f7ff ff47 	bl	8000d88 <__NVIC_SetPriorityGrouping>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b086      	sub	sp, #24
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	60b9      	str	r1, [r7, #8]
 8000f0c:	607a      	str	r2, [r7, #4]
 8000f0e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff5e 	bl	8000dd0 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ffb2 	bl	8000ea8 <SysTick_Config>
 8000f44:	4603      	mov	r3, r0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f54:	f3bf 8f5f 	dmb	sy
}
 8000f58:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f5a:	4b07      	ldr	r3, [pc, #28]	@ (8000f78 <HAL_MPU_Disable+0x28>)
 8000f5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5e:	4a06      	ldr	r2, [pc, #24]	@ (8000f78 <HAL_MPU_Disable+0x28>)
 8000f60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f64:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f66:	4b05      	ldr	r3, [pc, #20]	@ (8000f7c <HAL_MPU_Disable+0x2c>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	605a      	str	r2, [r3, #4]
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00
 8000f7c:	e000ed90 	.word	0xe000ed90

08000f80 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f88:	4a0b      	ldr	r2, [pc, #44]	@ (8000fb8 <HAL_MPU_Enable+0x38>)
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f043 0301 	orr.w	r3, r3, #1
 8000f90:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f92:	4b0a      	ldr	r3, [pc, #40]	@ (8000fbc <HAL_MPU_Enable+0x3c>)
 8000f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f96:	4a09      	ldr	r2, [pc, #36]	@ (8000fbc <HAL_MPU_Enable+0x3c>)
 8000f98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f9c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f9e:	f3bf 8f4f 	dsb	sy
}
 8000fa2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa4:	f3bf 8f6f 	isb	sy
}
 8000fa8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	e000ed90 	.word	0xe000ed90
 8000fbc:	e000ed00 	.word	0xe000ed00

08000fc0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	785a      	ldrb	r2, [r3, #1]
 8000fcc:	4b1b      	ldr	r3, [pc, #108]	@ (800103c <HAL_MPU_ConfigRegion+0x7c>)
 8000fce:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8000fd0:	4b1a      	ldr	r3, [pc, #104]	@ (800103c <HAL_MPU_ConfigRegion+0x7c>)
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	4a19      	ldr	r2, [pc, #100]	@ (800103c <HAL_MPU_ConfigRegion+0x7c>)
 8000fd6:	f023 0301 	bic.w	r3, r3, #1
 8000fda:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8000fdc:	4a17      	ldr	r2, [pc, #92]	@ (800103c <HAL_MPU_ConfigRegion+0x7c>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	7b1b      	ldrb	r3, [r3, #12]
 8000fe8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	7adb      	ldrb	r3, [r3, #11]
 8000fee:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000ff0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	7a9b      	ldrb	r3, [r3, #10]
 8000ff6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000ff8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	7b5b      	ldrb	r3, [r3, #13]
 8000ffe:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001000:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	7b9b      	ldrb	r3, [r3, #14]
 8001006:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001008:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	7bdb      	ldrb	r3, [r3, #15]
 800100e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001010:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	7a5b      	ldrb	r3, [r3, #9]
 8001016:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001018:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	7a1b      	ldrb	r3, [r3, #8]
 800101e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001020:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	7812      	ldrb	r2, [r2, #0]
 8001026:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001028:	4a04      	ldr	r2, [pc, #16]	@ (800103c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800102a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800102c:	6113      	str	r3, [r2, #16]
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000ed90 	.word	0xe000ed90

08001040 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001040:	b480      	push	{r7}
 8001042:	b089      	sub	sp, #36	@ 0x24
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 8001048:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800104e:	4b89      	ldr	r3, [pc, #548]	@ (8001274 <HAL_GPIO_Init+0x234>)
 8001050:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001052:	e194      	b.n	800137e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	681a      	ldr	r2, [r3, #0]
 8001058:	2101      	movs	r1, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa01 f303 	lsl.w	r3, r1, r3
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8186 	beq.w	8001378 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b01      	cmp	r3, #1
 8001076:	d005      	beq.n	8001084 <HAL_GPIO_Init+0x44>
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0303 	and.w	r3, r3, #3
 8001080:	2b02      	cmp	r3, #2
 8001082:	d130      	bne.n	80010e6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	2203      	movs	r2, #3
 8001090:	fa02 f303 	lsl.w	r3, r2, r3
 8001094:	43db      	mvns	r3, r3
 8001096:	69ba      	ldr	r2, [r7, #24]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68da      	ldr	r2, [r3, #12]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	fa02 f303 	lsl.w	r3, r2, r3
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010ba:	2201      	movs	r2, #1
 80010bc:	69fb      	ldr	r3, [r7, #28]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43db      	mvns	r3, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4013      	ands	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	091b      	lsrs	r3, r3, #4
 80010d0:	f003 0201 	and.w	r2, r3, #1
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	4313      	orrs	r3, r2
 80010de:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	2b03      	cmp	r3, #3
 80010f0:	d017      	beq.n	8001122 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	2203      	movs	r2, #3
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	4313      	orrs	r3, r2
 800111a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f003 0303 	and.w	r3, r3, #3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d123      	bne.n	8001176 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	08da      	lsrs	r2, r3, #3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	3208      	adds	r2, #8
 8001136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800113c:	69fb      	ldr	r3, [r7, #28]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	220f      	movs	r2, #15
 8001146:	fa02 f303 	lsl.w	r3, r2, r3
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	691a      	ldr	r2, [r3, #16]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	f003 0307 	and.w	r3, r3, #7
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	69ba      	ldr	r2, [r7, #24]
 8001164:	4313      	orrs	r3, r2
 8001166:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	69b9      	ldr	r1, [r7, #24]
 8001172:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800117c:	69fb      	ldr	r3, [r7, #28]
 800117e:	005b      	lsls	r3, r3, #1
 8001180:	2203      	movs	r2, #3
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0203 	and.w	r2, r3, #3
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	005b      	lsls	r3, r3, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69ba      	ldr	r2, [r7, #24]
 80011a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 80e0 	beq.w	8001378 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001278 <HAL_GPIO_Init+0x238>)
 80011ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011be:	4a2e      	ldr	r2, [pc, #184]	@ (8001278 <HAL_GPIO_Init+0x238>)
 80011c0:	f043 0302 	orr.w	r3, r3, #2
 80011c4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001278 <HAL_GPIO_Init+0x238>)
 80011ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d6:	4a29      	ldr	r2, [pc, #164]	@ (800127c <HAL_GPIO_Init+0x23c>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a20      	ldr	r2, [pc, #128]	@ (8001280 <HAL_GPIO_Init+0x240>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d052      	beq.n	80012a8 <HAL_GPIO_Init+0x268>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1f      	ldr	r2, [pc, #124]	@ (8001284 <HAL_GPIO_Init+0x244>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d031      	beq.n	800126e <HAL_GPIO_Init+0x22e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <HAL_GPIO_Init+0x248>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d02b      	beq.n	800126a <HAL_GPIO_Init+0x22a>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1d      	ldr	r2, [pc, #116]	@ (800128c <HAL_GPIO_Init+0x24c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d025      	beq.n	8001266 <HAL_GPIO_Init+0x226>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1c      	ldr	r2, [pc, #112]	@ (8001290 <HAL_GPIO_Init+0x250>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d01f      	beq.n	8001262 <HAL_GPIO_Init+0x222>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1b      	ldr	r2, [pc, #108]	@ (8001294 <HAL_GPIO_Init+0x254>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d019      	beq.n	800125e <HAL_GPIO_Init+0x21e>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a1a      	ldr	r2, [pc, #104]	@ (8001298 <HAL_GPIO_Init+0x258>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d013      	beq.n	800125a <HAL_GPIO_Init+0x21a>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a19      	ldr	r2, [pc, #100]	@ (800129c <HAL_GPIO_Init+0x25c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d00d      	beq.n	8001256 <HAL_GPIO_Init+0x216>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a18      	ldr	r2, [pc, #96]	@ (80012a0 <HAL_GPIO_Init+0x260>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d007      	beq.n	8001252 <HAL_GPIO_Init+0x212>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a17      	ldr	r2, [pc, #92]	@ (80012a4 <HAL_GPIO_Init+0x264>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d101      	bne.n	800124e <HAL_GPIO_Init+0x20e>
 800124a:	2309      	movs	r3, #9
 800124c:	e02d      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 800124e:	230a      	movs	r3, #10
 8001250:	e02b      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 8001252:	2308      	movs	r3, #8
 8001254:	e029      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 8001256:	2307      	movs	r3, #7
 8001258:	e027      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 800125a:	2306      	movs	r3, #6
 800125c:	e025      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 800125e:	2305      	movs	r3, #5
 8001260:	e023      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 8001262:	2304      	movs	r3, #4
 8001264:	e021      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 8001266:	2303      	movs	r3, #3
 8001268:	e01f      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 800126a:	2302      	movs	r3, #2
 800126c:	e01d      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 800126e:	2301      	movs	r3, #1
 8001270:	e01b      	b.n	80012aa <HAL_GPIO_Init+0x26a>
 8001272:	bf00      	nop
 8001274:	58000080 	.word	0x58000080
 8001278:	58024400 	.word	0x58024400
 800127c:	58000400 	.word	0x58000400
 8001280:	58020000 	.word	0x58020000
 8001284:	58020400 	.word	0x58020400
 8001288:	58020800 	.word	0x58020800
 800128c:	58020c00 	.word	0x58020c00
 8001290:	58021000 	.word	0x58021000
 8001294:	58021400 	.word	0x58021400
 8001298:	58021800 	.word	0x58021800
 800129c:	58021c00 	.word	0x58021c00
 80012a0:	58022000 	.word	0x58022000
 80012a4:	58022400 	.word	0x58022400
 80012a8:	2300      	movs	r3, #0
 80012aa:	69fa      	ldr	r2, [r7, #28]
 80012ac:	f002 0203 	and.w	r2, r2, #3
 80012b0:	0092      	lsls	r2, r2, #2
 80012b2:	4093      	lsls	r3, r2
 80012b4:	69ba      	ldr	r2, [r7, #24]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012ba:	4938      	ldr	r1, [pc, #224]	@ (800139c <HAL_GPIO_Init+0x35c>)
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012ee:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012f6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800131c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001320:	69bb      	ldr	r3, [r7, #24]
 8001322:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	43db      	mvns	r3, r3
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	4013      	ands	r3, r2
 8001332:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	4313      	orrs	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001354:	693b      	ldr	r3, [r7, #16]
 8001356:	43db      	mvns	r3, r3
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	4013      	ands	r3, r2
 800135c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800136a:	69ba      	ldr	r2, [r7, #24]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001372:	697b      	ldr	r3, [r7, #20]
 8001374:	69ba      	ldr	r2, [r7, #24]
 8001376:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	3301      	adds	r3, #1
 800137c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
 8001388:	2b00      	cmp	r3, #0
 800138a:	f47f ae63 	bne.w	8001054 <HAL_GPIO_Init+0x14>
  }
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3724      	adds	r7, #36	@ 0x24
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	58000400 	.word	0x58000400

080013a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	460b      	mov	r3, r1
 80013aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	887b      	ldrh	r3, [r7, #2]
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d002      	beq.n	80013be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	e001      	b.n	80013c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	460b      	mov	r3, r1
 80013da:	807b      	strh	r3, [r7, #2]
 80013dc:	4613      	mov	r3, r2
 80013de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e0:	787b      	ldrb	r3, [r7, #1]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013e6:	887a      	ldrh	r2, [r7, #2]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013ec:	e003      	b.n	80013f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013ee:	887b      	ldrh	r3, [r7, #2]
 80013f0:	041a      	lsls	r2, r3, #16
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	619a      	str	r2, [r3, #24]
}
 80013f6:	bf00      	nop
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	460b      	mov	r3, r1
 800140c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001414:	887a      	ldrh	r2, [r7, #2]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4013      	ands	r3, r2
 800141a:	041a      	lsls	r2, r3, #16
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	43d9      	mvns	r1, r3
 8001420:	887b      	ldrh	r3, [r7, #2]
 8001422:	400b      	ands	r3, r1
 8001424:	431a      	orrs	r2, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	619a      	str	r2, [r3, #24]
}
 800142a:	bf00      	nop
 800142c:	3714      	adds	r7, #20
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b084      	sub	sp, #16
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001440:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f003 0304 	and.w	r3, r3, #4
 8001448:	2b04      	cmp	r3, #4
 800144a:	d00a      	beq.n	8001462 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800144c:	4b16      	ldr	r3, [pc, #88]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	429a      	cmp	r2, r3
 8001458:	d001      	beq.n	800145e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e01f      	b.n	800149e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800145e:	2300      	movs	r3, #0
 8001460:	e01d      	b.n	800149e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	f023 0207 	bic.w	r2, r3, #7
 800146a:	490f      	ldr	r1, [pc, #60]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4313      	orrs	r3, r2
 8001470:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001472:	f7ff fc4d 	bl	8000d10 <HAL_GetTick>
 8001476:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001478:	e009      	b.n	800148e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800147a:	f7ff fc49 	bl	8000d10 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001488:	d901      	bls.n	800148e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800148a:	2301      	movs	r3, #1
 800148c:	e007      	b.n	800149e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800148e:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <HAL_PWREx_ConfigSupply+0x70>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800149a:	d1ee      	bne.n	800147a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	58024800 	.word	0x58024800

080014ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b08c      	sub	sp, #48	@ 0x30
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d102      	bne.n	80014c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	f000 bc48 	b.w	8001d50 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 8088 	beq.w	80015de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014ce:	4b99      	ldr	r3, [pc, #612]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014d0:	691b      	ldr	r3, [r3, #16]
 80014d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014d8:	4b96      	ldr	r3, [pc, #600]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80014de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e0:	2b10      	cmp	r3, #16
 80014e2:	d007      	beq.n	80014f4 <HAL_RCC_OscConfig+0x48>
 80014e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	d111      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
 80014ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	d10c      	bne.n	800150e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	4b8f      	ldr	r3, [pc, #572]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d06d      	beq.n	80015dc <HAL_RCC_OscConfig+0x130>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d169      	bne.n	80015dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	f000 bc21 	b.w	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x7a>
 8001518:	4b86      	ldr	r3, [pc, #536]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a85      	ldr	r2, [pc, #532]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800151e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001522:	6013      	str	r3, [r2, #0]
 8001524:	e02e      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d10c      	bne.n	8001548 <HAL_RCC_OscConfig+0x9c>
 800152e:	4b81      	ldr	r3, [pc, #516]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a80      	ldr	r2, [pc, #512]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001534:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001538:	6013      	str	r3, [r2, #0]
 800153a:	4b7e      	ldr	r3, [pc, #504]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a7d      	ldr	r2, [pc, #500]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001540:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001544:	6013      	str	r3, [r2, #0]
 8001546:	e01d      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xc0>
 8001552:	4b78      	ldr	r3, [pc, #480]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a77      	ldr	r2, [pc, #476]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b75      	ldr	r3, [pc, #468]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a74      	ldr	r2, [pc, #464]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd8>
 800156c:	4b71      	ldr	r3, [pc, #452]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a70      	ldr	r2, [pc, #448]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b6e      	ldr	r3, [pc, #440]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a6d      	ldr	r2, [pc, #436]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158c:	f7ff fbc0 	bl	8000d10 <HAL_GetTick>
 8001590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fbbc 	bl	8000d10 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	@ 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e3d4      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a6:	4b63      	ldr	r3, [pc, #396]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe8>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b4:	f7ff fbac 	bl	8000d10 <HAL_GetTick>
 80015b8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fba8 	bl	8000d10 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	@ 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e3c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ce:	4b59      	ldr	r3, [pc, #356]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x110>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80ca 	beq.w	8001780 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ec:	4b51      	ldr	r3, [pc, #324]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015ee:	691b      	ldr	r3, [r3, #16]
 80015f0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80015f4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80015f6:	4b4f      	ldr	r3, [pc, #316]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80015f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015fa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80015fc:	6a3b      	ldr	r3, [r7, #32]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d007      	beq.n	8001612 <HAL_RCC_OscConfig+0x166>
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2b18      	cmp	r3, #24
 8001606:	d156      	bne.n	80016b6 <HAL_RCC_OscConfig+0x20a>
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d151      	bne.n	80016b6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001612:	4b48      	ldr	r3, [pc, #288]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0304 	and.w	r3, r3, #4
 800161a:	2b00      	cmp	r3, #0
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x17e>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d101      	bne.n	800162a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e392      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800162a:	4b42      	ldr	r3, [pc, #264]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f023 0219 	bic.w	r2, r3, #25
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	493f      	ldr	r1, [pc, #252]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001638:	4313      	orrs	r3, r2
 800163a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800163c:	f7ff fb68 	bl	8000d10 <HAL_GetTick>
 8001640:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001644:	f7ff fb64 	bl	8000d10 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e37c      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001656:	4b37      	ldr	r3, [pc, #220]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0304 	and.w	r3, r3, #4
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001662:	f7ff fb85 	bl	8000d70 <HAL_GetREVID>
 8001666:	4603      	mov	r3, r0
 8001668:	f241 0203 	movw	r2, #4099	@ 0x1003
 800166c:	4293      	cmp	r3, r2
 800166e:	d817      	bhi.n	80016a0 <HAL_RCC_OscConfig+0x1f4>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	2b40      	cmp	r3, #64	@ 0x40
 8001676:	d108      	bne.n	800168a <HAL_RCC_OscConfig+0x1de>
 8001678:	4b2e      	ldr	r3, [pc, #184]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001680:	4a2c      	ldr	r2, [pc, #176]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001682:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001686:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001688:	e07a      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168a:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	691b      	ldr	r3, [r3, #16]
 8001696:	031b      	lsls	r3, r3, #12
 8001698:	4926      	ldr	r1, [pc, #152]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800169a:	4313      	orrs	r3, r2
 800169c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800169e:	e06f      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a0:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691b      	ldr	r3, [r3, #16]
 80016ac:	061b      	lsls	r3, r3, #24
 80016ae:	4921      	ldr	r1, [pc, #132]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016b4:	e064      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	68db      	ldr	r3, [r3, #12]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d047      	beq.n	800174e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f023 0219 	bic.w	r2, r3, #25
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	491a      	ldr	r1, [pc, #104]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fb1e 	bl	8000d10 <HAL_GetTick>
 80016d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fb1a 	bl	8000d10 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e332      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ea:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0304 	and.w	r3, r3, #4
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	f7ff fb3b 	bl	8000d70 <HAL_GetREVID>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001700:	4293      	cmp	r3, r2
 8001702:	d819      	bhi.n	8001738 <HAL_RCC_OscConfig+0x28c>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	691b      	ldr	r3, [r3, #16]
 8001708:	2b40      	cmp	r3, #64	@ 0x40
 800170a:	d108      	bne.n	800171e <HAL_RCC_OscConfig+0x272>
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001714:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001716:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800171a:	6053      	str	r3, [r2, #4]
 800171c:	e030      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	031b      	lsls	r3, r3, #12
 800172c:	4901      	ldr	r1, [pc, #4]	@ (8001734 <HAL_RCC_OscConfig+0x288>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
 8001732:	e025      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
 8001734:	58024400 	.word	0x58024400
 8001738:	4b9a      	ldr	r3, [pc, #616]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	691b      	ldr	r3, [r3, #16]
 8001744:	061b      	lsls	r3, r3, #24
 8001746:	4997      	ldr	r1, [pc, #604]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001748:	4313      	orrs	r3, r2
 800174a:	604b      	str	r3, [r1, #4]
 800174c:	e018      	b.n	8001780 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800174e:	4b95      	ldr	r3, [pc, #596]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a94      	ldr	r2, [pc, #592]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001754:	f023 0301 	bic.w	r3, r3, #1
 8001758:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175a:	f7ff fad9 	bl	8000d10 <HAL_GetTick>
 800175e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001760:	e008      	b.n	8001774 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001762:	f7ff fad5 	bl	8000d10 <HAL_GetTick>
 8001766:	4602      	mov	r2, r0
 8001768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	2b02      	cmp	r3, #2
 800176e:	d901      	bls.n	8001774 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001770:	2303      	movs	r3, #3
 8001772:	e2ed      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001774:	4b8b      	ldr	r3, [pc, #556]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0304 	and.w	r3, r3, #4
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1f0      	bne.n	8001762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 80a9 	beq.w	80018e0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800178e:	4b85      	ldr	r3, [pc, #532]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001796:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001798:	4b82      	ldr	r3, [pc, #520]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800179a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800179c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800179e:	69bb      	ldr	r3, [r7, #24]
 80017a0:	2b08      	cmp	r3, #8
 80017a2:	d007      	beq.n	80017b4 <HAL_RCC_OscConfig+0x308>
 80017a4:	69bb      	ldr	r3, [r7, #24]
 80017a6:	2b18      	cmp	r3, #24
 80017a8:	d13a      	bne.n	8001820 <HAL_RCC_OscConfig+0x374>
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d135      	bne.n	8001820 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017b4:	4b7b      	ldr	r3, [pc, #492]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x320>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	2b80      	cmp	r3, #128	@ 0x80
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e2c1      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017cc:	f7ff fad0 	bl	8000d70 <HAL_GetREVID>
 80017d0:	4603      	mov	r3, r0
 80017d2:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d817      	bhi.n	800180a <HAL_RCC_OscConfig+0x35e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a1b      	ldr	r3, [r3, #32]
 80017de:	2b20      	cmp	r3, #32
 80017e0:	d108      	bne.n	80017f4 <HAL_RCC_OscConfig+0x348>
 80017e2:	4b70      	ldr	r3, [pc, #448]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80017ea:	4a6e      	ldr	r2, [pc, #440]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017ec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80017f0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80017f2:	e075      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80017f4:	4b6b      	ldr	r3, [pc, #428]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	069b      	lsls	r3, r3, #26
 8001802:	4968      	ldr	r1, [pc, #416]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001804:	4313      	orrs	r3, r2
 8001806:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001808:	e06a      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800180a:	4b66      	ldr	r3, [pc, #408]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6a1b      	ldr	r3, [r3, #32]
 8001816:	061b      	lsls	r3, r3, #24
 8001818:	4962      	ldr	r1, [pc, #392]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	4313      	orrs	r3, r2
 800181c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800181e:	e05f      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	69db      	ldr	r3, [r3, #28]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d042      	beq.n	80018ae <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001828:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a5d      	ldr	r2, [pc, #372]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800182e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001832:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001834:	f7ff fa6c 	bl	8000d10 <HAL_GetTick>
 8001838:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800183c:	f7ff fa68 	bl	8000d10 <HAL_GetTick>
 8001840:	4602      	mov	r2, r0
 8001842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e280      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800184e:	4b55      	ldr	r3, [pc, #340]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001856:	2b00      	cmp	r3, #0
 8001858:	d0f0      	beq.n	800183c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800185a:	f7ff fa89 	bl	8000d70 <HAL_GetREVID>
 800185e:	4603      	mov	r3, r0
 8001860:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001864:	4293      	cmp	r3, r2
 8001866:	d817      	bhi.n	8001898 <HAL_RCC_OscConfig+0x3ec>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	2b20      	cmp	r3, #32
 800186e:	d108      	bne.n	8001882 <HAL_RCC_OscConfig+0x3d6>
 8001870:	4b4c      	ldr	r3, [pc, #304]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001878:	4a4a      	ldr	r2, [pc, #296]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800187a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e02e      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
 8001882:	4b48      	ldr	r3, [pc, #288]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6a1b      	ldr	r3, [r3, #32]
 800188e:	069b      	lsls	r3, r3, #26
 8001890:	4944      	ldr	r1, [pc, #272]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	4313      	orrs	r3, r2
 8001894:	604b      	str	r3, [r1, #4]
 8001896:	e023      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
 8001898:	4b42      	ldr	r3, [pc, #264]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	493f      	ldr	r1, [pc, #252]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	60cb      	str	r3, [r1, #12]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80018ae:	4b3d      	ldr	r3, [pc, #244]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a3c      	ldr	r2, [pc, #240]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fa29 	bl	8000d10 <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018c2:	f7ff fa25 	bl	8000d10 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e23d      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80018d4:	4b33      	ldr	r3, [pc, #204]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0308 	and.w	r3, r3, #8
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d036      	beq.n	800195a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d019      	beq.n	8001928 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018f4:	4b2b      	ldr	r3, [pc, #172]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018f8:	4a2a      	ldr	r2, [pc, #168]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001900:	f7ff fa06 	bl	8000d10 <HAL_GetTick>
 8001904:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001908:	f7ff fa02 	bl	8000d10 <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e21a      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800191a:	4b22      	ldr	r3, [pc, #136]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800191c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d0f0      	beq.n	8001908 <HAL_RCC_OscConfig+0x45c>
 8001926:	e018      	b.n	800195a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001928:	4b1e      	ldr	r3, [pc, #120]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800192a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800192c:	4a1d      	ldr	r2, [pc, #116]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001934:	f7ff f9ec 	bl	8000d10 <HAL_GetTick>
 8001938:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800193a:	e008      	b.n	800194e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800193c:	f7ff f9e8 	bl	8000d10 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b02      	cmp	r3, #2
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e200      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800194e:	4b15      	ldr	r3, [pc, #84]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001950:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d1f0      	bne.n	800193c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0320 	and.w	r3, r3, #32
 8001962:	2b00      	cmp	r3, #0
 8001964:	d039      	beq.n	80019da <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	699b      	ldr	r3, [r3, #24]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01c      	beq.n	80019a8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800196e:	4b0d      	ldr	r3, [pc, #52]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a0c      	ldr	r2, [pc, #48]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001974:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001978:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800197a:	f7ff f9c9 	bl	8000d10 <HAL_GetTick>
 800197e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001980:	e008      	b.n	8001994 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001982:	f7ff f9c5 	bl	8000d10 <HAL_GetTick>
 8001986:	4602      	mov	r2, r0
 8001988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b02      	cmp	r3, #2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e1dd      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001994:	4b03      	ldr	r3, [pc, #12]	@ (80019a4 <HAL_RCC_OscConfig+0x4f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d0f0      	beq.n	8001982 <HAL_RCC_OscConfig+0x4d6>
 80019a0:	e01b      	b.n	80019da <HAL_RCC_OscConfig+0x52e>
 80019a2:	bf00      	nop
 80019a4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80019a8:	4b9b      	ldr	r3, [pc, #620]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a9a      	ldr	r2, [pc, #616]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80019b2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019b4:	f7ff f9ac 	bl	8000d10 <HAL_GetTick>
 80019b8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ba:	e008      	b.n	80019ce <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019bc:	f7ff f9a8 	bl	8000d10 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e1c0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80019ce:	4b92      	ldr	r3, [pc, #584]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f0      	bne.n	80019bc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0304 	and.w	r3, r3, #4
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 8081 	beq.w	8001aea <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80019e8:	4b8c      	ldr	r3, [pc, #560]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a8b      	ldr	r2, [pc, #556]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 80019ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80019f4:	f7ff f98c 	bl	8000d10 <HAL_GetTick>
 80019f8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80019fa:	e008      	b.n	8001a0e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019fc:	f7ff f988 	bl	8000d10 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	2b64      	cmp	r3, #100	@ 0x64
 8001a08:	d901      	bls.n	8001a0e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a0a:	2303      	movs	r3, #3
 8001a0c:	e1a0      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a0e:	4b83      	ldr	r3, [pc, #524]	@ (8001c1c <HAL_RCC_OscConfig+0x770>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0f0      	beq.n	80019fc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d106      	bne.n	8001a30 <HAL_RCC_OscConfig+0x584>
 8001a22:	4b7d      	ldr	r3, [pc, #500]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a26:	4a7c      	ldr	r2, [pc, #496]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a2e:	e02d      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d10c      	bne.n	8001a52 <HAL_RCC_OscConfig+0x5a6>
 8001a38:	4b77      	ldr	r3, [pc, #476]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a3c:	4a76      	ldr	r2, [pc, #472]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a3e:	f023 0301 	bic.w	r3, r3, #1
 8001a42:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a44:	4b74      	ldr	r3, [pc, #464]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a48:	4a73      	ldr	r2, [pc, #460]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a4a:	f023 0304 	bic.w	r3, r3, #4
 8001a4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a50:	e01c      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	2b05      	cmp	r3, #5
 8001a58:	d10c      	bne.n	8001a74 <HAL_RCC_OscConfig+0x5c8>
 8001a5a:	4b6f      	ldr	r3, [pc, #444]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a5e:	4a6e      	ldr	r2, [pc, #440]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a60:	f043 0304 	orr.w	r3, r3, #4
 8001a64:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a66:	4b6c      	ldr	r3, [pc, #432]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6a:	4a6b      	ldr	r2, [pc, #428]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a6c:	f043 0301 	orr.w	r3, r3, #1
 8001a70:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a72:	e00b      	b.n	8001a8c <HAL_RCC_OscConfig+0x5e0>
 8001a74:	4b68      	ldr	r3, [pc, #416]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a67      	ldr	r2, [pc, #412]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	4b65      	ldr	r3, [pc, #404]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a84:	4a64      	ldr	r2, [pc, #400]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001a86:	f023 0304 	bic.w	r3, r3, #4
 8001a8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d015      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff f93c 	bl	8000d10 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff f938 	bl	8000d10 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e14e      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ab2:	4b59      	ldr	r3, [pc, #356]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab6:	f003 0302 	and.w	r3, r3, #2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0ee      	beq.n	8001a9c <HAL_RCC_OscConfig+0x5f0>
 8001abe:	e014      	b.n	8001aea <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f926 	bl	8000d10 <HAL_GetTick>
 8001ac4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f922 	bl	8000d10 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e138      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ade:	4b4e      	ldr	r3, [pc, #312]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001ae0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1ee      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 812d 	beq.w	8001d4e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001af4:	4b48      	ldr	r3, [pc, #288]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001afc:	2b18      	cmp	r3, #24
 8001afe:	f000 80bd 	beq.w	8001c7c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	f040 809e 	bne.w	8001c48 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b0c:	4b42      	ldr	r3, [pc, #264]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a41      	ldr	r2, [pc, #260]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b12:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b16:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f8fa 	bl	8000d10 <HAL_GetTick>
 8001b1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f8f6 	bl	8000d10 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e10e      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b32:	4b39      	ldr	r3, [pc, #228]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b3e:	4b36      	ldr	r3, [pc, #216]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b42:	4b37      	ldr	r3, [pc, #220]	@ (8001c20 <HAL_RCC_OscConfig+0x774>)
 8001b44:	4013      	ands	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001b4a:	687a      	ldr	r2, [r7, #4]
 8001b4c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	430a      	orrs	r2, r1
 8001b52:	4931      	ldr	r1, [pc, #196]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	628b      	str	r3, [r1, #40]	@ 0x28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b66:	3b01      	subs	r3, #1
 8001b68:	025b      	lsls	r3, r3, #9
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b72:	3b01      	subs	r3, #1
 8001b74:	041b      	lsls	r3, r3, #16
 8001b76:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001b7a:	431a      	orrs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b80:	3b01      	subs	r3, #1
 8001b82:	061b      	lsls	r3, r3, #24
 8001b84:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001b88:	4923      	ldr	r1, [pc, #140]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001b8e:	4b22      	ldr	r3, [pc, #136]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b92:	4a21      	ldr	r2, [pc, #132]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b94:	f023 0301 	bic.w	r3, r3, #1
 8001b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9e:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <HAL_RCC_OscConfig+0x778>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001ba6:	00d2      	lsls	r2, r2, #3
 8001ba8:	491b      	ldr	r1, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001bae:	4b1a      	ldr	r3, [pc, #104]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bb2:	f023 020c 	bic.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bba:	4917      	ldr	r1, [pc, #92]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001bc0:	4b15      	ldr	r3, [pc, #84]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc4:	f023 0202 	bic.w	r2, r3, #2
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bcc:	4912      	ldr	r1, [pc, #72]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001bd2:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd6:	4a10      	ldr	r2, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001bde:	4b0e      	ldr	r3, [pc, #56]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be2:	4a0d      	ldr	r2, [pc, #52]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001be4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001be8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001bea:	4b0b      	ldr	r3, [pc, #44]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	4a0a      	ldr	r2, [pc, #40]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bf4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001bf6:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bfa:	4a07      	ldr	r2, [pc, #28]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a04      	ldr	r2, [pc, #16]	@ (8001c18 <HAL_RCC_OscConfig+0x76c>)
 8001c08:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0e:	f7ff f87f 	bl	8000d10 <HAL_GetTick>
 8001c12:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c14:	e011      	b.n	8001c3a <HAL_RCC_OscConfig+0x78e>
 8001c16:	bf00      	nop
 8001c18:	58024400 	.word	0x58024400
 8001c1c:	58024800 	.word	0x58024800
 8001c20:	fffffc0c 	.word	0xfffffc0c
 8001c24:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c28:	f7ff f872 	bl	8000d10 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e08a      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c3a:	4b47      	ldr	r3, [pc, #284]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d0f0      	beq.n	8001c28 <HAL_RCC_OscConfig+0x77c>
 8001c46:	e082      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b43      	ldr	r3, [pc, #268]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a42      	ldr	r2, [pc, #264]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c54:	f7ff f85c 	bl	8000d10 <HAL_GetTick>
 8001c58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c5c:	f7ff f858 	bl	8000d10 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e070      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c6e:	4b3a      	ldr	r3, [pc, #232]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x7b0>
 8001c7a:	e068      	b.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001c7c:	4b36      	ldr	r3, [pc, #216]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c80:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001c82:	4b35      	ldr	r3, [pc, #212]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d031      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	f003 0203 	and.w	r2, r3, #3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d12a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001caa:	429a      	cmp	r2, r3
 8001cac:	d122      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d11a      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	0a5b      	lsrs	r3, r3, #9
 8001cc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cca:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ccc:	429a      	cmp	r2, r3
 8001cce:	d111      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	0c1b      	lsrs	r3, r3, #16
 8001cd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cdc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d108      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0e1b      	lsrs	r3, r3, #24
 8001ce6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cee:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	d001      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e02b      	b.n	8001d50 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cfc:	08db      	lsrs	r3, r3, #3
 8001cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d02:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d01f      	beq.n	8001d4e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d0e:	4b12      	ldr	r3, [pc, #72]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	4a11      	ldr	r2, [pc, #68]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d14:	f023 0301 	bic.w	r3, r3, #1
 8001d18:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d1a:	f7fe fff9 	bl	8000d10 <HAL_GetTick>
 8001d1e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d20:	bf00      	nop
 8001d22:	f7fe fff5 	bl	8000d10 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d0f9      	beq.n	8001d22 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_RCC_OscConfig+0x8b0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d3a:	00d2      	lsls	r2, r2, #3
 8001d3c:	4906      	ldr	r1, [pc, #24]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001d42:	4b05      	ldr	r3, [pc, #20]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d46:	4a04      	ldr	r2, [pc, #16]	@ (8001d58 <HAL_RCC_OscConfig+0x8ac>)
 8001d48:	f043 0301 	orr.w	r3, r3, #1
 8001d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001d4e:	2300      	movs	r3, #0
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	3730      	adds	r7, #48	@ 0x30
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	58024400 	.word	0x58024400
 8001d5c:	ffff0007 	.word	0xffff0007

08001d60 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d101      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d70:	2301      	movs	r3, #1
 8001d72:	e19c      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d74:	4b8a      	ldr	r3, [pc, #552]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 030f 	and.w	r3, r3, #15
 8001d7c:	683a      	ldr	r2, [r7, #0]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d910      	bls.n	8001da4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d82:	4b87      	ldr	r3, [pc, #540]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f023 020f 	bic.w	r2, r3, #15
 8001d8a:	4985      	ldr	r1, [pc, #532]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b83      	ldr	r3, [pc, #524]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e184      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0304 	and.w	r3, r3, #4
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d010      	beq.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691a      	ldr	r2, [r3, #16]
 8001db4:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d908      	bls.n	8001dd2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001dc0:	4b78      	ldr	r3, [pc, #480]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4975      	ldr	r1, [pc, #468]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d010      	beq.n	8001e00 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695a      	ldr	r2, [r3, #20]
 8001de2:	4b70      	ldr	r3, [pc, #448]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001de4:	69db      	ldr	r3, [r3, #28]
 8001de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001dea:	429a      	cmp	r2, r3
 8001dec:	d908      	bls.n	8001e00 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001dee:	4b6d      	ldr	r3, [pc, #436]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001df0:	69db      	ldr	r3, [r3, #28]
 8001df2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	496a      	ldr	r1, [pc, #424]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0310 	and.w	r3, r3, #16
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d010      	beq.n	8001e2e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699a      	ldr	r2, [r3, #24]
 8001e10:	4b64      	ldr	r3, [pc, #400]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d908      	bls.n	8001e2e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e1c:	4b61      	ldr	r3, [pc, #388]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e1e:	69db      	ldr	r3, [r3, #28]
 8001e20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	495e      	ldr	r1, [pc, #376]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0320 	and.w	r3, r3, #32
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	69da      	ldr	r2, [r3, #28]
 8001e3e:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d908      	bls.n	8001e5c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001e4a:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4953      	ldr	r1, [pc, #332]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	68da      	ldr	r2, [r3, #12]
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	f003 030f 	and.w	r3, r3, #15
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d908      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b4a      	ldr	r3, [pc, #296]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	f023 020f 	bic.w	r2, r3, #15
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	4947      	ldr	r1, [pc, #284]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d055      	beq.n	8001f42 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001e96:	4b43      	ldr	r3, [pc, #268]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	4940      	ldr	r1, [pc, #256]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b02      	cmp	r3, #2
 8001eae:	d107      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001eb0:	4b3c      	ldr	r3, [pc, #240]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d121      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e0f6      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	2b03      	cmp	r3, #3
 8001ec6:	d107      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec8:	4b36      	ldr	r3, [pc, #216]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d115      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0ea      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d107      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ee0:	4b30      	ldr	r3, [pc, #192]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d109      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0de      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d101      	bne.n	8001f00 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e0d6      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f00:	4b28      	ldr	r3, [pc, #160]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	f023 0207 	bic.w	r2, r3, #7
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	4925      	ldr	r1, [pc, #148]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f12:	f7fe fefd 	bl	8000d10 <HAL_GetTick>
 8001f16:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f18:	e00a      	b.n	8001f30 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f1a:	f7fe fef9 	bl	8000d10 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d901      	bls.n	8001f30 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e0be      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f30:	4b1c      	ldr	r3, [pc, #112]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d1eb      	bne.n	8001f1a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d010      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68da      	ldr	r2, [r3, #12]
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d208      	bcs.n	8001f70 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5e:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f023 020f 	bic.w	r2, r3, #15
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <HAL_RCC_ClockConfig+0x244>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f70:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 030f 	and.w	r3, r3, #15
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d214      	bcs.n	8001fa8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7e:	4b08      	ldr	r3, [pc, #32]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 020f 	bic.w	r2, r3, #15
 8001f86:	4906      	ldr	r1, [pc, #24]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b04      	ldr	r3, [pc, #16]	@ (8001fa0 <HAL_RCC_ClockConfig+0x240>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 030f 	and.w	r3, r3, #15
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d005      	beq.n	8001fa8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e086      	b.n	80020ae <HAL_RCC_ClockConfig+0x34e>
 8001fa0:	52002000 	.word	0x52002000
 8001fa4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0304 	and.w	r3, r3, #4
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d010      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d208      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001fc4:	4b3c      	ldr	r3, [pc, #240]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fc6:	699b      	ldr	r3, [r3, #24]
 8001fc8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	4939      	ldr	r1, [pc, #228]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0308 	and.w	r3, r3, #8
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d010      	beq.n	8002004 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695a      	ldr	r2, [r3, #20]
 8001fe6:	4b34      	ldr	r3, [pc, #208]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001fe8:	69db      	ldr	r3, [r3, #28]
 8001fea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d208      	bcs.n	8002004 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ff2:	4b31      	ldr	r3, [pc, #196]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8001ff4:	69db      	ldr	r3, [r3, #28]
 8001ff6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	492e      	ldr	r1, [pc, #184]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002000:	4313      	orrs	r3, r2
 8002002:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0310 	and.w	r3, r3, #16
 800200c:	2b00      	cmp	r3, #0
 800200e:	d010      	beq.n	8002032 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	4b28      	ldr	r3, [pc, #160]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002016:	69db      	ldr	r3, [r3, #28]
 8002018:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800201c:	429a      	cmp	r2, r3
 800201e:	d208      	bcs.n	8002032 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002020:	4b25      	ldr	r3, [pc, #148]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002022:	69db      	ldr	r3, [r3, #28]
 8002024:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	4922      	ldr	r1, [pc, #136]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 800202e:	4313      	orrs	r3, r2
 8002030:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0320 	and.w	r3, r3, #32
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69da      	ldr	r2, [r3, #28]
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800204a:	429a      	cmp	r2, r3
 800204c:	d208      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800204e:	4b1a      	ldr	r3, [pc, #104]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4917      	ldr	r1, [pc, #92]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 800205c:	4313      	orrs	r3, r2
 800205e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002060:	f000 f834 	bl	80020cc <HAL_RCC_GetSysClockFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b14      	ldr	r3, [pc, #80]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	4912      	ldr	r1, [pc, #72]	@ (80020bc <HAL_RCC_ClockConfig+0x35c>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
 800207c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800207e:	4b0e      	ldr	r3, [pc, #56]	@ (80020b8 <HAL_RCC_ClockConfig+0x358>)
 8002080:	699b      	ldr	r3, [r3, #24]
 8002082:	f003 030f 	and.w	r3, r3, #15
 8002086:	4a0d      	ldr	r2, [pc, #52]	@ (80020bc <HAL_RCC_ClockConfig+0x35c>)
 8002088:	5cd3      	ldrb	r3, [r2, r3]
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_RCC_ClockConfig+0x360>)
 8002096:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002098:	4a0a      	ldr	r2, [pc, #40]	@ (80020c4 <HAL_RCC_ClockConfig+0x364>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800209e:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <HAL_RCC_ClockConfig+0x368>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7fe fdea 	bl	8000c7c <HAL_InitTick>
 80020a8:	4603      	mov	r3, r0
 80020aa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80020ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	58024400 	.word	0x58024400
 80020bc:	08003608 	.word	0x08003608
 80020c0:	2400000c 	.word	0x2400000c
 80020c4:	24000008 	.word	0x24000008
 80020c8:	24000010 	.word	0x24000010

080020cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80020d2:	4bb3      	ldr	r3, [pc, #716]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020da:	2b18      	cmp	r3, #24
 80020dc:	f200 8155 	bhi.w	800238a <HAL_RCC_GetSysClockFreq+0x2be>
 80020e0:	a201      	add	r2, pc, #4	@ (adr r2, 80020e8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	0800214d 	.word	0x0800214d
 80020ec:	0800238b 	.word	0x0800238b
 80020f0:	0800238b 	.word	0x0800238b
 80020f4:	0800238b 	.word	0x0800238b
 80020f8:	0800238b 	.word	0x0800238b
 80020fc:	0800238b 	.word	0x0800238b
 8002100:	0800238b 	.word	0x0800238b
 8002104:	0800238b 	.word	0x0800238b
 8002108:	08002173 	.word	0x08002173
 800210c:	0800238b 	.word	0x0800238b
 8002110:	0800238b 	.word	0x0800238b
 8002114:	0800238b 	.word	0x0800238b
 8002118:	0800238b 	.word	0x0800238b
 800211c:	0800238b 	.word	0x0800238b
 8002120:	0800238b 	.word	0x0800238b
 8002124:	0800238b 	.word	0x0800238b
 8002128:	08002179 	.word	0x08002179
 800212c:	0800238b 	.word	0x0800238b
 8002130:	0800238b 	.word	0x0800238b
 8002134:	0800238b 	.word	0x0800238b
 8002138:	0800238b 	.word	0x0800238b
 800213c:	0800238b 	.word	0x0800238b
 8002140:	0800238b 	.word	0x0800238b
 8002144:	0800238b 	.word	0x0800238b
 8002148:	0800217f 	.word	0x0800217f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800214c:	4b94      	ldr	r3, [pc, #592]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 0320 	and.w	r3, r3, #32
 8002154:	2b00      	cmp	r3, #0
 8002156:	d009      	beq.n	800216c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002158:	4b91      	ldr	r3, [pc, #580]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	08db      	lsrs	r3, r3, #3
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	4a90      	ldr	r2, [pc, #576]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002164:	fa22 f303 	lsr.w	r3, r2, r3
 8002168:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800216a:	e111      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800216c:	4b8d      	ldr	r3, [pc, #564]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800216e:	61bb      	str	r3, [r7, #24]
      break;
 8002170:	e10e      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002172:	4b8d      	ldr	r3, [pc, #564]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002174:	61bb      	str	r3, [r7, #24]
      break;
 8002176:	e10b      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002178:	4b8c      	ldr	r3, [pc, #560]	@ (80023ac <HAL_RCC_GetSysClockFreq+0x2e0>)
 800217a:	61bb      	str	r3, [r7, #24]
      break;
 800217c:	e108      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800217e:	4b88      	ldr	r3, [pc, #544]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002188:	4b85      	ldr	r3, [pc, #532]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	091b      	lsrs	r3, r3, #4
 800218e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002192:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002194:	4b82      	ldr	r3, [pc, #520]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800219e:	4b80      	ldr	r3, [pc, #512]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021a2:	08db      	lsrs	r3, r3, #3
 80021a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
 80021ae:	ee07 3a90 	vmov	s15, r3
 80021b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021b6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 80e1 	beq.w	8002384 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	f000 8083 	beq.w	80022d0 <HAL_RCC_GetSysClockFreq+0x204>
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	f200 80a1 	bhi.w	8002314 <HAL_RCC_GetSysClockFreq+0x248>
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0x114>
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d056      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x1c0>
 80021de:	e099      	b.n	8002314 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021e0:	4b6f      	ldr	r3, [pc, #444]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0320 	and.w	r3, r3, #32
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d02d      	beq.n	8002248 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021ec:	4b6c      	ldr	r3, [pc, #432]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	08db      	lsrs	r3, r3, #3
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	4a6b      	ldr	r2, [pc, #428]	@ (80023a4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
 80021fc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002216:	4b62      	ldr	r3, [pc, #392]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002226:	ed97 6a02 	vldr	s12, [r7, #8]
 800222a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800222e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800223a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800223e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002242:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002246:	e087      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002252:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80023b4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002262:	ee07 3a90 	vmov	s15, r3
 8002266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226a:	ed97 6a02 	vldr	s12, [r7, #8]
 800226e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800227a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800227e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800228a:	e065      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	ee07 3a90 	vmov	s15, r3
 8002292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002296:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800229a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800229e:	4b40      	ldr	r3, [pc, #256]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022a6:	ee07 3a90 	vmov	s15, r3
 80022aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80022b2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ce:	e043      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022da:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80023bc <HAL_RCC_GetSysClockFreq+0x2f0>
 80022de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022e2:	4b2f      	ldr	r3, [pc, #188]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022ea:	ee07 3a90 	vmov	s15, r3
 80022ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80022f6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800230a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800230e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002312:	e021      	b.n	8002358 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800231e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80023b8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002326:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002336:	ed97 6a02 	vldr	s12, [r7, #8]
 800233a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80023b0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800233e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800234a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800234e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002352:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002356:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002358:	4b11      	ldr	r3, [pc, #68]	@ (80023a0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800235a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800235c:	0a5b      	lsrs	r3, r3, #9
 800235e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002362:	3301      	adds	r3, #1
 8002364:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	ee07 3a90 	vmov	s15, r3
 800236c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002370:	edd7 6a07 	vldr	s13, [r7, #28]
 8002374:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002378:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800238a:	4b07      	ldr	r3, [pc, #28]	@ (80023a8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800238c:	61bb      	str	r3, [r7, #24]
      break;
 800238e:	bf00      	nop
  }

  return sysclockfreq;
 8002390:	69bb      	ldr	r3, [r7, #24]
}
 8002392:	4618      	mov	r0, r3
 8002394:	3724      	adds	r7, #36	@ 0x24
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	58024400 	.word	0x58024400
 80023a4:	03d09000 	.word	0x03d09000
 80023a8:	003d0900 	.word	0x003d0900
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	46000000 	.word	0x46000000
 80023b4:	4c742400 	.word	0x4c742400
 80023b8:	4a742400 	.word	0x4a742400
 80023bc:	4af42400 	.word	0x4af42400

080023c0 <std>:
 80023c0:	2300      	movs	r3, #0
 80023c2:	b510      	push	{r4, lr}
 80023c4:	4604      	mov	r4, r0
 80023c6:	e9c0 3300 	strd	r3, r3, [r0]
 80023ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80023ce:	6083      	str	r3, [r0, #8]
 80023d0:	8181      	strh	r1, [r0, #12]
 80023d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80023d4:	81c2      	strh	r2, [r0, #14]
 80023d6:	6183      	str	r3, [r0, #24]
 80023d8:	4619      	mov	r1, r3
 80023da:	2208      	movs	r2, #8
 80023dc:	305c      	adds	r0, #92	@ 0x5c
 80023de:	f000 f928 	bl	8002632 <memset>
 80023e2:	4b0d      	ldr	r3, [pc, #52]	@ (8002418 <std+0x58>)
 80023e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80023e6:	4b0d      	ldr	r3, [pc, #52]	@ (800241c <std+0x5c>)
 80023e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80023ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <std+0x60>)
 80023ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80023ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002424 <std+0x64>)
 80023f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80023f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002428 <std+0x68>)
 80023f4:	6224      	str	r4, [r4, #32]
 80023f6:	429c      	cmp	r4, r3
 80023f8:	d006      	beq.n	8002408 <std+0x48>
 80023fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80023fe:	4294      	cmp	r4, r2
 8002400:	d002      	beq.n	8002408 <std+0x48>
 8002402:	33d0      	adds	r3, #208	@ 0xd0
 8002404:	429c      	cmp	r4, r3
 8002406:	d105      	bne.n	8002414 <std+0x54>
 8002408:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800240c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002410:	f000 b988 	b.w	8002724 <__retarget_lock_init_recursive>
 8002414:	bd10      	pop	{r4, pc}
 8002416:	bf00      	nop
 8002418:	080025ad 	.word	0x080025ad
 800241c:	080025cf 	.word	0x080025cf
 8002420:	08002607 	.word	0x08002607
 8002424:	0800262b 	.word	0x0800262b
 8002428:	24000098 	.word	0x24000098

0800242c <stdio_exit_handler>:
 800242c:	4a02      	ldr	r2, [pc, #8]	@ (8002438 <stdio_exit_handler+0xc>)
 800242e:	4903      	ldr	r1, [pc, #12]	@ (800243c <stdio_exit_handler+0x10>)
 8002430:	4803      	ldr	r0, [pc, #12]	@ (8002440 <stdio_exit_handler+0x14>)
 8002432:	f000 b869 	b.w	8002508 <_fwalk_sglue>
 8002436:	bf00      	nop
 8002438:	24000018 	.word	0x24000018
 800243c:	08003271 	.word	0x08003271
 8002440:	24000028 	.word	0x24000028

08002444 <cleanup_stdio>:
 8002444:	6841      	ldr	r1, [r0, #4]
 8002446:	4b0c      	ldr	r3, [pc, #48]	@ (8002478 <cleanup_stdio+0x34>)
 8002448:	4299      	cmp	r1, r3
 800244a:	b510      	push	{r4, lr}
 800244c:	4604      	mov	r4, r0
 800244e:	d001      	beq.n	8002454 <cleanup_stdio+0x10>
 8002450:	f000 ff0e 	bl	8003270 <_fflush_r>
 8002454:	68a1      	ldr	r1, [r4, #8]
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <cleanup_stdio+0x38>)
 8002458:	4299      	cmp	r1, r3
 800245a:	d002      	beq.n	8002462 <cleanup_stdio+0x1e>
 800245c:	4620      	mov	r0, r4
 800245e:	f000 ff07 	bl	8003270 <_fflush_r>
 8002462:	68e1      	ldr	r1, [r4, #12]
 8002464:	4b06      	ldr	r3, [pc, #24]	@ (8002480 <cleanup_stdio+0x3c>)
 8002466:	4299      	cmp	r1, r3
 8002468:	d004      	beq.n	8002474 <cleanup_stdio+0x30>
 800246a:	4620      	mov	r0, r4
 800246c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002470:	f000 befe 	b.w	8003270 <_fflush_r>
 8002474:	bd10      	pop	{r4, pc}
 8002476:	bf00      	nop
 8002478:	24000098 	.word	0x24000098
 800247c:	24000100 	.word	0x24000100
 8002480:	24000168 	.word	0x24000168

08002484 <global_stdio_init.part.0>:
 8002484:	b510      	push	{r4, lr}
 8002486:	4b0b      	ldr	r3, [pc, #44]	@ (80024b4 <global_stdio_init.part.0+0x30>)
 8002488:	4c0b      	ldr	r4, [pc, #44]	@ (80024b8 <global_stdio_init.part.0+0x34>)
 800248a:	4a0c      	ldr	r2, [pc, #48]	@ (80024bc <global_stdio_init.part.0+0x38>)
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	4620      	mov	r0, r4
 8002490:	2200      	movs	r2, #0
 8002492:	2104      	movs	r1, #4
 8002494:	f7ff ff94 	bl	80023c0 <std>
 8002498:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800249c:	2201      	movs	r2, #1
 800249e:	2109      	movs	r1, #9
 80024a0:	f7ff ff8e 	bl	80023c0 <std>
 80024a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80024a8:	2202      	movs	r2, #2
 80024aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024ae:	2112      	movs	r1, #18
 80024b0:	f7ff bf86 	b.w	80023c0 <std>
 80024b4:	240001d0 	.word	0x240001d0
 80024b8:	24000098 	.word	0x24000098
 80024bc:	0800242d 	.word	0x0800242d

080024c0 <__sfp_lock_acquire>:
 80024c0:	4801      	ldr	r0, [pc, #4]	@ (80024c8 <__sfp_lock_acquire+0x8>)
 80024c2:	f000 b930 	b.w	8002726 <__retarget_lock_acquire_recursive>
 80024c6:	bf00      	nop
 80024c8:	240001d9 	.word	0x240001d9

080024cc <__sfp_lock_release>:
 80024cc:	4801      	ldr	r0, [pc, #4]	@ (80024d4 <__sfp_lock_release+0x8>)
 80024ce:	f000 b92b 	b.w	8002728 <__retarget_lock_release_recursive>
 80024d2:	bf00      	nop
 80024d4:	240001d9 	.word	0x240001d9

080024d8 <__sinit>:
 80024d8:	b510      	push	{r4, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	f7ff fff0 	bl	80024c0 <__sfp_lock_acquire>
 80024e0:	6a23      	ldr	r3, [r4, #32]
 80024e2:	b11b      	cbz	r3, 80024ec <__sinit+0x14>
 80024e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80024e8:	f7ff bff0 	b.w	80024cc <__sfp_lock_release>
 80024ec:	4b04      	ldr	r3, [pc, #16]	@ (8002500 <__sinit+0x28>)
 80024ee:	6223      	str	r3, [r4, #32]
 80024f0:	4b04      	ldr	r3, [pc, #16]	@ (8002504 <__sinit+0x2c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1f5      	bne.n	80024e4 <__sinit+0xc>
 80024f8:	f7ff ffc4 	bl	8002484 <global_stdio_init.part.0>
 80024fc:	e7f2      	b.n	80024e4 <__sinit+0xc>
 80024fe:	bf00      	nop
 8002500:	08002445 	.word	0x08002445
 8002504:	240001d0 	.word	0x240001d0

08002508 <_fwalk_sglue>:
 8002508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800250c:	4607      	mov	r7, r0
 800250e:	4688      	mov	r8, r1
 8002510:	4614      	mov	r4, r2
 8002512:	2600      	movs	r6, #0
 8002514:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002518:	f1b9 0901 	subs.w	r9, r9, #1
 800251c:	d505      	bpl.n	800252a <_fwalk_sglue+0x22>
 800251e:	6824      	ldr	r4, [r4, #0]
 8002520:	2c00      	cmp	r4, #0
 8002522:	d1f7      	bne.n	8002514 <_fwalk_sglue+0xc>
 8002524:	4630      	mov	r0, r6
 8002526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800252a:	89ab      	ldrh	r3, [r5, #12]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d907      	bls.n	8002540 <_fwalk_sglue+0x38>
 8002530:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002534:	3301      	adds	r3, #1
 8002536:	d003      	beq.n	8002540 <_fwalk_sglue+0x38>
 8002538:	4629      	mov	r1, r5
 800253a:	4638      	mov	r0, r7
 800253c:	47c0      	blx	r8
 800253e:	4306      	orrs	r6, r0
 8002540:	3568      	adds	r5, #104	@ 0x68
 8002542:	e7e9      	b.n	8002518 <_fwalk_sglue+0x10>

08002544 <iprintf>:
 8002544:	b40f      	push	{r0, r1, r2, r3}
 8002546:	b507      	push	{r0, r1, r2, lr}
 8002548:	4906      	ldr	r1, [pc, #24]	@ (8002564 <iprintf+0x20>)
 800254a:	ab04      	add	r3, sp, #16
 800254c:	6808      	ldr	r0, [r1, #0]
 800254e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002552:	6881      	ldr	r1, [r0, #8]
 8002554:	9301      	str	r3, [sp, #4]
 8002556:	f000 fb63 	bl	8002c20 <_vfiprintf_r>
 800255a:	b003      	add	sp, #12
 800255c:	f85d eb04 	ldr.w	lr, [sp], #4
 8002560:	b004      	add	sp, #16
 8002562:	4770      	bx	lr
 8002564:	24000024 	.word	0x24000024

08002568 <siprintf>:
 8002568:	b40e      	push	{r1, r2, r3}
 800256a:	b510      	push	{r4, lr}
 800256c:	b09d      	sub	sp, #116	@ 0x74
 800256e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002570:	9002      	str	r0, [sp, #8]
 8002572:	9006      	str	r0, [sp, #24]
 8002574:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002578:	480a      	ldr	r0, [pc, #40]	@ (80025a4 <siprintf+0x3c>)
 800257a:	9107      	str	r1, [sp, #28]
 800257c:	9104      	str	r1, [sp, #16]
 800257e:	490a      	ldr	r1, [pc, #40]	@ (80025a8 <siprintf+0x40>)
 8002580:	f853 2b04 	ldr.w	r2, [r3], #4
 8002584:	9105      	str	r1, [sp, #20]
 8002586:	2400      	movs	r4, #0
 8002588:	a902      	add	r1, sp, #8
 800258a:	6800      	ldr	r0, [r0, #0]
 800258c:	9301      	str	r3, [sp, #4]
 800258e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8002590:	f000 fa20 	bl	80029d4 <_svfiprintf_r>
 8002594:	9b02      	ldr	r3, [sp, #8]
 8002596:	701c      	strb	r4, [r3, #0]
 8002598:	b01d      	add	sp, #116	@ 0x74
 800259a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800259e:	b003      	add	sp, #12
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	24000024 	.word	0x24000024
 80025a8:	ffff0208 	.word	0xffff0208

080025ac <__sread>:
 80025ac:	b510      	push	{r4, lr}
 80025ae:	460c      	mov	r4, r1
 80025b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025b4:	f000 f868 	bl	8002688 <_read_r>
 80025b8:	2800      	cmp	r0, #0
 80025ba:	bfab      	itete	ge
 80025bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80025be:	89a3      	ldrhlt	r3, [r4, #12]
 80025c0:	181b      	addge	r3, r3, r0
 80025c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80025c6:	bfac      	ite	ge
 80025c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80025ca:	81a3      	strhlt	r3, [r4, #12]
 80025cc:	bd10      	pop	{r4, pc}

080025ce <__swrite>:
 80025ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80025d2:	461f      	mov	r7, r3
 80025d4:	898b      	ldrh	r3, [r1, #12]
 80025d6:	05db      	lsls	r3, r3, #23
 80025d8:	4605      	mov	r5, r0
 80025da:	460c      	mov	r4, r1
 80025dc:	4616      	mov	r6, r2
 80025de:	d505      	bpl.n	80025ec <__swrite+0x1e>
 80025e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80025e4:	2302      	movs	r3, #2
 80025e6:	2200      	movs	r2, #0
 80025e8:	f000 f83c 	bl	8002664 <_lseek_r>
 80025ec:	89a3      	ldrh	r3, [r4, #12]
 80025ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80025f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80025f6:	81a3      	strh	r3, [r4, #12]
 80025f8:	4632      	mov	r2, r6
 80025fa:	463b      	mov	r3, r7
 80025fc:	4628      	mov	r0, r5
 80025fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002602:	f000 b853 	b.w	80026ac <_write_r>

08002606 <__sseek>:
 8002606:	b510      	push	{r4, lr}
 8002608:	460c      	mov	r4, r1
 800260a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800260e:	f000 f829 	bl	8002664 <_lseek_r>
 8002612:	1c43      	adds	r3, r0, #1
 8002614:	89a3      	ldrh	r3, [r4, #12]
 8002616:	bf15      	itete	ne
 8002618:	6560      	strne	r0, [r4, #84]	@ 0x54
 800261a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800261e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002622:	81a3      	strheq	r3, [r4, #12]
 8002624:	bf18      	it	ne
 8002626:	81a3      	strhne	r3, [r4, #12]
 8002628:	bd10      	pop	{r4, pc}

0800262a <__sclose>:
 800262a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800262e:	f000 b809 	b.w	8002644 <_close_r>

08002632 <memset>:
 8002632:	4402      	add	r2, r0
 8002634:	4603      	mov	r3, r0
 8002636:	4293      	cmp	r3, r2
 8002638:	d100      	bne.n	800263c <memset+0xa>
 800263a:	4770      	bx	lr
 800263c:	f803 1b01 	strb.w	r1, [r3], #1
 8002640:	e7f9      	b.n	8002636 <memset+0x4>
	...

08002644 <_close_r>:
 8002644:	b538      	push	{r3, r4, r5, lr}
 8002646:	4d06      	ldr	r5, [pc, #24]	@ (8002660 <_close_r+0x1c>)
 8002648:	2300      	movs	r3, #0
 800264a:	4604      	mov	r4, r0
 800264c:	4608      	mov	r0, r1
 800264e:	602b      	str	r3, [r5, #0]
 8002650:	f7fe f98a 	bl	8000968 <_close>
 8002654:	1c43      	adds	r3, r0, #1
 8002656:	d102      	bne.n	800265e <_close_r+0x1a>
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	b103      	cbz	r3, 800265e <_close_r+0x1a>
 800265c:	6023      	str	r3, [r4, #0]
 800265e:	bd38      	pop	{r3, r4, r5, pc}
 8002660:	240001d4 	.word	0x240001d4

08002664 <_lseek_r>:
 8002664:	b538      	push	{r3, r4, r5, lr}
 8002666:	4d07      	ldr	r5, [pc, #28]	@ (8002684 <_lseek_r+0x20>)
 8002668:	4604      	mov	r4, r0
 800266a:	4608      	mov	r0, r1
 800266c:	4611      	mov	r1, r2
 800266e:	2200      	movs	r2, #0
 8002670:	602a      	str	r2, [r5, #0]
 8002672:	461a      	mov	r2, r3
 8002674:	f7fe f99f 	bl	80009b6 <_lseek>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_lseek_r+0x1e>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_lseek_r+0x1e>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	240001d4 	.word	0x240001d4

08002688 <_read_r>:
 8002688:	b538      	push	{r3, r4, r5, lr}
 800268a:	4d07      	ldr	r5, [pc, #28]	@ (80026a8 <_read_r+0x20>)
 800268c:	4604      	mov	r4, r0
 800268e:	4608      	mov	r0, r1
 8002690:	4611      	mov	r1, r2
 8002692:	2200      	movs	r2, #0
 8002694:	602a      	str	r2, [r5, #0]
 8002696:	461a      	mov	r2, r3
 8002698:	f7fe f92d 	bl	80008f6 <_read>
 800269c:	1c43      	adds	r3, r0, #1
 800269e:	d102      	bne.n	80026a6 <_read_r+0x1e>
 80026a0:	682b      	ldr	r3, [r5, #0]
 80026a2:	b103      	cbz	r3, 80026a6 <_read_r+0x1e>
 80026a4:	6023      	str	r3, [r4, #0]
 80026a6:	bd38      	pop	{r3, r4, r5, pc}
 80026a8:	240001d4 	.word	0x240001d4

080026ac <_write_r>:
 80026ac:	b538      	push	{r3, r4, r5, lr}
 80026ae:	4d07      	ldr	r5, [pc, #28]	@ (80026cc <_write_r+0x20>)
 80026b0:	4604      	mov	r4, r0
 80026b2:	4608      	mov	r0, r1
 80026b4:	4611      	mov	r1, r2
 80026b6:	2200      	movs	r2, #0
 80026b8:	602a      	str	r2, [r5, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	f7fe f938 	bl	8000930 <_write>
 80026c0:	1c43      	adds	r3, r0, #1
 80026c2:	d102      	bne.n	80026ca <_write_r+0x1e>
 80026c4:	682b      	ldr	r3, [r5, #0]
 80026c6:	b103      	cbz	r3, 80026ca <_write_r+0x1e>
 80026c8:	6023      	str	r3, [r4, #0]
 80026ca:	bd38      	pop	{r3, r4, r5, pc}
 80026cc:	240001d4 	.word	0x240001d4

080026d0 <__errno>:
 80026d0:	4b01      	ldr	r3, [pc, #4]	@ (80026d8 <__errno+0x8>)
 80026d2:	6818      	ldr	r0, [r3, #0]
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	24000024 	.word	0x24000024

080026dc <__libc_init_array>:
 80026dc:	b570      	push	{r4, r5, r6, lr}
 80026de:	4d0d      	ldr	r5, [pc, #52]	@ (8002714 <__libc_init_array+0x38>)
 80026e0:	4c0d      	ldr	r4, [pc, #52]	@ (8002718 <__libc_init_array+0x3c>)
 80026e2:	1b64      	subs	r4, r4, r5
 80026e4:	10a4      	asrs	r4, r4, #2
 80026e6:	2600      	movs	r6, #0
 80026e8:	42a6      	cmp	r6, r4
 80026ea:	d109      	bne.n	8002700 <__libc_init_array+0x24>
 80026ec:	4d0b      	ldr	r5, [pc, #44]	@ (800271c <__libc_init_array+0x40>)
 80026ee:	4c0c      	ldr	r4, [pc, #48]	@ (8002720 <__libc_init_array+0x44>)
 80026f0:	f000 ff6c 	bl	80035cc <_init>
 80026f4:	1b64      	subs	r4, r4, r5
 80026f6:	10a4      	asrs	r4, r4, #2
 80026f8:	2600      	movs	r6, #0
 80026fa:	42a6      	cmp	r6, r4
 80026fc:	d105      	bne.n	800270a <__libc_init_array+0x2e>
 80026fe:	bd70      	pop	{r4, r5, r6, pc}
 8002700:	f855 3b04 	ldr.w	r3, [r5], #4
 8002704:	4798      	blx	r3
 8002706:	3601      	adds	r6, #1
 8002708:	e7ee      	b.n	80026e8 <__libc_init_array+0xc>
 800270a:	f855 3b04 	ldr.w	r3, [r5], #4
 800270e:	4798      	blx	r3
 8002710:	3601      	adds	r6, #1
 8002712:	e7f2      	b.n	80026fa <__libc_init_array+0x1e>
 8002714:	08003654 	.word	0x08003654
 8002718:	08003654 	.word	0x08003654
 800271c:	08003654 	.word	0x08003654
 8002720:	08003658 	.word	0x08003658

08002724 <__retarget_lock_init_recursive>:
 8002724:	4770      	bx	lr

08002726 <__retarget_lock_acquire_recursive>:
 8002726:	4770      	bx	lr

08002728 <__retarget_lock_release_recursive>:
 8002728:	4770      	bx	lr
	...

0800272c <_free_r>:
 800272c:	b538      	push	{r3, r4, r5, lr}
 800272e:	4605      	mov	r5, r0
 8002730:	2900      	cmp	r1, #0
 8002732:	d041      	beq.n	80027b8 <_free_r+0x8c>
 8002734:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002738:	1f0c      	subs	r4, r1, #4
 800273a:	2b00      	cmp	r3, #0
 800273c:	bfb8      	it	lt
 800273e:	18e4      	addlt	r4, r4, r3
 8002740:	f000 f8e0 	bl	8002904 <__malloc_lock>
 8002744:	4a1d      	ldr	r2, [pc, #116]	@ (80027bc <_free_r+0x90>)
 8002746:	6813      	ldr	r3, [r2, #0]
 8002748:	b933      	cbnz	r3, 8002758 <_free_r+0x2c>
 800274a:	6063      	str	r3, [r4, #4]
 800274c:	6014      	str	r4, [r2, #0]
 800274e:	4628      	mov	r0, r5
 8002750:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002754:	f000 b8dc 	b.w	8002910 <__malloc_unlock>
 8002758:	42a3      	cmp	r3, r4
 800275a:	d908      	bls.n	800276e <_free_r+0x42>
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	1821      	adds	r1, r4, r0
 8002760:	428b      	cmp	r3, r1
 8002762:	bf01      	itttt	eq
 8002764:	6819      	ldreq	r1, [r3, #0]
 8002766:	685b      	ldreq	r3, [r3, #4]
 8002768:	1809      	addeq	r1, r1, r0
 800276a:	6021      	streq	r1, [r4, #0]
 800276c:	e7ed      	b.n	800274a <_free_r+0x1e>
 800276e:	461a      	mov	r2, r3
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b10b      	cbz	r3, 8002778 <_free_r+0x4c>
 8002774:	42a3      	cmp	r3, r4
 8002776:	d9fa      	bls.n	800276e <_free_r+0x42>
 8002778:	6811      	ldr	r1, [r2, #0]
 800277a:	1850      	adds	r0, r2, r1
 800277c:	42a0      	cmp	r0, r4
 800277e:	d10b      	bne.n	8002798 <_free_r+0x6c>
 8002780:	6820      	ldr	r0, [r4, #0]
 8002782:	4401      	add	r1, r0
 8002784:	1850      	adds	r0, r2, r1
 8002786:	4283      	cmp	r3, r0
 8002788:	6011      	str	r1, [r2, #0]
 800278a:	d1e0      	bne.n	800274e <_free_r+0x22>
 800278c:	6818      	ldr	r0, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	6053      	str	r3, [r2, #4]
 8002792:	4408      	add	r0, r1
 8002794:	6010      	str	r0, [r2, #0]
 8002796:	e7da      	b.n	800274e <_free_r+0x22>
 8002798:	d902      	bls.n	80027a0 <_free_r+0x74>
 800279a:	230c      	movs	r3, #12
 800279c:	602b      	str	r3, [r5, #0]
 800279e:	e7d6      	b.n	800274e <_free_r+0x22>
 80027a0:	6820      	ldr	r0, [r4, #0]
 80027a2:	1821      	adds	r1, r4, r0
 80027a4:	428b      	cmp	r3, r1
 80027a6:	bf04      	itt	eq
 80027a8:	6819      	ldreq	r1, [r3, #0]
 80027aa:	685b      	ldreq	r3, [r3, #4]
 80027ac:	6063      	str	r3, [r4, #4]
 80027ae:	bf04      	itt	eq
 80027b0:	1809      	addeq	r1, r1, r0
 80027b2:	6021      	streq	r1, [r4, #0]
 80027b4:	6054      	str	r4, [r2, #4]
 80027b6:	e7ca      	b.n	800274e <_free_r+0x22>
 80027b8:	bd38      	pop	{r3, r4, r5, pc}
 80027ba:	bf00      	nop
 80027bc:	240001e0 	.word	0x240001e0

080027c0 <sbrk_aligned>:
 80027c0:	b570      	push	{r4, r5, r6, lr}
 80027c2:	4e0f      	ldr	r6, [pc, #60]	@ (8002800 <sbrk_aligned+0x40>)
 80027c4:	460c      	mov	r4, r1
 80027c6:	6831      	ldr	r1, [r6, #0]
 80027c8:	4605      	mov	r5, r0
 80027ca:	b911      	cbnz	r1, 80027d2 <sbrk_aligned+0x12>
 80027cc:	f000 fe26 	bl	800341c <_sbrk_r>
 80027d0:	6030      	str	r0, [r6, #0]
 80027d2:	4621      	mov	r1, r4
 80027d4:	4628      	mov	r0, r5
 80027d6:	f000 fe21 	bl	800341c <_sbrk_r>
 80027da:	1c43      	adds	r3, r0, #1
 80027dc:	d103      	bne.n	80027e6 <sbrk_aligned+0x26>
 80027de:	f04f 34ff 	mov.w	r4, #4294967295
 80027e2:	4620      	mov	r0, r4
 80027e4:	bd70      	pop	{r4, r5, r6, pc}
 80027e6:	1cc4      	adds	r4, r0, #3
 80027e8:	f024 0403 	bic.w	r4, r4, #3
 80027ec:	42a0      	cmp	r0, r4
 80027ee:	d0f8      	beq.n	80027e2 <sbrk_aligned+0x22>
 80027f0:	1a21      	subs	r1, r4, r0
 80027f2:	4628      	mov	r0, r5
 80027f4:	f000 fe12 	bl	800341c <_sbrk_r>
 80027f8:	3001      	adds	r0, #1
 80027fa:	d1f2      	bne.n	80027e2 <sbrk_aligned+0x22>
 80027fc:	e7ef      	b.n	80027de <sbrk_aligned+0x1e>
 80027fe:	bf00      	nop
 8002800:	240001dc 	.word	0x240001dc

08002804 <_malloc_r>:
 8002804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002808:	1ccd      	adds	r5, r1, #3
 800280a:	f025 0503 	bic.w	r5, r5, #3
 800280e:	3508      	adds	r5, #8
 8002810:	2d0c      	cmp	r5, #12
 8002812:	bf38      	it	cc
 8002814:	250c      	movcc	r5, #12
 8002816:	2d00      	cmp	r5, #0
 8002818:	4606      	mov	r6, r0
 800281a:	db01      	blt.n	8002820 <_malloc_r+0x1c>
 800281c:	42a9      	cmp	r1, r5
 800281e:	d904      	bls.n	800282a <_malloc_r+0x26>
 8002820:	230c      	movs	r3, #12
 8002822:	6033      	str	r3, [r6, #0]
 8002824:	2000      	movs	r0, #0
 8002826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800282a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002900 <_malloc_r+0xfc>
 800282e:	f000 f869 	bl	8002904 <__malloc_lock>
 8002832:	f8d8 3000 	ldr.w	r3, [r8]
 8002836:	461c      	mov	r4, r3
 8002838:	bb44      	cbnz	r4, 800288c <_malloc_r+0x88>
 800283a:	4629      	mov	r1, r5
 800283c:	4630      	mov	r0, r6
 800283e:	f7ff ffbf 	bl	80027c0 <sbrk_aligned>
 8002842:	1c43      	adds	r3, r0, #1
 8002844:	4604      	mov	r4, r0
 8002846:	d158      	bne.n	80028fa <_malloc_r+0xf6>
 8002848:	f8d8 4000 	ldr.w	r4, [r8]
 800284c:	4627      	mov	r7, r4
 800284e:	2f00      	cmp	r7, #0
 8002850:	d143      	bne.n	80028da <_malloc_r+0xd6>
 8002852:	2c00      	cmp	r4, #0
 8002854:	d04b      	beq.n	80028ee <_malloc_r+0xea>
 8002856:	6823      	ldr	r3, [r4, #0]
 8002858:	4639      	mov	r1, r7
 800285a:	4630      	mov	r0, r6
 800285c:	eb04 0903 	add.w	r9, r4, r3
 8002860:	f000 fddc 	bl	800341c <_sbrk_r>
 8002864:	4581      	cmp	r9, r0
 8002866:	d142      	bne.n	80028ee <_malloc_r+0xea>
 8002868:	6821      	ldr	r1, [r4, #0]
 800286a:	1a6d      	subs	r5, r5, r1
 800286c:	4629      	mov	r1, r5
 800286e:	4630      	mov	r0, r6
 8002870:	f7ff ffa6 	bl	80027c0 <sbrk_aligned>
 8002874:	3001      	adds	r0, #1
 8002876:	d03a      	beq.n	80028ee <_malloc_r+0xea>
 8002878:	6823      	ldr	r3, [r4, #0]
 800287a:	442b      	add	r3, r5
 800287c:	6023      	str	r3, [r4, #0]
 800287e:	f8d8 3000 	ldr.w	r3, [r8]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	bb62      	cbnz	r2, 80028e0 <_malloc_r+0xdc>
 8002886:	f8c8 7000 	str.w	r7, [r8]
 800288a:	e00f      	b.n	80028ac <_malloc_r+0xa8>
 800288c:	6822      	ldr	r2, [r4, #0]
 800288e:	1b52      	subs	r2, r2, r5
 8002890:	d420      	bmi.n	80028d4 <_malloc_r+0xd0>
 8002892:	2a0b      	cmp	r2, #11
 8002894:	d917      	bls.n	80028c6 <_malloc_r+0xc2>
 8002896:	1961      	adds	r1, r4, r5
 8002898:	42a3      	cmp	r3, r4
 800289a:	6025      	str	r5, [r4, #0]
 800289c:	bf18      	it	ne
 800289e:	6059      	strne	r1, [r3, #4]
 80028a0:	6863      	ldr	r3, [r4, #4]
 80028a2:	bf08      	it	eq
 80028a4:	f8c8 1000 	streq.w	r1, [r8]
 80028a8:	5162      	str	r2, [r4, r5]
 80028aa:	604b      	str	r3, [r1, #4]
 80028ac:	4630      	mov	r0, r6
 80028ae:	f000 f82f 	bl	8002910 <__malloc_unlock>
 80028b2:	f104 000b 	add.w	r0, r4, #11
 80028b6:	1d23      	adds	r3, r4, #4
 80028b8:	f020 0007 	bic.w	r0, r0, #7
 80028bc:	1ac2      	subs	r2, r0, r3
 80028be:	bf1c      	itt	ne
 80028c0:	1a1b      	subne	r3, r3, r0
 80028c2:	50a3      	strne	r3, [r4, r2]
 80028c4:	e7af      	b.n	8002826 <_malloc_r+0x22>
 80028c6:	6862      	ldr	r2, [r4, #4]
 80028c8:	42a3      	cmp	r3, r4
 80028ca:	bf0c      	ite	eq
 80028cc:	f8c8 2000 	streq.w	r2, [r8]
 80028d0:	605a      	strne	r2, [r3, #4]
 80028d2:	e7eb      	b.n	80028ac <_malloc_r+0xa8>
 80028d4:	4623      	mov	r3, r4
 80028d6:	6864      	ldr	r4, [r4, #4]
 80028d8:	e7ae      	b.n	8002838 <_malloc_r+0x34>
 80028da:	463c      	mov	r4, r7
 80028dc:	687f      	ldr	r7, [r7, #4]
 80028de:	e7b6      	b.n	800284e <_malloc_r+0x4a>
 80028e0:	461a      	mov	r2, r3
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	42a3      	cmp	r3, r4
 80028e6:	d1fb      	bne.n	80028e0 <_malloc_r+0xdc>
 80028e8:	2300      	movs	r3, #0
 80028ea:	6053      	str	r3, [r2, #4]
 80028ec:	e7de      	b.n	80028ac <_malloc_r+0xa8>
 80028ee:	230c      	movs	r3, #12
 80028f0:	6033      	str	r3, [r6, #0]
 80028f2:	4630      	mov	r0, r6
 80028f4:	f000 f80c 	bl	8002910 <__malloc_unlock>
 80028f8:	e794      	b.n	8002824 <_malloc_r+0x20>
 80028fa:	6005      	str	r5, [r0, #0]
 80028fc:	e7d6      	b.n	80028ac <_malloc_r+0xa8>
 80028fe:	bf00      	nop
 8002900:	240001e0 	.word	0x240001e0

08002904 <__malloc_lock>:
 8002904:	4801      	ldr	r0, [pc, #4]	@ (800290c <__malloc_lock+0x8>)
 8002906:	f7ff bf0e 	b.w	8002726 <__retarget_lock_acquire_recursive>
 800290a:	bf00      	nop
 800290c:	240001d8 	.word	0x240001d8

08002910 <__malloc_unlock>:
 8002910:	4801      	ldr	r0, [pc, #4]	@ (8002918 <__malloc_unlock+0x8>)
 8002912:	f7ff bf09 	b.w	8002728 <__retarget_lock_release_recursive>
 8002916:	bf00      	nop
 8002918:	240001d8 	.word	0x240001d8

0800291c <__ssputs_r>:
 800291c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002920:	688e      	ldr	r6, [r1, #8]
 8002922:	461f      	mov	r7, r3
 8002924:	42be      	cmp	r6, r7
 8002926:	680b      	ldr	r3, [r1, #0]
 8002928:	4682      	mov	sl, r0
 800292a:	460c      	mov	r4, r1
 800292c:	4690      	mov	r8, r2
 800292e:	d82d      	bhi.n	800298c <__ssputs_r+0x70>
 8002930:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002934:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002938:	d026      	beq.n	8002988 <__ssputs_r+0x6c>
 800293a:	6965      	ldr	r5, [r4, #20]
 800293c:	6909      	ldr	r1, [r1, #16]
 800293e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002942:	eba3 0901 	sub.w	r9, r3, r1
 8002946:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800294a:	1c7b      	adds	r3, r7, #1
 800294c:	444b      	add	r3, r9
 800294e:	106d      	asrs	r5, r5, #1
 8002950:	429d      	cmp	r5, r3
 8002952:	bf38      	it	cc
 8002954:	461d      	movcc	r5, r3
 8002956:	0553      	lsls	r3, r2, #21
 8002958:	d527      	bpl.n	80029aa <__ssputs_r+0x8e>
 800295a:	4629      	mov	r1, r5
 800295c:	f7ff ff52 	bl	8002804 <_malloc_r>
 8002960:	4606      	mov	r6, r0
 8002962:	b360      	cbz	r0, 80029be <__ssputs_r+0xa2>
 8002964:	6921      	ldr	r1, [r4, #16]
 8002966:	464a      	mov	r2, r9
 8002968:	f000 fd68 	bl	800343c <memcpy>
 800296c:	89a3      	ldrh	r3, [r4, #12]
 800296e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002972:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002976:	81a3      	strh	r3, [r4, #12]
 8002978:	6126      	str	r6, [r4, #16]
 800297a:	6165      	str	r5, [r4, #20]
 800297c:	444e      	add	r6, r9
 800297e:	eba5 0509 	sub.w	r5, r5, r9
 8002982:	6026      	str	r6, [r4, #0]
 8002984:	60a5      	str	r5, [r4, #8]
 8002986:	463e      	mov	r6, r7
 8002988:	42be      	cmp	r6, r7
 800298a:	d900      	bls.n	800298e <__ssputs_r+0x72>
 800298c:	463e      	mov	r6, r7
 800298e:	6820      	ldr	r0, [r4, #0]
 8002990:	4632      	mov	r2, r6
 8002992:	4641      	mov	r1, r8
 8002994:	f000 fd28 	bl	80033e8 <memmove>
 8002998:	68a3      	ldr	r3, [r4, #8]
 800299a:	1b9b      	subs	r3, r3, r6
 800299c:	60a3      	str	r3, [r4, #8]
 800299e:	6823      	ldr	r3, [r4, #0]
 80029a0:	4433      	add	r3, r6
 80029a2:	6023      	str	r3, [r4, #0]
 80029a4:	2000      	movs	r0, #0
 80029a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029aa:	462a      	mov	r2, r5
 80029ac:	f000 fd54 	bl	8003458 <_realloc_r>
 80029b0:	4606      	mov	r6, r0
 80029b2:	2800      	cmp	r0, #0
 80029b4:	d1e0      	bne.n	8002978 <__ssputs_r+0x5c>
 80029b6:	6921      	ldr	r1, [r4, #16]
 80029b8:	4650      	mov	r0, sl
 80029ba:	f7ff feb7 	bl	800272c <_free_r>
 80029be:	230c      	movs	r3, #12
 80029c0:	f8ca 3000 	str.w	r3, [sl]
 80029c4:	89a3      	ldrh	r3, [r4, #12]
 80029c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80029ca:	81a3      	strh	r3, [r4, #12]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295
 80029d0:	e7e9      	b.n	80029a6 <__ssputs_r+0x8a>
	...

080029d4 <_svfiprintf_r>:
 80029d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d8:	4698      	mov	r8, r3
 80029da:	898b      	ldrh	r3, [r1, #12]
 80029dc:	061b      	lsls	r3, r3, #24
 80029de:	b09d      	sub	sp, #116	@ 0x74
 80029e0:	4607      	mov	r7, r0
 80029e2:	460d      	mov	r5, r1
 80029e4:	4614      	mov	r4, r2
 80029e6:	d510      	bpl.n	8002a0a <_svfiprintf_r+0x36>
 80029e8:	690b      	ldr	r3, [r1, #16]
 80029ea:	b973      	cbnz	r3, 8002a0a <_svfiprintf_r+0x36>
 80029ec:	2140      	movs	r1, #64	@ 0x40
 80029ee:	f7ff ff09 	bl	8002804 <_malloc_r>
 80029f2:	6028      	str	r0, [r5, #0]
 80029f4:	6128      	str	r0, [r5, #16]
 80029f6:	b930      	cbnz	r0, 8002a06 <_svfiprintf_r+0x32>
 80029f8:	230c      	movs	r3, #12
 80029fa:	603b      	str	r3, [r7, #0]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	b01d      	add	sp, #116	@ 0x74
 8002a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a06:	2340      	movs	r3, #64	@ 0x40
 8002a08:	616b      	str	r3, [r5, #20]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002a0e:	2320      	movs	r3, #32
 8002a10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002a14:	f8cd 800c 	str.w	r8, [sp, #12]
 8002a18:	2330      	movs	r3, #48	@ 0x30
 8002a1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8002bb8 <_svfiprintf_r+0x1e4>
 8002a1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002a22:	f04f 0901 	mov.w	r9, #1
 8002a26:	4623      	mov	r3, r4
 8002a28:	469a      	mov	sl, r3
 8002a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002a2e:	b10a      	cbz	r2, 8002a34 <_svfiprintf_r+0x60>
 8002a30:	2a25      	cmp	r2, #37	@ 0x25
 8002a32:	d1f9      	bne.n	8002a28 <_svfiprintf_r+0x54>
 8002a34:	ebba 0b04 	subs.w	fp, sl, r4
 8002a38:	d00b      	beq.n	8002a52 <_svfiprintf_r+0x7e>
 8002a3a:	465b      	mov	r3, fp
 8002a3c:	4622      	mov	r2, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	4638      	mov	r0, r7
 8002a42:	f7ff ff6b 	bl	800291c <__ssputs_r>
 8002a46:	3001      	adds	r0, #1
 8002a48:	f000 80a7 	beq.w	8002b9a <_svfiprintf_r+0x1c6>
 8002a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002a4e:	445a      	add	r2, fp
 8002a50:	9209      	str	r2, [sp, #36]	@ 0x24
 8002a52:	f89a 3000 	ldrb.w	r3, [sl]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 809f 	beq.w	8002b9a <_svfiprintf_r+0x1c6>
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f04f 32ff 	mov.w	r2, #4294967295
 8002a62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002a66:	f10a 0a01 	add.w	sl, sl, #1
 8002a6a:	9304      	str	r3, [sp, #16]
 8002a6c:	9307      	str	r3, [sp, #28]
 8002a6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002a72:	931a      	str	r3, [sp, #104]	@ 0x68
 8002a74:	4654      	mov	r4, sl
 8002a76:	2205      	movs	r2, #5
 8002a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a7c:	484e      	ldr	r0, [pc, #312]	@ (8002bb8 <_svfiprintf_r+0x1e4>)
 8002a7e:	f7fd fc2f 	bl	80002e0 <memchr>
 8002a82:	9a04      	ldr	r2, [sp, #16]
 8002a84:	b9d8      	cbnz	r0, 8002abe <_svfiprintf_r+0xea>
 8002a86:	06d0      	lsls	r0, r2, #27
 8002a88:	bf44      	itt	mi
 8002a8a:	2320      	movmi	r3, #32
 8002a8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a90:	0711      	lsls	r1, r2, #28
 8002a92:	bf44      	itt	mi
 8002a94:	232b      	movmi	r3, #43	@ 0x2b
 8002a96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a9a:	f89a 3000 	ldrb.w	r3, [sl]
 8002a9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002aa0:	d015      	beq.n	8002ace <_svfiprintf_r+0xfa>
 8002aa2:	9a07      	ldr	r2, [sp, #28]
 8002aa4:	4654      	mov	r4, sl
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f04f 0c0a 	mov.w	ip, #10
 8002aac:	4621      	mov	r1, r4
 8002aae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002ab2:	3b30      	subs	r3, #48	@ 0x30
 8002ab4:	2b09      	cmp	r3, #9
 8002ab6:	d94b      	bls.n	8002b50 <_svfiprintf_r+0x17c>
 8002ab8:	b1b0      	cbz	r0, 8002ae8 <_svfiprintf_r+0x114>
 8002aba:	9207      	str	r2, [sp, #28]
 8002abc:	e014      	b.n	8002ae8 <_svfiprintf_r+0x114>
 8002abe:	eba0 0308 	sub.w	r3, r0, r8
 8002ac2:	fa09 f303 	lsl.w	r3, r9, r3
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	9304      	str	r3, [sp, #16]
 8002aca:	46a2      	mov	sl, r4
 8002acc:	e7d2      	b.n	8002a74 <_svfiprintf_r+0xa0>
 8002ace:	9b03      	ldr	r3, [sp, #12]
 8002ad0:	1d19      	adds	r1, r3, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	9103      	str	r1, [sp, #12]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	bfbb      	ittet	lt
 8002ada:	425b      	neglt	r3, r3
 8002adc:	f042 0202 	orrlt.w	r2, r2, #2
 8002ae0:	9307      	strge	r3, [sp, #28]
 8002ae2:	9307      	strlt	r3, [sp, #28]
 8002ae4:	bfb8      	it	lt
 8002ae6:	9204      	strlt	r2, [sp, #16]
 8002ae8:	7823      	ldrb	r3, [r4, #0]
 8002aea:	2b2e      	cmp	r3, #46	@ 0x2e
 8002aec:	d10a      	bne.n	8002b04 <_svfiprintf_r+0x130>
 8002aee:	7863      	ldrb	r3, [r4, #1]
 8002af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8002af2:	d132      	bne.n	8002b5a <_svfiprintf_r+0x186>
 8002af4:	9b03      	ldr	r3, [sp, #12]
 8002af6:	1d1a      	adds	r2, r3, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	9203      	str	r2, [sp, #12]
 8002afc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002b00:	3402      	adds	r4, #2
 8002b02:	9305      	str	r3, [sp, #20]
 8002b04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8002bc8 <_svfiprintf_r+0x1f4>
 8002b08:	7821      	ldrb	r1, [r4, #0]
 8002b0a:	2203      	movs	r2, #3
 8002b0c:	4650      	mov	r0, sl
 8002b0e:	f7fd fbe7 	bl	80002e0 <memchr>
 8002b12:	b138      	cbz	r0, 8002b24 <_svfiprintf_r+0x150>
 8002b14:	9b04      	ldr	r3, [sp, #16]
 8002b16:	eba0 000a 	sub.w	r0, r0, sl
 8002b1a:	2240      	movs	r2, #64	@ 0x40
 8002b1c:	4082      	lsls	r2, r0
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	3401      	adds	r4, #1
 8002b22:	9304      	str	r3, [sp, #16]
 8002b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b28:	4824      	ldr	r0, [pc, #144]	@ (8002bbc <_svfiprintf_r+0x1e8>)
 8002b2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002b2e:	2206      	movs	r2, #6
 8002b30:	f7fd fbd6 	bl	80002e0 <memchr>
 8002b34:	2800      	cmp	r0, #0
 8002b36:	d036      	beq.n	8002ba6 <_svfiprintf_r+0x1d2>
 8002b38:	4b21      	ldr	r3, [pc, #132]	@ (8002bc0 <_svfiprintf_r+0x1ec>)
 8002b3a:	bb1b      	cbnz	r3, 8002b84 <_svfiprintf_r+0x1b0>
 8002b3c:	9b03      	ldr	r3, [sp, #12]
 8002b3e:	3307      	adds	r3, #7
 8002b40:	f023 0307 	bic.w	r3, r3, #7
 8002b44:	3308      	adds	r3, #8
 8002b46:	9303      	str	r3, [sp, #12]
 8002b48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002b4a:	4433      	add	r3, r6
 8002b4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8002b4e:	e76a      	b.n	8002a26 <_svfiprintf_r+0x52>
 8002b50:	fb0c 3202 	mla	r2, ip, r2, r3
 8002b54:	460c      	mov	r4, r1
 8002b56:	2001      	movs	r0, #1
 8002b58:	e7a8      	b.n	8002aac <_svfiprintf_r+0xd8>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	3401      	adds	r4, #1
 8002b5e:	9305      	str	r3, [sp, #20]
 8002b60:	4619      	mov	r1, r3
 8002b62:	f04f 0c0a 	mov.w	ip, #10
 8002b66:	4620      	mov	r0, r4
 8002b68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002b6c:	3a30      	subs	r2, #48	@ 0x30
 8002b6e:	2a09      	cmp	r2, #9
 8002b70:	d903      	bls.n	8002b7a <_svfiprintf_r+0x1a6>
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0c6      	beq.n	8002b04 <_svfiprintf_r+0x130>
 8002b76:	9105      	str	r1, [sp, #20]
 8002b78:	e7c4      	b.n	8002b04 <_svfiprintf_r+0x130>
 8002b7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b7e:	4604      	mov	r4, r0
 8002b80:	2301      	movs	r3, #1
 8002b82:	e7f0      	b.n	8002b66 <_svfiprintf_r+0x192>
 8002b84:	ab03      	add	r3, sp, #12
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	462a      	mov	r2, r5
 8002b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc4 <_svfiprintf_r+0x1f0>)
 8002b8c:	a904      	add	r1, sp, #16
 8002b8e:	4638      	mov	r0, r7
 8002b90:	f3af 8000 	nop.w
 8002b94:	1c42      	adds	r2, r0, #1
 8002b96:	4606      	mov	r6, r0
 8002b98:	d1d6      	bne.n	8002b48 <_svfiprintf_r+0x174>
 8002b9a:	89ab      	ldrh	r3, [r5, #12]
 8002b9c:	065b      	lsls	r3, r3, #25
 8002b9e:	f53f af2d 	bmi.w	80029fc <_svfiprintf_r+0x28>
 8002ba2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ba4:	e72c      	b.n	8002a00 <_svfiprintf_r+0x2c>
 8002ba6:	ab03      	add	r3, sp, #12
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	462a      	mov	r2, r5
 8002bac:	4b05      	ldr	r3, [pc, #20]	@ (8002bc4 <_svfiprintf_r+0x1f0>)
 8002bae:	a904      	add	r1, sp, #16
 8002bb0:	4638      	mov	r0, r7
 8002bb2:	f000 f9bb 	bl	8002f2c <_printf_i>
 8002bb6:	e7ed      	b.n	8002b94 <_svfiprintf_r+0x1c0>
 8002bb8:	08003618 	.word	0x08003618
 8002bbc:	08003622 	.word	0x08003622
 8002bc0:	00000000 	.word	0x00000000
 8002bc4:	0800291d 	.word	0x0800291d
 8002bc8:	0800361e 	.word	0x0800361e

08002bcc <__sfputc_r>:
 8002bcc:	6893      	ldr	r3, [r2, #8]
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	b410      	push	{r4}
 8002bd4:	6093      	str	r3, [r2, #8]
 8002bd6:	da08      	bge.n	8002bea <__sfputc_r+0x1e>
 8002bd8:	6994      	ldr	r4, [r2, #24]
 8002bda:	42a3      	cmp	r3, r4
 8002bdc:	db01      	blt.n	8002be2 <__sfputc_r+0x16>
 8002bde:	290a      	cmp	r1, #10
 8002be0:	d103      	bne.n	8002bea <__sfputc_r+0x1e>
 8002be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002be6:	f000 bb6b 	b.w	80032c0 <__swbuf_r>
 8002bea:	6813      	ldr	r3, [r2, #0]
 8002bec:	1c58      	adds	r0, r3, #1
 8002bee:	6010      	str	r0, [r2, #0]
 8002bf0:	7019      	strb	r1, [r3, #0]
 8002bf2:	4608      	mov	r0, r1
 8002bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <__sfputs_r>:
 8002bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfc:	4606      	mov	r6, r0
 8002bfe:	460f      	mov	r7, r1
 8002c00:	4614      	mov	r4, r2
 8002c02:	18d5      	adds	r5, r2, r3
 8002c04:	42ac      	cmp	r4, r5
 8002c06:	d101      	bne.n	8002c0c <__sfputs_r+0x12>
 8002c08:	2000      	movs	r0, #0
 8002c0a:	e007      	b.n	8002c1c <__sfputs_r+0x22>
 8002c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c10:	463a      	mov	r2, r7
 8002c12:	4630      	mov	r0, r6
 8002c14:	f7ff ffda 	bl	8002bcc <__sfputc_r>
 8002c18:	1c43      	adds	r3, r0, #1
 8002c1a:	d1f3      	bne.n	8002c04 <__sfputs_r+0xa>
 8002c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002c20 <_vfiprintf_r>:
 8002c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c24:	460d      	mov	r5, r1
 8002c26:	b09d      	sub	sp, #116	@ 0x74
 8002c28:	4614      	mov	r4, r2
 8002c2a:	4698      	mov	r8, r3
 8002c2c:	4606      	mov	r6, r0
 8002c2e:	b118      	cbz	r0, 8002c38 <_vfiprintf_r+0x18>
 8002c30:	6a03      	ldr	r3, [r0, #32]
 8002c32:	b90b      	cbnz	r3, 8002c38 <_vfiprintf_r+0x18>
 8002c34:	f7ff fc50 	bl	80024d8 <__sinit>
 8002c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c3a:	07d9      	lsls	r1, r3, #31
 8002c3c:	d405      	bmi.n	8002c4a <_vfiprintf_r+0x2a>
 8002c3e:	89ab      	ldrh	r3, [r5, #12]
 8002c40:	059a      	lsls	r2, r3, #22
 8002c42:	d402      	bmi.n	8002c4a <_vfiprintf_r+0x2a>
 8002c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c46:	f7ff fd6e 	bl	8002726 <__retarget_lock_acquire_recursive>
 8002c4a:	89ab      	ldrh	r3, [r5, #12]
 8002c4c:	071b      	lsls	r3, r3, #28
 8002c4e:	d501      	bpl.n	8002c54 <_vfiprintf_r+0x34>
 8002c50:	692b      	ldr	r3, [r5, #16]
 8002c52:	b99b      	cbnz	r3, 8002c7c <_vfiprintf_r+0x5c>
 8002c54:	4629      	mov	r1, r5
 8002c56:	4630      	mov	r0, r6
 8002c58:	f000 fb70 	bl	800333c <__swsetup_r>
 8002c5c:	b170      	cbz	r0, 8002c7c <_vfiprintf_r+0x5c>
 8002c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002c60:	07dc      	lsls	r4, r3, #31
 8002c62:	d504      	bpl.n	8002c6e <_vfiprintf_r+0x4e>
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	b01d      	add	sp, #116	@ 0x74
 8002c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c6e:	89ab      	ldrh	r3, [r5, #12]
 8002c70:	0598      	lsls	r0, r3, #22
 8002c72:	d4f7      	bmi.n	8002c64 <_vfiprintf_r+0x44>
 8002c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002c76:	f7ff fd57 	bl	8002728 <__retarget_lock_release_recursive>
 8002c7a:	e7f3      	b.n	8002c64 <_vfiprintf_r+0x44>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c80:	2320      	movs	r3, #32
 8002c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c8a:	2330      	movs	r3, #48	@ 0x30
 8002c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002e3c <_vfiprintf_r+0x21c>
 8002c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002c94:	f04f 0901 	mov.w	r9, #1
 8002c98:	4623      	mov	r3, r4
 8002c9a:	469a      	mov	sl, r3
 8002c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002ca0:	b10a      	cbz	r2, 8002ca6 <_vfiprintf_r+0x86>
 8002ca2:	2a25      	cmp	r2, #37	@ 0x25
 8002ca4:	d1f9      	bne.n	8002c9a <_vfiprintf_r+0x7a>
 8002ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8002caa:	d00b      	beq.n	8002cc4 <_vfiprintf_r+0xa4>
 8002cac:	465b      	mov	r3, fp
 8002cae:	4622      	mov	r2, r4
 8002cb0:	4629      	mov	r1, r5
 8002cb2:	4630      	mov	r0, r6
 8002cb4:	f7ff ffa1 	bl	8002bfa <__sfputs_r>
 8002cb8:	3001      	adds	r0, #1
 8002cba:	f000 80a7 	beq.w	8002e0c <_vfiprintf_r+0x1ec>
 8002cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002cc0:	445a      	add	r2, fp
 8002cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8002cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 809f 	beq.w	8002e0c <_vfiprintf_r+0x1ec>
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cd8:	f10a 0a01 	add.w	sl, sl, #1
 8002cdc:	9304      	str	r3, [sp, #16]
 8002cde:	9307      	str	r3, [sp, #28]
 8002ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8002ce6:	4654      	mov	r4, sl
 8002ce8:	2205      	movs	r2, #5
 8002cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cee:	4853      	ldr	r0, [pc, #332]	@ (8002e3c <_vfiprintf_r+0x21c>)
 8002cf0:	f7fd faf6 	bl	80002e0 <memchr>
 8002cf4:	9a04      	ldr	r2, [sp, #16]
 8002cf6:	b9d8      	cbnz	r0, 8002d30 <_vfiprintf_r+0x110>
 8002cf8:	06d1      	lsls	r1, r2, #27
 8002cfa:	bf44      	itt	mi
 8002cfc:	2320      	movmi	r3, #32
 8002cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d02:	0713      	lsls	r3, r2, #28
 8002d04:	bf44      	itt	mi
 8002d06:	232b      	movmi	r3, #43	@ 0x2b
 8002d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d12:	d015      	beq.n	8002d40 <_vfiprintf_r+0x120>
 8002d14:	9a07      	ldr	r2, [sp, #28]
 8002d16:	4654      	mov	r4, sl
 8002d18:	2000      	movs	r0, #0
 8002d1a:	f04f 0c0a 	mov.w	ip, #10
 8002d1e:	4621      	mov	r1, r4
 8002d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d24:	3b30      	subs	r3, #48	@ 0x30
 8002d26:	2b09      	cmp	r3, #9
 8002d28:	d94b      	bls.n	8002dc2 <_vfiprintf_r+0x1a2>
 8002d2a:	b1b0      	cbz	r0, 8002d5a <_vfiprintf_r+0x13a>
 8002d2c:	9207      	str	r2, [sp, #28]
 8002d2e:	e014      	b.n	8002d5a <_vfiprintf_r+0x13a>
 8002d30:	eba0 0308 	sub.w	r3, r0, r8
 8002d34:	fa09 f303 	lsl.w	r3, r9, r3
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	9304      	str	r3, [sp, #16]
 8002d3c:	46a2      	mov	sl, r4
 8002d3e:	e7d2      	b.n	8002ce6 <_vfiprintf_r+0xc6>
 8002d40:	9b03      	ldr	r3, [sp, #12]
 8002d42:	1d19      	adds	r1, r3, #4
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	9103      	str	r1, [sp, #12]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	bfbb      	ittet	lt
 8002d4c:	425b      	neglt	r3, r3
 8002d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8002d52:	9307      	strge	r3, [sp, #28]
 8002d54:	9307      	strlt	r3, [sp, #28]
 8002d56:	bfb8      	it	lt
 8002d58:	9204      	strlt	r2, [sp, #16]
 8002d5a:	7823      	ldrb	r3, [r4, #0]
 8002d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8002d5e:	d10a      	bne.n	8002d76 <_vfiprintf_r+0x156>
 8002d60:	7863      	ldrb	r3, [r4, #1]
 8002d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d64:	d132      	bne.n	8002dcc <_vfiprintf_r+0x1ac>
 8002d66:	9b03      	ldr	r3, [sp, #12]
 8002d68:	1d1a      	adds	r2, r3, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	9203      	str	r2, [sp, #12]
 8002d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002d72:	3402      	adds	r4, #2
 8002d74:	9305      	str	r3, [sp, #20]
 8002d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002e4c <_vfiprintf_r+0x22c>
 8002d7a:	7821      	ldrb	r1, [r4, #0]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	4650      	mov	r0, sl
 8002d80:	f7fd faae 	bl	80002e0 <memchr>
 8002d84:	b138      	cbz	r0, 8002d96 <_vfiprintf_r+0x176>
 8002d86:	9b04      	ldr	r3, [sp, #16]
 8002d88:	eba0 000a 	sub.w	r0, r0, sl
 8002d8c:	2240      	movs	r2, #64	@ 0x40
 8002d8e:	4082      	lsls	r2, r0
 8002d90:	4313      	orrs	r3, r2
 8002d92:	3401      	adds	r4, #1
 8002d94:	9304      	str	r3, [sp, #16]
 8002d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d9a:	4829      	ldr	r0, [pc, #164]	@ (8002e40 <_vfiprintf_r+0x220>)
 8002d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002da0:	2206      	movs	r2, #6
 8002da2:	f7fd fa9d 	bl	80002e0 <memchr>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d03f      	beq.n	8002e2a <_vfiprintf_r+0x20a>
 8002daa:	4b26      	ldr	r3, [pc, #152]	@ (8002e44 <_vfiprintf_r+0x224>)
 8002dac:	bb1b      	cbnz	r3, 8002df6 <_vfiprintf_r+0x1d6>
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	3307      	adds	r3, #7
 8002db2:	f023 0307 	bic.w	r3, r3, #7
 8002db6:	3308      	adds	r3, #8
 8002db8:	9303      	str	r3, [sp, #12]
 8002dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002dbc:	443b      	add	r3, r7
 8002dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002dc0:	e76a      	b.n	8002c98 <_vfiprintf_r+0x78>
 8002dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dc6:	460c      	mov	r4, r1
 8002dc8:	2001      	movs	r0, #1
 8002dca:	e7a8      	b.n	8002d1e <_vfiprintf_r+0xfe>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	3401      	adds	r4, #1
 8002dd0:	9305      	str	r3, [sp, #20]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	f04f 0c0a 	mov.w	ip, #10
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dde:	3a30      	subs	r2, #48	@ 0x30
 8002de0:	2a09      	cmp	r2, #9
 8002de2:	d903      	bls.n	8002dec <_vfiprintf_r+0x1cc>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0c6      	beq.n	8002d76 <_vfiprintf_r+0x156>
 8002de8:	9105      	str	r1, [sp, #20]
 8002dea:	e7c4      	b.n	8002d76 <_vfiprintf_r+0x156>
 8002dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8002df0:	4604      	mov	r4, r0
 8002df2:	2301      	movs	r3, #1
 8002df4:	e7f0      	b.n	8002dd8 <_vfiprintf_r+0x1b8>
 8002df6:	ab03      	add	r3, sp, #12
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	462a      	mov	r2, r5
 8002dfc:	4b12      	ldr	r3, [pc, #72]	@ (8002e48 <_vfiprintf_r+0x228>)
 8002dfe:	a904      	add	r1, sp, #16
 8002e00:	4630      	mov	r0, r6
 8002e02:	f3af 8000 	nop.w
 8002e06:	4607      	mov	r7, r0
 8002e08:	1c78      	adds	r0, r7, #1
 8002e0a:	d1d6      	bne.n	8002dba <_vfiprintf_r+0x19a>
 8002e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e0e:	07d9      	lsls	r1, r3, #31
 8002e10:	d405      	bmi.n	8002e1e <_vfiprintf_r+0x1fe>
 8002e12:	89ab      	ldrh	r3, [r5, #12]
 8002e14:	059a      	lsls	r2, r3, #22
 8002e16:	d402      	bmi.n	8002e1e <_vfiprintf_r+0x1fe>
 8002e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e1a:	f7ff fc85 	bl	8002728 <__retarget_lock_release_recursive>
 8002e1e:	89ab      	ldrh	r3, [r5, #12]
 8002e20:	065b      	lsls	r3, r3, #25
 8002e22:	f53f af1f 	bmi.w	8002c64 <_vfiprintf_r+0x44>
 8002e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002e28:	e71e      	b.n	8002c68 <_vfiprintf_r+0x48>
 8002e2a:	ab03      	add	r3, sp, #12
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	462a      	mov	r2, r5
 8002e30:	4b05      	ldr	r3, [pc, #20]	@ (8002e48 <_vfiprintf_r+0x228>)
 8002e32:	a904      	add	r1, sp, #16
 8002e34:	4630      	mov	r0, r6
 8002e36:	f000 f879 	bl	8002f2c <_printf_i>
 8002e3a:	e7e4      	b.n	8002e06 <_vfiprintf_r+0x1e6>
 8002e3c:	08003618 	.word	0x08003618
 8002e40:	08003622 	.word	0x08003622
 8002e44:	00000000 	.word	0x00000000
 8002e48:	08002bfb 	.word	0x08002bfb
 8002e4c:	0800361e 	.word	0x0800361e

08002e50 <_printf_common>:
 8002e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e54:	4616      	mov	r6, r2
 8002e56:	4698      	mov	r8, r3
 8002e58:	688a      	ldr	r2, [r1, #8]
 8002e5a:	690b      	ldr	r3, [r1, #16]
 8002e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002e60:	4293      	cmp	r3, r2
 8002e62:	bfb8      	it	lt
 8002e64:	4613      	movlt	r3, r2
 8002e66:	6033      	str	r3, [r6, #0]
 8002e68:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002e6c:	4607      	mov	r7, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	b10a      	cbz	r2, 8002e76 <_printf_common+0x26>
 8002e72:	3301      	adds	r3, #1
 8002e74:	6033      	str	r3, [r6, #0]
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	0699      	lsls	r1, r3, #26
 8002e7a:	bf42      	ittt	mi
 8002e7c:	6833      	ldrmi	r3, [r6, #0]
 8002e7e:	3302      	addmi	r3, #2
 8002e80:	6033      	strmi	r3, [r6, #0]
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	f015 0506 	ands.w	r5, r5, #6
 8002e88:	d106      	bne.n	8002e98 <_printf_common+0x48>
 8002e8a:	f104 0a19 	add.w	sl, r4, #25
 8002e8e:	68e3      	ldr	r3, [r4, #12]
 8002e90:	6832      	ldr	r2, [r6, #0]
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	42ab      	cmp	r3, r5
 8002e96:	dc26      	bgt.n	8002ee6 <_printf_common+0x96>
 8002e98:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002e9c:	6822      	ldr	r2, [r4, #0]
 8002e9e:	3b00      	subs	r3, #0
 8002ea0:	bf18      	it	ne
 8002ea2:	2301      	movne	r3, #1
 8002ea4:	0692      	lsls	r2, r2, #26
 8002ea6:	d42b      	bmi.n	8002f00 <_printf_common+0xb0>
 8002ea8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002eac:	4641      	mov	r1, r8
 8002eae:	4638      	mov	r0, r7
 8002eb0:	47c8      	blx	r9
 8002eb2:	3001      	adds	r0, #1
 8002eb4:	d01e      	beq.n	8002ef4 <_printf_common+0xa4>
 8002eb6:	6823      	ldr	r3, [r4, #0]
 8002eb8:	6922      	ldr	r2, [r4, #16]
 8002eba:	f003 0306 	and.w	r3, r3, #6
 8002ebe:	2b04      	cmp	r3, #4
 8002ec0:	bf02      	ittt	eq
 8002ec2:	68e5      	ldreq	r5, [r4, #12]
 8002ec4:	6833      	ldreq	r3, [r6, #0]
 8002ec6:	1aed      	subeq	r5, r5, r3
 8002ec8:	68a3      	ldr	r3, [r4, #8]
 8002eca:	bf0c      	ite	eq
 8002ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ed0:	2500      	movne	r5, #0
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	bfc4      	itt	gt
 8002ed6:	1a9b      	subgt	r3, r3, r2
 8002ed8:	18ed      	addgt	r5, r5, r3
 8002eda:	2600      	movs	r6, #0
 8002edc:	341a      	adds	r4, #26
 8002ede:	42b5      	cmp	r5, r6
 8002ee0:	d11a      	bne.n	8002f18 <_printf_common+0xc8>
 8002ee2:	2000      	movs	r0, #0
 8002ee4:	e008      	b.n	8002ef8 <_printf_common+0xa8>
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	4652      	mov	r2, sl
 8002eea:	4641      	mov	r1, r8
 8002eec:	4638      	mov	r0, r7
 8002eee:	47c8      	blx	r9
 8002ef0:	3001      	adds	r0, #1
 8002ef2:	d103      	bne.n	8002efc <_printf_common+0xac>
 8002ef4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002efc:	3501      	adds	r5, #1
 8002efe:	e7c6      	b.n	8002e8e <_printf_common+0x3e>
 8002f00:	18e1      	adds	r1, r4, r3
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	2030      	movs	r0, #48	@ 0x30
 8002f06:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f0a:	4422      	add	r2, r4
 8002f0c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f10:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f14:	3302      	adds	r3, #2
 8002f16:	e7c7      	b.n	8002ea8 <_printf_common+0x58>
 8002f18:	2301      	movs	r3, #1
 8002f1a:	4622      	mov	r2, r4
 8002f1c:	4641      	mov	r1, r8
 8002f1e:	4638      	mov	r0, r7
 8002f20:	47c8      	blx	r9
 8002f22:	3001      	adds	r0, #1
 8002f24:	d0e6      	beq.n	8002ef4 <_printf_common+0xa4>
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7d9      	b.n	8002ede <_printf_common+0x8e>
	...

08002f2c <_printf_i>:
 8002f2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f30:	7e0f      	ldrb	r7, [r1, #24]
 8002f32:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002f34:	2f78      	cmp	r7, #120	@ 0x78
 8002f36:	4691      	mov	r9, r2
 8002f38:	4680      	mov	r8, r0
 8002f3a:	460c      	mov	r4, r1
 8002f3c:	469a      	mov	sl, r3
 8002f3e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002f42:	d807      	bhi.n	8002f54 <_printf_i+0x28>
 8002f44:	2f62      	cmp	r7, #98	@ 0x62
 8002f46:	d80a      	bhi.n	8002f5e <_printf_i+0x32>
 8002f48:	2f00      	cmp	r7, #0
 8002f4a:	f000 80d1 	beq.w	80030f0 <_printf_i+0x1c4>
 8002f4e:	2f58      	cmp	r7, #88	@ 0x58
 8002f50:	f000 80b8 	beq.w	80030c4 <_printf_i+0x198>
 8002f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002f58:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002f5c:	e03a      	b.n	8002fd4 <_printf_i+0xa8>
 8002f5e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002f62:	2b15      	cmp	r3, #21
 8002f64:	d8f6      	bhi.n	8002f54 <_printf_i+0x28>
 8002f66:	a101      	add	r1, pc, #4	@ (adr r1, 8002f6c <_printf_i+0x40>)
 8002f68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f6c:	08002fc5 	.word	0x08002fc5
 8002f70:	08002fd9 	.word	0x08002fd9
 8002f74:	08002f55 	.word	0x08002f55
 8002f78:	08002f55 	.word	0x08002f55
 8002f7c:	08002f55 	.word	0x08002f55
 8002f80:	08002f55 	.word	0x08002f55
 8002f84:	08002fd9 	.word	0x08002fd9
 8002f88:	08002f55 	.word	0x08002f55
 8002f8c:	08002f55 	.word	0x08002f55
 8002f90:	08002f55 	.word	0x08002f55
 8002f94:	08002f55 	.word	0x08002f55
 8002f98:	080030d7 	.word	0x080030d7
 8002f9c:	08003003 	.word	0x08003003
 8002fa0:	08003091 	.word	0x08003091
 8002fa4:	08002f55 	.word	0x08002f55
 8002fa8:	08002f55 	.word	0x08002f55
 8002fac:	080030f9 	.word	0x080030f9
 8002fb0:	08002f55 	.word	0x08002f55
 8002fb4:	08003003 	.word	0x08003003
 8002fb8:	08002f55 	.word	0x08002f55
 8002fbc:	08002f55 	.word	0x08002f55
 8002fc0:	08003099 	.word	0x08003099
 8002fc4:	6833      	ldr	r3, [r6, #0]
 8002fc6:	1d1a      	adds	r2, r3, #4
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	6032      	str	r2, [r6, #0]
 8002fcc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fd0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e09c      	b.n	8003112 <_printf_i+0x1e6>
 8002fd8:	6833      	ldr	r3, [r6, #0]
 8002fda:	6820      	ldr	r0, [r4, #0]
 8002fdc:	1d19      	adds	r1, r3, #4
 8002fde:	6031      	str	r1, [r6, #0]
 8002fe0:	0606      	lsls	r6, r0, #24
 8002fe2:	d501      	bpl.n	8002fe8 <_printf_i+0xbc>
 8002fe4:	681d      	ldr	r5, [r3, #0]
 8002fe6:	e003      	b.n	8002ff0 <_printf_i+0xc4>
 8002fe8:	0645      	lsls	r5, r0, #25
 8002fea:	d5fb      	bpl.n	8002fe4 <_printf_i+0xb8>
 8002fec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002ff0:	2d00      	cmp	r5, #0
 8002ff2:	da03      	bge.n	8002ffc <_printf_i+0xd0>
 8002ff4:	232d      	movs	r3, #45	@ 0x2d
 8002ff6:	426d      	negs	r5, r5
 8002ff8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002ffc:	4858      	ldr	r0, [pc, #352]	@ (8003160 <_printf_i+0x234>)
 8002ffe:	230a      	movs	r3, #10
 8003000:	e011      	b.n	8003026 <_printf_i+0xfa>
 8003002:	6821      	ldr	r1, [r4, #0]
 8003004:	6833      	ldr	r3, [r6, #0]
 8003006:	0608      	lsls	r0, r1, #24
 8003008:	f853 5b04 	ldr.w	r5, [r3], #4
 800300c:	d402      	bmi.n	8003014 <_printf_i+0xe8>
 800300e:	0649      	lsls	r1, r1, #25
 8003010:	bf48      	it	mi
 8003012:	b2ad      	uxthmi	r5, r5
 8003014:	2f6f      	cmp	r7, #111	@ 0x6f
 8003016:	4852      	ldr	r0, [pc, #328]	@ (8003160 <_printf_i+0x234>)
 8003018:	6033      	str	r3, [r6, #0]
 800301a:	bf14      	ite	ne
 800301c:	230a      	movne	r3, #10
 800301e:	2308      	moveq	r3, #8
 8003020:	2100      	movs	r1, #0
 8003022:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003026:	6866      	ldr	r6, [r4, #4]
 8003028:	60a6      	str	r6, [r4, #8]
 800302a:	2e00      	cmp	r6, #0
 800302c:	db05      	blt.n	800303a <_printf_i+0x10e>
 800302e:	6821      	ldr	r1, [r4, #0]
 8003030:	432e      	orrs	r6, r5
 8003032:	f021 0104 	bic.w	r1, r1, #4
 8003036:	6021      	str	r1, [r4, #0]
 8003038:	d04b      	beq.n	80030d2 <_printf_i+0x1a6>
 800303a:	4616      	mov	r6, r2
 800303c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003040:	fb03 5711 	mls	r7, r3, r1, r5
 8003044:	5dc7      	ldrb	r7, [r0, r7]
 8003046:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800304a:	462f      	mov	r7, r5
 800304c:	42bb      	cmp	r3, r7
 800304e:	460d      	mov	r5, r1
 8003050:	d9f4      	bls.n	800303c <_printf_i+0x110>
 8003052:	2b08      	cmp	r3, #8
 8003054:	d10b      	bne.n	800306e <_printf_i+0x142>
 8003056:	6823      	ldr	r3, [r4, #0]
 8003058:	07df      	lsls	r7, r3, #31
 800305a:	d508      	bpl.n	800306e <_printf_i+0x142>
 800305c:	6923      	ldr	r3, [r4, #16]
 800305e:	6861      	ldr	r1, [r4, #4]
 8003060:	4299      	cmp	r1, r3
 8003062:	bfde      	ittt	le
 8003064:	2330      	movle	r3, #48	@ 0x30
 8003066:	f806 3c01 	strble.w	r3, [r6, #-1]
 800306a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800306e:	1b92      	subs	r2, r2, r6
 8003070:	6122      	str	r2, [r4, #16]
 8003072:	f8cd a000 	str.w	sl, [sp]
 8003076:	464b      	mov	r3, r9
 8003078:	aa03      	add	r2, sp, #12
 800307a:	4621      	mov	r1, r4
 800307c:	4640      	mov	r0, r8
 800307e:	f7ff fee7 	bl	8002e50 <_printf_common>
 8003082:	3001      	adds	r0, #1
 8003084:	d14a      	bne.n	800311c <_printf_i+0x1f0>
 8003086:	f04f 30ff 	mov.w	r0, #4294967295
 800308a:	b004      	add	sp, #16
 800308c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003090:	6823      	ldr	r3, [r4, #0]
 8003092:	f043 0320 	orr.w	r3, r3, #32
 8003096:	6023      	str	r3, [r4, #0]
 8003098:	4832      	ldr	r0, [pc, #200]	@ (8003164 <_printf_i+0x238>)
 800309a:	2778      	movs	r7, #120	@ 0x78
 800309c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80030a0:	6823      	ldr	r3, [r4, #0]
 80030a2:	6831      	ldr	r1, [r6, #0]
 80030a4:	061f      	lsls	r7, r3, #24
 80030a6:	f851 5b04 	ldr.w	r5, [r1], #4
 80030aa:	d402      	bmi.n	80030b2 <_printf_i+0x186>
 80030ac:	065f      	lsls	r7, r3, #25
 80030ae:	bf48      	it	mi
 80030b0:	b2ad      	uxthmi	r5, r5
 80030b2:	6031      	str	r1, [r6, #0]
 80030b4:	07d9      	lsls	r1, r3, #31
 80030b6:	bf44      	itt	mi
 80030b8:	f043 0320 	orrmi.w	r3, r3, #32
 80030bc:	6023      	strmi	r3, [r4, #0]
 80030be:	b11d      	cbz	r5, 80030c8 <_printf_i+0x19c>
 80030c0:	2310      	movs	r3, #16
 80030c2:	e7ad      	b.n	8003020 <_printf_i+0xf4>
 80030c4:	4826      	ldr	r0, [pc, #152]	@ (8003160 <_printf_i+0x234>)
 80030c6:	e7e9      	b.n	800309c <_printf_i+0x170>
 80030c8:	6823      	ldr	r3, [r4, #0]
 80030ca:	f023 0320 	bic.w	r3, r3, #32
 80030ce:	6023      	str	r3, [r4, #0]
 80030d0:	e7f6      	b.n	80030c0 <_printf_i+0x194>
 80030d2:	4616      	mov	r6, r2
 80030d4:	e7bd      	b.n	8003052 <_printf_i+0x126>
 80030d6:	6833      	ldr	r3, [r6, #0]
 80030d8:	6825      	ldr	r5, [r4, #0]
 80030da:	6961      	ldr	r1, [r4, #20]
 80030dc:	1d18      	adds	r0, r3, #4
 80030de:	6030      	str	r0, [r6, #0]
 80030e0:	062e      	lsls	r6, r5, #24
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	d501      	bpl.n	80030ea <_printf_i+0x1be>
 80030e6:	6019      	str	r1, [r3, #0]
 80030e8:	e002      	b.n	80030f0 <_printf_i+0x1c4>
 80030ea:	0668      	lsls	r0, r5, #25
 80030ec:	d5fb      	bpl.n	80030e6 <_printf_i+0x1ba>
 80030ee:	8019      	strh	r1, [r3, #0]
 80030f0:	2300      	movs	r3, #0
 80030f2:	6123      	str	r3, [r4, #16]
 80030f4:	4616      	mov	r6, r2
 80030f6:	e7bc      	b.n	8003072 <_printf_i+0x146>
 80030f8:	6833      	ldr	r3, [r6, #0]
 80030fa:	1d1a      	adds	r2, r3, #4
 80030fc:	6032      	str	r2, [r6, #0]
 80030fe:	681e      	ldr	r6, [r3, #0]
 8003100:	6862      	ldr	r2, [r4, #4]
 8003102:	2100      	movs	r1, #0
 8003104:	4630      	mov	r0, r6
 8003106:	f7fd f8eb 	bl	80002e0 <memchr>
 800310a:	b108      	cbz	r0, 8003110 <_printf_i+0x1e4>
 800310c:	1b80      	subs	r0, r0, r6
 800310e:	6060      	str	r0, [r4, #4]
 8003110:	6863      	ldr	r3, [r4, #4]
 8003112:	6123      	str	r3, [r4, #16]
 8003114:	2300      	movs	r3, #0
 8003116:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800311a:	e7aa      	b.n	8003072 <_printf_i+0x146>
 800311c:	6923      	ldr	r3, [r4, #16]
 800311e:	4632      	mov	r2, r6
 8003120:	4649      	mov	r1, r9
 8003122:	4640      	mov	r0, r8
 8003124:	47d0      	blx	sl
 8003126:	3001      	adds	r0, #1
 8003128:	d0ad      	beq.n	8003086 <_printf_i+0x15a>
 800312a:	6823      	ldr	r3, [r4, #0]
 800312c:	079b      	lsls	r3, r3, #30
 800312e:	d413      	bmi.n	8003158 <_printf_i+0x22c>
 8003130:	68e0      	ldr	r0, [r4, #12]
 8003132:	9b03      	ldr	r3, [sp, #12]
 8003134:	4298      	cmp	r0, r3
 8003136:	bfb8      	it	lt
 8003138:	4618      	movlt	r0, r3
 800313a:	e7a6      	b.n	800308a <_printf_i+0x15e>
 800313c:	2301      	movs	r3, #1
 800313e:	4632      	mov	r2, r6
 8003140:	4649      	mov	r1, r9
 8003142:	4640      	mov	r0, r8
 8003144:	47d0      	blx	sl
 8003146:	3001      	adds	r0, #1
 8003148:	d09d      	beq.n	8003086 <_printf_i+0x15a>
 800314a:	3501      	adds	r5, #1
 800314c:	68e3      	ldr	r3, [r4, #12]
 800314e:	9903      	ldr	r1, [sp, #12]
 8003150:	1a5b      	subs	r3, r3, r1
 8003152:	42ab      	cmp	r3, r5
 8003154:	dcf2      	bgt.n	800313c <_printf_i+0x210>
 8003156:	e7eb      	b.n	8003130 <_printf_i+0x204>
 8003158:	2500      	movs	r5, #0
 800315a:	f104 0619 	add.w	r6, r4, #25
 800315e:	e7f5      	b.n	800314c <_printf_i+0x220>
 8003160:	08003629 	.word	0x08003629
 8003164:	0800363a 	.word	0x0800363a

08003168 <__sflush_r>:
 8003168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800316c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003170:	0716      	lsls	r6, r2, #28
 8003172:	4605      	mov	r5, r0
 8003174:	460c      	mov	r4, r1
 8003176:	d454      	bmi.n	8003222 <__sflush_r+0xba>
 8003178:	684b      	ldr	r3, [r1, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	dc02      	bgt.n	8003184 <__sflush_r+0x1c>
 800317e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	dd48      	ble.n	8003216 <__sflush_r+0xae>
 8003184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003186:	2e00      	cmp	r6, #0
 8003188:	d045      	beq.n	8003216 <__sflush_r+0xae>
 800318a:	2300      	movs	r3, #0
 800318c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003190:	682f      	ldr	r7, [r5, #0]
 8003192:	6a21      	ldr	r1, [r4, #32]
 8003194:	602b      	str	r3, [r5, #0]
 8003196:	d030      	beq.n	80031fa <__sflush_r+0x92>
 8003198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800319a:	89a3      	ldrh	r3, [r4, #12]
 800319c:	0759      	lsls	r1, r3, #29
 800319e:	d505      	bpl.n	80031ac <__sflush_r+0x44>
 80031a0:	6863      	ldr	r3, [r4, #4]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80031a6:	b10b      	cbz	r3, 80031ac <__sflush_r+0x44>
 80031a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80031aa:	1ad2      	subs	r2, r2, r3
 80031ac:	2300      	movs	r3, #0
 80031ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80031b0:	6a21      	ldr	r1, [r4, #32]
 80031b2:	4628      	mov	r0, r5
 80031b4:	47b0      	blx	r6
 80031b6:	1c43      	adds	r3, r0, #1
 80031b8:	89a3      	ldrh	r3, [r4, #12]
 80031ba:	d106      	bne.n	80031ca <__sflush_r+0x62>
 80031bc:	6829      	ldr	r1, [r5, #0]
 80031be:	291d      	cmp	r1, #29
 80031c0:	d82b      	bhi.n	800321a <__sflush_r+0xb2>
 80031c2:	4a2a      	ldr	r2, [pc, #168]	@ (800326c <__sflush_r+0x104>)
 80031c4:	40ca      	lsrs	r2, r1
 80031c6:	07d6      	lsls	r6, r2, #31
 80031c8:	d527      	bpl.n	800321a <__sflush_r+0xb2>
 80031ca:	2200      	movs	r2, #0
 80031cc:	6062      	str	r2, [r4, #4]
 80031ce:	04d9      	lsls	r1, r3, #19
 80031d0:	6922      	ldr	r2, [r4, #16]
 80031d2:	6022      	str	r2, [r4, #0]
 80031d4:	d504      	bpl.n	80031e0 <__sflush_r+0x78>
 80031d6:	1c42      	adds	r2, r0, #1
 80031d8:	d101      	bne.n	80031de <__sflush_r+0x76>
 80031da:	682b      	ldr	r3, [r5, #0]
 80031dc:	b903      	cbnz	r3, 80031e0 <__sflush_r+0x78>
 80031de:	6560      	str	r0, [r4, #84]	@ 0x54
 80031e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80031e2:	602f      	str	r7, [r5, #0]
 80031e4:	b1b9      	cbz	r1, 8003216 <__sflush_r+0xae>
 80031e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80031ea:	4299      	cmp	r1, r3
 80031ec:	d002      	beq.n	80031f4 <__sflush_r+0x8c>
 80031ee:	4628      	mov	r0, r5
 80031f0:	f7ff fa9c 	bl	800272c <_free_r>
 80031f4:	2300      	movs	r3, #0
 80031f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80031f8:	e00d      	b.n	8003216 <__sflush_r+0xae>
 80031fa:	2301      	movs	r3, #1
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b0      	blx	r6
 8003200:	4602      	mov	r2, r0
 8003202:	1c50      	adds	r0, r2, #1
 8003204:	d1c9      	bne.n	800319a <__sflush_r+0x32>
 8003206:	682b      	ldr	r3, [r5, #0]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0c6      	beq.n	800319a <__sflush_r+0x32>
 800320c:	2b1d      	cmp	r3, #29
 800320e:	d001      	beq.n	8003214 <__sflush_r+0xac>
 8003210:	2b16      	cmp	r3, #22
 8003212:	d11e      	bne.n	8003252 <__sflush_r+0xea>
 8003214:	602f      	str	r7, [r5, #0]
 8003216:	2000      	movs	r0, #0
 8003218:	e022      	b.n	8003260 <__sflush_r+0xf8>
 800321a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800321e:	b21b      	sxth	r3, r3
 8003220:	e01b      	b.n	800325a <__sflush_r+0xf2>
 8003222:	690f      	ldr	r7, [r1, #16]
 8003224:	2f00      	cmp	r7, #0
 8003226:	d0f6      	beq.n	8003216 <__sflush_r+0xae>
 8003228:	0793      	lsls	r3, r2, #30
 800322a:	680e      	ldr	r6, [r1, #0]
 800322c:	bf08      	it	eq
 800322e:	694b      	ldreq	r3, [r1, #20]
 8003230:	600f      	str	r7, [r1, #0]
 8003232:	bf18      	it	ne
 8003234:	2300      	movne	r3, #0
 8003236:	eba6 0807 	sub.w	r8, r6, r7
 800323a:	608b      	str	r3, [r1, #8]
 800323c:	f1b8 0f00 	cmp.w	r8, #0
 8003240:	dde9      	ble.n	8003216 <__sflush_r+0xae>
 8003242:	6a21      	ldr	r1, [r4, #32]
 8003244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003246:	4643      	mov	r3, r8
 8003248:	463a      	mov	r2, r7
 800324a:	4628      	mov	r0, r5
 800324c:	47b0      	blx	r6
 800324e:	2800      	cmp	r0, #0
 8003250:	dc08      	bgt.n	8003264 <__sflush_r+0xfc>
 8003252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800325a:	81a3      	strh	r3, [r4, #12]
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003264:	4407      	add	r7, r0
 8003266:	eba8 0800 	sub.w	r8, r8, r0
 800326a:	e7e7      	b.n	800323c <__sflush_r+0xd4>
 800326c:	20400001 	.word	0x20400001

08003270 <_fflush_r>:
 8003270:	b538      	push	{r3, r4, r5, lr}
 8003272:	690b      	ldr	r3, [r1, #16]
 8003274:	4605      	mov	r5, r0
 8003276:	460c      	mov	r4, r1
 8003278:	b913      	cbnz	r3, 8003280 <_fflush_r+0x10>
 800327a:	2500      	movs	r5, #0
 800327c:	4628      	mov	r0, r5
 800327e:	bd38      	pop	{r3, r4, r5, pc}
 8003280:	b118      	cbz	r0, 800328a <_fflush_r+0x1a>
 8003282:	6a03      	ldr	r3, [r0, #32]
 8003284:	b90b      	cbnz	r3, 800328a <_fflush_r+0x1a>
 8003286:	f7ff f927 	bl	80024d8 <__sinit>
 800328a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f3      	beq.n	800327a <_fflush_r+0xa>
 8003292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003294:	07d0      	lsls	r0, r2, #31
 8003296:	d404      	bmi.n	80032a2 <_fflush_r+0x32>
 8003298:	0599      	lsls	r1, r3, #22
 800329a:	d402      	bmi.n	80032a2 <_fflush_r+0x32>
 800329c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800329e:	f7ff fa42 	bl	8002726 <__retarget_lock_acquire_recursive>
 80032a2:	4628      	mov	r0, r5
 80032a4:	4621      	mov	r1, r4
 80032a6:	f7ff ff5f 	bl	8003168 <__sflush_r>
 80032aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80032ac:	07da      	lsls	r2, r3, #31
 80032ae:	4605      	mov	r5, r0
 80032b0:	d4e4      	bmi.n	800327c <_fflush_r+0xc>
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	059b      	lsls	r3, r3, #22
 80032b6:	d4e1      	bmi.n	800327c <_fflush_r+0xc>
 80032b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80032ba:	f7ff fa35 	bl	8002728 <__retarget_lock_release_recursive>
 80032be:	e7dd      	b.n	800327c <_fflush_r+0xc>

080032c0 <__swbuf_r>:
 80032c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c2:	460e      	mov	r6, r1
 80032c4:	4614      	mov	r4, r2
 80032c6:	4605      	mov	r5, r0
 80032c8:	b118      	cbz	r0, 80032d2 <__swbuf_r+0x12>
 80032ca:	6a03      	ldr	r3, [r0, #32]
 80032cc:	b90b      	cbnz	r3, 80032d2 <__swbuf_r+0x12>
 80032ce:	f7ff f903 	bl	80024d8 <__sinit>
 80032d2:	69a3      	ldr	r3, [r4, #24]
 80032d4:	60a3      	str	r3, [r4, #8]
 80032d6:	89a3      	ldrh	r3, [r4, #12]
 80032d8:	071a      	lsls	r2, r3, #28
 80032da:	d501      	bpl.n	80032e0 <__swbuf_r+0x20>
 80032dc:	6923      	ldr	r3, [r4, #16]
 80032de:	b943      	cbnz	r3, 80032f2 <__swbuf_r+0x32>
 80032e0:	4621      	mov	r1, r4
 80032e2:	4628      	mov	r0, r5
 80032e4:	f000 f82a 	bl	800333c <__swsetup_r>
 80032e8:	b118      	cbz	r0, 80032f2 <__swbuf_r+0x32>
 80032ea:	f04f 37ff 	mov.w	r7, #4294967295
 80032ee:	4638      	mov	r0, r7
 80032f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80032f2:	6823      	ldr	r3, [r4, #0]
 80032f4:	6922      	ldr	r2, [r4, #16]
 80032f6:	1a98      	subs	r0, r3, r2
 80032f8:	6963      	ldr	r3, [r4, #20]
 80032fa:	b2f6      	uxtb	r6, r6
 80032fc:	4283      	cmp	r3, r0
 80032fe:	4637      	mov	r7, r6
 8003300:	dc05      	bgt.n	800330e <__swbuf_r+0x4e>
 8003302:	4621      	mov	r1, r4
 8003304:	4628      	mov	r0, r5
 8003306:	f7ff ffb3 	bl	8003270 <_fflush_r>
 800330a:	2800      	cmp	r0, #0
 800330c:	d1ed      	bne.n	80032ea <__swbuf_r+0x2a>
 800330e:	68a3      	ldr	r3, [r4, #8]
 8003310:	3b01      	subs	r3, #1
 8003312:	60a3      	str	r3, [r4, #8]
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	6022      	str	r2, [r4, #0]
 800331a:	701e      	strb	r6, [r3, #0]
 800331c:	6962      	ldr	r2, [r4, #20]
 800331e:	1c43      	adds	r3, r0, #1
 8003320:	429a      	cmp	r2, r3
 8003322:	d004      	beq.n	800332e <__swbuf_r+0x6e>
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	07db      	lsls	r3, r3, #31
 8003328:	d5e1      	bpl.n	80032ee <__swbuf_r+0x2e>
 800332a:	2e0a      	cmp	r6, #10
 800332c:	d1df      	bne.n	80032ee <__swbuf_r+0x2e>
 800332e:	4621      	mov	r1, r4
 8003330:	4628      	mov	r0, r5
 8003332:	f7ff ff9d 	bl	8003270 <_fflush_r>
 8003336:	2800      	cmp	r0, #0
 8003338:	d0d9      	beq.n	80032ee <__swbuf_r+0x2e>
 800333a:	e7d6      	b.n	80032ea <__swbuf_r+0x2a>

0800333c <__swsetup_r>:
 800333c:	b538      	push	{r3, r4, r5, lr}
 800333e:	4b29      	ldr	r3, [pc, #164]	@ (80033e4 <__swsetup_r+0xa8>)
 8003340:	4605      	mov	r5, r0
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	460c      	mov	r4, r1
 8003346:	b118      	cbz	r0, 8003350 <__swsetup_r+0x14>
 8003348:	6a03      	ldr	r3, [r0, #32]
 800334a:	b90b      	cbnz	r3, 8003350 <__swsetup_r+0x14>
 800334c:	f7ff f8c4 	bl	80024d8 <__sinit>
 8003350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003354:	0719      	lsls	r1, r3, #28
 8003356:	d422      	bmi.n	800339e <__swsetup_r+0x62>
 8003358:	06da      	lsls	r2, r3, #27
 800335a:	d407      	bmi.n	800336c <__swsetup_r+0x30>
 800335c:	2209      	movs	r2, #9
 800335e:	602a      	str	r2, [r5, #0]
 8003360:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003364:	81a3      	strh	r3, [r4, #12]
 8003366:	f04f 30ff 	mov.w	r0, #4294967295
 800336a:	e033      	b.n	80033d4 <__swsetup_r+0x98>
 800336c:	0758      	lsls	r0, r3, #29
 800336e:	d512      	bpl.n	8003396 <__swsetup_r+0x5a>
 8003370:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003372:	b141      	cbz	r1, 8003386 <__swsetup_r+0x4a>
 8003374:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003378:	4299      	cmp	r1, r3
 800337a:	d002      	beq.n	8003382 <__swsetup_r+0x46>
 800337c:	4628      	mov	r0, r5
 800337e:	f7ff f9d5 	bl	800272c <_free_r>
 8003382:	2300      	movs	r3, #0
 8003384:	6363      	str	r3, [r4, #52]	@ 0x34
 8003386:	89a3      	ldrh	r3, [r4, #12]
 8003388:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800338c:	81a3      	strh	r3, [r4, #12]
 800338e:	2300      	movs	r3, #0
 8003390:	6063      	str	r3, [r4, #4]
 8003392:	6923      	ldr	r3, [r4, #16]
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	f043 0308 	orr.w	r3, r3, #8
 800339c:	81a3      	strh	r3, [r4, #12]
 800339e:	6923      	ldr	r3, [r4, #16]
 80033a0:	b94b      	cbnz	r3, 80033b6 <__swsetup_r+0x7a>
 80033a2:	89a3      	ldrh	r3, [r4, #12]
 80033a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80033a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ac:	d003      	beq.n	80033b6 <__swsetup_r+0x7a>
 80033ae:	4621      	mov	r1, r4
 80033b0:	4628      	mov	r0, r5
 80033b2:	f000 f8a5 	bl	8003500 <__smakebuf_r>
 80033b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033ba:	f013 0201 	ands.w	r2, r3, #1
 80033be:	d00a      	beq.n	80033d6 <__swsetup_r+0x9a>
 80033c0:	2200      	movs	r2, #0
 80033c2:	60a2      	str	r2, [r4, #8]
 80033c4:	6962      	ldr	r2, [r4, #20]
 80033c6:	4252      	negs	r2, r2
 80033c8:	61a2      	str	r2, [r4, #24]
 80033ca:	6922      	ldr	r2, [r4, #16]
 80033cc:	b942      	cbnz	r2, 80033e0 <__swsetup_r+0xa4>
 80033ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80033d2:	d1c5      	bne.n	8003360 <__swsetup_r+0x24>
 80033d4:	bd38      	pop	{r3, r4, r5, pc}
 80033d6:	0799      	lsls	r1, r3, #30
 80033d8:	bf58      	it	pl
 80033da:	6962      	ldrpl	r2, [r4, #20]
 80033dc:	60a2      	str	r2, [r4, #8]
 80033de:	e7f4      	b.n	80033ca <__swsetup_r+0x8e>
 80033e0:	2000      	movs	r0, #0
 80033e2:	e7f7      	b.n	80033d4 <__swsetup_r+0x98>
 80033e4:	24000024 	.word	0x24000024

080033e8 <memmove>:
 80033e8:	4288      	cmp	r0, r1
 80033ea:	b510      	push	{r4, lr}
 80033ec:	eb01 0402 	add.w	r4, r1, r2
 80033f0:	d902      	bls.n	80033f8 <memmove+0x10>
 80033f2:	4284      	cmp	r4, r0
 80033f4:	4623      	mov	r3, r4
 80033f6:	d807      	bhi.n	8003408 <memmove+0x20>
 80033f8:	1e43      	subs	r3, r0, #1
 80033fa:	42a1      	cmp	r1, r4
 80033fc:	d008      	beq.n	8003410 <memmove+0x28>
 80033fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003402:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003406:	e7f8      	b.n	80033fa <memmove+0x12>
 8003408:	4402      	add	r2, r0
 800340a:	4601      	mov	r1, r0
 800340c:	428a      	cmp	r2, r1
 800340e:	d100      	bne.n	8003412 <memmove+0x2a>
 8003410:	bd10      	pop	{r4, pc}
 8003412:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003416:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800341a:	e7f7      	b.n	800340c <memmove+0x24>

0800341c <_sbrk_r>:
 800341c:	b538      	push	{r3, r4, r5, lr}
 800341e:	4d06      	ldr	r5, [pc, #24]	@ (8003438 <_sbrk_r+0x1c>)
 8003420:	2300      	movs	r3, #0
 8003422:	4604      	mov	r4, r0
 8003424:	4608      	mov	r0, r1
 8003426:	602b      	str	r3, [r5, #0]
 8003428:	f7fd fad2 	bl	80009d0 <_sbrk>
 800342c:	1c43      	adds	r3, r0, #1
 800342e:	d102      	bne.n	8003436 <_sbrk_r+0x1a>
 8003430:	682b      	ldr	r3, [r5, #0]
 8003432:	b103      	cbz	r3, 8003436 <_sbrk_r+0x1a>
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	bd38      	pop	{r3, r4, r5, pc}
 8003438:	240001d4 	.word	0x240001d4

0800343c <memcpy>:
 800343c:	440a      	add	r2, r1
 800343e:	4291      	cmp	r1, r2
 8003440:	f100 33ff 	add.w	r3, r0, #4294967295
 8003444:	d100      	bne.n	8003448 <memcpy+0xc>
 8003446:	4770      	bx	lr
 8003448:	b510      	push	{r4, lr}
 800344a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800344e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003452:	4291      	cmp	r1, r2
 8003454:	d1f9      	bne.n	800344a <memcpy+0xe>
 8003456:	bd10      	pop	{r4, pc}

08003458 <_realloc_r>:
 8003458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800345c:	4607      	mov	r7, r0
 800345e:	4614      	mov	r4, r2
 8003460:	460d      	mov	r5, r1
 8003462:	b921      	cbnz	r1, 800346e <_realloc_r+0x16>
 8003464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003468:	4611      	mov	r1, r2
 800346a:	f7ff b9cb 	b.w	8002804 <_malloc_r>
 800346e:	b92a      	cbnz	r2, 800347c <_realloc_r+0x24>
 8003470:	f7ff f95c 	bl	800272c <_free_r>
 8003474:	4625      	mov	r5, r4
 8003476:	4628      	mov	r0, r5
 8003478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800347c:	f000 f89e 	bl	80035bc <_malloc_usable_size_r>
 8003480:	4284      	cmp	r4, r0
 8003482:	4606      	mov	r6, r0
 8003484:	d802      	bhi.n	800348c <_realloc_r+0x34>
 8003486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800348a:	d8f4      	bhi.n	8003476 <_realloc_r+0x1e>
 800348c:	4621      	mov	r1, r4
 800348e:	4638      	mov	r0, r7
 8003490:	f7ff f9b8 	bl	8002804 <_malloc_r>
 8003494:	4680      	mov	r8, r0
 8003496:	b908      	cbnz	r0, 800349c <_realloc_r+0x44>
 8003498:	4645      	mov	r5, r8
 800349a:	e7ec      	b.n	8003476 <_realloc_r+0x1e>
 800349c:	42b4      	cmp	r4, r6
 800349e:	4622      	mov	r2, r4
 80034a0:	4629      	mov	r1, r5
 80034a2:	bf28      	it	cs
 80034a4:	4632      	movcs	r2, r6
 80034a6:	f7ff ffc9 	bl	800343c <memcpy>
 80034aa:	4629      	mov	r1, r5
 80034ac:	4638      	mov	r0, r7
 80034ae:	f7ff f93d 	bl	800272c <_free_r>
 80034b2:	e7f1      	b.n	8003498 <_realloc_r+0x40>

080034b4 <__swhatbuf_r>:
 80034b4:	b570      	push	{r4, r5, r6, lr}
 80034b6:	460c      	mov	r4, r1
 80034b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80034bc:	2900      	cmp	r1, #0
 80034be:	b096      	sub	sp, #88	@ 0x58
 80034c0:	4615      	mov	r5, r2
 80034c2:	461e      	mov	r6, r3
 80034c4:	da0d      	bge.n	80034e2 <__swhatbuf_r+0x2e>
 80034c6:	89a3      	ldrh	r3, [r4, #12]
 80034c8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80034cc:	f04f 0100 	mov.w	r1, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2340      	movne	r3, #64	@ 0x40
 80034d4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80034d8:	2000      	movs	r0, #0
 80034da:	6031      	str	r1, [r6, #0]
 80034dc:	602b      	str	r3, [r5, #0]
 80034de:	b016      	add	sp, #88	@ 0x58
 80034e0:	bd70      	pop	{r4, r5, r6, pc}
 80034e2:	466a      	mov	r2, sp
 80034e4:	f000 f848 	bl	8003578 <_fstat_r>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	dbec      	blt.n	80034c6 <__swhatbuf_r+0x12>
 80034ec:	9901      	ldr	r1, [sp, #4]
 80034ee:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80034f2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80034f6:	4259      	negs	r1, r3
 80034f8:	4159      	adcs	r1, r3
 80034fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034fe:	e7eb      	b.n	80034d8 <__swhatbuf_r+0x24>

08003500 <__smakebuf_r>:
 8003500:	898b      	ldrh	r3, [r1, #12]
 8003502:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003504:	079d      	lsls	r5, r3, #30
 8003506:	4606      	mov	r6, r0
 8003508:	460c      	mov	r4, r1
 800350a:	d507      	bpl.n	800351c <__smakebuf_r+0x1c>
 800350c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003510:	6023      	str	r3, [r4, #0]
 8003512:	6123      	str	r3, [r4, #16]
 8003514:	2301      	movs	r3, #1
 8003516:	6163      	str	r3, [r4, #20]
 8003518:	b003      	add	sp, #12
 800351a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800351c:	ab01      	add	r3, sp, #4
 800351e:	466a      	mov	r2, sp
 8003520:	f7ff ffc8 	bl	80034b4 <__swhatbuf_r>
 8003524:	9f00      	ldr	r7, [sp, #0]
 8003526:	4605      	mov	r5, r0
 8003528:	4639      	mov	r1, r7
 800352a:	4630      	mov	r0, r6
 800352c:	f7ff f96a 	bl	8002804 <_malloc_r>
 8003530:	b948      	cbnz	r0, 8003546 <__smakebuf_r+0x46>
 8003532:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003536:	059a      	lsls	r2, r3, #22
 8003538:	d4ee      	bmi.n	8003518 <__smakebuf_r+0x18>
 800353a:	f023 0303 	bic.w	r3, r3, #3
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	81a3      	strh	r3, [r4, #12]
 8003544:	e7e2      	b.n	800350c <__smakebuf_r+0xc>
 8003546:	89a3      	ldrh	r3, [r4, #12]
 8003548:	6020      	str	r0, [r4, #0]
 800354a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800354e:	81a3      	strh	r3, [r4, #12]
 8003550:	9b01      	ldr	r3, [sp, #4]
 8003552:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003556:	b15b      	cbz	r3, 8003570 <__smakebuf_r+0x70>
 8003558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800355c:	4630      	mov	r0, r6
 800355e:	f000 f81d 	bl	800359c <_isatty_r>
 8003562:	b128      	cbz	r0, 8003570 <__smakebuf_r+0x70>
 8003564:	89a3      	ldrh	r3, [r4, #12]
 8003566:	f023 0303 	bic.w	r3, r3, #3
 800356a:	f043 0301 	orr.w	r3, r3, #1
 800356e:	81a3      	strh	r3, [r4, #12]
 8003570:	89a3      	ldrh	r3, [r4, #12]
 8003572:	431d      	orrs	r5, r3
 8003574:	81a5      	strh	r5, [r4, #12]
 8003576:	e7cf      	b.n	8003518 <__smakebuf_r+0x18>

08003578 <_fstat_r>:
 8003578:	b538      	push	{r3, r4, r5, lr}
 800357a:	4d07      	ldr	r5, [pc, #28]	@ (8003598 <_fstat_r+0x20>)
 800357c:	2300      	movs	r3, #0
 800357e:	4604      	mov	r4, r0
 8003580:	4608      	mov	r0, r1
 8003582:	4611      	mov	r1, r2
 8003584:	602b      	str	r3, [r5, #0]
 8003586:	f7fd f9fb 	bl	8000980 <_fstat>
 800358a:	1c43      	adds	r3, r0, #1
 800358c:	d102      	bne.n	8003594 <_fstat_r+0x1c>
 800358e:	682b      	ldr	r3, [r5, #0]
 8003590:	b103      	cbz	r3, 8003594 <_fstat_r+0x1c>
 8003592:	6023      	str	r3, [r4, #0]
 8003594:	bd38      	pop	{r3, r4, r5, pc}
 8003596:	bf00      	nop
 8003598:	240001d4 	.word	0x240001d4

0800359c <_isatty_r>:
 800359c:	b538      	push	{r3, r4, r5, lr}
 800359e:	4d06      	ldr	r5, [pc, #24]	@ (80035b8 <_isatty_r+0x1c>)
 80035a0:	2300      	movs	r3, #0
 80035a2:	4604      	mov	r4, r0
 80035a4:	4608      	mov	r0, r1
 80035a6:	602b      	str	r3, [r5, #0]
 80035a8:	f7fd f9fa 	bl	80009a0 <_isatty>
 80035ac:	1c43      	adds	r3, r0, #1
 80035ae:	d102      	bne.n	80035b6 <_isatty_r+0x1a>
 80035b0:	682b      	ldr	r3, [r5, #0]
 80035b2:	b103      	cbz	r3, 80035b6 <_isatty_r+0x1a>
 80035b4:	6023      	str	r3, [r4, #0]
 80035b6:	bd38      	pop	{r3, r4, r5, pc}
 80035b8:	240001d4 	.word	0x240001d4

080035bc <_malloc_usable_size_r>:
 80035bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035c0:	1f18      	subs	r0, r3, #4
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	bfbc      	itt	lt
 80035c6:	580b      	ldrlt	r3, [r1, r0]
 80035c8:	18c0      	addlt	r0, r0, r3
 80035ca:	4770      	bx	lr

080035cc <_init>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr

080035d8 <_fini>:
 80035d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035da:	bf00      	nop
 80035dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035de:	bc08      	pop	{r3}
 80035e0:	469e      	mov	lr, r3
 80035e2:	4770      	bx	lr
