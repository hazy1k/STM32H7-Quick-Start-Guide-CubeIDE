
17.FMC-LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b6d8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047e8  0800b978  0800b978  0000c978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08010160  08010160  00011160  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08010168  08010168  00011168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0801016c  0801016c  0001116c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000074  24000000  08010170  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000264  24000074  080101e4  00012074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240002d8  080101e4  000122d8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00012074  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015457  00000000  00000000  000120a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000030f3  00000000  00000000  000274f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000f20  00000000  00000000  0002a5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b83  00000000  00000000  0002b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000397d0  00000000  00000000  0002c093  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ba0c  00000000  00000000  00065863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016036a  00000000  00000000  0008126f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001e15d9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000459c  00000000  00000000  001e161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001e5bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000074 	.word	0x24000074
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800b960 	.word	0x0800b960

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000078 	.word	0x24000078
 80002dc:	0800b960 	.word	0x0800b960

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	2200      	movs	r2, #0
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	605a      	str	r2, [r3, #4]
 80006ba:	609a      	str	r2, [r3, #8]
 80006bc:	60da      	str	r2, [r3, #12]
 80006be:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006c0:	4b12      	ldr	r3, [pc, #72]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006c6:	4a11      	ldr	r2, [pc, #68]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006c8:	f043 0310 	orr.w	r3, r3, #16
 80006cc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006d0:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <MX_BEEP_GPIO_Init+0x60>)
 80006d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006d6:	f003 0310 	and.w	r3, r3, #16
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2110      	movs	r1, #16
 80006e2:	480b      	ldr	r0, [pc, #44]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006e4:	f005 fa76 	bl	8005bd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 80006e8:	2310      	movs	r3, #16
 80006ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ec:	2301      	movs	r3, #1
 80006ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006f8:	1d3b      	adds	r3, r7, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	@ (8000710 <MX_BEEP_GPIO_Init+0x64>)
 80006fe:	f005 f8b9 	bl	8005874 <HAL_GPIO_Init>
}
 8000702:	bf00      	nop
 8000704:	3718      	adds	r7, #24
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	58024400 	.word	0x58024400
 8000710:	58021000 	.word	0x58021000

08000714 <delay_us>:
 * @param     nus: 要延时的us数
 * @note      nus取值范围: 0 ~ (2^32 / fac_us) (fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_us(uint32_t nus)
{
 8000714:	b480      	push	{r7}
 8000716:	b089      	sub	sp, #36	@ 0x24
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    uint32_t ticks;
    uint32_t told, tnow, tcnt = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	61bb      	str	r3, [r7, #24]
    uint32_t reload = SysTick->LOAD;        /* LOAD的值 */
 8000720:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <delay_us+0x74>)
 8000722:	685b      	ldr	r3, [r3, #4]
 8000724:	617b      	str	r3, [r7, #20]
    ticks = nus * g_fac_us;                 /* 需要的节拍数 */
 8000726:	4b19      	ldr	r3, [pc, #100]	@ (800078c <delay_us+0x78>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	fb02 f303 	mul.w	r3, r2, r3
 8000730:	613b      	str	r3, [r7, #16]

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedlock();                    /* 锁定 OS 的任务调度器 */
#endif

    told = SysTick->VAL;                    /* 刚进入时的计数器值 */
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <delay_us+0x74>)
 8000734:	689b      	ldr	r3, [r3, #8]
 8000736:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000738:	4b13      	ldr	r3, [pc, #76]	@ (8000788 <delay_us+0x74>)
 800073a:	689b      	ldr	r3, [r3, #8]
 800073c:	60fb      	str	r3, [r7, #12]
        if (tnow != told)
 800073e:	68fa      	ldr	r2, [r7, #12]
 8000740:	69fb      	ldr	r3, [r7, #28]
 8000742:	429a      	cmp	r2, r3
 8000744:	d0f8      	beq.n	8000738 <delay_us+0x24>
        {
            if (tnow < told)
 8000746:	68fa      	ldr	r2, [r7, #12]
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	429a      	cmp	r2, r3
 800074c:	d206      	bcs.n	800075c <delay_us+0x48>
            {
                tcnt += told - tnow;        /* 这里注意一下SYSTICK是一个递减的计数器就可以了 */
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	1ad3      	subs	r3, r2, r3
 8000754:	69ba      	ldr	r2, [r7, #24]
 8000756:	4413      	add	r3, r2
 8000758:	61bb      	str	r3, [r7, #24]
 800075a:	e007      	b.n	800076c <delay_us+0x58>
            }
            else
            {
                tcnt += reload - tnow + told;
 800075c:	697a      	ldr	r2, [r7, #20]
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	1ad2      	subs	r2, r2, r3
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	4413      	add	r3, r2
 8000766:	69ba      	ldr	r2, [r7, #24]
 8000768:	4413      	add	r3, r2
 800076a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000770:	69ba      	ldr	r2, [r7, #24]
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	429a      	cmp	r2, r3
 8000776:	d200      	bcs.n	800077a <delay_us+0x66>
        tnow = SysTick->VAL;
 8000778:	e7de      	b.n	8000738 <delay_us+0x24>
            {
                break;                      /* 时间超过/等于要延迟的时间,则退出 */
 800077a:	bf00      	nop

#if SYS_SUPPORT_OS                          /* 如果需要支持OS */
    delay_osschedunlock();                  /* 恢复 OS 的任务调度器 */
#endif

}
 800077c:	bf00      	nop
 800077e:	3724      	adds	r7, #36	@ 0x24
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000e010 	.word	0xe000e010
 800078c:	24000090 	.word	0x24000090

08000790 <delay_ms>:
 * @brief     延时nms
 * @param     nms: 要延时的ms数 (0< nms <= (2^32 / fac_us / 1000))(fac_us一般等于系统主频, 自行套入计算)
 * @retval    无
 */
void delay_ms(uint16_t nms)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	80fb      	strh	r3, [r7, #6]

        nms %= g_fac_ms;                                /* OS已经无法提供这么小的延时了,采用普通方式延时 */
    }
#endif

    delay_us((uint32_t)(nms * 1000));                   /* 普通方式延时 */
 800079a:	88fb      	ldrh	r3, [r7, #6]
 800079c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007a0:	fb02 f303 	mul.w	r3, r2, r3
 80007a4:	4618      	mov	r0, r3
 80007a6:	f7ff ffb5 	bl	8000714 <delay_us>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <HAL_Delay>:
 * @note        HAL库的延时默认用Systick，如果我们没有开Systick的中断会导致调用这个延时后无法退出
 * @param       Delay : 要延时的毫秒数
 * @retval      None
 */
void HAL_Delay(uint32_t Delay)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b082      	sub	sp, #8
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	6078      	str	r0, [r7, #4]
     delay_ms(Delay);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	b29b      	uxth	r3, r3
 80007be:	4618      	mov	r0, r3
 80007c0:	f7ff ffe6 	bl	8000790 <delay_ms>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
 80007da:	609a      	str	r2, [r3, #8]
 80007dc:	60da      	str	r2, [r3, #12]
 80007de:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e0:	4b14      	ldr	r3, [pc, #80]	@ (8000834 <MX_KEY_GPIO_Init+0x68>)
 80007e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e6:	4a13      	ldr	r2, [pc, #76]	@ (8000834 <MX_KEY_GPIO_Init+0x68>)
 80007e8:	f043 0301 	orr.w	r3, r3, #1
 80007ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007f0:	4b10      	ldr	r3, [pc, #64]	@ (8000834 <MX_KEY_GPIO_Init+0x68>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	f003 0301 	and.w	r3, r3, #1
 80007fa:	603b      	str	r3, [r7, #0]
 80007fc:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80007fe:	2301      	movs	r3, #1
 8000800:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000806:	2302      	movs	r3, #2
 8000808:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 800080a:	1d3b      	adds	r3, r7, #4
 800080c:	4619      	mov	r1, r3
 800080e:	480a      	ldr	r0, [pc, #40]	@ (8000838 <MX_KEY_GPIO_Init+0x6c>)
 8000810:	f005 f830 	bl	8005874 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 8000814:	f248 0302 	movw	r3, #32770	@ 0x8002
 8000818:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081e:	2301      	movs	r3, #1
 8000820:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4619      	mov	r1, r3
 8000826:	4804      	ldr	r0, [pc, #16]	@ (8000838 <MX_KEY_GPIO_Init+0x6c>)
 8000828:	f005 f824 	bl	8005874 <HAL_GPIO_Init>
}
 800082c:	bf00      	nop
 800082e:	3718      	adds	r7, #24
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	58024400 	.word	0x58024400
 8000838:	58020000 	.word	0x58020000

0800083c <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000852:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <MX_LED_GPIO_Init+0xa8>)
 8000854:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000858:	4a22      	ldr	r2, [pc, #136]	@ (80008e4 <MX_LED_GPIO_Init+0xa8>)
 800085a:	f043 0310 	orr.w	r3, r3, #16
 800085e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000862:	4b20      	ldr	r3, [pc, #128]	@ (80008e4 <MX_LED_GPIO_Init+0xa8>)
 8000864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000870:	4b1c      	ldr	r3, [pc, #112]	@ (80008e4 <MX_LED_GPIO_Init+0xa8>)
 8000872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000876:	4a1b      	ldr	r2, [pc, #108]	@ (80008e4 <MX_LED_GPIO_Init+0xa8>)
 8000878:	f043 0302 	orr.w	r3, r3, #2
 800087c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <MX_LED_GPIO_Init+0xa8>)
 8000882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000886:	f003 0302 	and.w	r3, r3, #2
 800088a:	607b      	str	r3, [r7, #4]
 800088c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800088e:	2201      	movs	r2, #1
 8000890:	2160      	movs	r1, #96	@ 0x60
 8000892:	4815      	ldr	r0, [pc, #84]	@ (80008e8 <MX_LED_GPIO_Init+0xac>)
 8000894:	f005 f99e 	bl	8005bd4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2110      	movs	r1, #16
 800089c:	4813      	ldr	r0, [pc, #76]	@ (80008ec <MX_LED_GPIO_Init+0xb0>)
 800089e:	f005 f999 	bl	8005bd4 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 80008a2:	2360      	movs	r3, #96	@ 0x60
 80008a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008b2:	f107 030c 	add.w	r3, r7, #12
 80008b6:	4619      	mov	r1, r3
 80008b8:	480b      	ldr	r0, [pc, #44]	@ (80008e8 <MX_LED_GPIO_Init+0xac>)
 80008ba:	f004 ffdb 	bl	8005874 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 80008be:	2310      	movs	r3, #16
 80008c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c2:	2301      	movs	r3, #1
 80008c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 030c 	add.w	r3, r7, #12
 80008d2:	4619      	mov	r1, r3
 80008d4:	4805      	ldr	r0, [pc, #20]	@ (80008ec <MX_LED_GPIO_Init+0xb0>)
 80008d6:	f004 ffcd 	bl	8005874 <HAL_GPIO_Init>
}
 80008da:	bf00      	nop
 80008dc:	3720      	adds	r7, #32
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	58024400 	.word	0x58024400
 80008e8:	58021000 	.word	0x58021000
 80008ec:	58020400 	.word	0x58020400

080008f0 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 80008f4:	f7ff ffa2 	bl	800083c <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 80008f8:	f7ff fed8 	bl	80006ac <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 80008fc:	f7ff ff66 	bl	80007cc <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000900:	f003 ffaa 	bl	8004858 <MX_USART1_UART_Init>
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}

08000908 <lcd_wr_data>:
 * @brief       LCD写数据
 * @param       data: 要写入的数据
 * @retval      无
 */
void lcd_wr_data(volatile uint16_t data)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	4603      	mov	r3, r0
 8000910:	80fb      	strh	r3, [r7, #6]
    data = data;            /* 使用-O2优化的时候,必须插入的延时 */
 8000912:	88fb      	ldrh	r3, [r7, #6]
 8000914:	b29b      	uxth	r3, r3
 8000916:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_RAM = data;
 8000918:	4b04      	ldr	r3, [pc, #16]	@ (800092c <lcd_wr_data+0x24>)
 800091a:	88fa      	ldrh	r2, [r7, #6]
 800091c:	b292      	uxth	r2, r2
 800091e:	805a      	strh	r2, [r3, #2]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	600ffffe 	.word	0x600ffffe

08000930 <lcd_wr_regno>:
 * @brief       LCD写寄存器编号/地址函数
 * @param       regno: 寄存器编号/地址
 * @retval      无
 */
void lcd_wr_regno(volatile uint16_t regno)
{
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	80fb      	strh	r3, [r7, #6]
    regno = regno;          /* 使用-O2优化的时候,必须插入的延时 */
 800093a:	88fb      	ldrh	r3, [r7, #6]
 800093c:	b29b      	uxth	r3, r3
 800093e:	80fb      	strh	r3, [r7, #6]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 8000940:	4b04      	ldr	r3, [pc, #16]	@ (8000954 <lcd_wr_regno+0x24>)
 8000942:	88fa      	ldrh	r2, [r7, #6]
 8000944:	b292      	uxth	r2, r2
 8000946:	801a      	strh	r2, [r3, #0]
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	600ffffe 	.word	0x600ffffe

08000958 <lcd_write_reg>:
 * @param       regno:寄存器编号/地址
 * @param       data:要写入的数据
 * @retval      无
 */
void lcd_write_reg(uint16_t regno, uint16_t data)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	460a      	mov	r2, r1
 8000962:	80fb      	strh	r3, [r7, #6]
 8000964:	4613      	mov	r3, r2
 8000966:	80bb      	strh	r3, [r7, #4]
    LCD->LCD_REG = regno;   /* 写入要写的寄存器序号 */
 8000968:	4a05      	ldr	r2, [pc, #20]	@ (8000980 <lcd_write_reg+0x28>)
 800096a:	88fb      	ldrh	r3, [r7, #6]
 800096c:	8013      	strh	r3, [r2, #0]
    LCD->LCD_RAM = data;    /* 写入数据 */
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <lcd_write_reg+0x28>)
 8000970:	88bb      	ldrh	r3, [r7, #4]
 8000972:	8053      	strh	r3, [r2, #2]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	600ffffe 	.word	0x600ffffe

08000984 <lcd_opt_delay>:
 * @brief       LCD延时函数,仅用于部分在mdk -O1时间优化时需要设置的地方
 * @param       t:延时的数值
 * @retval      无
 */
static void lcd_opt_delay(uint32_t i)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
    while (i--);
 800098c:	bf00      	nop
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	1e5a      	subs	r2, r3, #1
 8000992:	607a      	str	r2, [r7, #4]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d1fa      	bne.n	800098e <lcd_opt_delay+0xa>
}
 8000998:	bf00      	nop
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
	...

080009a8 <lcd_rd_data>:
 * @brief       LCD读数据
 * @param       无
 * @retval      读取到的数据
 */
static uint16_t lcd_rd_data(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
    volatile uint16_t ram;  /* 防止被优化 */
    lcd_opt_delay(2);
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff ffe8 	bl	8000984 <lcd_opt_delay>
    ram = LCD->LCD_RAM;
 80009b4:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <lcd_rd_data+0x20>)
 80009b6:	885b      	ldrh	r3, [r3, #2]
 80009b8:	b29b      	uxth	r3, r3
 80009ba:	80fb      	strh	r3, [r7, #6]
    return ram;
 80009bc:	88fb      	ldrh	r3, [r7, #6]
 80009be:	b29b      	uxth	r3, r3
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	600ffffe 	.word	0x600ffffe

080009cc <lcd_write_ram_prepare>:
 * @brief       准备写GRAM
 * @param       无
 * @retval      无
 */
void lcd_write_ram_prepare(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
    LCD->LCD_REG = lcddev.wramcmd;
 80009d0:	4b04      	ldr	r3, [pc, #16]	@ (80009e4 <lcd_write_ram_prepare+0x18>)
 80009d2:	4a05      	ldr	r2, [pc, #20]	@ (80009e8 <lcd_write_ram_prepare+0x1c>)
 80009d4:	8912      	ldrh	r2, [r2, #8]
 80009d6:	801a      	strh	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	600ffffe 	.word	0x600ffffe
 80009e8:	240000e0 	.word	0x240000e0

080009ec <lcd_set_cursor>:
 * @brief       设置光标位置(对RGB屏无效)
 * @param       x,y: 坐标
 * @retval      无
 */
void lcd_set_cursor(uint16_t x, uint16_t y)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]
    if (lcddev.id == 0X1963)
 80009fc:	4b65      	ldr	r3, [pc, #404]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 80009fe:	889b      	ldrh	r3, [r3, #4]
 8000a00:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d167      	bne.n	8000ad8 <lcd_set_cursor+0xec>
    {
        if (lcddev.dir == 0)    /* 竖屏模式, x坐标需要变换 */
 8000a08:	4b62      	ldr	r3, [pc, #392]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a0a:	799b      	ldrb	r3, [r3, #6]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d11e      	bne.n	8000a4e <lcd_set_cursor+0x62>
        {
            x = lcddev.width - 1 - x;
 8000a10:	4b60      	ldr	r3, [pc, #384]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a12:	881a      	ldrh	r2, [r3, #0]
 8000a14:	88fb      	ldrh	r3, [r7, #6]
 8000a16:	1ad3      	subs	r3, r2, r3
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	3b01      	subs	r3, #1
 8000a1c:	80fb      	strh	r3, [r7, #6]
            lcd_wr_regno(lcddev.setxcmd);
 8000a1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a20:	895b      	ldrh	r3, [r3, #10]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff84 	bl	8000930 <lcd_wr_regno>
            lcd_wr_data(0);
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f7ff ff6d 	bl	8000908 <lcd_wr_data>
            lcd_wr_data(0);
 8000a2e:	2000      	movs	r0, #0
 8000a30:	f7ff ff6a 	bl	8000908 <lcd_wr_data>
            lcd_wr_data(x >> 8);
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	0a1b      	lsrs	r3, r3, #8
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f7ff ff64 	bl	8000908 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8000a40:	88fb      	ldrh	r3, [r7, #6]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff5e 	bl	8000908 <lcd_wr_data>
 8000a4c:	e021      	b.n	8000a92 <lcd_set_cursor+0xa6>
        }
        else                    /* 横屏模式 */
        {
            lcd_wr_regno(lcddev.setxcmd);
 8000a4e:	4b51      	ldr	r3, [pc, #324]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a50:	895b      	ldrh	r3, [r3, #10]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff6c 	bl	8000930 <lcd_wr_regno>
            lcd_wr_data(x >> 8);
 8000a58:	88fb      	ldrh	r3, [r7, #6]
 8000a5a:	0a1b      	lsrs	r3, r3, #8
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff52 	bl	8000908 <lcd_wr_data>
            lcd_wr_data(x & 0XFF);
 8000a64:	88fb      	ldrh	r3, [r7, #6]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	b29b      	uxth	r3, r3
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff ff4c 	bl	8000908 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) >> 8);
 8000a70:	4b48      	ldr	r3, [pc, #288]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a72:	881b      	ldrh	r3, [r3, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	121b      	asrs	r3, r3, #8
 8000a78:	b29b      	uxth	r3, r3
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f7ff ff44 	bl	8000908 <lcd_wr_data>
            lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000a80:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a82:	881b      	ldrh	r3, [r3, #0]
 8000a84:	3b01      	subs	r3, #1
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	b29b      	uxth	r3, r3
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff ff3b 	bl	8000908 <lcd_wr_data>
        }

        lcd_wr_regno(lcddev.setycmd);
 8000a92:	4b40      	ldr	r3, [pc, #256]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000a94:	899b      	ldrh	r3, [r3, #12]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff ff4a 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8000a9c:	88bb      	ldrh	r3, [r7, #4]
 8000a9e:	0a1b      	lsrs	r3, r3, #8
 8000aa0:	b29b      	uxth	r3, r3
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff30 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 8000aa8:	88bb      	ldrh	r3, [r7, #4]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff2a 	bl	8000908 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000ab4:	4b37      	ldr	r3, [pc, #220]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000ab6:	885b      	ldrh	r3, [r3, #2]
 8000ab8:	3b01      	subs	r3, #1
 8000aba:	121b      	asrs	r3, r3, #8
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f7ff ff22 	bl	8000908 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000ac4:	4b33      	ldr	r3, [pc, #204]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000ac6:	885b      	ldrh	r3, [r3, #2]
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	b29b      	uxth	r3, r3
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff19 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
        lcd_wr_regno(lcddev.setycmd);
        lcd_wr_data(y >> 8);
        lcd_wr_data(y & 0XFF);
    }
}
 8000ad6:	e058      	b.n	8000b8a <lcd_set_cursor+0x19e>
    else if (lcddev.id == 0X5510)
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000ada:	889b      	ldrh	r3, [r3, #4]
 8000adc:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d130      	bne.n	8000b46 <lcd_set_cursor+0x15a>
        lcd_wr_regno(lcddev.setxcmd);
 8000ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000ae6:	895b      	ldrh	r3, [r3, #10]
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff21 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8000aee:	88fb      	ldrh	r3, [r7, #6]
 8000af0:	0a1b      	lsrs	r3, r3, #8
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff ff07 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000afa:	4b26      	ldr	r3, [pc, #152]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000afc:	895b      	ldrh	r3, [r3, #10]
 8000afe:	3301      	adds	r3, #1
 8000b00:	b29b      	uxth	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f7ff ff14 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(x & 0XFF);
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	b29b      	uxth	r3, r3
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fefa 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8000b14:	4b1f      	ldr	r3, [pc, #124]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000b16:	899b      	ldrh	r3, [r3, #12]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff ff09 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8000b1e:	88bb      	ldrh	r3, [r7, #4]
 8000b20:	0a1b      	lsrs	r3, r3, #8
 8000b22:	b29b      	uxth	r3, r3
 8000b24:	4618      	mov	r0, r3
 8000b26:	f7ff feef 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8000b2a:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000b2c:	899b      	ldrh	r3, [r3, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	b29b      	uxth	r3, r3
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff fefc 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(y & 0XFF);
 8000b38:	88bb      	ldrh	r3, [r7, #4]
 8000b3a:	b2db      	uxtb	r3, r3
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fee2 	bl	8000908 <lcd_wr_data>
}
 8000b44:	e021      	b.n	8000b8a <lcd_set_cursor+0x19e>
        lcd_wr_regno(lcddev.setxcmd);
 8000b46:	4b13      	ldr	r3, [pc, #76]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000b48:	895b      	ldrh	r3, [r3, #10]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fef0 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(x >> 8);
 8000b50:	88fb      	ldrh	r3, [r7, #6]
 8000b52:	0a1b      	lsrs	r3, r3, #8
 8000b54:	b29b      	uxth	r3, r3
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fed6 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(x & 0XFF);
 8000b5c:	88fb      	ldrh	r3, [r7, #6]
 8000b5e:	b2db      	uxtb	r3, r3
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fed0 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <lcd_set_cursor+0x1a8>)
 8000b6a:	899b      	ldrh	r3, [r3, #12]
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f7ff fedf 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(y >> 8);
 8000b72:	88bb      	ldrh	r3, [r7, #4]
 8000b74:	0a1b      	lsrs	r3, r3, #8
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff fec5 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(y & 0XFF);
 8000b7e:	88bb      	ldrh	r3, [r7, #4]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff febf 	bl	8000908 <lcd_wr_data>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	240000e0 	.word	0x240000e0

08000b98 <lcd_scan_dir>:
 *
 * @param       dir:0~7,代表8个方向(具体定义见lcd.h)
 * @retval      无
 */
void lcd_scan_dir(uint8_t dir)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
    uint16_t regval = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81fb      	strh	r3, [r7, #14]
    uint16_t dirreg = 0;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	81bb      	strh	r3, [r7, #12]
    uint16_t temp;

    /* 横屏时，对1963不改变扫描方向, 其他IC改变扫描方向！竖屏时1963改变方向, 其他IC不改变扫描方向 */
    if ((lcddev.dir == 1 && lcddev.id != 0X1963) || (lcddev.dir == 0 && lcddev.id == 0X1963))
 8000baa:	4b9c      	ldr	r3, [pc, #624]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000bac:	799b      	ldrb	r3, [r3, #6]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d105      	bne.n	8000bbe <lcd_scan_dir+0x26>
 8000bb2:	4b9a      	ldr	r3, [pc, #616]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000bb4:	889b      	ldrh	r3, [r3, #4]
 8000bb6:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d109      	bne.n	8000bd2 <lcd_scan_dir+0x3a>
 8000bbe:	4b97      	ldr	r3, [pc, #604]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000bc0:	799b      	ldrb	r3, [r3, #6]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d134      	bne.n	8000c30 <lcd_scan_dir+0x98>
 8000bc6:	4b95      	ldr	r3, [pc, #596]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000bc8:	889b      	ldrh	r3, [r3, #4]
 8000bca:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000bce:	4293      	cmp	r3, r2
 8000bd0:	d12e      	bne.n	8000c30 <lcd_scan_dir+0x98>
    {
        switch (dir)   /* 方向转换 */
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	2b07      	cmp	r3, #7
 8000bd6:	d82b      	bhi.n	8000c30 <lcd_scan_dir+0x98>
 8000bd8:	a201      	add	r2, pc, #4	@ (adr r2, 8000be0 <lcd_scan_dir+0x48>)
 8000bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bde:	bf00      	nop
 8000be0:	08000c01 	.word	0x08000c01
 8000be4:	08000c07 	.word	0x08000c07
 8000be8:	08000c0d 	.word	0x08000c0d
 8000bec:	08000c13 	.word	0x08000c13
 8000bf0:	08000c19 	.word	0x08000c19
 8000bf4:	08000c1f 	.word	0x08000c1f
 8000bf8:	08000c25 	.word	0x08000c25
 8000bfc:	08000c2b 	.word	0x08000c2b
        {
            case 0:
                dir = 6;
 8000c00:	2306      	movs	r3, #6
 8000c02:	71fb      	strb	r3, [r7, #7]
                break;
 8000c04:	e014      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 1:
                dir = 7;
 8000c06:	2307      	movs	r3, #7
 8000c08:	71fb      	strb	r3, [r7, #7]
                break;
 8000c0a:	e011      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 2:
                dir = 4;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	71fb      	strb	r3, [r7, #7]
                break;
 8000c10:	e00e      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 3:
                dir = 5;
 8000c12:	2305      	movs	r3, #5
 8000c14:	71fb      	strb	r3, [r7, #7]
                break;
 8000c16:	e00b      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 4:
                dir = 1;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	71fb      	strb	r3, [r7, #7]
                break;
 8000c1c:	e008      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 5:
                dir = 0;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	71fb      	strb	r3, [r7, #7]
                break;
 8000c22:	e005      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 6:
                dir = 3;
 8000c24:	2303      	movs	r3, #3
 8000c26:	71fb      	strb	r3, [r7, #7]
                break;
 8000c28:	e002      	b.n	8000c30 <lcd_scan_dir+0x98>

            case 7:
                dir = 2;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	71fb      	strb	r3, [r7, #7]
                break;
 8000c2e:	bf00      	nop
        }
    }

    /* 根据扫描方式 设置 0X36/0X3600 寄存器 bit 5,6,7 位的值 */
    switch (dir)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	2b07      	cmp	r3, #7
 8000c34:	d835      	bhi.n	8000ca2 <lcd_scan_dir+0x10a>
 8000c36:	a201      	add	r2, pc, #4	@ (adr r2, 8000c3c <lcd_scan_dir+0xa4>)
 8000c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c3c:	08000ca3 	.word	0x08000ca3
 8000c40:	08000c5d 	.word	0x08000c5d
 8000c44:	08000c67 	.word	0x08000c67
 8000c48:	08000c71 	.word	0x08000c71
 8000c4c:	08000c7b 	.word	0x08000c7b
 8000c50:	08000c85 	.word	0x08000c85
 8000c54:	08000c8f 	.word	0x08000c8f
 8000c58:	08000c99 	.word	0x08000c99
        case L2R_U2D:/* 从左到右,从上到下 */
            regval |= (0 << 7) | (0 << 6) | (0 << 5);
            break;

        case L2R_D2U:/* 从左到右,从下到上 */
            regval |= (1 << 7) | (0 << 6) | (0 << 5);
 8000c5c:	89fb      	ldrh	r3, [r7, #14]
 8000c5e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c62:	81fb      	strh	r3, [r7, #14]
            break;
 8000c64:	e01d      	b.n	8000ca2 <lcd_scan_dir+0x10a>

        case R2L_U2D:/* 从右到左,从上到下 */
            regval |= (0 << 7) | (1 << 6) | (0 << 5);
 8000c66:	89fb      	ldrh	r3, [r7, #14]
 8000c68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c6c:	81fb      	strh	r3, [r7, #14]
            break;
 8000c6e:	e018      	b.n	8000ca2 <lcd_scan_dir+0x10a>

        case R2L_D2U:/* 从右到左,从下到上 */
            regval |= (1 << 7) | (1 << 6) | (0 << 5);
 8000c70:	89fb      	ldrh	r3, [r7, #14]
 8000c72:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000c76:	81fb      	strh	r3, [r7, #14]
            break;
 8000c78:	e013      	b.n	8000ca2 <lcd_scan_dir+0x10a>

        case U2D_L2R:/* 从上到下,从左到右 */
            regval |= (0 << 7) | (0 << 6) | (1 << 5);
 8000c7a:	89fb      	ldrh	r3, [r7, #14]
 8000c7c:	f043 0320 	orr.w	r3, r3, #32
 8000c80:	81fb      	strh	r3, [r7, #14]
            break;
 8000c82:	e00e      	b.n	8000ca2 <lcd_scan_dir+0x10a>

        case U2D_R2L:/* 从上到下,从右到左 */
            regval |= (0 << 7) | (1 << 6) | (1 << 5);
 8000c84:	89fb      	ldrh	r3, [r7, #14]
 8000c86:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8000c8a:	81fb      	strh	r3, [r7, #14]
            break;
 8000c8c:	e009      	b.n	8000ca2 <lcd_scan_dir+0x10a>

        case D2U_L2R:/* 从下到上,从左到右 */
            regval |= (1 << 7) | (0 << 6) | (1 << 5);
 8000c8e:	89fb      	ldrh	r3, [r7, #14]
 8000c90:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8000c94:	81fb      	strh	r3, [r7, #14]
            break;
 8000c96:	e004      	b.n	8000ca2 <lcd_scan_dir+0x10a>

        case D2U_R2L:/* 从下到上,从右到左 */
            regval |= (1 << 7) | (1 << 6) | (1 << 5);
 8000c98:	89fb      	ldrh	r3, [r7, #14]
 8000c9a:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 8000c9e:	81fb      	strh	r3, [r7, #14]
            break;
 8000ca0:	bf00      	nop
    }

    dirreg = 0X36;  /* 对绝大部分驱动IC, 由0X36寄存器控制 */
 8000ca2:	2336      	movs	r3, #54	@ 0x36
 8000ca4:	81bb      	strh	r3, [r7, #12]

    if (lcddev.id == 0X5510)
 8000ca6:	4b5d      	ldr	r3, [pc, #372]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000ca8:	889b      	ldrh	r3, [r3, #4]
 8000caa:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d102      	bne.n	8000cb8 <lcd_scan_dir+0x120>
    {
        dirreg = 0X3600;    /* 对于5510, 和其他驱动ic的寄存器有差异 */
 8000cb2:	f44f 5358 	mov.w	r3, #13824	@ 0x3600
 8000cb6:	81bb      	strh	r3, [r7, #12]
    }

    /* 9341 & 7789 & 7796 要设置BGR位 */
    if (lcddev.id == 0X9341 || lcddev.id == 0X7789 || lcddev.id == 0x7796)
 8000cb8:	4b58      	ldr	r3, [pc, #352]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000cba:	889b      	ldrh	r3, [r3, #4]
 8000cbc:	f249 3241 	movw	r2, #37697	@ 0x9341
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d00b      	beq.n	8000cdc <lcd_scan_dir+0x144>
 8000cc4:	4b55      	ldr	r3, [pc, #340]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000cc6:	889b      	ldrh	r3, [r3, #4]
 8000cc8:	f247 7289 	movw	r2, #30601	@ 0x7789
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d005      	beq.n	8000cdc <lcd_scan_dir+0x144>
 8000cd0:	4b52      	ldr	r3, [pc, #328]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000cd2:	889b      	ldrh	r3, [r3, #4]
 8000cd4:	f247 7296 	movw	r2, #30614	@ 0x7796
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	d103      	bne.n	8000ce4 <lcd_scan_dir+0x14c>
    {
        regval |= 0X08;
 8000cdc:	89fb      	ldrh	r3, [r7, #14]
 8000cde:	f043 0308 	orr.w	r3, r3, #8
 8000ce2:	81fb      	strh	r3, [r7, #14]
    }

    lcd_write_reg(dirreg, regval);
 8000ce4:	89fa      	ldrh	r2, [r7, #14]
 8000ce6:	89bb      	ldrh	r3, [r7, #12]
 8000ce8:	4611      	mov	r1, r2
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fe34 	bl	8000958 <lcd_write_reg>

    if (lcddev.id != 0X1963)   /* 1963不做坐标处理 */
 8000cf0:	4b4a      	ldr	r3, [pc, #296]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000cf2:	889b      	ldrh	r3, [r3, #4]
 8000cf4:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d025      	beq.n	8000d48 <lcd_scan_dir+0x1b0>
    {
        if (regval & 0X20)
 8000cfc:	89fb      	ldrh	r3, [r7, #14]
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d010      	beq.n	8000d28 <lcd_scan_dir+0x190>
        {
            if (lcddev.width < lcddev.height)   /* 交换X,Y */
 8000d06:	4b45      	ldr	r3, [pc, #276]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d08:	881a      	ldrh	r2, [r3, #0]
 8000d0a:	4b44      	ldr	r3, [pc, #272]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d0c:	885b      	ldrh	r3, [r3, #2]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d21a      	bcs.n	8000d48 <lcd_scan_dir+0x1b0>
            {
                temp = lcddev.width;
 8000d12:	4b42      	ldr	r3, [pc, #264]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8000d18:	4b40      	ldr	r3, [pc, #256]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d1a:	885a      	ldrh	r2, [r3, #2]
 8000d1c:	4b3f      	ldr	r3, [pc, #252]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d1e:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8000d20:	4a3e      	ldr	r2, [pc, #248]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d22:	897b      	ldrh	r3, [r7, #10]
 8000d24:	8053      	strh	r3, [r2, #2]
 8000d26:	e00f      	b.n	8000d48 <lcd_scan_dir+0x1b0>
            }
        }
        else
        {
            if (lcddev.width > lcddev.height)   /* 交换X,Y */
 8000d28:	4b3c      	ldr	r3, [pc, #240]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d2a:	881a      	ldrh	r2, [r3, #0]
 8000d2c:	4b3b      	ldr	r3, [pc, #236]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d2e:	885b      	ldrh	r3, [r3, #2]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d909      	bls.n	8000d48 <lcd_scan_dir+0x1b0>
            {
                temp = lcddev.width;
 8000d34:	4b39      	ldr	r3, [pc, #228]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d36:	881b      	ldrh	r3, [r3, #0]
 8000d38:	817b      	strh	r3, [r7, #10]
                lcddev.width = lcddev.height;
 8000d3a:	4b38      	ldr	r3, [pc, #224]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d3c:	885a      	ldrh	r2, [r3, #2]
 8000d3e:	4b37      	ldr	r3, [pc, #220]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d40:	801a      	strh	r2, [r3, #0]
                lcddev.height = temp;
 8000d42:	4a36      	ldr	r2, [pc, #216]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d44:	897b      	ldrh	r3, [r7, #10]
 8000d46:	8053      	strh	r3, [r2, #2]
            }
        }
    }

    /* 设置显示区域(开窗)大小 */
    if (lcddev.id == 0X5510)
 8000d48:	4b34      	ldr	r3, [pc, #208]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d4a:	889b      	ldrh	r3, [r3, #4]
 8000d4c:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000d50:	4293      	cmp	r3, r2
 8000d52:	d165      	bne.n	8000e20 <lcd_scan_dir+0x288>
    {
        lcd_wr_regno(lcddev.setxcmd);
 8000d54:	4b31      	ldr	r3, [pc, #196]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d56:	895b      	ldrh	r3, [r3, #10]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff fde9 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(0);
 8000d5e:	2000      	movs	r0, #0
 8000d60:	f7ff fdd2 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 1);
 8000d64:	4b2d      	ldr	r3, [pc, #180]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d66:	895b      	ldrh	r3, [r3, #10]
 8000d68:	3301      	adds	r3, #1
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fddf 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(0);
 8000d72:	2000      	movs	r0, #0
 8000d74:	f7ff fdc8 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 2);
 8000d78:	4b28      	ldr	r3, [pc, #160]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d7a:	895b      	ldrh	r3, [r3, #10]
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fdd5 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8000d86:	4b25      	ldr	r3, [pc, #148]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	121b      	asrs	r3, r3, #8
 8000d8e:	b29b      	uxth	r3, r3
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff fdb9 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setxcmd + 3);
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000d98:	895b      	ldrh	r3, [r3, #10]
 8000d9a:	3303      	adds	r3, #3
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fdc6 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000da6:	881b      	ldrh	r3, [r3, #0]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff fda9 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000db8:	899b      	ldrh	r3, [r3, #12]
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fdb8 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(0);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f7ff fda1 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 1);
 8000dc6:	4b15      	ldr	r3, [pc, #84]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000dc8:	899b      	ldrh	r3, [r3, #12]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff fdae 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(0);
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f7ff fd97 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 2);
 8000dda:	4b10      	ldr	r3, [pc, #64]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000ddc:	899b      	ldrh	r3, [r3, #12]
 8000dde:	3302      	adds	r3, #2
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fda4 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000de8:	4b0c      	ldr	r3, [pc, #48]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000dea:	885b      	ldrh	r3, [r3, #2]
 8000dec:	3b01      	subs	r3, #1
 8000dee:	121b      	asrs	r3, r3, #8
 8000df0:	b29b      	uxth	r3, r3
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff fd88 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd + 3);
 8000df8:	4b08      	ldr	r3, [pc, #32]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000dfa:	899b      	ldrh	r3, [r3, #12]
 8000dfc:	3303      	adds	r3, #3
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff fd95 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000e06:	4b05      	ldr	r3, [pc, #20]	@ (8000e1c <lcd_scan_dir+0x284>)
 8000e08:	885b      	ldrh	r3, [r3, #2]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	b2db      	uxtb	r3, r3
 8000e10:	b29b      	uxth	r3, r3
 8000e12:	4618      	mov	r0, r3
 8000e14:	f7ff fd78 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(0);
        lcd_wr_data(0);
        lcd_wr_data((lcddev.height - 1) >> 8);
        lcd_wr_data((lcddev.height - 1) & 0XFF);
    }
}
 8000e18:	e03a      	b.n	8000e90 <lcd_scan_dir+0x2f8>
 8000e1a:	bf00      	nop
 8000e1c:	240000e0 	.word	0x240000e0
        lcd_wr_regno(lcddev.setxcmd);
 8000e20:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <lcd_scan_dir+0x300>)
 8000e22:	895b      	ldrh	r3, [r3, #10]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fd83 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(0);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f7ff fd6c 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(0);
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff fd69 	bl	8000908 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) >> 8);
 8000e36:	4b18      	ldr	r3, [pc, #96]	@ (8000e98 <lcd_scan_dir+0x300>)
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	121b      	asrs	r3, r3, #8
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fd61 	bl	8000908 <lcd_wr_data>
        lcd_wr_data((lcddev.width - 1) & 0XFF);
 8000e46:	4b14      	ldr	r3, [pc, #80]	@ (8000e98 <lcd_scan_dir+0x300>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff fd58 	bl	8000908 <lcd_wr_data>
        lcd_wr_regno(lcddev.setycmd);
 8000e58:	4b0f      	ldr	r3, [pc, #60]	@ (8000e98 <lcd_scan_dir+0x300>)
 8000e5a:	899b      	ldrh	r3, [r3, #12]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff fd67 	bl	8000930 <lcd_wr_regno>
        lcd_wr_data(0);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fd50 	bl	8000908 <lcd_wr_data>
        lcd_wr_data(0);
 8000e68:	2000      	movs	r0, #0
 8000e6a:	f7ff fd4d 	bl	8000908 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) >> 8);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e98 <lcd_scan_dir+0x300>)
 8000e70:	885b      	ldrh	r3, [r3, #2]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	121b      	asrs	r3, r3, #8
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff fd45 	bl	8000908 <lcd_wr_data>
        lcd_wr_data((lcddev.height - 1) & 0XFF);
 8000e7e:	4b06      	ldr	r3, [pc, #24]	@ (8000e98 <lcd_scan_dir+0x300>)
 8000e80:	885b      	ldrh	r3, [r3, #2]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff fd3c 	bl	8000908 <lcd_wr_data>
}
 8000e90:	bf00      	nop
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	240000e0 	.word	0x240000e0

08000e9c <lcd_draw_point>:
 * @param       x,y: 坐标
 * @param       color: 点的颜色(32位颜色,方便兼容LTDC)
 * @retval      无
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint32_t color)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	603a      	str	r2, [r7, #0]
 8000ea6:	80fb      	strh	r3, [r7, #6]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	80bb      	strh	r3, [r7, #4]
    lcd_set_cursor(x, y);       /* 设置光标位置 */
 8000eac:	88ba      	ldrh	r2, [r7, #4]
 8000eae:	88fb      	ldrh	r3, [r7, #6]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fd9a 	bl	80009ec <lcd_set_cursor>
    lcd_write_ram_prepare();    /* 开始写入GRAM */
 8000eb8:	f7ff fd88 	bl	80009cc <lcd_write_ram_prepare>
    LCD->LCD_RAM = color;
 8000ebc:	4b03      	ldr	r3, [pc, #12]	@ (8000ecc <lcd_draw_point+0x30>)
 8000ebe:	683a      	ldr	r2, [r7, #0]
 8000ec0:	b292      	uxth	r2, r2
 8000ec2:	805a      	strh	r2, [r3, #2]
}
 8000ec4:	bf00      	nop
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	600ffffe 	.word	0x600ffffe

08000ed0 <lcd_ssd_backlight_set>:
 * @brief       SSD1963背光亮度设置函数
 * @param       pwm: 背光等级,0~100.越大越亮.
 * @retval      无
 */
void lcd_ssd_backlight_set(uint8_t pwm)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	71fb      	strb	r3, [r7, #7]
    lcd_wr_regno(0xBE);         /* 配置PWM输出 */
 8000eda:	20be      	movs	r0, #190	@ 0xbe
 8000edc:	f7ff fd28 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x05);          /* 1设置PWM频率 */
 8000ee0:	2005      	movs	r0, #5
 8000ee2:	f7ff fd11 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(pwm * 2.55);    /* 2设置PWM占空比 */
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	ee07 3a90 	vmov	s15, r3
 8000eec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8000ef0:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 8000f28 <lcd_ssd_backlight_set+0x58>
 8000ef4:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ef8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000efc:	ee17 3a90 	vmov	r3, s15
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff fd00 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);          /* 3设置C */
 8000f08:	2001      	movs	r0, #1
 8000f0a:	f7ff fcfd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);          /* 4设置D */
 8000f0e:	20ff      	movs	r0, #255	@ 0xff
 8000f10:	f7ff fcfa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 5设置E */
 8000f14:	2000      	movs	r0, #0
 8000f16:	f7ff fcf7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);          /* 6设置F */
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff fcf4 	bl	8000908 <lcd_wr_data>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	66666666 	.word	0x66666666
 8000f2c:	40046666 	.word	0x40046666

08000f30 <lcd_display_dir>:
 * @brief       设置LCD显示方向
 * @param       dir:0,竖屏; 1,横屏
 * @retval      无
 */
void lcd_display_dir(uint8_t dir)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	71fb      	strb	r3, [r7, #7]
    lcddev.dir = dir;   /* 竖屏/横屏 */
 8000f3a:	4a68      	ldr	r2, [pc, #416]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	7193      	strb	r3, [r2, #6]

    if (dir == 0)       /* 竖屏 */
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d165      	bne.n	8001012 <lcd_display_dir+0xe2>
    {
        lcddev.width = 240;
 8000f46:	4b65      	ldr	r3, [pc, #404]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f48:	22f0      	movs	r2, #240	@ 0xf0
 8000f4a:	801a      	strh	r2, [r3, #0]
        lcddev.height = 320;
 8000f4c:	4b63      	ldr	r3, [pc, #396]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f4e:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000f52:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8000f54:	4b61      	ldr	r3, [pc, #388]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f56:	889b      	ldrh	r3, [r3, #4]
 8000f58:	f245 5210 	movw	r2, #21776	@ 0x5510
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d114      	bne.n	8000f8a <lcd_display_dir+0x5a>
        {
            lcddev.wramcmd = 0X2C00;
 8000f60:	4b5e      	ldr	r3, [pc, #376]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f62:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8000f66:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8000f68:	4b5c      	ldr	r3, [pc, #368]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f6a:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 8000f6e:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 8000f70:	4b5a      	ldr	r3, [pc, #360]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f72:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8000f76:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;
 8000f78:	4b58      	ldr	r3, [pc, #352]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f7a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000f7e:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8000f80:	4b56      	ldr	r3, [pc, #344]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f82:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000f86:	805a      	strh	r2, [r3, #2]
 8000f88:	e020      	b.n	8000fcc <lcd_display_dir+0x9c>
        }
        else if (lcddev.id == 0X1963)
 8000f8a:	4b54      	ldr	r3, [pc, #336]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f8c:	889b      	ldrh	r3, [r3, #4]
 8000f8e:	f641 1263 	movw	r2, #6499	@ 0x1963
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d111      	bne.n	8000fba <lcd_display_dir+0x8a>
        {
            lcddev.wramcmd = 0X2C;  /* 设置写入GRAM的指令 */
 8000f96:	4b51      	ldr	r3, [pc, #324]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f98:	222c      	movs	r2, #44	@ 0x2c
 8000f9a:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2B;  /* 设置写X坐标指令 */
 8000f9c:	4b4f      	ldr	r3, [pc, #316]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000f9e:	222b      	movs	r2, #43	@ 0x2b
 8000fa0:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2A;  /* 设置写Y坐标指令 */
 8000fa2:	4b4e      	ldr	r3, [pc, #312]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fa4:	222a      	movs	r2, #42	@ 0x2a
 8000fa6:	819a      	strh	r2, [r3, #12]
            lcddev.width = 480;     /* 设置宽度480 */
 8000fa8:	4b4c      	ldr	r3, [pc, #304]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000faa:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000fae:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;    /* 设置高度800 */
 8000fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fb2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000fb6:	805a      	strh	r2, [r3, #2]
 8000fb8:	e008      	b.n	8000fcc <lcd_display_dir+0x9c>
        }
        else   /* 其他IC, 包括: 9341 / 5310 / 7789 / 7796 / 9806 等IC */
        {
            lcddev.wramcmd = 0X2C;
 8000fba:	4b48      	ldr	r3, [pc, #288]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fbc:	222c      	movs	r2, #44	@ 0x2c
 8000fbe:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8000fc0:	4b46      	ldr	r3, [pc, #280]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fc2:	222a      	movs	r2, #42	@ 0x2a
 8000fc4:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 8000fc6:	4b45      	ldr	r3, [pc, #276]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fc8:	222b      	movs	r2, #43	@ 0x2b
 8000fca:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* 如果是5310/7796 则表示是 320*480分辨率 */
 8000fcc:	4b43      	ldr	r3, [pc, #268]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fce:	889b      	ldrh	r3, [r3, #4]
 8000fd0:	f245 3210 	movw	r2, #21264	@ 0x5310
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	d005      	beq.n	8000fe4 <lcd_display_dir+0xb4>
 8000fd8:	4b40      	ldr	r3, [pc, #256]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fda:	889b      	ldrh	r3, [r3, #4]
 8000fdc:	f247 7296 	movw	r2, #30614	@ 0x7796
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d107      	bne.n	8000ff4 <lcd_display_dir+0xc4>
        {
            lcddev.width = 320;
 8000fe4:	4b3d      	ldr	r3, [pc, #244]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fe6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000fea:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 8000fec:	4b3b      	ldr	r3, [pc, #236]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000fee:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000ff2:	805a      	strh	r2, [r3, #2]
        }

        if (lcddev.id == 0X9806)    /* 如果是9806 则表示是 480*800 分辨率 */
 8000ff4:	4b39      	ldr	r3, [pc, #228]	@ (80010dc <lcd_display_dir+0x1ac>)
 8000ff6:	889b      	ldrh	r3, [r3, #4]
 8000ff8:	f649 0206 	movw	r2, #38918	@ 0x9806
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d165      	bne.n	80010cc <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 8001000:	4b36      	ldr	r3, [pc, #216]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001002:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001006:	801a      	strh	r2, [r3, #0]
            lcddev.height = 800;
 8001008:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <lcd_display_dir+0x1ac>)
 800100a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800100e:	805a      	strh	r2, [r3, #2]
 8001010:	e05c      	b.n	80010cc <lcd_display_dir+0x19c>
        }
    }
    else                /* 横屏 */
    {
        lcddev.width = 320;         /* 默认宽度 */
 8001012:	4b32      	ldr	r3, [pc, #200]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001014:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001018:	801a      	strh	r2, [r3, #0]
        lcddev.height = 240;        /* 默认高度 */
 800101a:	4b30      	ldr	r3, [pc, #192]	@ (80010dc <lcd_display_dir+0x1ac>)
 800101c:	22f0      	movs	r2, #240	@ 0xf0
 800101e:	805a      	strh	r2, [r3, #2]

        if (lcddev.id == 0x5510)
 8001020:	4b2e      	ldr	r3, [pc, #184]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001022:	889b      	ldrh	r3, [r3, #4]
 8001024:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001028:	4293      	cmp	r3, r2
 800102a:	d114      	bne.n	8001056 <lcd_display_dir+0x126>
        {
            lcddev.wramcmd = 0X2C00;
 800102c:	4b2b      	ldr	r3, [pc, #172]	@ (80010dc <lcd_display_dir+0x1ac>)
 800102e:	f44f 5230 	mov.w	r2, #11264	@ 0x2c00
 8001032:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A00;
 8001034:	4b29      	ldr	r3, [pc, #164]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001036:	f44f 5228 	mov.w	r2, #10752	@ 0x2a00
 800103a:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B00;
 800103c:	4b27      	ldr	r3, [pc, #156]	@ (80010dc <lcd_display_dir+0x1ac>)
 800103e:	f44f 522c 	mov.w	r2, #11008	@ 0x2b00
 8001042:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;
 8001044:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001046:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800104a:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;
 800104c:	4b23      	ldr	r3, [pc, #140]	@ (80010dc <lcd_display_dir+0x1ac>)
 800104e:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001052:	805a      	strh	r2, [r3, #2]
 8001054:	e026      	b.n	80010a4 <lcd_display_dir+0x174>
        }
        else if (lcddev.id == 0X1963 || lcddev.id == 0x9806)
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001058:	889b      	ldrh	r3, [r3, #4]
 800105a:	f641 1263 	movw	r2, #6499	@ 0x1963
 800105e:	4293      	cmp	r3, r2
 8001060:	d005      	beq.n	800106e <lcd_display_dir+0x13e>
 8001062:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001064:	889b      	ldrh	r3, [r3, #4]
 8001066:	f649 0206 	movw	r2, #38918	@ 0x9806
 800106a:	4293      	cmp	r3, r2
 800106c:	d111      	bne.n	8001092 <lcd_display_dir+0x162>
        {
            lcddev.wramcmd = 0X2C;  /* 设置写入GRAM的指令 */
 800106e:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001070:	222c      	movs	r2, #44	@ 0x2c
 8001072:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;  /* 设置写X坐标指令 */
 8001074:	4b19      	ldr	r3, [pc, #100]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001076:	222a      	movs	r2, #42	@ 0x2a
 8001078:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;  /* 设置写Y坐标指令 */
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <lcd_display_dir+0x1ac>)
 800107c:	222b      	movs	r2, #43	@ 0x2b
 800107e:	819a      	strh	r2, [r3, #12]
            lcddev.width = 800;     /* 设置宽度800 */
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001082:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001086:	801a      	strh	r2, [r3, #0]
            lcddev.height = 480;    /* 设置高度480 */
 8001088:	4b14      	ldr	r3, [pc, #80]	@ (80010dc <lcd_display_dir+0x1ac>)
 800108a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800108e:	805a      	strh	r2, [r3, #2]
 8001090:	e008      	b.n	80010a4 <lcd_display_dir+0x174>
        }
        else   /* 其他IC, 包括: 9341 / 5310 / 7789 / 7796 等IC */
        {
            lcddev.wramcmd = 0X2C;
 8001092:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <lcd_display_dir+0x1ac>)
 8001094:	222c      	movs	r2, #44	@ 0x2c
 8001096:	811a      	strh	r2, [r3, #8]
            lcddev.setxcmd = 0X2A;
 8001098:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <lcd_display_dir+0x1ac>)
 800109a:	222a      	movs	r2, #42	@ 0x2a
 800109c:	815a      	strh	r2, [r3, #10]
            lcddev.setycmd = 0X2B;
 800109e:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <lcd_display_dir+0x1ac>)
 80010a0:	222b      	movs	r2, #43	@ 0x2b
 80010a2:	819a      	strh	r2, [r3, #12]
        }

        if (lcddev.id == 0X5310 || lcddev.id == 0x7796)     /* 如果是5310/7796 则表示是 320*480分辨率 */
 80010a4:	4b0d      	ldr	r3, [pc, #52]	@ (80010dc <lcd_display_dir+0x1ac>)
 80010a6:	889b      	ldrh	r3, [r3, #4]
 80010a8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d005      	beq.n	80010bc <lcd_display_dir+0x18c>
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <lcd_display_dir+0x1ac>)
 80010b2:	889b      	ldrh	r3, [r3, #4]
 80010b4:	f247 7296 	movw	r2, #30614	@ 0x7796
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d107      	bne.n	80010cc <lcd_display_dir+0x19c>
        {
            lcddev.width = 480;
 80010bc:	4b07      	ldr	r3, [pc, #28]	@ (80010dc <lcd_display_dir+0x1ac>)
 80010be:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80010c2:	801a      	strh	r2, [r3, #0]
            lcddev.height = 320;
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <lcd_display_dir+0x1ac>)
 80010c6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80010ca:	805a      	strh	r2, [r3, #2]
        }
    }

    lcd_scan_dir(DFT_SCAN_DIR);     /* 默认扫描方向 */
 80010cc:	2000      	movs	r0, #0
 80010ce:	f7ff fd63 	bl	8000b98 <lcd_scan_dir>
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	240000e0 	.word	0x240000e0

080010e0 <HAL_SRAM_MspInit>:
 * @note        此函数会被HAL_SRAM_Init()调用
 * @param       hsram:SRAM句柄
 * @retval      无
 */
void HAL_SRAM_MspInit(SRAM_HandleTypeDef *hsram)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08a      	sub	sp, #40	@ 0x28
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef gpio_init_struct;

    __HAL_RCC_FMC_CLK_ENABLE();         /* 使能FMC时钟 */
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 80010ea:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010ee:	4a24      	ldr	r2, [pc, #144]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 80010f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80010f4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80010f8:	4b21      	ldr	r3, [pc, #132]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 80010fa:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80010fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();       /* 使能GPIOD时钟 */
 8001106:	4b1e      	ldr	r3, [pc, #120]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 8001108:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800110c:	4a1c      	ldr	r2, [pc, #112]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 800110e:	f043 0308 	orr.w	r3, r3, #8
 8001112:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 8001118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800111c:	f003 0308 	and.w	r3, r3, #8
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOE_CLK_ENABLE();       /* 使能GPIOE时钟 */
 8001124:	4b16      	ldr	r3, [pc, #88]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 8001126:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800112a:	4a15      	ldr	r2, [pc, #84]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 800112c:	f043 0310 	orr.w	r3, r3, #16
 8001130:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <HAL_SRAM_MspInit+0xa0>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	f003 0310 	and.w	r3, r3, #16
 800113e:	60bb      	str	r3, [r7, #8]
 8001140:	68bb      	ldr	r3, [r7, #8]

    /* 初始化PD0,1,8,9,10,14,15 */
    gpio_init_struct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 \
 8001142:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001146:	617b      	str	r3, [r7, #20]
                           | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;                  /* 推挽复用 */
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
    gpio_init_struct.Pull = GPIO_PULLUP;                      /* 上拉 */
 800114c:	2301      	movs	r3, #1
 800114e:	61fb      	str	r3, [r7, #28]
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;       /* 高速 */
 8001150:	2303      	movs	r3, #3
 8001152:	623b      	str	r3, [r7, #32]
    gpio_init_struct.Alternate = GPIO_AF12_FMC;               /* 复用为FMC */
 8001154:	230c      	movs	r3, #12
 8001156:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &gpio_init_struct);                  /* 初始化 */
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	4619      	mov	r1, r3
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <HAL_SRAM_MspInit+0xa4>)
 8001160:	f004 fb88 	bl	8005874 <HAL_GPIO_Init>

    /* 初始化PE7,8,9,10,11,12,13,14,15 */
    gpio_init_struct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 \
 8001164:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001168:	617b      	str	r3, [r7, #20]
                           | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &gpio_init_struct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	4805      	ldr	r0, [pc, #20]	@ (8001188 <HAL_SRAM_MspInit+0xa8>)
 8001172:	f004 fb7f 	bl	8005874 <HAL_GPIO_Init>
}
 8001176:	bf00      	nop
 8001178:	3728      	adds	r7, #40	@ 0x28
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	58024400 	.word	0x58024400
 8001184:	58020c00 	.word	0x58020c00
 8001188:	58021000 	.word	0x58021000

0800118c <lcd_init>:
 *
 * @param       无
 * @retval      无
 */
void lcd_init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b098      	sub	sp, #96	@ 0x60
 8001190:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef gpio_init_struct;
    FMC_NORSRAM_TimingTypeDef fmc_read_handle;
    FMC_NORSRAM_TimingTypeDef fmc_write_handle;

    LCD_CS_GPIO_CLK_ENABLE();   /* LCD_CS脚时钟使能 */
 8001192:	4bb4      	ldr	r3, [pc, #720]	@ (8001464 <lcd_init+0x2d8>)
 8001194:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001198:	4ab2      	ldr	r2, [pc, #712]	@ (8001464 <lcd_init+0x2d8>)
 800119a:	f043 0308 	orr.w	r3, r3, #8
 800119e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011a2:	4bb0      	ldr	r3, [pc, #704]	@ (8001464 <lcd_init+0x2d8>)
 80011a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a8:	f003 0308 	and.w	r3, r3, #8
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	693b      	ldr	r3, [r7, #16]
    LCD_WR_GPIO_CLK_ENABLE();   /* LCD_WR脚时钟使能 */
 80011b0:	4bac      	ldr	r3, [pc, #688]	@ (8001464 <lcd_init+0x2d8>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	4aab      	ldr	r2, [pc, #684]	@ (8001464 <lcd_init+0x2d8>)
 80011b8:	f043 0308 	orr.w	r3, r3, #8
 80011bc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011c0:	4ba8      	ldr	r3, [pc, #672]	@ (8001464 <lcd_init+0x2d8>)
 80011c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    LCD_RD_GPIO_CLK_ENABLE();   /* LCD_RD脚时钟使能 */
 80011ce:	4ba5      	ldr	r3, [pc, #660]	@ (8001464 <lcd_init+0x2d8>)
 80011d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011d4:	4aa3      	ldr	r2, [pc, #652]	@ (8001464 <lcd_init+0x2d8>)
 80011d6:	f043 0308 	orr.w	r3, r3, #8
 80011da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011de:	4ba1      	ldr	r3, [pc, #644]	@ (8001464 <lcd_init+0x2d8>)
 80011e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011e4:	f003 0308 	and.w	r3, r3, #8
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
    LCD_RS_GPIO_CLK_ENABLE();   /* LCD_RS脚时钟使能 */
 80011ec:	4b9d      	ldr	r3, [pc, #628]	@ (8001464 <lcd_init+0x2d8>)
 80011ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011f2:	4a9c      	ldr	r2, [pc, #624]	@ (8001464 <lcd_init+0x2d8>)
 80011f4:	f043 0310 	orr.w	r3, r3, #16
 80011f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011fc:	4b99      	ldr	r3, [pc, #612]	@ (8001464 <lcd_init+0x2d8>)
 80011fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001202:	f003 0310 	and.w	r3, r3, #16
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]
    LCD_BL_GPIO_CLK_ENABLE();   /* LCD_BL脚时钟使能 */
 800120a:	4b96      	ldr	r3, [pc, #600]	@ (8001464 <lcd_init+0x2d8>)
 800120c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001210:	4a94      	ldr	r2, [pc, #592]	@ (8001464 <lcd_init+0x2d8>)
 8001212:	f043 0302 	orr.w	r3, r3, #2
 8001216:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800121a:	4b92      	ldr	r3, [pc, #584]	@ (8001464 <lcd_init+0x2d8>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001220:	f003 0302 	and.w	r3, r3, #2
 8001224:	603b      	str	r3, [r7, #0]
 8001226:	683b      	ldr	r3, [r7, #0]

    gpio_init_struct.Pin = LCD_CS_GPIO_PIN;
 8001228:	2380      	movs	r3, #128	@ 0x80
 800122a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_struct.Mode = GPIO_MODE_AF_PP;                /* 推挽复用 */
 800122c:	2302      	movs	r3, #2
 800122e:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_struct.Pull = GPIO_PULLUP;                    /* 上拉 */
 8001230:	2301      	movs	r3, #1
 8001232:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_struct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;     /* 高速 */
 8001234:	2303      	movs	r3, #3
 8001236:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_struct.Alternate = GPIO_AF12_FMC;             /* 复用为FMC */
 8001238:	230c      	movs	r3, #12
 800123a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(LCD_CS_GPIO_PORT, &gpio_init_struct);     /* 初始化LCD_CS引脚 */
 800123c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001240:	4619      	mov	r1, r3
 8001242:	4889      	ldr	r0, [pc, #548]	@ (8001468 <lcd_init+0x2dc>)
 8001244:	f004 fb16 	bl	8005874 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_WR_GPIO_PIN;
 8001248:	2320      	movs	r3, #32
 800124a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(LCD_WR_GPIO_PORT, &gpio_init_struct);     /* 初始化LCD_WR引脚 */
 800124c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001250:	4619      	mov	r1, r3
 8001252:	4885      	ldr	r0, [pc, #532]	@ (8001468 <lcd_init+0x2dc>)
 8001254:	f004 fb0e 	bl	8005874 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RD_GPIO_PIN;
 8001258:	2310      	movs	r3, #16
 800125a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(LCD_RD_GPIO_PORT, &gpio_init_struct);     /* 初始化LCD_RD引脚 */
 800125c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001260:	4619      	mov	r1, r3
 8001262:	4881      	ldr	r0, [pc, #516]	@ (8001468 <lcd_init+0x2dc>)
 8001264:	f004 fb06 	bl	8005874 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_RS_GPIO_PIN;
 8001268:	2308      	movs	r3, #8
 800126a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(LCD_RS_GPIO_PORT, &gpio_init_struct);     /* 初始化LCD_RS引脚 */
 800126c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001270:	4619      	mov	r1, r3
 8001272:	487e      	ldr	r0, [pc, #504]	@ (800146c <lcd_init+0x2e0>)
 8001274:	f004 fafe 	bl	8005874 <HAL_GPIO_Init>

    gpio_init_struct.Pin = LCD_BL_GPIO_PIN;
 8001278:	2320      	movs	r3, #32
 800127a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_struct.Mode = GPIO_MODE_OUTPUT_PP;            /* 推挽输出 */
 800127c:	2301      	movs	r3, #1
 800127e:	653b      	str	r3, [r7, #80]	@ 0x50
    HAL_GPIO_Init(LCD_BL_GPIO_PORT, &gpio_init_struct);     /* LCD_BL引脚模式设置(推挽输出) */
 8001280:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001284:	4619      	mov	r1, r3
 8001286:	487a      	ldr	r0, [pc, #488]	@ (8001470 <lcd_init+0x2e4>)
 8001288:	f004 faf4 	bl	8005874 <HAL_GPIO_Init>

    g_sram_handle.Instance = FMC_NORSRAM_DEVICE;
 800128c:	4b79      	ldr	r3, [pc, #484]	@ (8001474 <lcd_init+0x2e8>)
 800128e:	4a7a      	ldr	r2, [pc, #488]	@ (8001478 <lcd_init+0x2ec>)
 8001290:	601a      	str	r2, [r3, #0]
    g_sram_handle.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001292:	4b78      	ldr	r3, [pc, #480]	@ (8001474 <lcd_init+0x2e8>)
 8001294:	4a79      	ldr	r2, [pc, #484]	@ (800147c <lcd_init+0x2f0>)
 8001296:	605a      	str	r2, [r3, #4]

    g_sram_handle.Init.NSBank = FMC_NORSRAM_BANK1;                        /* 使用NE1 */
 8001298:	4b76      	ldr	r3, [pc, #472]	@ (8001474 <lcd_init+0x2e8>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
    g_sram_handle.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;     /* 不复用数据线 */
 800129e:	4b75      	ldr	r3, [pc, #468]	@ (8001474 <lcd_init+0x2e8>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	60da      	str	r2, [r3, #12]
    g_sram_handle.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;                 /* SRAM */
 80012a4:	4b73      	ldr	r3, [pc, #460]	@ (8001474 <lcd_init+0x2e8>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
    g_sram_handle.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;    /* 16位数据宽度 */
 80012aa:	4b72      	ldr	r3, [pc, #456]	@ (8001474 <lcd_init+0x2e8>)
 80012ac:	2210      	movs	r2, #16
 80012ae:	615a      	str	r2, [r3, #20]
    g_sram_handle.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;   /* 是否使能突发访问,仅对同步突发存储器有效,此处未用到 */
 80012b0:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <lcd_init+0x2e8>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	619a      	str	r2, [r3, #24]
    g_sram_handle.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW; /* 等待信号的极性,仅在突发模式访问下有用 */
 80012b6:	4b6f      	ldr	r3, [pc, #444]	@ (8001474 <lcd_init+0x2e8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	61da      	str	r2, [r3, #28]
    g_sram_handle.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;      /* 存储器是在等待周期之前的一个时钟周期还是等待周期期间使能NWAIT */
 80012bc:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <lcd_init+0x2e8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	621a      	str	r2, [r3, #32]
    g_sram_handle.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;       /* 存储器写使能 */
 80012c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001474 <lcd_init+0x2e8>)
 80012c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
    g_sram_handle.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;              /* 等待使能位,此处未用到 */
 80012ca:	4b6a      	ldr	r3, [pc, #424]	@ (8001474 <lcd_init+0x2e8>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
    g_sram_handle.Init.ExtendedMode = FMC_EXTENDED_MODE_ENABLE;           /* 读写使用不同的时序 */
 80012d0:	4b68      	ldr	r3, [pc, #416]	@ (8001474 <lcd_init+0x2e8>)
 80012d2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012d6:	62da      	str	r2, [r3, #44]	@ 0x2c
    g_sram_handle.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;  /* 是否使能同步传输模式下的等待信号,此处未用到 */
 80012d8:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <lcd_init+0x2e8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	631a      	str	r2, [r3, #48]	@ 0x30
    g_sram_handle.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;              /* 禁止突发写 */
 80012de:	4b65      	ldr	r3, [pc, #404]	@ (8001474 <lcd_init+0x2e8>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	635a      	str	r2, [r3, #52]	@ 0x34
    g_sram_handle.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ASYNC;
 80012e4:	4b63      	ldr	r3, [pc, #396]	@ (8001474 <lcd_init+0x2e8>)
 80012e6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80012ea:	639a      	str	r2, [r3, #56]	@ 0x38

    /* FMC读时序控制寄存器 */
    fmc_read_handle.AddressSetupTime = 0x0F;            /* 地址建立时间(ADDSET)为15个fmc_ker_ck 1/220M=4.5ns*15=67.5ns */
 80012ec:	230f      	movs	r3, #15
 80012ee:	633b      	str	r3, [r7, #48]	@ 0x30
    fmc_read_handle.AddressHoldTime = 0x00;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	@ 0x34
    fmc_read_handle.DataSetupTime = 0x4E;               /* 数据保存时间(DATAST)为78个fmc_ker_ck=4.5*78=351ns */
 80012f4:	234e      	movs	r3, #78	@ 0x4e
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
                                                        /* 因为液晶驱动IC的读数据的时候，速度不能太快,尤其是个别奇葩芯片 */
    fmc_read_handle.AccessMode = FMC_ACCESS_MODE_A;     /* 模式A */
 80012f8:	2300      	movs	r3, #0
 80012fa:	64bb      	str	r3, [r7, #72]	@ 0x48
    /* FMC写时序控制寄存器 */
    fmc_write_handle.AddressSetupTime = 0x0F;           /* 地址建立时间(ADDSET)为15个fmc_ker_ck=67.5ns */
 80012fc:	230f      	movs	r3, #15
 80012fe:	617b      	str	r3, [r7, #20]
    fmc_write_handle.AddressHoldTime = 0x00;
 8001300:	2300      	movs	r3, #0
 8001302:	61bb      	str	r3, [r7, #24]
    fmc_write_handle.DataSetupTime = 0x0F;              /* 数据保存时间(DATAST)为15个fmc_ker_ck=67.5ns */
 8001304:	230f      	movs	r3, #15
 8001306:	61fb      	str	r3, [r7, #28]
                                                        /* 15个fmc_ker_ck（fmc_ker_ck=220Mhz）,某些液晶驱动IC的写信号脉宽，最少也得50ns。 */
    fmc_write_handle.AccessMode = FMC_ACCESS_MODE_A;    /* 模式A */
 8001308:	2300      	movs	r3, #0
 800130a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    HAL_SRAM_Init(&g_sram_handle, &fmc_read_handle, &fmc_write_handle);
 800130c:	f107 0214 	add.w	r2, r7, #20
 8001310:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001314:	4619      	mov	r1, r3
 8001316:	4857      	ldr	r0, [pc, #348]	@ (8001474 <lcd_init+0x2e8>)
 8001318:	f007 fb00 	bl	800891c <HAL_SRAM_Init>
    delay_ms(50);        /* 初始化FMC后,必须等待一定时间才能开始初始化 */
 800131c:	2032      	movs	r0, #50	@ 0x32
 800131e:	f7ff fa37 	bl	8000790 <delay_ms>

    /* 尝试9341 ID的读取 */
    lcd_wr_regno(0XD3);
 8001322:	20d3      	movs	r0, #211	@ 0xd3
 8001324:	f7ff fb04 	bl	8000930 <lcd_wr_regno>
    lcddev.id = lcd_rd_data();  /* dummy read */
 8001328:	f7ff fb3e 	bl	80009a8 <lcd_rd_data>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b53      	ldr	r3, [pc, #332]	@ (8001480 <lcd_init+0x2f4>)
 8001332:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* 读到0X00 */
 8001334:	f7ff fb38 	bl	80009a8 <lcd_rd_data>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b50      	ldr	r3, [pc, #320]	@ (8001480 <lcd_init+0x2f4>)
 800133e:	809a      	strh	r2, [r3, #4]
    lcddev.id = lcd_rd_data();  /* 读取0X93 */
 8001340:	f7ff fb32 	bl	80009a8 <lcd_rd_data>
 8001344:	4603      	mov	r3, r0
 8001346:	461a      	mov	r2, r3
 8001348:	4b4d      	ldr	r3, [pc, #308]	@ (8001480 <lcd_init+0x2f4>)
 800134a:	809a      	strh	r2, [r3, #4]
    lcddev.id <<= 8;
 800134c:	4b4c      	ldr	r3, [pc, #304]	@ (8001480 <lcd_init+0x2f4>)
 800134e:	889b      	ldrh	r3, [r3, #4]
 8001350:	021b      	lsls	r3, r3, #8
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <lcd_init+0x2f4>)
 8001356:	809a      	strh	r2, [r3, #4]
    lcddev.id |= lcd_rd_data(); /* 读取0X41 */
 8001358:	f7ff fb26 	bl	80009a8 <lcd_rd_data>
 800135c:	4603      	mov	r3, r0
 800135e:	461a      	mov	r2, r3
 8001360:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <lcd_init+0x2f4>)
 8001362:	889b      	ldrh	r3, [r3, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <lcd_init+0x2f4>)
 800136a:	809a      	strh	r2, [r3, #4]

    if (lcddev.id != 0X9341)    /* 不是 9341 , 尝试看看是不是 ST7789 */
 800136c:	4b44      	ldr	r3, [pc, #272]	@ (8001480 <lcd_init+0x2f4>)
 800136e:	889b      	ldrh	r3, [r3, #4]
 8001370:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001374:	4293      	cmp	r3, r2
 8001376:	f000 8133 	beq.w	80015e0 <lcd_init+0x454>
    {
        lcd_wr_regno(0X04);
 800137a:	2004      	movs	r0, #4
 800137c:	f7ff fad8 	bl	8000930 <lcd_wr_regno>
        lcddev.id = lcd_rd_data();      /* dummy read */
 8001380:	f7ff fb12 	bl	80009a8 <lcd_rd_data>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b3d      	ldr	r3, [pc, #244]	@ (8001480 <lcd_init+0x2f4>)
 800138a:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* 读到0X85 */
 800138c:	f7ff fb0c 	bl	80009a8 <lcd_rd_data>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b3a      	ldr	r3, [pc, #232]	@ (8001480 <lcd_init+0x2f4>)
 8001396:	809a      	strh	r2, [r3, #4]
        lcddev.id = lcd_rd_data();      /* 读取0X85 */
 8001398:	f7ff fb06 	bl	80009a8 <lcd_rd_data>
 800139c:	4603      	mov	r3, r0
 800139e:	461a      	mov	r2, r3
 80013a0:	4b37      	ldr	r3, [pc, #220]	@ (8001480 <lcd_init+0x2f4>)
 80013a2:	809a      	strh	r2, [r3, #4]
        lcddev.id <<= 8;
 80013a4:	4b36      	ldr	r3, [pc, #216]	@ (8001480 <lcd_init+0x2f4>)
 80013a6:	889b      	ldrh	r3, [r3, #4]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	4b34      	ldr	r3, [pc, #208]	@ (8001480 <lcd_init+0x2f4>)
 80013ae:	809a      	strh	r2, [r3, #4]
        lcddev.id |= lcd_rd_data();     /* 读取0X52 */
 80013b0:	f7ff fafa 	bl	80009a8 <lcd_rd_data>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b31      	ldr	r3, [pc, #196]	@ (8001480 <lcd_init+0x2f4>)
 80013ba:	889b      	ldrh	r3, [r3, #4]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b2f      	ldr	r3, [pc, #188]	@ (8001480 <lcd_init+0x2f4>)
 80013c2:	809a      	strh	r2, [r3, #4]

        if (lcddev.id == 0X8552)        /* 将8552的ID转换成7789 */
 80013c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001480 <lcd_init+0x2f4>)
 80013c6:	889b      	ldrh	r3, [r3, #4]
 80013c8:	f248 5252 	movw	r2, #34130	@ 0x8552
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d103      	bne.n	80013d8 <lcd_init+0x24c>
        {
            lcddev.id = 0x7789;
 80013d0:	4b2b      	ldr	r3, [pc, #172]	@ (8001480 <lcd_init+0x2f4>)
 80013d2:	f247 7289 	movw	r2, #30601	@ 0x7789
 80013d6:	809a      	strh	r2, [r3, #4]
        }

        if (lcddev.id != 0x7789)        /* 也不是ST7789, 尝试是不是 NT35310 */
 80013d8:	4b29      	ldr	r3, [pc, #164]	@ (8001480 <lcd_init+0x2f4>)
 80013da:	889b      	ldrh	r3, [r3, #4]
 80013dc:	f247 7289 	movw	r2, #30601	@ 0x7789
 80013e0:	4293      	cmp	r3, r2
 80013e2:	f000 80fd 	beq.w	80015e0 <lcd_init+0x454>
        {
            lcd_wr_regno(0xD4);
 80013e6:	20d4      	movs	r0, #212	@ 0xd4
 80013e8:	f7ff faa2 	bl	8000930 <lcd_wr_regno>
            lcddev.id = lcd_rd_data();  /* dummy read */
 80013ec:	f7ff fadc 	bl	80009a8 <lcd_rd_data>
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	4b22      	ldr	r3, [pc, #136]	@ (8001480 <lcd_init+0x2f4>)
 80013f6:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* 读回0x01 */
 80013f8:	f7ff fad6 	bl	80009a8 <lcd_rd_data>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b1f      	ldr	r3, [pc, #124]	@ (8001480 <lcd_init+0x2f4>)
 8001402:	809a      	strh	r2, [r3, #4]
            lcddev.id = lcd_rd_data();  /* 读回0x53 */
 8001404:	f7ff fad0 	bl	80009a8 <lcd_rd_data>
 8001408:	4603      	mov	r3, r0
 800140a:	461a      	mov	r2, r3
 800140c:	4b1c      	ldr	r3, [pc, #112]	@ (8001480 <lcd_init+0x2f4>)
 800140e:	809a      	strh	r2, [r3, #4]
            lcddev.id <<= 8;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <lcd_init+0x2f4>)
 8001412:	889b      	ldrh	r3, [r3, #4]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b19      	ldr	r3, [pc, #100]	@ (8001480 <lcd_init+0x2f4>)
 800141a:	809a      	strh	r2, [r3, #4]
            lcddev.id |= lcd_rd_data(); /* 这里读回0x10 */
 800141c:	f7ff fac4 	bl	80009a8 <lcd_rd_data>
 8001420:	4603      	mov	r3, r0
 8001422:	461a      	mov	r2, r3
 8001424:	4b16      	ldr	r3, [pc, #88]	@ (8001480 <lcd_init+0x2f4>)
 8001426:	889b      	ldrh	r3, [r3, #4]
 8001428:	4313      	orrs	r3, r2
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <lcd_init+0x2f4>)
 800142e:	809a      	strh	r2, [r3, #4]

            if (lcddev.id != 0x5310)    /* 也不是NT35310,尝试看看是不是ST7796 */
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <lcd_init+0x2f4>)
 8001432:	889b      	ldrh	r3, [r3, #4]
 8001434:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001438:	4293      	cmp	r3, r2
 800143a:	f000 80d1 	beq.w	80015e0 <lcd_init+0x454>
            {
                lcd_wr_regno(0XD3);
 800143e:	20d3      	movs	r0, #211	@ 0xd3
 8001440:	f7ff fa76 	bl	8000930 <lcd_wr_regno>
                lcddev.id = lcd_rd_data();  /* dummy read */
 8001444:	f7ff fab0 	bl	80009a8 <lcd_rd_data>
 8001448:	4603      	mov	r3, r0
 800144a:	461a      	mov	r2, r3
 800144c:	4b0c      	ldr	r3, [pc, #48]	@ (8001480 <lcd_init+0x2f4>)
 800144e:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* 读到0X00 */
 8001450:	f7ff faaa 	bl	80009a8 <lcd_rd_data>
 8001454:	4603      	mov	r3, r0
 8001456:	461a      	mov	r2, r3
 8001458:	4b09      	ldr	r3, [pc, #36]	@ (8001480 <lcd_init+0x2f4>)
 800145a:	809a      	strh	r2, [r3, #4]
                lcddev.id = lcd_rd_data();  /* 读取0X77 */
 800145c:	f7ff faa4 	bl	80009a8 <lcd_rd_data>
 8001460:	4603      	mov	r3, r0
 8001462:	e00f      	b.n	8001484 <lcd_init+0x2f8>
 8001464:	58024400 	.word	0x58024400
 8001468:	58020c00 	.word	0x58020c00
 800146c:	58021000 	.word	0x58021000
 8001470:	58020400 	.word	0x58020400
 8001474:	24000094 	.word	0x24000094
 8001478:	52004000 	.word	0x52004000
 800147c:	52004104 	.word	0x52004104
 8001480:	240000e0 	.word	0x240000e0
 8001484:	461a      	mov	r2, r3
 8001486:	4b95      	ldr	r3, [pc, #596]	@ (80016dc <lcd_init+0x550>)
 8001488:	809a      	strh	r2, [r3, #4]
                lcddev.id <<= 8;
 800148a:	4b94      	ldr	r3, [pc, #592]	@ (80016dc <lcd_init+0x550>)
 800148c:	889b      	ldrh	r3, [r3, #4]
 800148e:	021b      	lsls	r3, r3, #8
 8001490:	b29a      	uxth	r2, r3
 8001492:	4b92      	ldr	r3, [pc, #584]	@ (80016dc <lcd_init+0x550>)
 8001494:	809a      	strh	r2, [r3, #4]
                lcddev.id |= lcd_rd_data(); /* 读取0X96 */
 8001496:	f7ff fa87 	bl	80009a8 <lcd_rd_data>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b8f      	ldr	r3, [pc, #572]	@ (80016dc <lcd_init+0x550>)
 80014a0:	889b      	ldrh	r3, [r3, #4]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	4b8d      	ldr	r3, [pc, #564]	@ (80016dc <lcd_init+0x550>)
 80014a8:	809a      	strh	r2, [r3, #4]

                if (lcddev.id != 0x7796)    /* 也不是ST7796,尝试看看是不是NT35510 */
 80014aa:	4b8c      	ldr	r3, [pc, #560]	@ (80016dc <lcd_init+0x550>)
 80014ac:	889b      	ldrh	r3, [r3, #4]
 80014ae:	f247 7296 	movw	r2, #30614	@ 0x7796
 80014b2:	4293      	cmp	r3, r2
 80014b4:	f000 8094 	beq.w	80015e0 <lcd_init+0x454>
                {
                    /* 发送密钥（厂家提供） */
                    lcd_write_reg(0xF000, 0x0055);
 80014b8:	2155      	movs	r1, #85	@ 0x55
 80014ba:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 80014be:	f7ff fa4b 	bl	8000958 <lcd_write_reg>
                    lcd_write_reg(0xF001, 0x00AA);
 80014c2:	21aa      	movs	r1, #170	@ 0xaa
 80014c4:	f24f 0001 	movw	r0, #61441	@ 0xf001
 80014c8:	f7ff fa46 	bl	8000958 <lcd_write_reg>
                    lcd_write_reg(0xF002, 0x0052);
 80014cc:	2152      	movs	r1, #82	@ 0x52
 80014ce:	f24f 0002 	movw	r0, #61442	@ 0xf002
 80014d2:	f7ff fa41 	bl	8000958 <lcd_write_reg>
                    lcd_write_reg(0xF003, 0x0008);
 80014d6:	2108      	movs	r1, #8
 80014d8:	f24f 0003 	movw	r0, #61443	@ 0xf003
 80014dc:	f7ff fa3c 	bl	8000958 <lcd_write_reg>
                    lcd_write_reg(0xF004, 0x0001);
 80014e0:	2101      	movs	r1, #1
 80014e2:	f24f 0004 	movw	r0, #61444	@ 0xf004
 80014e6:	f7ff fa37 	bl	8000958 <lcd_write_reg>

                    lcd_wr_regno(0xC500);       /* 读取ID低八位 */
 80014ea:	f44f 4045 	mov.w	r0, #50432	@ 0xc500
 80014ee:	f7ff fa1f 	bl	8000930 <lcd_wr_regno>
                    lcddev.id = lcd_rd_data();  /* 读回0x55 */
 80014f2:	f7ff fa59 	bl	80009a8 <lcd_rd_data>
 80014f6:	4603      	mov	r3, r0
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b78      	ldr	r3, [pc, #480]	@ (80016dc <lcd_init+0x550>)
 80014fc:	809a      	strh	r2, [r3, #4]
                    lcddev.id <<= 8;
 80014fe:	4b77      	ldr	r3, [pc, #476]	@ (80016dc <lcd_init+0x550>)
 8001500:	889b      	ldrh	r3, [r3, #4]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	b29a      	uxth	r2, r3
 8001506:	4b75      	ldr	r3, [pc, #468]	@ (80016dc <lcd_init+0x550>)
 8001508:	809a      	strh	r2, [r3, #4]

                    lcd_wr_regno(0xC501);       /* 读取ID高八位 */
 800150a:	f24c 5001 	movw	r0, #50433	@ 0xc501
 800150e:	f7ff fa0f 	bl	8000930 <lcd_wr_regno>
                    lcddev.id |= lcd_rd_data(); /* 读回0x10 */
 8001512:	f7ff fa49 	bl	80009a8 <lcd_rd_data>
 8001516:	4603      	mov	r3, r0
 8001518:	461a      	mov	r2, r3
 800151a:	4b70      	ldr	r3, [pc, #448]	@ (80016dc <lcd_init+0x550>)
 800151c:	889b      	ldrh	r3, [r3, #4]
 800151e:	4313      	orrs	r3, r2
 8001520:	b29a      	uxth	r2, r3
 8001522:	4b6e      	ldr	r3, [pc, #440]	@ (80016dc <lcd_init+0x550>)
 8001524:	809a      	strh	r2, [r3, #4]

                    delay_ms(5);                /* 等待5ms, 因为0XC501指令对1963来说就是软件复位指令, 等待5ms让1963复位完成再操作 */
 8001526:	2005      	movs	r0, #5
 8001528:	f7ff f932 	bl	8000790 <delay_ms>

                    if (lcddev.id != 0x5510)    /* 也不是NT5510,尝试看看是不是ILI9806 */
 800152c:	4b6b      	ldr	r3, [pc, #428]	@ (80016dc <lcd_init+0x550>)
 800152e:	889b      	ldrh	r3, [r3, #4]
 8001530:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001534:	4293      	cmp	r3, r2
 8001536:	d053      	beq.n	80015e0 <lcd_init+0x454>
                    {
                        lcd_wr_regno(0XD3);
 8001538:	20d3      	movs	r0, #211	@ 0xd3
 800153a:	f7ff f9f9 	bl	8000930 <lcd_wr_regno>
                        lcddev.id = lcd_rd_data();  /* dummy read */
 800153e:	f7ff fa33 	bl	80009a8 <lcd_rd_data>
 8001542:	4603      	mov	r3, r0
 8001544:	461a      	mov	r2, r3
 8001546:	4b65      	ldr	r3, [pc, #404]	@ (80016dc <lcd_init+0x550>)
 8001548:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* 读回0X00 */
 800154a:	f7ff fa2d 	bl	80009a8 <lcd_rd_data>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	4b62      	ldr	r3, [pc, #392]	@ (80016dc <lcd_init+0x550>)
 8001554:	809a      	strh	r2, [r3, #4]
                        lcddev.id = lcd_rd_data();  /* 读回0X98 */
 8001556:	f7ff fa27 	bl	80009a8 <lcd_rd_data>
 800155a:	4603      	mov	r3, r0
 800155c:	461a      	mov	r2, r3
 800155e:	4b5f      	ldr	r3, [pc, #380]	@ (80016dc <lcd_init+0x550>)
 8001560:	809a      	strh	r2, [r3, #4]
                        lcddev.id <<= 8;
 8001562:	4b5e      	ldr	r3, [pc, #376]	@ (80016dc <lcd_init+0x550>)
 8001564:	889b      	ldrh	r3, [r3, #4]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b29a      	uxth	r2, r3
 800156a:	4b5c      	ldr	r3, [pc, #368]	@ (80016dc <lcd_init+0x550>)
 800156c:	809a      	strh	r2, [r3, #4]
                        lcddev.id |= lcd_rd_data(); /* 读回0X06 */
 800156e:	f7ff fa1b 	bl	80009a8 <lcd_rd_data>
 8001572:	4603      	mov	r3, r0
 8001574:	461a      	mov	r2, r3
 8001576:	4b59      	ldr	r3, [pc, #356]	@ (80016dc <lcd_init+0x550>)
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	4313      	orrs	r3, r2
 800157c:	b29a      	uxth	r2, r3
 800157e:	4b57      	ldr	r3, [pc, #348]	@ (80016dc <lcd_init+0x550>)
 8001580:	809a      	strh	r2, [r3, #4]

                        if (lcddev.id != 0x9806)    /* 也不是ILI9806,尝试看看是不是SSD1963 */
 8001582:	4b56      	ldr	r3, [pc, #344]	@ (80016dc <lcd_init+0x550>)
 8001584:	889b      	ldrh	r3, [r3, #4]
 8001586:	f649 0206 	movw	r2, #38918	@ 0x9806
 800158a:	4293      	cmp	r3, r2
 800158c:	d028      	beq.n	80015e0 <lcd_init+0x454>
                        {
                            lcd_wr_regno(0xA1);
 800158e:	20a1      	movs	r0, #161	@ 0xa1
 8001590:	f7ff f9ce 	bl	8000930 <lcd_wr_regno>
                            lcddev.id = lcd_rd_data();
 8001594:	f7ff fa08 	bl	80009a8 <lcd_rd_data>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	4b4f      	ldr	r3, [pc, #316]	@ (80016dc <lcd_init+0x550>)
 800159e:	809a      	strh	r2, [r3, #4]
                            lcddev.id = lcd_rd_data();  /* 读回0x57 */
 80015a0:	f7ff fa02 	bl	80009a8 <lcd_rd_data>
 80015a4:	4603      	mov	r3, r0
 80015a6:	461a      	mov	r2, r3
 80015a8:	4b4c      	ldr	r3, [pc, #304]	@ (80016dc <lcd_init+0x550>)
 80015aa:	809a      	strh	r2, [r3, #4]
                            lcddev.id <<= 8;
 80015ac:	4b4b      	ldr	r3, [pc, #300]	@ (80016dc <lcd_init+0x550>)
 80015ae:	889b      	ldrh	r3, [r3, #4]
 80015b0:	021b      	lsls	r3, r3, #8
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	4b49      	ldr	r3, [pc, #292]	@ (80016dc <lcd_init+0x550>)
 80015b6:	809a      	strh	r2, [r3, #4]
                            lcddev.id |= lcd_rd_data(); /* 读回0x61 */
 80015b8:	f7ff f9f6 	bl	80009a8 <lcd_rd_data>
 80015bc:	4603      	mov	r3, r0
 80015be:	461a      	mov	r2, r3
 80015c0:	4b46      	ldr	r3, [pc, #280]	@ (80016dc <lcd_init+0x550>)
 80015c2:	889b      	ldrh	r3, [r3, #4]
 80015c4:	4313      	orrs	r3, r2
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	4b44      	ldr	r3, [pc, #272]	@ (80016dc <lcd_init+0x550>)
 80015ca:	809a      	strh	r2, [r3, #4]

                            if (lcddev.id == 0x5761) lcddev.id = 0x1963; /* SSD1963读回的ID是5761H,为方便区分,我们强制设置为1963 */
 80015cc:	4b43      	ldr	r3, [pc, #268]	@ (80016dc <lcd_init+0x550>)
 80015ce:	889b      	ldrh	r3, [r3, #4]
 80015d0:	f245 7261 	movw	r2, #22369	@ 0x5761
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d103      	bne.n	80015e0 <lcd_init+0x454>
 80015d8:	4b40      	ldr	r3, [pc, #256]	@ (80016dc <lcd_init+0x550>)
 80015da:	f641 1263 	movw	r2, #6499	@ 0x1963
 80015de:	809a      	strh	r2, [r3, #4]

    /* 特别注意, 如果在main函数里面屏蔽串口1初始化, 则会卡死在printf
     * 里面(卡死在f_putc函数), 所以, 必须初始化串口1, 或者屏蔽掉下面
     * 这行 printf 语句 !!!!!!!
     */
    printf("LCD ID:%x\r\n", lcddev.id); /* 打印LCD ID */
 80015e0:	4b3e      	ldr	r3, [pc, #248]	@ (80016dc <lcd_init+0x550>)
 80015e2:	889b      	ldrh	r3, [r3, #4]
 80015e4:	4619      	mov	r1, r3
 80015e6:	483e      	ldr	r0, [pc, #248]	@ (80016e0 <lcd_init+0x554>)
 80015e8:	f009 f976 	bl	800a8d8 <iprintf>

    if (lcddev.id == 0X7789)
 80015ec:	4b3b      	ldr	r3, [pc, #236]	@ (80016dc <lcd_init+0x550>)
 80015ee:	889b      	ldrh	r3, [r3, #4]
 80015f0:	f247 7289 	movw	r2, #30601	@ 0x7789
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d102      	bne.n	80015fe <lcd_init+0x472>
    {
        lcd_ex_st7789_reginit();    /* 执行ST7789初始化 */
 80015f8:	f000 fa08 	bl	8001a0c <lcd_ex_st7789_reginit>
 80015fc:	e037      	b.n	800166e <lcd_init+0x4e2>
    }
    else if (lcddev.id == 0X9341)
 80015fe:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <lcd_init+0x550>)
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	f249 3241 	movw	r2, #37697	@ 0x9341
 8001606:	4293      	cmp	r3, r2
 8001608:	d102      	bne.n	8001610 <lcd_init+0x484>
    {
        lcd_ex_ili9341_reginit();   /* 执行ILI9341初始化 */
 800160a:	f000 fad5 	bl	8001bb8 <lcd_ex_ili9341_reginit>
 800160e:	e02e      	b.n	800166e <lcd_init+0x4e2>
    }
    else if (lcddev.id == 0x5310)
 8001610:	4b32      	ldr	r3, [pc, #200]	@ (80016dc <lcd_init+0x550>)
 8001612:	889b      	ldrh	r3, [r3, #4]
 8001614:	f245 3210 	movw	r2, #21264	@ 0x5310
 8001618:	4293      	cmp	r3, r2
 800161a:	d102      	bne.n	8001622 <lcd_init+0x496>
    {
        lcd_ex_nt35310_reginit();   /* 执行NT35310初始化 */
 800161c:	f000 fbe4 	bl	8001de8 <lcd_ex_nt35310_reginit>
 8001620:	e025      	b.n	800166e <lcd_init+0x4e2>
    }
    else if (lcddev.id == 0x7796)
 8001622:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <lcd_init+0x550>)
 8001624:	889b      	ldrh	r3, [r3, #4]
 8001626:	f247 7296 	movw	r2, #30614	@ 0x7796
 800162a:	4293      	cmp	r3, r2
 800162c:	d102      	bne.n	8001634 <lcd_init+0x4a8>
    {
        lcd_ex_st7796_reginit();    /* 执行ST7796初始化 */
 800162e:	f001 fb56 	bl	8002cde <lcd_ex_st7796_reginit>
 8001632:	e01c      	b.n	800166e <lcd_init+0x4e2>
    }
    else if (lcddev.id == 0x5510)
 8001634:	4b29      	ldr	r3, [pc, #164]	@ (80016dc <lcd_init+0x550>)
 8001636:	889b      	ldrh	r3, [r3, #4]
 8001638:	f245 5210 	movw	r2, #21776	@ 0x5510
 800163c:	4293      	cmp	r3, r2
 800163e:	d102      	bne.n	8001646 <lcd_init+0x4ba>
    {
        lcd_ex_nt35510_reginit();   /* 执行NT35510初始化 */
 8001640:	f001 fc32 	bl	8002ea8 <lcd_ex_nt35510_reginit>
 8001644:	e013      	b.n	800166e <lcd_init+0x4e2>
    }
    else if (lcddev.id == 0x9806)
 8001646:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <lcd_init+0x550>)
 8001648:	889b      	ldrh	r3, [r3, #4]
 800164a:	f649 0206 	movw	r2, #38918	@ 0x9806
 800164e:	4293      	cmp	r3, r2
 8001650:	d102      	bne.n	8001658 <lcd_init+0x4cc>
    {
        lcd_ex_ili9806_reginit();   /* 执行ILI9806初始化 */
 8001652:	f002 fba9 	bl	8003da8 <lcd_ex_ili9806_reginit>
 8001656:	e00a      	b.n	800166e <lcd_init+0x4e2>
    }
    else if (lcddev.id == 0x1963)
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <lcd_init+0x550>)
 800165a:	889b      	ldrh	r3, [r3, #4]
 800165c:	f641 1263 	movw	r2, #6499	@ 0x1963
 8001660:	4293      	cmp	r3, r2
 8001662:	d104      	bne.n	800166e <lcd_init+0x4e2>
    {
        lcd_ex_ssd1963_reginit();   /* 执行SSD1963初始化 */
 8001664:	f002 fd42 	bl	80040ec <lcd_ex_ssd1963_reginit>
        lcd_ssd_backlight_set(100); /* 背光设置为最亮 */
 8001668:	2064      	movs	r0, #100	@ 0x64
 800166a:	f7ff fc31 	bl	8000ed0 <lcd_ssd_backlight_set>
    }

    /* 由于不同屏幕的写时序不同，这里的时序可以根据自己的屏幕进行修改
      （若插上长排线对时序也会有影响，需要自己根据情况修改） */
    /* 初始化完成以后,提速 */
    if (lcddev.id == 0X7789)
 800166e:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <lcd_init+0x550>)
 8001670:	889b      	ldrh	r3, [r3, #4]
 8001672:	f247 7289 	movw	r2, #30601	@ 0x7789
 8001676:	4293      	cmp	r3, r2
 8001678:	d10e      	bne.n	8001698 <lcd_init+0x50c>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fmc_write_handle.AddressSetupTime = 5;
 800167a:	2305      	movs	r3, #5
 800167c:	617b      	str	r3, [r7, #20]
        fmc_write_handle.DataSetupTime = 5;
 800167e:	2305      	movs	r3, #5
 8001680:	61fb      	str	r3, [r7, #28]
        FMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 8001682:	4b18      	ldr	r3, [pc, #96]	@ (80016e4 <lcd_init+0x558>)
 8001684:	6858      	ldr	r0, [r3, #4]
 8001686:	4b17      	ldr	r3, [pc, #92]	@ (80016e4 <lcd_init+0x558>)
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	4b16      	ldr	r3, [pc, #88]	@ (80016e4 <lcd_init+0x558>)
 800168c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800168e:	f107 0114 	add.w	r1, r7, #20
 8001692:	f009 f827 	bl	800a6e4 <FMC_NORSRAM_Extended_Timing_Init>
 8001696:	e047      	b.n	8001728 <lcd_init+0x59c>
    }
    else if (lcddev.id == 0X9341 || lcddev.id == 0x5310 || lcddev.id == 0x7796)
 8001698:	4b10      	ldr	r3, [pc, #64]	@ (80016dc <lcd_init+0x550>)
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	f249 3241 	movw	r2, #37697	@ 0x9341
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d00b      	beq.n	80016bc <lcd_init+0x530>
 80016a4:	4b0d      	ldr	r3, [pc, #52]	@ (80016dc <lcd_init+0x550>)
 80016a6:	889b      	ldrh	r3, [r3, #4]
 80016a8:	f245 3210 	movw	r2, #21264	@ 0x5310
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d005      	beq.n	80016bc <lcd_init+0x530>
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <lcd_init+0x550>)
 80016b2:	889b      	ldrh	r3, [r3, #4]
 80016b4:	f247 7296 	movw	r2, #30614	@ 0x7796
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d115      	bne.n	80016e8 <lcd_init+0x55c>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fmc_write_handle.AddressSetupTime = 3;
 80016bc:	2303      	movs	r3, #3
 80016be:	617b      	str	r3, [r7, #20]
        fmc_write_handle.DataSetupTime = 3;
 80016c0:	2303      	movs	r3, #3
 80016c2:	61fb      	str	r3, [r7, #28]
        FMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 80016c4:	4b07      	ldr	r3, [pc, #28]	@ (80016e4 <lcd_init+0x558>)
 80016c6:	6858      	ldr	r0, [r3, #4]
 80016c8:	4b06      	ldr	r3, [pc, #24]	@ (80016e4 <lcd_init+0x558>)
 80016ca:	689a      	ldr	r2, [r3, #8]
 80016cc:	4b05      	ldr	r3, [pc, #20]	@ (80016e4 <lcd_init+0x558>)
 80016ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016d0:	f107 0114 	add.w	r1, r7, #20
 80016d4:	f009 f806 	bl	800a6e4 <FMC_NORSRAM_Extended_Timing_Init>
 80016d8:	e026      	b.n	8001728 <lcd_init+0x59c>
 80016da:	bf00      	nop
 80016dc:	240000e0 	.word	0x240000e0
 80016e0:	0800b978 	.word	0x0800b978
 80016e4:	24000094 	.word	0x24000094
    }
    else if (lcddev.id == 0X1963|| lcddev.id == 0x9806|| lcddev.id == 0x5510)
 80016e8:	4b17      	ldr	r3, [pc, #92]	@ (8001748 <lcd_init+0x5bc>)
 80016ea:	889b      	ldrh	r3, [r3, #4]
 80016ec:	f641 1263 	movw	r2, #6499	@ 0x1963
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d00b      	beq.n	800170c <lcd_init+0x580>
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <lcd_init+0x5bc>)
 80016f6:	889b      	ldrh	r3, [r3, #4]
 80016f8:	f649 0206 	movw	r2, #38918	@ 0x9806
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d005      	beq.n	800170c <lcd_init+0x580>
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <lcd_init+0x5bc>)
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	f245 5210 	movw	r2, #21776	@ 0x5510
 8001708:	4293      	cmp	r3, r2
 800170a:	d10d      	bne.n	8001728 <lcd_init+0x59c>
    {
        /* 重新配置写时序控制寄存器的时序 */
        fmc_write_handle.AddressSetupTime = 2;
 800170c:	2302      	movs	r3, #2
 800170e:	617b      	str	r3, [r7, #20]
        fmc_write_handle.DataSetupTime = 2;
 8001710:	2302      	movs	r3, #2
 8001712:	61fb      	str	r3, [r7, #28]
        FMC_NORSRAM_Extended_Timing_Init(g_sram_handle.Extended, &fmc_write_handle, g_sram_handle.Init.NSBank, g_sram_handle.Init.ExtendedMode);
 8001714:	4b0d      	ldr	r3, [pc, #52]	@ (800174c <lcd_init+0x5c0>)
 8001716:	6858      	ldr	r0, [r3, #4]
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <lcd_init+0x5c0>)
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <lcd_init+0x5c0>)
 800171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001720:	f107 0114 	add.w	r1, r7, #20
 8001724:	f008 ffde 	bl	800a6e4 <FMC_NORSRAM_Extended_Timing_Init>
    }

    lcd_display_dir(0); /* 默认为竖屏 */
 8001728:	2000      	movs	r0, #0
 800172a:	f7ff fc01 	bl	8000f30 <lcd_display_dir>
    LCD_BL(1);          /* 点亮背光 */
 800172e:	2201      	movs	r2, #1
 8001730:	2120      	movs	r1, #32
 8001732:	4807      	ldr	r0, [pc, #28]	@ (8001750 <lcd_init+0x5c4>)
 8001734:	f004 fa4e 	bl	8005bd4 <HAL_GPIO_WritePin>
    lcd_clear(WHITE);
 8001738:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800173c:	f000 f80a 	bl	8001754 <lcd_clear>
}
 8001740:	bf00      	nop
 8001742:	3760      	adds	r7, #96	@ 0x60
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	240000e0 	.word	0x240000e0
 800174c:	24000094 	.word	0x24000094
 8001750:	58020400 	.word	0x58020400

08001754 <lcd_clear>:
 * @brief       清屏函数
 * @param       color: 要清屏的颜色
 * @retval      无
 */
void lcd_clear(uint16_t color)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	80fb      	strh	r3, [r7, #6]
    uint32_t index = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
    uint32_t totalpoint = lcddev.width;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <lcd_clear+0x54>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	60bb      	str	r3, [r7, #8]
    totalpoint *= lcddev.height;    /* 得到总点数 */
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <lcd_clear+0x54>)
 800176a:	885b      	ldrh	r3, [r3, #2]
 800176c:	461a      	mov	r2, r3
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	fb02 f303 	mul.w	r3, r2, r3
 8001774:	60bb      	str	r3, [r7, #8]
    lcd_set_cursor(0x00, 0x0000);   /* 设置光标位置 */
 8001776:	2100      	movs	r1, #0
 8001778:	2000      	movs	r0, #0
 800177a:	f7ff f937 	bl	80009ec <lcd_set_cursor>
    lcd_write_ram_prepare();        /* 开始写入GRAM */
 800177e:	f7ff f925 	bl	80009cc <lcd_write_ram_prepare>

    for (index = 0; index < totalpoint; index++)
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e005      	b.n	8001794 <lcd_clear+0x40>
    {
        LCD->LCD_RAM = color;
 8001788:	4a08      	ldr	r2, [pc, #32]	@ (80017ac <lcd_clear+0x58>)
 800178a:	88fb      	ldrh	r3, [r7, #6]
 800178c:	8053      	strh	r3, [r2, #2]
    for (index = 0; index < totalpoint; index++)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fa      	ldr	r2, [r7, #12]
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d3f5      	bcc.n	8001788 <lcd_clear+0x34>
    }
}
 800179c:	bf00      	nop
 800179e:	bf00      	nop
 80017a0:	3710      	adds	r7, #16
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	240000e0 	.word	0x240000e0
 80017ac:	600ffffe 	.word	0x600ffffe

080017b0 <lcd_show_char>:
 * @param       mode : 叠加方式(1); 非叠加方式(0);
 * @param       color : 字符的颜色;
 * @retval      无
 */
void lcd_show_char(uint16_t x, uint16_t y, char chr, uint8_t size, uint8_t mode, uint16_t color)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b087      	sub	sp, #28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4623      	mov	r3, r4
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	4603      	mov	r3, r0
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	70bb      	strb	r3, [r7, #2]
    uint8_t temp, t1, t;
    uint16_t y0 = y;
 80017ce:	88bb      	ldrh	r3, [r7, #4]
 80017d0:	81fb      	strh	r3, [r7, #14]
    uint8_t csize = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	737b      	strb	r3, [r7, #13]
    uint8_t *pfont = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]

    csize = (size / 8 + ((size % 8) ? 1 : 0)) * (size / 2); /* 得到字体一个字符对应点阵集所占的字节数 */
 80017da:	78bb      	ldrb	r3, [r7, #2]
 80017dc:	08db      	lsrs	r3, r3, #3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	461a      	mov	r2, r3
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	b2db      	uxtb	r3, r3
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	bf14      	ite	ne
 80017ee:	2301      	movne	r3, #1
 80017f0:	2300      	moveq	r3, #0
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4413      	add	r3, r2
 80017f6:	b2da      	uxtb	r2, r3
 80017f8:	78bb      	ldrb	r3, [r7, #2]
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	fb12 f303 	smulbb	r3, r2, r3
 8001802:	737b      	strb	r3, [r7, #13]
    chr = chr - ' ';    /* 得到偏移后的值（ASCII字库是从空格开始取模，所以-' '就是对应字符的字库） */
 8001804:	78fb      	ldrb	r3, [r7, #3]
 8001806:	3b20      	subs	r3, #32
 8001808:	70fb      	strb	r3, [r7, #3]

    switch (size)
 800180a:	78bb      	ldrb	r3, [r7, #2]
 800180c:	3b0c      	subs	r3, #12
 800180e:	2b14      	cmp	r3, #20
 8001810:	f200 8099 	bhi.w	8001946 <lcd_show_char+0x196>
 8001814:	a201      	add	r2, pc, #4	@ (adr r2, 800181c <lcd_show_char+0x6c>)
 8001816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181a:	bf00      	nop
 800181c:	08001871 	.word	0x08001871
 8001820:	08001947 	.word	0x08001947
 8001824:	08001947 	.word	0x08001947
 8001828:	08001947 	.word	0x08001947
 800182c:	08001883 	.word	0x08001883
 8001830:	08001947 	.word	0x08001947
 8001834:	08001947 	.word	0x08001947
 8001838:	08001947 	.word	0x08001947
 800183c:	08001947 	.word	0x08001947
 8001840:	08001947 	.word	0x08001947
 8001844:	08001947 	.word	0x08001947
 8001848:	08001947 	.word	0x08001947
 800184c:	0800188f 	.word	0x0800188f
 8001850:	08001947 	.word	0x08001947
 8001854:	08001947 	.word	0x08001947
 8001858:	08001947 	.word	0x08001947
 800185c:	08001947 	.word	0x08001947
 8001860:	08001947 	.word	0x08001947
 8001864:	08001947 	.word	0x08001947
 8001868:	08001947 	.word	0x08001947
 800186c:	080018a1 	.word	0x080018a1
    {
        case 12:
            pfont = (uint8_t *)asc2_1206[chr];  /* 调用1206字体 */
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4a36      	ldr	r2, [pc, #216]	@ (8001954 <lcd_show_char+0x1a4>)
 800187c:	4413      	add	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
            break;
 8001880:	e014      	b.n	80018ac <lcd_show_char+0xfc>

        case 16:
            pfont = (uint8_t *)asc2_1608[chr];  /* 调用1608字体 */
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	011b      	lsls	r3, r3, #4
 8001886:	4a34      	ldr	r2, [pc, #208]	@ (8001958 <lcd_show_char+0x1a8>)
 8001888:	4413      	add	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
            break;
 800188c:	e00e      	b.n	80018ac <lcd_show_char+0xfc>

        case 24:
            pfont = (uint8_t *)asc2_2412[chr];  /* 调用2412字体 */
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4a30      	ldr	r2, [pc, #192]	@ (800195c <lcd_show_char+0x1ac>)
 800189a:	4413      	add	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
            break;
 800189e:	e005      	b.n	80018ac <lcd_show_char+0xfc>

        case 32:
            pfont = (uint8_t *)asc2_3216[chr];  /* 调用3216字体 */
 80018a0:	78fb      	ldrb	r3, [r7, #3]
 80018a2:	01db      	lsls	r3, r3, #7
 80018a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001960 <lcd_show_char+0x1b0>)
 80018a6:	4413      	add	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
            break;
 80018aa:	bf00      	nop

        default:
            return ;
    }

    for (t = 0; t < csize; t++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	757b      	strb	r3, [r7, #21]
 80018b0:	e044      	b.n	800193c <lcd_show_char+0x18c>
    {
        temp = pfont[t];    /* 获取字符的点阵数据 */
 80018b2:	7d7b      	ldrb	r3, [r7, #21]
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4413      	add	r3, r2
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	75fb      	strb	r3, [r7, #23]

        for (t1 = 0; t1 < 8; t1++)   /* 一个字节8个点 */
 80018bc:	2300      	movs	r3, #0
 80018be:	75bb      	strb	r3, [r7, #22]
 80018c0:	e034      	b.n	800192c <lcd_show_char+0x17c>
        {
            if (temp & 0x80)        /* 有效点,需要显示 */
 80018c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	da06      	bge.n	80018d8 <lcd_show_char+0x128>
            {
                lcd_draw_point(x, y, color);        /* 画点出来,要显示这个点 */
 80018ca:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80018cc:	88b9      	ldrh	r1, [r7, #4]
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff fae3 	bl	8000e9c <lcd_draw_point>
 80018d6:	e00a      	b.n	80018ee <lcd_show_char+0x13e>
            }
            else if (mode == 0)     /* 无效点,不显示 */
 80018d8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d106      	bne.n	80018ee <lcd_show_char+0x13e>
            {
                lcd_draw_point(x, y, g_back_color); /* 画背景色,相当于这个点不显示(注意背景色由全局变量控制) */
 80018e0:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <lcd_show_char+0x1b4>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	88b9      	ldrh	r1, [r7, #4]
 80018e6:	88fb      	ldrh	r3, [r7, #6]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f7ff fad7 	bl	8000e9c <lcd_draw_point>
            }

            temp <<= 1; /* 移位, 以便获取下一个位的状态 */
 80018ee:	7dfb      	ldrb	r3, [r7, #23]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	75fb      	strb	r3, [r7, #23]
            y++;
 80018f4:	88bb      	ldrh	r3, [r7, #4]
 80018f6:	3301      	adds	r3, #1
 80018f8:	80bb      	strh	r3, [r7, #4]

            if (y >= lcddev.height)return;  /* 超区域了 */
 80018fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001968 <lcd_show_char+0x1b8>)
 80018fc:	885b      	ldrh	r3, [r3, #2]
 80018fe:	88ba      	ldrh	r2, [r7, #4]
 8001900:	429a      	cmp	r2, r3
 8001902:	d222      	bcs.n	800194a <lcd_show_char+0x19a>

            if ((y - y0) == size)   /* 显示完一列了? */
 8001904:	88ba      	ldrh	r2, [r7, #4]
 8001906:	89fb      	ldrh	r3, [r7, #14]
 8001908:	1ad2      	subs	r2, r2, r3
 800190a:	78bb      	ldrb	r3, [r7, #2]
 800190c:	429a      	cmp	r2, r3
 800190e:	d10a      	bne.n	8001926 <lcd_show_char+0x176>
            {
                y = y0; /* y坐标复位 */
 8001910:	89fb      	ldrh	r3, [r7, #14]
 8001912:	80bb      	strh	r3, [r7, #4]
                x++;    /* x坐标递增 */
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	3301      	adds	r3, #1
 8001918:	80fb      	strh	r3, [r7, #6]

                if (x >= lcddev.width)return;   /* x坐标超区域了 */
 800191a:	4b13      	ldr	r3, [pc, #76]	@ (8001968 <lcd_show_char+0x1b8>)
 800191c:	881b      	ldrh	r3, [r3, #0]
 800191e:	88fa      	ldrh	r2, [r7, #6]
 8001920:	429a      	cmp	r2, r3
 8001922:	d307      	bcc.n	8001934 <lcd_show_char+0x184>
 8001924:	e012      	b.n	800194c <lcd_show_char+0x19c>
        for (t1 = 0; t1 < 8; t1++)   /* 一个字节8个点 */
 8001926:	7dbb      	ldrb	r3, [r7, #22]
 8001928:	3301      	adds	r3, #1
 800192a:	75bb      	strb	r3, [r7, #22]
 800192c:	7dbb      	ldrb	r3, [r7, #22]
 800192e:	2b07      	cmp	r3, #7
 8001930:	d9c7      	bls.n	80018c2 <lcd_show_char+0x112>
 8001932:	e000      	b.n	8001936 <lcd_show_char+0x186>

                break;
 8001934:	bf00      	nop
    for (t = 0; t < csize; t++)
 8001936:	7d7b      	ldrb	r3, [r7, #21]
 8001938:	3301      	adds	r3, #1
 800193a:	757b      	strb	r3, [r7, #21]
 800193c:	7d7a      	ldrb	r2, [r7, #21]
 800193e:	7b7b      	ldrb	r3, [r7, #13]
 8001940:	429a      	cmp	r2, r3
 8001942:	d3b6      	bcc.n	80018b2 <lcd_show_char+0x102>
 8001944:	e002      	b.n	800194c <lcd_show_char+0x19c>
            return ;
 8001946:	bf00      	nop
 8001948:	e000      	b.n	800194c <lcd_show_char+0x19c>
            if (y >= lcddev.height)return;  /* 超区域了 */
 800194a:	bf00      	nop
            }
        }
    }
}
 800194c:	371c      	adds	r7, #28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	bf00      	nop
 8001954:	0800b9b4 	.word	0x0800b9b4
 8001958:	0800be28 	.word	0x0800be28
 800195c:	0800c418 	.word	0x0800c418
 8001960:	0800d174 	.word	0x0800d174
 8001964:	24000004 	.word	0x24000004
 8001968:	240000e0 	.word	0x240000e0

0800196c <lcd_show_string>:
 * @param       p           : 字符串首地址
 * @param       color       : 字符串的颜色;
 * @retval      无
 */
void lcd_show_string(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint8_t size, char *p, uint16_t color)
{
 800196c:	b590      	push	{r4, r7, lr}
 800196e:	b087      	sub	sp, #28
 8001970:	af02      	add	r7, sp, #8
 8001972:	4604      	mov	r4, r0
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4623      	mov	r3, r4
 800197c:	80fb      	strh	r3, [r7, #6]
 800197e:	4603      	mov	r3, r0
 8001980:	80bb      	strh	r3, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	807b      	strh	r3, [r7, #2]
 8001986:	4613      	mov	r3, r2
 8001988:	803b      	strh	r3, [r7, #0]
    uint8_t x0 = x;
 800198a:	88fb      	ldrh	r3, [r7, #6]
 800198c:	73fb      	strb	r3, [r7, #15]
    width += x;
 800198e:	887a      	ldrh	r2, [r7, #2]
 8001990:	88fb      	ldrh	r3, [r7, #6]
 8001992:	4413      	add	r3, r2
 8001994:	807b      	strh	r3, [r7, #2]
    height += y;
 8001996:	883a      	ldrh	r2, [r7, #0]
 8001998:	88bb      	ldrh	r3, [r7, #4]
 800199a:	4413      	add	r3, r2
 800199c:	803b      	strh	r3, [r7, #0]

    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 800199e:	e027      	b.n	80019f0 <lcd_show_string+0x84>
    {
        if (x >= width)
 80019a0:	88fa      	ldrh	r2, [r7, #6]
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d307      	bcc.n	80019b8 <lcd_show_string+0x4c>
        {
            x = x0;
 80019a8:	7bfb      	ldrb	r3, [r7, #15]
 80019aa:	80fb      	strh	r3, [r7, #6]
            y += size;
 80019ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	88bb      	ldrh	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	80bb      	strh	r3, [r7, #4]
        }

        if (y >= height)break;  /* 退出 */
 80019b8:	88ba      	ldrh	r2, [r7, #4]
 80019ba:	883b      	ldrh	r3, [r7, #0]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d220      	bcs.n	8001a02 <lcd_show_string+0x96>

        lcd_show_char(x, y, *p, size, 0, color);
 80019c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c2:	781a      	ldrb	r2, [r3, #0]
 80019c4:	f897 4020 	ldrb.w	r4, [r7, #32]
 80019c8:	88b9      	ldrh	r1, [r7, #4]
 80019ca:	88f8      	ldrh	r0, [r7, #6]
 80019cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019ce:	9301      	str	r3, [sp, #4]
 80019d0:	2300      	movs	r3, #0
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	4623      	mov	r3, r4
 80019d6:	f7ff feeb 	bl	80017b0 <lcd_show_char>
        x += size / 2;
 80019da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	461a      	mov	r2, r3
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	4413      	add	r3, r2
 80019e8:	80fb      	strh	r3, [r7, #6]
        p++;
 80019ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ec:	3301      	adds	r3, #1
 80019ee:	627b      	str	r3, [r7, #36]	@ 0x24
    while ((*p <= '~') && (*p >= ' '))   /* 判断是不是非法字符! */
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80019f6:	d805      	bhi.n	8001a04 <lcd_show_string+0x98>
 80019f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b1f      	cmp	r3, #31
 80019fe:	d8cf      	bhi.n	80019a0 <lcd_show_string+0x34>
    }
}
 8001a00:	e000      	b.n	8001a04 <lcd_show_string+0x98>
        if (y >= height)break;  /* 退出 */
 8001a02:	bf00      	nop
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd90      	pop	{r4, r7, pc}

08001a0c <lcd_ex_st7789_reginit>:
 * @brief       ST7789 寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_st7789_reginit(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8001a10:	2011      	movs	r0, #17
 8001a12:	f7fe ff8d 	bl	8000930 <lcd_wr_regno>

    delay_ms(120);
 8001a16:	2078      	movs	r0, #120	@ 0x78
 8001a18:	f7fe feba 	bl	8000790 <delay_ms>

    lcd_wr_regno(0x36);
 8001a1c:	2036      	movs	r0, #54	@ 0x36
 8001a1e:	f7fe ff87 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7fe ff70 	bl	8000908 <lcd_wr_data>


    lcd_wr_regno(0x3A);
 8001a28:	203a      	movs	r0, #58	@ 0x3a
 8001a2a:	f7fe ff81 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0X05);
 8001a2e:	2005      	movs	r0, #5
 8001a30:	f7fe ff6a 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001a34:	20b2      	movs	r0, #178	@ 0xb2
 8001a36:	f7fe ff7b 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001a3a:	200c      	movs	r0, #12
 8001a3c:	f7fe ff64 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8001a40:	200c      	movs	r0, #12
 8001a42:	f7fe ff61 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f7fe ff5e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001a4c:	2033      	movs	r0, #51	@ 0x33
 8001a4e:	f7fe ff5b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x33);
 8001a52:	2033      	movs	r0, #51	@ 0x33
 8001a54:	f7fe ff58 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8001a58:	20b7      	movs	r0, #183	@ 0xb7
 8001a5a:	f7fe ff69 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x35);
 8001a5e:	2035      	movs	r0, #53	@ 0x35
 8001a60:	f7fe ff52 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xBB); /* vcom */
 8001a64:	20bb      	movs	r0, #187	@ 0xbb
 8001a66:	f7fe ff63 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x32);  /* 30 */
 8001a6a:	2032      	movs	r0, #50	@ 0x32
 8001a6c:	f7fe ff4c 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8001a70:	20c0      	movs	r0, #192	@ 0xc0
 8001a72:	f7fe ff5d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0C);
 8001a76:	200c      	movs	r0, #12
 8001a78:	f7fe ff46 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8001a7c:	20c2      	movs	r0, #194	@ 0xc2
 8001a7e:	f7fe ff57 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7fe ff40 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC3); /* vrh */
 8001a88:	20c3      	movs	r0, #195	@ 0xc3
 8001a8a:	f7fe ff51 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x10);  /* 17 0D */
 8001a8e:	2010      	movs	r0, #16
 8001a90:	f7fe ff3a 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC4); /* vdv */
 8001a94:	20c4      	movs	r0, #196	@ 0xc4
 8001a96:	f7fe ff4b 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 20 */
 8001a9a:	2020      	movs	r0, #32
 8001a9c:	f7fe ff34 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001aa0:	20c6      	movs	r0, #198	@ 0xc6
 8001aa2:	f7fe ff45 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0f);
 8001aa6:	200f      	movs	r0, #15
 8001aa8:	f7fe ff2e 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xD0);
 8001aac:	20d0      	movs	r0, #208	@ 0xd0
 8001aae:	f7fe ff3f 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xA4);
 8001ab2:	20a4      	movs	r0, #164	@ 0xa4
 8001ab4:	f7fe ff28 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8001ab8:	20a1      	movs	r0, #161	@ 0xa1
 8001aba:	f7fe ff25 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Set Gamma  */
 8001abe:	20e0      	movs	r0, #224	@ 0xe0
 8001ac0:	f7fe ff36 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001ac4:	20d0      	movs	r0, #208	@ 0xd0
 8001ac6:	f7fe ff1f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001aca:	2000      	movs	r0, #0
 8001acc:	f7fe ff1c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001ad0:	2002      	movs	r0, #2
 8001ad2:	f7fe ff19 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x07);
 8001ad6:	2007      	movs	r0, #7
 8001ad8:	f7fe ff16 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8001adc:	200a      	movs	r0, #10
 8001ade:	f7fe ff13 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x28);
 8001ae2:	2028      	movs	r0, #40	@ 0x28
 8001ae4:	f7fe ff10 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x32);
 8001ae8:	2032      	movs	r0, #50	@ 0x32
 8001aea:	f7fe ff0d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0X44);
 8001aee:	2044      	movs	r0, #68	@ 0x44
 8001af0:	f7fe ff0a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x42);
 8001af4:	2042      	movs	r0, #66	@ 0x42
 8001af6:	f7fe ff07 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x06);
 8001afa:	2006      	movs	r0, #6
 8001afc:	f7fe ff04 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8001b00:	200e      	movs	r0, #14
 8001b02:	f7fe ff01 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x12);
 8001b06:	2012      	movs	r0, #18
 8001b08:	f7fe fefe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x14);
 8001b0c:	2014      	movs	r0, #20
 8001b0e:	f7fe fefb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x17);
 8001b12:	2017      	movs	r0, #23
 8001b14:	f7fe fef8 	bl	8000908 <lcd_wr_data>


    lcd_wr_regno(0XE1);  /* Set Gamma */
 8001b18:	20e1      	movs	r0, #225	@ 0xe1
 8001b1a:	f7fe ff09 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xd0);
 8001b1e:	20d0      	movs	r0, #208	@ 0xd0
 8001b20:	f7fe fef2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7fe feef 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7fe feec 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x07);
 8001b30:	2007      	movs	r0, #7
 8001b32:	f7fe fee9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0a);
 8001b36:	200a      	movs	r0, #10
 8001b38:	f7fe fee6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x28);
 8001b3c:	2028      	movs	r0, #40	@ 0x28
 8001b3e:	f7fe fee3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x31);
 8001b42:	2031      	movs	r0, #49	@ 0x31
 8001b44:	f7fe fee0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x54);
 8001b48:	2054      	movs	r0, #84	@ 0x54
 8001b4a:	f7fe fedd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x47);
 8001b4e:	2047      	movs	r0, #71	@ 0x47
 8001b50:	f7fe feda 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0e);
 8001b54:	200e      	movs	r0, #14
 8001b56:	f7fe fed7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1c);
 8001b5a:	201c      	movs	r0, #28
 8001b5c:	f7fe fed4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x17);
 8001b60:	2017      	movs	r0, #23
 8001b62:	f7fe fed1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1b);
 8001b66:	201b      	movs	r0, #27
 8001b68:	f7fe fece 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1e);
 8001b6c:	201e      	movs	r0, #30
 8001b6e:	f7fe fecb 	bl	8000908 <lcd_wr_data>


    lcd_wr_regno(0x2A);
 8001b72:	202a      	movs	r0, #42	@ 0x2a
 8001b74:	f7fe fedc 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001b78:	2000      	movs	r0, #0
 8001b7a:	f7fe fec5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7fe fec2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b84:	2000      	movs	r0, #0
 8001b86:	f7fe febf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xef);
 8001b8a:	20ef      	movs	r0, #239	@ 0xef
 8001b8c:	f7fe febc 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x2B);
 8001b90:	202b      	movs	r0, #43	@ 0x2b
 8001b92:	f7fe fecd 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001b96:	2000      	movs	r0, #0
 8001b98:	f7fe feb6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	f7fe feb3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8001ba2:	2001      	movs	r0, #1
 8001ba4:	f7fe feb0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8001ba8:	203f      	movs	r0, #63	@ 0x3f
 8001baa:	f7fe fead 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x29); /* display on */
 8001bae:	2029      	movs	r0, #41	@ 0x29
 8001bb0:	f7fe febe 	bl	8000930 <lcd_wr_regno>
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <lcd_ex_ili9341_reginit>:
 * @brief       ILI9341寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ili9341_reginit(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xCF);
 8001bbc:	20cf      	movs	r0, #207	@ 0xcf
 8001bbe:	f7fe feb7 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7fe fea0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC1);
 8001bc8:	20c1      	movs	r0, #193	@ 0xc1
 8001bca:	f7fe fe9d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0X30);
 8001bce:	2030      	movs	r0, #48	@ 0x30
 8001bd0:	f7fe fe9a 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xED);
 8001bd4:	20ed      	movs	r0, #237	@ 0xed
 8001bd6:	f7fe feab 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x64);
 8001bda:	2064      	movs	r0, #100	@ 0x64
 8001bdc:	f7fe fe94 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x03);
 8001be0:	2003      	movs	r0, #3
 8001be2:	f7fe fe91 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0X12);
 8001be6:	2012      	movs	r0, #18
 8001be8:	f7fe fe8e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0X81);
 8001bec:	2081      	movs	r0, #129	@ 0x81
 8001bee:	f7fe fe8b 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xE8);
 8001bf2:	20e8      	movs	r0, #232	@ 0xe8
 8001bf4:	f7fe fe9c 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x85);
 8001bf8:	2085      	movs	r0, #133	@ 0x85
 8001bfa:	f7fe fe85 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001bfe:	2010      	movs	r0, #16
 8001c00:	f7fe fe82 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8001c04:	207a      	movs	r0, #122	@ 0x7a
 8001c06:	f7fe fe7f 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xCB);
 8001c0a:	20cb      	movs	r0, #203	@ 0xcb
 8001c0c:	f7fe fe90 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x39);
 8001c10:	2039      	movs	r0, #57	@ 0x39
 8001c12:	f7fe fe79 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8001c16:	202c      	movs	r0, #44	@ 0x2c
 8001c18:	f7fe fe76 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f7fe fe73 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x34);
 8001c22:	2034      	movs	r0, #52	@ 0x34
 8001c24:	f7fe fe70 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001c28:	2002      	movs	r0, #2
 8001c2a:	f7fe fe6d 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xF7);
 8001c2e:	20f7      	movs	r0, #247	@ 0xf7
 8001c30:	f7fe fe7e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8001c34:	2020      	movs	r0, #32
 8001c36:	f7fe fe67 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xEA);
 8001c3a:	20ea      	movs	r0, #234	@ 0xea
 8001c3c:	f7fe fe78 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001c40:	2000      	movs	r0, #0
 8001c42:	f7fe fe61 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7fe fe5e 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xC0); /* Power control */
 8001c4c:	20c0      	movs	r0, #192	@ 0xc0
 8001c4e:	f7fe fe6f 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x1B);  /* VRH[5:0] */
 8001c52:	201b      	movs	r0, #27
 8001c54:	f7fe fe58 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xC1); /* Power control */
 8001c58:	20c1      	movs	r0, #193	@ 0xc1
 8001c5a:	f7fe fe69 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);  /* SAP[2:0];BT[3:0] */
 8001c5e:	2001      	movs	r0, #1
 8001c60:	f7fe fe52 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xC5); /* VCM control */
 8001c64:	20c5      	movs	r0, #197	@ 0xc5
 8001c66:	f7fe fe63 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x30);  /* 3F */
 8001c6a:	2030      	movs	r0, #48	@ 0x30
 8001c6c:	f7fe fe4c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x30);  /* 3C */
 8001c70:	2030      	movs	r0, #48	@ 0x30
 8001c72:	f7fe fe49 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xC7); /* VCM control2 */
 8001c76:	20c7      	movs	r0, #199	@ 0xc7
 8001c78:	f7fe fe5a 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0XB7);
 8001c7c:	20b7      	movs	r0, #183	@ 0xb7
 8001c7e:	f7fe fe43 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x36); /*  Memory Access Control */
 8001c82:	2036      	movs	r0, #54	@ 0x36
 8001c84:	f7fe fe54 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8001c88:	2048      	movs	r0, #72	@ 0x48
 8001c8a:	f7fe fe3d 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x3A);
 8001c8e:	203a      	movs	r0, #58	@ 0x3a
 8001c90:	f7fe fe4e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8001c94:	2055      	movs	r0, #85	@ 0x55
 8001c96:	f7fe fe37 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xB1);
 8001c9a:	20b1      	movs	r0, #177	@ 0xb1
 8001c9c:	f7fe fe48 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001ca0:	2000      	movs	r0, #0
 8001ca2:	f7fe fe31 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1A);
 8001ca6:	201a      	movs	r0, #26
 8001ca8:	f7fe fe2e 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xB6); /*  Display Function Control */
 8001cac:	20b6      	movs	r0, #182	@ 0xb6
 8001cae:	f7fe fe3f 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8001cb2:	200a      	movs	r0, #10
 8001cb4:	f7fe fe28 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8001cb8:	20a2      	movs	r0, #162	@ 0xa2
 8001cba:	f7fe fe25 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xF2); /*  3Gamma Function Disable */
 8001cbe:	20f2      	movs	r0, #242	@ 0xf2
 8001cc0:	f7fe fe36 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	f7fe fe1f 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x26); /* Gamma curve selected */
 8001cca:	2026      	movs	r0, #38	@ 0x26
 8001ccc:	f7fe fe30 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001cd0:	2001      	movs	r0, #1
 8001cd2:	f7fe fe19 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xE0); /* Set Gamma */
 8001cd6:	20e0      	movs	r0, #224	@ 0xe0
 8001cd8:	f7fe fe2a 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8001cdc:	200f      	movs	r0, #15
 8001cde:	f7fe fe13 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2A);
 8001ce2:	202a      	movs	r0, #42	@ 0x2a
 8001ce4:	f7fe fe10 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x28);
 8001ce8:	2028      	movs	r0, #40	@ 0x28
 8001cea:	f7fe fe0d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x08);
 8001cee:	2008      	movs	r0, #8
 8001cf0:	f7fe fe0a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8001cf4:	200e      	movs	r0, #14
 8001cf6:	f7fe fe07 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x08);
 8001cfa:	2008      	movs	r0, #8
 8001cfc:	f7fe fe04 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x54);
 8001d00:	2054      	movs	r0, #84	@ 0x54
 8001d02:	f7fe fe01 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0XA9);
 8001d06:	20a9      	movs	r0, #169	@ 0xa9
 8001d08:	f7fe fdfe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x43);
 8001d0c:	2043      	movs	r0, #67	@ 0x43
 8001d0e:	f7fe fdfb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0A);
 8001d12:	200a      	movs	r0, #10
 8001d14:	f7fe fdf8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001d18:	200f      	movs	r0, #15
 8001d1a:	f7fe fdf5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d1e:	2000      	movs	r0, #0
 8001d20:	f7fe fdf2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d24:	2000      	movs	r0, #0
 8001d26:	f7fe fdef 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7fe fdec 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001d30:	2000      	movs	r0, #0
 8001d32:	f7fe fde9 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0XE1);    /* Set Gamma */
 8001d36:	20e1      	movs	r0, #225	@ 0xe1
 8001d38:	f7fe fdfa 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d3c:	2000      	movs	r0, #0
 8001d3e:	f7fe fde3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x15);
 8001d42:	2015      	movs	r0, #21
 8001d44:	f7fe fde0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x17);
 8001d48:	2017      	movs	r0, #23
 8001d4a:	f7fe fddd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x07);
 8001d4e:	2007      	movs	r0, #7
 8001d50:	f7fe fdda 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x11);
 8001d54:	2011      	movs	r0, #17
 8001d56:	f7fe fdd7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x06);
 8001d5a:	2006      	movs	r0, #6
 8001d5c:	f7fe fdd4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2B);
 8001d60:	202b      	movs	r0, #43	@ 0x2b
 8001d62:	f7fe fdd1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x56);
 8001d66:	2056      	movs	r0, #86	@ 0x56
 8001d68:	f7fe fdce 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3C);
 8001d6c:	203c      	movs	r0, #60	@ 0x3c
 8001d6e:	f7fe fdcb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x05);
 8001d72:	2005      	movs	r0, #5
 8001d74:	f7fe fdc8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);
 8001d78:	2010      	movs	r0, #16
 8001d7a:	f7fe fdc5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f7fe fdc2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8001d84:	203f      	movs	r0, #63	@ 0x3f
 8001d86:	f7fe fdbf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8001d8a:	203f      	movs	r0, #63	@ 0x3f
 8001d8c:	f7fe fdbc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8001d90:	200f      	movs	r0, #15
 8001d92:	f7fe fdb9 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x2B);
 8001d96:	202b      	movs	r0, #43	@ 0x2b
 8001d98:	f7fe fdca 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	f7fe fdb3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f7fe fdb0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8001da8:	2001      	movs	r0, #1
 8001daa:	f7fe fdad 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3f);
 8001dae:	203f      	movs	r0, #63	@ 0x3f
 8001db0:	f7fe fdaa 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x2A);
 8001db4:	202a      	movs	r0, #42	@ 0x2a
 8001db6:	f7fe fdbb 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f7fe fda4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc0:	2000      	movs	r0, #0
 8001dc2:	f7fe fda1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7fe fd9e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xef);
 8001dcc:	20ef      	movs	r0, #239	@ 0xef
 8001dce:	f7fe fd9b 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x11); /* Exit Sleep */
 8001dd2:	2011      	movs	r0, #17
 8001dd4:	f7fe fdac 	bl	8000930 <lcd_wr_regno>
    delay_ms(120);
 8001dd8:	2078      	movs	r0, #120	@ 0x78
 8001dda:	f7fe fcd9 	bl	8000790 <delay_ms>
    lcd_wr_regno(0x29); /* display on */
 8001dde:	2029      	movs	r0, #41	@ 0x29
 8001de0:	f7fe fda6 	bl	8000930 <lcd_wr_regno>
 }
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <lcd_ex_nt35310_reginit>:
 * @brief       NT35310寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35310_reginit(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xED);
 8001dec:	20ed      	movs	r0, #237	@ 0xed
 8001dee:	f7fe fd9f 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f7fe fd88 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFE);
 8001df8:	20fe      	movs	r0, #254	@ 0xfe
 8001dfa:	f7fe fd85 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xEE);
 8001dfe:	20ee      	movs	r0, #238	@ 0xee
 8001e00:	f7fe fd96 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xDE);
 8001e04:	20de      	movs	r0, #222	@ 0xde
 8001e06:	f7fe fd7f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x21);
 8001e0a:	2021      	movs	r0, #33	@ 0x21
 8001e0c:	f7fe fd7c 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF1);
 8001e10:	20f1      	movs	r0, #241	@ 0xf1
 8001e12:	f7fe fd8d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7fe fd76 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xDF);
 8001e1c:	20df      	movs	r0, #223	@ 0xdf
 8001e1e:	f7fe fd87 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x10);
 8001e22:	2010      	movs	r0, #16
 8001e24:	f7fe fd70 	bl	8000908 <lcd_wr_data>

    /* VCOMvoltage */
    lcd_wr_regno(0xC4);
 8001e28:	20c4      	movs	r0, #196	@ 0xc4
 8001e2a:	f7fe fd81 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x8F);  /* 5f */
 8001e2e:	208f      	movs	r0, #143	@ 0x8f
 8001e30:	f7fe fd6a 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8001e34:	20c6      	movs	r0, #198	@ 0xc6
 8001e36:	f7fe fd7b 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f7fe fd64 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001e40:	20e2      	movs	r0, #226	@ 0xe2
 8001e42:	f7fe fd61 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001e46:	20e2      	movs	r0, #226	@ 0xe2
 8001e48:	f7fe fd5e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE2);
 8001e4c:	20e2      	movs	r0, #226	@ 0xe2
 8001e4e:	f7fe fd5b 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xBF);
 8001e52:	20bf      	movs	r0, #191	@ 0xbf
 8001e54:	f7fe fd6c 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8001e58:	20aa      	movs	r0, #170	@ 0xaa
 8001e5a:	f7fe fd55 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB0);
 8001e5e:	20b0      	movs	r0, #176	@ 0xb0
 8001e60:	f7fe fd66 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0D);
 8001e64:	200d      	movs	r0, #13
 8001e66:	f7fe fd4f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f7fe fd4c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8001e70:	200d      	movs	r0, #13
 8001e72:	f7fe fd49 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e76:	2000      	movs	r0, #0
 8001e78:	f7fe fd46 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x11);
 8001e7c:	2011      	movs	r0, #17
 8001e7e:	f7fe fd43 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7fe fd40 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x19);
 8001e88:	2019      	movs	r0, #25
 8001e8a:	f7fe fd3d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e8e:	2000      	movs	r0, #0
 8001e90:	f7fe fd3a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x21);
 8001e94:	2021      	movs	r0, #33	@ 0x21
 8001e96:	f7fe fd37 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	f7fe fd34 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2D);
 8001ea0:	202d      	movs	r0, #45	@ 0x2d
 8001ea2:	f7fe fd31 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f7fe fd2e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3D);
 8001eac:	203d      	movs	r0, #61	@ 0x3d
 8001eae:	f7fe fd2b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7fe fd28 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001eb8:	205d      	movs	r0, #93	@ 0x5d
 8001eba:	f7fe fd25 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7fe fd22 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x5D);
 8001ec4:	205d      	movs	r0, #93	@ 0x5d
 8001ec6:	f7fe fd1f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001eca:	2000      	movs	r0, #0
 8001ecc:	f7fe fd1c 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB1);
 8001ed0:	20b1      	movs	r0, #177	@ 0xb1
 8001ed2:	f7fe fd2d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8001ed6:	2080      	movs	r0, #128	@ 0x80
 8001ed8:	f7fe fd16 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001edc:	2000      	movs	r0, #0
 8001ede:	f7fe fd13 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8001ee2:	208b      	movs	r0, #139	@ 0x8b
 8001ee4:	f7fe fd10 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f7fe fd0d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x96);
 8001eee:	2096      	movs	r0, #150	@ 0x96
 8001ef0:	f7fe fd0a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7fe fd07 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB2);
 8001efa:	20b2      	movs	r0, #178	@ 0xb2
 8001efc:	f7fe fd18 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001f00:	2000      	movs	r0, #0
 8001f02:	f7fe fd01 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f06:	2000      	movs	r0, #0
 8001f08:	f7fe fcfe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);
 8001f0c:	2002      	movs	r0, #2
 8001f0e:	f7fe fcfb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f12:	2000      	movs	r0, #0
 8001f14:	f7fe fcf8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x03);
 8001f18:	2003      	movs	r0, #3
 8001f1a:	f7fe fcf5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f1e:	2000      	movs	r0, #0
 8001f20:	f7fe fcf2 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB3);
 8001f24:	20b3      	movs	r0, #179	@ 0xb3
 8001f26:	f7fe fd03 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8001f2a:	2000      	movs	r0, #0
 8001f2c:	f7fe fcec 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f30:	2000      	movs	r0, #0
 8001f32:	f7fe fce9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f36:	2000      	movs	r0, #0
 8001f38:	f7fe fce6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f7fe fce3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f42:	2000      	movs	r0, #0
 8001f44:	f7fe fce0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f7fe fcdd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f4e:	2000      	movs	r0, #0
 8001f50:	f7fe fcda 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7fe fcd7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f7fe fcd4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f7fe fcd1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f66:	2000      	movs	r0, #0
 8001f68:	f7fe fcce 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f6c:	2000      	movs	r0, #0
 8001f6e:	f7fe fccb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f72:	2000      	movs	r0, #0
 8001f74:	f7fe fcc8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f78:	2000      	movs	r0, #0
 8001f7a:	f7fe fcc5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f7fe fcc2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f84:	2000      	movs	r0, #0
 8001f86:	f7fe fcbf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	f7fe fcbc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7fe fcb9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7fe fcb6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001f9c:	2000      	movs	r0, #0
 8001f9e:	f7fe fcb3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fa2:	2000      	movs	r0, #0
 8001fa4:	f7fe fcb0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fa8:	2000      	movs	r0, #0
 8001faa:	f7fe fcad 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fae:	2000      	movs	r0, #0
 8001fb0:	f7fe fcaa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f7fe fca7 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8001fba:	20b4      	movs	r0, #180	@ 0xb4
 8001fbc:	f7fe fcb8 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x8B);
 8001fc0:	208b      	movs	r0, #139	@ 0x8b
 8001fc2:	f7fe fca1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7fe fc9e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x96);
 8001fcc:	2096      	movs	r0, #150	@ 0x96
 8001fce:	f7fe fc9b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fd2:	2000      	movs	r0, #0
 8001fd4:	f7fe fc98 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA1);
 8001fd8:	20a1      	movs	r0, #161	@ 0xa1
 8001fda:	f7fe fc95 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001fde:	2000      	movs	r0, #0
 8001fe0:	f7fe fc92 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB5);
 8001fe4:	20b5      	movs	r0, #181	@ 0xb5
 8001fe6:	f7fe fca3 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8001fea:	2002      	movs	r0, #2
 8001fec:	f7fe fc8c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7fe fc89 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x03);
 8001ff6:	2003      	movs	r0, #3
 8001ff8:	f7fe fc86 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7fe fc83 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x04);
 8002002:	2004      	movs	r0, #4
 8002004:	f7fe fc80 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002008:	2000      	movs	r0, #0
 800200a:	f7fe fc7d 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB6);
 800200e:	20b6      	movs	r0, #182	@ 0xb6
 8002010:	f7fe fc8e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002014:	2000      	movs	r0, #0
 8002016:	f7fe fc77 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800201a:	2000      	movs	r0, #0
 800201c:	f7fe fc74 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8002020:	20b7      	movs	r0, #183	@ 0xb7
 8002022:	f7fe fc85 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002026:	2000      	movs	r0, #0
 8002028:	f7fe fc6e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800202c:	2000      	movs	r0, #0
 800202e:	f7fe fc6b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3F);
 8002032:	203f      	movs	r0, #63	@ 0x3f
 8002034:	f7fe fc68 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002038:	2000      	movs	r0, #0
 800203a:	f7fe fc65 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x5E);
 800203e:	205e      	movs	r0, #94	@ 0x5e
 8002040:	f7fe fc62 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002044:	2000      	movs	r0, #0
 8002046:	f7fe fc5f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x64);
 800204a:	2064      	movs	r0, #100	@ 0x64
 800204c:	f7fe fc5c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002050:	2000      	movs	r0, #0
 8002052:	f7fe fc59 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x8C);
 8002056:	208c      	movs	r0, #140	@ 0x8c
 8002058:	f7fe fc56 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800205c:	2000      	movs	r0, #0
 800205e:	f7fe fc53 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xAC);
 8002062:	20ac      	movs	r0, #172	@ 0xac
 8002064:	f7fe fc50 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002068:	2000      	movs	r0, #0
 800206a:	f7fe fc4d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xDC);
 800206e:	20dc      	movs	r0, #220	@ 0xdc
 8002070:	f7fe fc4a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002074:	2000      	movs	r0, #0
 8002076:	f7fe fc47 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x70);
 800207a:	2070      	movs	r0, #112	@ 0x70
 800207c:	f7fe fc44 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002080:	2000      	movs	r0, #0
 8002082:	f7fe fc41 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x90);
 8002086:	2090      	movs	r0, #144	@ 0x90
 8002088:	f7fe fc3e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800208c:	2000      	movs	r0, #0
 800208e:	f7fe fc3b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xEB);
 8002092:	20eb      	movs	r0, #235	@ 0xeb
 8002094:	f7fe fc38 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002098:	2000      	movs	r0, #0
 800209a:	f7fe fc35 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xDC);
 800209e:	20dc      	movs	r0, #220	@ 0xdc
 80020a0:	f7fe fc32 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020a4:	2000      	movs	r0, #0
 80020a6:	f7fe fc2f 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB8);
 80020aa:	20b8      	movs	r0, #184	@ 0xb8
 80020ac:	f7fe fc40 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7fe fc29 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7fe fc26 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020bc:	2000      	movs	r0, #0
 80020be:	f7fe fc23 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020c2:	2000      	movs	r0, #0
 80020c4:	f7fe fc20 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020c8:	2000      	movs	r0, #0
 80020ca:	f7fe fc1d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020ce:	2000      	movs	r0, #0
 80020d0:	f7fe fc1a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7fe fc17 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020da:	2000      	movs	r0, #0
 80020dc:	f7fe fc14 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xBA);
 80020e0:	20ba      	movs	r0, #186	@ 0xba
 80020e2:	f7fe fc25 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x24);
 80020e6:	2024      	movs	r0, #36	@ 0x24
 80020e8:	f7fe fc0e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020ec:	2000      	movs	r0, #0
 80020ee:	f7fe fc0b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020f2:	2000      	movs	r0, #0
 80020f4:	f7fe fc08 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80020f8:	2000      	movs	r0, #0
 80020fa:	f7fe fc05 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 80020fe:	20c1      	movs	r0, #193	@ 0xc1
 8002100:	f7fe fc16 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8002104:	2020      	movs	r0, #32
 8002106:	f7fe fbff 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800210a:	2000      	movs	r0, #0
 800210c:	f7fe fbfc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x54);
 8002110:	2054      	movs	r0, #84	@ 0x54
 8002112:	f7fe fbf9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002116:	2000      	movs	r0, #0
 8002118:	f7fe fbf6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 800211c:	20ff      	movs	r0, #255	@ 0xff
 800211e:	f7fe fbf3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002122:	2000      	movs	r0, #0
 8002124:	f7fe fbf0 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8002128:	20c2      	movs	r0, #194	@ 0xc2
 800212a:	f7fe fc01 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 800212e:	200a      	movs	r0, #10
 8002130:	f7fe fbea 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002134:	2000      	movs	r0, #0
 8002136:	f7fe fbe7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x04);
 800213a:	2004      	movs	r0, #4
 800213c:	f7fe fbe4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002140:	2000      	movs	r0, #0
 8002142:	f7fe fbe1 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC3);
 8002146:	20c3      	movs	r0, #195	@ 0xc3
 8002148:	f7fe fbf2 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 800214c:	203c      	movs	r0, #60	@ 0x3c
 800214e:	f7fe fbdb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002152:	2000      	movs	r0, #0
 8002154:	f7fe fbd8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3A);
 8002158:	203a      	movs	r0, #58	@ 0x3a
 800215a:	f7fe fbd5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800215e:	2000      	movs	r0, #0
 8002160:	f7fe fbd2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x39);
 8002164:	2039      	movs	r0, #57	@ 0x39
 8002166:	f7fe fbcf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800216a:	2000      	movs	r0, #0
 800216c:	f7fe fbcc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x37);
 8002170:	2037      	movs	r0, #55	@ 0x37
 8002172:	f7fe fbc9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002176:	2000      	movs	r0, #0
 8002178:	f7fe fbc6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3C);
 800217c:	203c      	movs	r0, #60	@ 0x3c
 800217e:	f7fe fbc3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002182:	2000      	movs	r0, #0
 8002184:	f7fe fbc0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x36);
 8002188:	2036      	movs	r0, #54	@ 0x36
 800218a:	f7fe fbbd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800218e:	2000      	movs	r0, #0
 8002190:	f7fe fbba 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x32);
 8002194:	2032      	movs	r0, #50	@ 0x32
 8002196:	f7fe fbb7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800219a:	2000      	movs	r0, #0
 800219c:	f7fe fbb4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2F);
 80021a0:	202f      	movs	r0, #47	@ 0x2f
 80021a2:	f7fe fbb1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021a6:	2000      	movs	r0, #0
 80021a8:	f7fe fbae 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2C);
 80021ac:	202c      	movs	r0, #44	@ 0x2c
 80021ae:	f7fe fbab 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f7fe fba8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x29);
 80021b8:	2029      	movs	r0, #41	@ 0x29
 80021ba:	f7fe fba5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021be:	2000      	movs	r0, #0
 80021c0:	f7fe fba2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x26);
 80021c4:	2026      	movs	r0, #38	@ 0x26
 80021c6:	f7fe fb9f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021ca:	2000      	movs	r0, #0
 80021cc:	f7fe fb9c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x24);
 80021d0:	2024      	movs	r0, #36	@ 0x24
 80021d2:	f7fe fb99 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021d6:	2000      	movs	r0, #0
 80021d8:	f7fe fb96 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x24);
 80021dc:	2024      	movs	r0, #36	@ 0x24
 80021de:	f7fe fb93 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021e2:	2000      	movs	r0, #0
 80021e4:	f7fe fb90 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x23);
 80021e8:	2023      	movs	r0, #35	@ 0x23
 80021ea:	f7fe fb8d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7fe fb8a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80021f4:	203c      	movs	r0, #60	@ 0x3c
 80021f6:	f7fe fb87 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80021fa:	2000      	movs	r0, #0
 80021fc:	f7fe fb84 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x36);
 8002200:	2036      	movs	r0, #54	@ 0x36
 8002202:	f7fe fb81 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002206:	2000      	movs	r0, #0
 8002208:	f7fe fb7e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x32);
 800220c:	2032      	movs	r0, #50	@ 0x32
 800220e:	f7fe fb7b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002212:	2000      	movs	r0, #0
 8002214:	f7fe fb78 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2F);
 8002218:	202f      	movs	r0, #47	@ 0x2f
 800221a:	f7fe fb75 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800221e:	2000      	movs	r0, #0
 8002220:	f7fe fb72 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8002224:	202c      	movs	r0, #44	@ 0x2c
 8002226:	f7fe fb6f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800222a:	2000      	movs	r0, #0
 800222c:	f7fe fb6c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x29);
 8002230:	2029      	movs	r0, #41	@ 0x29
 8002232:	f7fe fb69 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002236:	2000      	movs	r0, #0
 8002238:	f7fe fb66 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x26);
 800223c:	2026      	movs	r0, #38	@ 0x26
 800223e:	f7fe fb63 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002242:	2000      	movs	r0, #0
 8002244:	f7fe fb60 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x24);
 8002248:	2024      	movs	r0, #36	@ 0x24
 800224a:	f7fe fb5d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800224e:	2000      	movs	r0, #0
 8002250:	f7fe fb5a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x24);
 8002254:	2024      	movs	r0, #36	@ 0x24
 8002256:	f7fe fb57 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fb54 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002260:	2023      	movs	r0, #35	@ 0x23
 8002262:	f7fe fb51 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002266:	2000      	movs	r0, #0
 8002268:	f7fe fb4e 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC4);
 800226c:	20c4      	movs	r0, #196	@ 0xc4
 800226e:	f7fe fb5f 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x62);
 8002272:	2062      	movs	r0, #98	@ 0x62
 8002274:	f7fe fb48 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002278:	2000      	movs	r0, #0
 800227a:	f7fe fb45 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x05);
 800227e:	2005      	movs	r0, #5
 8002280:	f7fe fb42 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002284:	2000      	movs	r0, #0
 8002286:	f7fe fb3f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x84);
 800228a:	2084      	movs	r0, #132	@ 0x84
 800228c:	f7fe fb3c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002290:	2000      	movs	r0, #0
 8002292:	f7fe fb39 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF0);
 8002296:	20f0      	movs	r0, #240	@ 0xf0
 8002298:	f7fe fb36 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800229c:	2000      	movs	r0, #0
 800229e:	f7fe fb33 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x18);
 80022a2:	2018      	movs	r0, #24
 80022a4:	f7fe fb30 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022a8:	2000      	movs	r0, #0
 80022aa:	f7fe fb2d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA4);
 80022ae:	20a4      	movs	r0, #164	@ 0xa4
 80022b0:	f7fe fb2a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022b4:	2000      	movs	r0, #0
 80022b6:	f7fe fb27 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x18);
 80022ba:	2018      	movs	r0, #24
 80022bc:	f7fe fb24 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022c0:	2000      	movs	r0, #0
 80022c2:	f7fe fb21 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x50);
 80022c6:	2050      	movs	r0, #80	@ 0x50
 80022c8:	f7fe fb1e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7fe fb1b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0C);
 80022d2:	200c      	movs	r0, #12
 80022d4:	f7fe fb18 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7fe fb15 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x17);
 80022de:	2017      	movs	r0, #23
 80022e0:	f7fe fb12 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022e4:	2000      	movs	r0, #0
 80022e6:	f7fe fb0f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x95);
 80022ea:	2095      	movs	r0, #149	@ 0x95
 80022ec:	f7fe fb0c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7fe fb09 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80022f6:	20f3      	movs	r0, #243	@ 0xf3
 80022f8:	f7fe fb06 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80022fc:	2000      	movs	r0, #0
 80022fe:	f7fe fb03 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE6);
 8002302:	20e6      	movs	r0, #230	@ 0xe6
 8002304:	f7fe fb00 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002308:	2000      	movs	r0, #0
 800230a:	f7fe fafd 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 800230e:	20c5      	movs	r0, #197	@ 0xc5
 8002310:	f7fe fb0e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8002314:	2032      	movs	r0, #50	@ 0x32
 8002316:	f7fe faf7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800231a:	2000      	movs	r0, #0
 800231c:	f7fe faf4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 8002320:	2044      	movs	r0, #68	@ 0x44
 8002322:	f7fe faf1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002326:	2000      	movs	r0, #0
 8002328:	f7fe faee 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x65);
 800232c:	2065      	movs	r0, #101	@ 0x65
 800232e:	f7fe faeb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002332:	2000      	movs	r0, #0
 8002334:	f7fe fae8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x76);
 8002338:	2076      	movs	r0, #118	@ 0x76
 800233a:	f7fe fae5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800233e:	2000      	movs	r0, #0
 8002340:	f7fe fae2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);
 8002344:	2088      	movs	r0, #136	@ 0x88
 8002346:	f7fe fadf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800234a:	2000      	movs	r0, #0
 800234c:	f7fe fadc 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC6);
 8002350:	20c6      	movs	r0, #198	@ 0xc6
 8002352:	f7fe faed 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x20);
 8002356:	2020      	movs	r0, #32
 8002358:	f7fe fad6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800235c:	2000      	movs	r0, #0
 800235e:	f7fe fad3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x17);
 8002362:	2017      	movs	r0, #23
 8002364:	f7fe fad0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002368:	2000      	movs	r0, #0
 800236a:	f7fe facd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 800236e:	2001      	movs	r0, #1
 8002370:	f7fe faca 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002374:	2000      	movs	r0, #0
 8002376:	f7fe fac7 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC7);
 800237a:	20c7      	movs	r0, #199	@ 0xc7
 800237c:	f7fe fad8 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002380:	2000      	movs	r0, #0
 8002382:	f7fe fac1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002386:	2000      	movs	r0, #0
 8002388:	f7fe fabe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800238c:	2000      	movs	r0, #0
 800238e:	f7fe fabb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002392:	2000      	movs	r0, #0
 8002394:	f7fe fab8 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC8);
 8002398:	20c8      	movs	r0, #200	@ 0xc8
 800239a:	f7fe fac9 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7fe fab2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f7fe faaf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023aa:	2000      	movs	r0, #0
 80023ac:	f7fe faac 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7fe faa9 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC9);
 80023b6:	20c9      	movs	r0, #201	@ 0xc9
 80023b8:	f7fe faba 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 80023bc:	2000      	movs	r0, #0
 80023be:	f7fe faa3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023c2:	2000      	movs	r0, #0
 80023c4:	f7fe faa0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023c8:	2000      	movs	r0, #0
 80023ca:	f7fe fa9d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023ce:	2000      	movs	r0, #0
 80023d0:	f7fe fa9a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f7fe fa97 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023da:	2000      	movs	r0, #0
 80023dc:	f7fe fa94 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023e0:	2000      	movs	r0, #0
 80023e2:	f7fe fa91 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023e6:	2000      	movs	r0, #0
 80023e8:	f7fe fa8e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023ec:	2000      	movs	r0, #0
 80023ee:	f7fe fa8b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f7fe fa88 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023f8:	2000      	movs	r0, #0
 80023fa:	f7fe fa85 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80023fe:	2000      	movs	r0, #0
 8002400:	f7fe fa82 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002404:	2000      	movs	r0, #0
 8002406:	f7fe fa7f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800240a:	2000      	movs	r0, #0
 800240c:	f7fe fa7c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002410:	2000      	movs	r0, #0
 8002412:	f7fe fa79 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002416:	2000      	movs	r0, #0
 8002418:	f7fe fa76 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 800241c:	20e0      	movs	r0, #224	@ 0xe0
 800241e:	f7fe fa87 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8002422:	2016      	movs	r0, #22
 8002424:	f7fe fa70 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002428:	2000      	movs	r0, #0
 800242a:	f7fe fa6d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1C);
 800242e:	201c      	movs	r0, #28
 8002430:	f7fe fa6a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002434:	2000      	movs	r0, #0
 8002436:	f7fe fa67 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x21);
 800243a:	2021      	movs	r0, #33	@ 0x21
 800243c:	f7fe fa64 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002440:	2000      	movs	r0, #0
 8002442:	f7fe fa61 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x36);
 8002446:	2036      	movs	r0, #54	@ 0x36
 8002448:	f7fe fa5e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800244c:	2000      	movs	r0, #0
 800244e:	f7fe fa5b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x46);
 8002452:	2046      	movs	r0, #70	@ 0x46
 8002454:	f7fe fa58 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002458:	2000      	movs	r0, #0
 800245a:	f7fe fa55 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x52);
 800245e:	2052      	movs	r0, #82	@ 0x52
 8002460:	f7fe fa52 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002464:	2000      	movs	r0, #0
 8002466:	f7fe fa4f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x64);
 800246a:	2064      	movs	r0, #100	@ 0x64
 800246c:	f7fe fa4c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002470:	2000      	movs	r0, #0
 8002472:	f7fe fa49 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8002476:	207a      	movs	r0, #122	@ 0x7a
 8002478:	f7fe fa46 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800247c:	2000      	movs	r0, #0
 800247e:	f7fe fa43 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8002482:	208b      	movs	r0, #139	@ 0x8b
 8002484:	f7fe fa40 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002488:	2000      	movs	r0, #0
 800248a:	f7fe fa3d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 800248e:	2099      	movs	r0, #153	@ 0x99
 8002490:	f7fe fa3a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002494:	2000      	movs	r0, #0
 8002496:	f7fe fa37 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA8);
 800249a:	20a8      	movs	r0, #168	@ 0xa8
 800249c:	f7fe fa34 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7fe fa31 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xB9);
 80024a6:	20b9      	movs	r0, #185	@ 0xb9
 80024a8:	f7fe fa2e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024ac:	2000      	movs	r0, #0
 80024ae:	f7fe fa2b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC4);
 80024b2:	20c4      	movs	r0, #196	@ 0xc4
 80024b4:	f7fe fa28 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024b8:	2000      	movs	r0, #0
 80024ba:	f7fe fa25 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xCA);
 80024be:	20ca      	movs	r0, #202	@ 0xca
 80024c0:	f7fe fa22 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024c4:	2000      	movs	r0, #0
 80024c6:	f7fe fa1f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD2);
 80024ca:	20d2      	movs	r0, #210	@ 0xd2
 80024cc:	f7fe fa1c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024d0:	2000      	movs	r0, #0
 80024d2:	f7fe fa19 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD9);
 80024d6:	20d9      	movs	r0, #217	@ 0xd9
 80024d8:	f7fe fa16 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7fe fa13 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80024e2:	20e0      	movs	r0, #224	@ 0xe0
 80024e4:	f7fe fa10 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024e8:	2000      	movs	r0, #0
 80024ea:	f7fe fa0d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80024ee:	20f3      	movs	r0, #243	@ 0xf3
 80024f0:	f7fe fa0a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f7fe fa07 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 80024fa:	20e1      	movs	r0, #225	@ 0xe1
 80024fc:	f7fe fa18 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8002500:	2016      	movs	r0, #22
 8002502:	f7fe fa01 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002506:	2000      	movs	r0, #0
 8002508:	f7fe f9fe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1C);
 800250c:	201c      	movs	r0, #28
 800250e:	f7fe f9fb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002512:	2000      	movs	r0, #0
 8002514:	f7fe f9f8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x22);
 8002518:	2022      	movs	r0, #34	@ 0x22
 800251a:	f7fe f9f5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800251e:	2000      	movs	r0, #0
 8002520:	f7fe f9f2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x36);
 8002524:	2036      	movs	r0, #54	@ 0x36
 8002526:	f7fe f9ef 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800252a:	2000      	movs	r0, #0
 800252c:	f7fe f9ec 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002530:	2045      	movs	r0, #69	@ 0x45
 8002532:	f7fe f9e9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002536:	2000      	movs	r0, #0
 8002538:	f7fe f9e6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x52);
 800253c:	2052      	movs	r0, #82	@ 0x52
 800253e:	f7fe f9e3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002542:	2000      	movs	r0, #0
 8002544:	f7fe f9e0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x64);
 8002548:	2064      	movs	r0, #100	@ 0x64
 800254a:	f7fe f9dd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800254e:	2000      	movs	r0, #0
 8002550:	f7fe f9da 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x7A);
 8002554:	207a      	movs	r0, #122	@ 0x7a
 8002556:	f7fe f9d7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800255a:	2000      	movs	r0, #0
 800255c:	f7fe f9d4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x8B);
 8002560:	208b      	movs	r0, #139	@ 0x8b
 8002562:	f7fe f9d1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002566:	2000      	movs	r0, #0
 8002568:	f7fe f9ce 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 800256c:	2099      	movs	r0, #153	@ 0x99
 800256e:	f7fe f9cb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002572:	2000      	movs	r0, #0
 8002574:	f7fe f9c8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA8);
 8002578:	20a8      	movs	r0, #168	@ 0xa8
 800257a:	f7fe f9c5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800257e:	2000      	movs	r0, #0
 8002580:	f7fe f9c2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xB9);
 8002584:	20b9      	movs	r0, #185	@ 0xb9
 8002586:	f7fe f9bf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800258a:	2000      	movs	r0, #0
 800258c:	f7fe f9bc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002590:	20c4      	movs	r0, #196	@ 0xc4
 8002592:	f7fe f9b9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002596:	2000      	movs	r0, #0
 8002598:	f7fe f9b6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xCA);
 800259c:	20ca      	movs	r0, #202	@ 0xca
 800259e:	f7fe f9b3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025a2:	2000      	movs	r0, #0
 80025a4:	f7fe f9b0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD2);
 80025a8:	20d2      	movs	r0, #210	@ 0xd2
 80025aa:	f7fe f9ad 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025ae:	2000      	movs	r0, #0
 80025b0:	f7fe f9aa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD8);
 80025b4:	20d8      	movs	r0, #216	@ 0xd8
 80025b6:	f7fe f9a7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7fe f9a4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE0);
 80025c0:	20e0      	movs	r0, #224	@ 0xe0
 80025c2:	f7fe f9a1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f7fe f99e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80025cc:	20f3      	movs	r0, #243	@ 0xf3
 80025ce:	f7fe f99b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025d2:	2000      	movs	r0, #0
 80025d4:	f7fe f998 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE2);
 80025d8:	20e2      	movs	r0, #226	@ 0xe2
 80025da:	f7fe f9a9 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80025de:	2005      	movs	r0, #5
 80025e0:	f7fe f992 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025e4:	2000      	movs	r0, #0
 80025e6:	f7fe f98f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0B);
 80025ea:	200b      	movs	r0, #11
 80025ec:	f7fe f98c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f7fe f989 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1B);
 80025f6:	201b      	movs	r0, #27
 80025f8:	f7fe f986 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80025fc:	2000      	movs	r0, #0
 80025fe:	f7fe f983 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x34);
 8002602:	2034      	movs	r0, #52	@ 0x34
 8002604:	f7fe f980 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002608:	2000      	movs	r0, #0
 800260a:	f7fe f97d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 800260e:	2044      	movs	r0, #68	@ 0x44
 8002610:	f7fe f97a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002614:	2000      	movs	r0, #0
 8002616:	f7fe f977 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x4F);
 800261a:	204f      	movs	r0, #79	@ 0x4f
 800261c:	f7fe f974 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002620:	2000      	movs	r0, #0
 8002622:	f7fe f971 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x61);
 8002626:	2061      	movs	r0, #97	@ 0x61
 8002628:	f7fe f96e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800262c:	2000      	movs	r0, #0
 800262e:	f7fe f96b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x79);
 8002632:	2079      	movs	r0, #121	@ 0x79
 8002634:	f7fe f968 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002638:	2000      	movs	r0, #0
 800263a:	f7fe f965 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);
 800263e:	2088      	movs	r0, #136	@ 0x88
 8002640:	f7fe f962 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002644:	2000      	movs	r0, #0
 8002646:	f7fe f95f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x97);
 800264a:	2097      	movs	r0, #151	@ 0x97
 800264c:	f7fe f95c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7fe f959 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA6);
 8002656:	20a6      	movs	r0, #166	@ 0xa6
 8002658:	f7fe f956 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800265c:	2000      	movs	r0, #0
 800265e:	f7fe f953 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8002662:	20b7      	movs	r0, #183	@ 0xb7
 8002664:	f7fe f950 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002668:	2000      	movs	r0, #0
 800266a:	f7fe f94d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC2);
 800266e:	20c2      	movs	r0, #194	@ 0xc2
 8002670:	f7fe f94a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002674:	2000      	movs	r0, #0
 8002676:	f7fe f947 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC7);
 800267a:	20c7      	movs	r0, #199	@ 0xc7
 800267c:	f7fe f944 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002680:	2000      	movs	r0, #0
 8002682:	f7fe f941 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD1);
 8002686:	20d1      	movs	r0, #209	@ 0xd1
 8002688:	f7fe f93e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800268c:	2000      	movs	r0, #0
 800268e:	f7fe f93b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD6);
 8002692:	20d6      	movs	r0, #214	@ 0xd6
 8002694:	f7fe f938 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002698:	2000      	movs	r0, #0
 800269a:	f7fe f935 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800269e:	20dd      	movs	r0, #221	@ 0xdd
 80026a0:	f7fe f932 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026a4:	2000      	movs	r0, #0
 80026a6:	f7fe f92f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 80026aa:	20f3      	movs	r0, #243	@ 0xf3
 80026ac:	f7fe f92c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026b0:	2000      	movs	r0, #0
 80026b2:	f7fe f929 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xE3);
 80026b6:	20e3      	movs	r0, #227	@ 0xe3
 80026b8:	f7fe f93a 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x05);
 80026bc:	2005      	movs	r0, #5
 80026be:	f7fe f923 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026c2:	2000      	movs	r0, #0
 80026c4:	f7fe f920 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA);
 80026c8:	200a      	movs	r0, #10
 80026ca:	f7fe f91d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026ce:	2000      	movs	r0, #0
 80026d0:	f7fe f91a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1C);
 80026d4:	201c      	movs	r0, #28
 80026d6:	f7fe f917 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7fe f914 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x33);
 80026e0:	2033      	movs	r0, #51	@ 0x33
 80026e2:	f7fe f911 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026e6:	2000      	movs	r0, #0
 80026e8:	f7fe f90e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 80026ec:	2044      	movs	r0, #68	@ 0x44
 80026ee:	f7fe f90b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026f2:	2000      	movs	r0, #0
 80026f4:	f7fe f908 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x50);
 80026f8:	2050      	movs	r0, #80	@ 0x50
 80026fa:	f7fe f905 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80026fe:	2000      	movs	r0, #0
 8002700:	f7fe f902 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x62);
 8002704:	2062      	movs	r0, #98	@ 0x62
 8002706:	f7fe f8ff 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800270a:	2000      	movs	r0, #0
 800270c:	f7fe f8fc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x78);
 8002710:	2078      	movs	r0, #120	@ 0x78
 8002712:	f7fe f8f9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002716:	2000      	movs	r0, #0
 8002718:	f7fe f8f6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);
 800271c:	2088      	movs	r0, #136	@ 0x88
 800271e:	f7fe f8f3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002722:	2000      	movs	r0, #0
 8002724:	f7fe f8f0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x97);
 8002728:	2097      	movs	r0, #151	@ 0x97
 800272a:	f7fe f8ed 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800272e:	2000      	movs	r0, #0
 8002730:	f7fe f8ea 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA6);
 8002734:	20a6      	movs	r0, #166	@ 0xa6
 8002736:	f7fe f8e7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800273a:	2000      	movs	r0, #0
 800273c:	f7fe f8e4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xB7);
 8002740:	20b7      	movs	r0, #183	@ 0xb7
 8002742:	f7fe f8e1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002746:	2000      	movs	r0, #0
 8002748:	f7fe f8de 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC2);
 800274c:	20c2      	movs	r0, #194	@ 0xc2
 800274e:	f7fe f8db 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002752:	2000      	movs	r0, #0
 8002754:	f7fe f8d8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC7);
 8002758:	20c7      	movs	r0, #199	@ 0xc7
 800275a:	f7fe f8d5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800275e:	2000      	movs	r0, #0
 8002760:	f7fe f8d2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD1);
 8002764:	20d1      	movs	r0, #209	@ 0xd1
 8002766:	f7fe f8cf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800276a:	2000      	movs	r0, #0
 800276c:	f7fe f8cc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD5);
 8002770:	20d5      	movs	r0, #213	@ 0xd5
 8002772:	f7fe f8c9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002776:	2000      	movs	r0, #0
 8002778:	f7fe f8c6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800277c:	20dd      	movs	r0, #221	@ 0xdd
 800277e:	f7fe f8c3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002782:	2000      	movs	r0, #0
 8002784:	f7fe f8c0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002788:	20f3      	movs	r0, #243	@ 0xf3
 800278a:	f7fe f8bd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800278e:	2000      	movs	r0, #0
 8002790:	f7fe f8ba 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE4);
 8002794:	20e4      	movs	r0, #228	@ 0xe4
 8002796:	f7fe f8cb 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 800279a:	2001      	movs	r0, #1
 800279c:	f7fe f8b4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027a0:	2000      	movs	r0, #0
 80027a2:	f7fe f8b1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 80027a6:	2001      	movs	r0, #1
 80027a8:	f7fe f8ae 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027ac:	2000      	movs	r0, #0
 80027ae:	f7fe f8ab 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);
 80027b2:	2002      	movs	r0, #2
 80027b4:	f7fe f8a8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027b8:	2000      	movs	r0, #0
 80027ba:	f7fe f8a5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2A);
 80027be:	202a      	movs	r0, #42	@ 0x2a
 80027c0:	f7fe f8a2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7fe f89f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80027ca:	203c      	movs	r0, #60	@ 0x3c
 80027cc:	f7fe f89c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7fe f899 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80027d6:	204b      	movs	r0, #75	@ 0x4b
 80027d8:	f7fe f896 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027dc:	2000      	movs	r0, #0
 80027de:	f7fe f893 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80027e2:	205d      	movs	r0, #93	@ 0x5d
 80027e4:	f7fe f890 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7fe f88d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x74);
 80027ee:	2074      	movs	r0, #116	@ 0x74
 80027f0:	f7fe f88a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80027f4:	2000      	movs	r0, #0
 80027f6:	f7fe f887 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x84);
 80027fa:	2084      	movs	r0, #132	@ 0x84
 80027fc:	f7fe f884 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002800:	2000      	movs	r0, #0
 8002802:	f7fe f881 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x93);
 8002806:	2093      	movs	r0, #147	@ 0x93
 8002808:	f7fe f87e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800280c:	2000      	movs	r0, #0
 800280e:	f7fe f87b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002812:	20a2      	movs	r0, #162	@ 0xa2
 8002814:	f7fe f878 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002818:	2000      	movs	r0, #0
 800281a:	f7fe f875 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xB3);
 800281e:	20b3      	movs	r0, #179	@ 0xb3
 8002820:	f7fe f872 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002824:	2000      	movs	r0, #0
 8002826:	f7fe f86f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xBE);
 800282a:	20be      	movs	r0, #190	@ 0xbe
 800282c:	f7fe f86c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002830:	2000      	movs	r0, #0
 8002832:	f7fe f869 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002836:	20c4      	movs	r0, #196	@ 0xc4
 8002838:	f7fe f866 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800283c:	2000      	movs	r0, #0
 800283e:	f7fe f863 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8002842:	20cd      	movs	r0, #205	@ 0xcd
 8002844:	f7fe f860 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002848:	2000      	movs	r0, #0
 800284a:	f7fe f85d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD3);
 800284e:	20d3      	movs	r0, #211	@ 0xd3
 8002850:	f7fe f85a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002854:	2000      	movs	r0, #0
 8002856:	f7fe f857 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xDD);
 800285a:	20dd      	movs	r0, #221	@ 0xdd
 800285c:	f7fe f854 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002860:	2000      	movs	r0, #0
 8002862:	f7fe f851 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002866:	20f3      	movs	r0, #243	@ 0xf3
 8002868:	f7fe f84e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800286c:	2000      	movs	r0, #0
 800286e:	f7fe f84b 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xE5);
 8002872:	20e5      	movs	r0, #229	@ 0xe5
 8002874:	f7fe f85c 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002878:	2000      	movs	r0, #0
 800287a:	f7fe f845 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800287e:	2000      	movs	r0, #0
 8002880:	f7fe f842 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002884:	2000      	movs	r0, #0
 8002886:	f7fe f83f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe f83c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);
 8002890:	2002      	movs	r0, #2
 8002892:	f7fe f839 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002896:	2000      	movs	r0, #0
 8002898:	f7fe f836 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x29);
 800289c:	2029      	movs	r0, #41	@ 0x29
 800289e:	f7fe f833 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028a2:	2000      	movs	r0, #0
 80028a4:	f7fe f830 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x3C);
 80028a8:	203c      	movs	r0, #60	@ 0x3c
 80028aa:	f7fe f82d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028ae:	2000      	movs	r0, #0
 80028b0:	f7fe f82a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x4B);
 80028b4:	204b      	movs	r0, #75	@ 0x4b
 80028b6:	f7fe f827 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028ba:	2000      	movs	r0, #0
 80028bc:	f7fe f824 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x5D);
 80028c0:	205d      	movs	r0, #93	@ 0x5d
 80028c2:	f7fe f821 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f7fe f81e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x74);
 80028cc:	2074      	movs	r0, #116	@ 0x74
 80028ce:	f7fe f81b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028d2:	2000      	movs	r0, #0
 80028d4:	f7fe f818 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x84);
 80028d8:	2084      	movs	r0, #132	@ 0x84
 80028da:	f7fe f815 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028de:	2000      	movs	r0, #0
 80028e0:	f7fe f812 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x93);
 80028e4:	2093      	movs	r0, #147	@ 0x93
 80028e6:	f7fe f80f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028ea:	2000      	movs	r0, #0
 80028ec:	f7fe f80c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA2);
 80028f0:	20a2      	movs	r0, #162	@ 0xa2
 80028f2:	f7fe f809 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80028f6:	2000      	movs	r0, #0
 80028f8:	f7fe f806 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xB3);
 80028fc:	20b3      	movs	r0, #179	@ 0xb3
 80028fe:	f7fe f803 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002902:	2000      	movs	r0, #0
 8002904:	f7fe f800 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xBE);
 8002908:	20be      	movs	r0, #190	@ 0xbe
 800290a:	f7fd fffd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800290e:	2000      	movs	r0, #0
 8002910:	f7fd fffa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xC4);
 8002914:	20c4      	movs	r0, #196	@ 0xc4
 8002916:	f7fd fff7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800291a:	2000      	movs	r0, #0
 800291c:	f7fd fff4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xCD);
 8002920:	20cd      	movs	r0, #205	@ 0xcd
 8002922:	f7fd fff1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002926:	2000      	movs	r0, #0
 8002928:	f7fd ffee 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xD3);
 800292c:	20d3      	movs	r0, #211	@ 0xd3
 800292e:	f7fd ffeb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002932:	2000      	movs	r0, #0
 8002934:	f7fd ffe8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xDC);
 8002938:	20dc      	movs	r0, #220	@ 0xdc
 800293a:	f7fd ffe5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800293e:	2000      	movs	r0, #0
 8002940:	f7fd ffe2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xF3);
 8002944:	20f3      	movs	r0, #243	@ 0xf3
 8002946:	f7fd ffdf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800294a:	2000      	movs	r0, #0
 800294c:	f7fd ffdc 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE6);
 8002950:	20e6      	movs	r0, #230	@ 0xe6
 8002952:	f7fd ffed 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x11);
 8002956:	2011      	movs	r0, #17
 8002958:	f7fd ffd6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800295c:	2000      	movs	r0, #0
 800295e:	f7fd ffd3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x34);
 8002962:	2034      	movs	r0, #52	@ 0x34
 8002964:	f7fd ffd0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002968:	2000      	movs	r0, #0
 800296a:	f7fd ffcd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x56);
 800296e:	2056      	movs	r0, #86	@ 0x56
 8002970:	f7fd ffca 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002974:	2000      	movs	r0, #0
 8002976:	f7fd ffc7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x76);
 800297a:	2076      	movs	r0, #118	@ 0x76
 800297c:	f7fd ffc4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002980:	2000      	movs	r0, #0
 8002982:	f7fd ffc1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x77);
 8002986:	2077      	movs	r0, #119	@ 0x77
 8002988:	f7fd ffbe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 800298c:	2000      	movs	r0, #0
 800298e:	f7fd ffbb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x66);
 8002992:	2066      	movs	r0, #102	@ 0x66
 8002994:	f7fd ffb8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002998:	2000      	movs	r0, #0
 800299a:	f7fd ffb5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);
 800299e:	2088      	movs	r0, #136	@ 0x88
 80029a0:	f7fd ffb2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029a4:	2000      	movs	r0, #0
 80029a6:	f7fd ffaf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 80029aa:	2099      	movs	r0, #153	@ 0x99
 80029ac:	f7fd ffac 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029b0:	2000      	movs	r0, #0
 80029b2:	f7fd ffa9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xBB);
 80029b6:	20bb      	movs	r0, #187	@ 0xbb
 80029b8:	f7fd ffa6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029bc:	2000      	movs	r0, #0
 80029be:	f7fd ffa3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 80029c2:	2099      	movs	r0, #153	@ 0x99
 80029c4:	f7fd ffa0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029c8:	2000      	movs	r0, #0
 80029ca:	f7fd ff9d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x66);
 80029ce:	2066      	movs	r0, #102	@ 0x66
 80029d0:	f7fd ff9a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029d4:	2000      	movs	r0, #0
 80029d6:	f7fd ff97 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x55);
 80029da:	2055      	movs	r0, #85	@ 0x55
 80029dc:	f7fd ff94 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7fd ff91 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x55);
 80029e6:	2055      	movs	r0, #85	@ 0x55
 80029e8:	f7fd ff8e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029ec:	2000      	movs	r0, #0
 80029ee:	f7fd ff8b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x45);
 80029f2:	2045      	movs	r0, #69	@ 0x45
 80029f4:	f7fd ff88 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80029f8:	2000      	movs	r0, #0
 80029fa:	f7fd ff85 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x43);
 80029fe:	2043      	movs	r0, #67	@ 0x43
 8002a00:	f7fd ff82 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a04:	2000      	movs	r0, #0
 8002a06:	f7fd ff7f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 8002a0a:	2044      	movs	r0, #68	@ 0x44
 8002a0c:	f7fd ff7c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a10:	2000      	movs	r0, #0
 8002a12:	f7fd ff79 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE7);
 8002a16:	20e7      	movs	r0, #231	@ 0xe7
 8002a18:	f7fd ff8a 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x32);
 8002a1c:	2032      	movs	r0, #50	@ 0x32
 8002a1e:	f7fd ff73 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7fd ff70 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x55);
 8002a28:	2055      	movs	r0, #85	@ 0x55
 8002a2a:	f7fd ff6d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7fd ff6a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x76);
 8002a34:	2076      	movs	r0, #118	@ 0x76
 8002a36:	f7fd ff67 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7fd ff64 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x66);
 8002a40:	2066      	movs	r0, #102	@ 0x66
 8002a42:	f7fd ff61 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a46:	2000      	movs	r0, #0
 8002a48:	f7fd ff5e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002a4c:	2067      	movs	r0, #103	@ 0x67
 8002a4e:	f7fd ff5b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a52:	2000      	movs	r0, #0
 8002a54:	f7fd ff58 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x67);
 8002a58:	2067      	movs	r0, #103	@ 0x67
 8002a5a:	f7fd ff55 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7fd ff52 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x87);
 8002a64:	2087      	movs	r0, #135	@ 0x87
 8002a66:	f7fd ff4f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a6a:	2000      	movs	r0, #0
 8002a6c:	f7fd ff4c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 8002a70:	2099      	movs	r0, #153	@ 0x99
 8002a72:	f7fd ff49 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a76:	2000      	movs	r0, #0
 8002a78:	f7fd ff46 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002a7c:	20bb      	movs	r0, #187	@ 0xbb
 8002a7e:	f7fd ff43 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a82:	2000      	movs	r0, #0
 8002a84:	f7fd ff40 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 8002a88:	2099      	movs	r0, #153	@ 0x99
 8002a8a:	f7fd ff3d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7fd ff3a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x77);
 8002a94:	2077      	movs	r0, #119	@ 0x77
 8002a96:	f7fd ff37 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002a9a:	2000      	movs	r0, #0
 8002a9c:	f7fd ff34 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 8002aa0:	2044      	movs	r0, #68	@ 0x44
 8002aa2:	f7fd ff31 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7fd ff2e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x56);
 8002aac:	2056      	movs	r0, #86	@ 0x56
 8002aae:	f7fd ff2b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ab2:	2000      	movs	r0, #0
 8002ab4:	f7fd ff28 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x23);
 8002ab8:	2023      	movs	r0, #35	@ 0x23
 8002aba:	f7fd ff25 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002abe:	2000      	movs	r0, #0
 8002ac0:	f7fd ff22 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x33);
 8002ac4:	2033      	movs	r0, #51	@ 0x33
 8002ac6:	f7fd ff1f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002aca:	2000      	movs	r0, #0
 8002acc:	f7fd ff1c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x45);
 8002ad0:	2045      	movs	r0, #69	@ 0x45
 8002ad2:	f7fd ff19 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ad6:	2000      	movs	r0, #0
 8002ad8:	f7fd ff16 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8002adc:	20e8      	movs	r0, #232	@ 0xe8
 8002ade:	f7fd ff27 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002ae2:	2000      	movs	r0, #0
 8002ae4:	f7fd ff10 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002ae8:	2000      	movs	r0, #0
 8002aea:	f7fd ff0d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 8002aee:	2099      	movs	r0, #153	@ 0x99
 8002af0:	f7fd ff0a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002af4:	2000      	movs	r0, #0
 8002af6:	f7fd ff07 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x87);
 8002afa:	2087      	movs	r0, #135	@ 0x87
 8002afc:	f7fd ff04 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fd ff01 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);
 8002b06:	2088      	movs	r0, #136	@ 0x88
 8002b08:	f7fd fefe 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	f7fd fefb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x77);
 8002b12:	2077      	movs	r0, #119	@ 0x77
 8002b14:	f7fd fef8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fd fef5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x66);
 8002b1e:	2066      	movs	r0, #102	@ 0x66
 8002b20:	f7fd fef2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fd feef 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);
 8002b2a:	2088      	movs	r0, #136	@ 0x88
 8002b2c:	f7fd feec 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fd fee9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xAA);
 8002b36:	20aa      	movs	r0, #170	@ 0xaa
 8002b38:	f7fd fee6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	f7fd fee3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xBB);
 8002b42:	20bb      	movs	r0, #187	@ 0xbb
 8002b44:	f7fd fee0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fd fedd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x99);
 8002b4e:	2099      	movs	r0, #153	@ 0x99
 8002b50:	f7fd feda 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b54:	2000      	movs	r0, #0
 8002b56:	f7fd fed7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x66);
 8002b5a:	2066      	movs	r0, #102	@ 0x66
 8002b5c:	f7fd fed4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b60:	2000      	movs	r0, #0
 8002b62:	f7fd fed1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x55);
 8002b66:	2055      	movs	r0, #85	@ 0x55
 8002b68:	f7fd fece 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	f7fd fecb 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x55);
 8002b72:	2055      	movs	r0, #85	@ 0x55
 8002b74:	f7fd fec8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fd fec5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 8002b7e:	2044      	movs	r0, #68	@ 0x44
 8002b80:	f7fd fec2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b84:	2000      	movs	r0, #0
 8002b86:	f7fd febf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 8002b8a:	2044      	movs	r0, #68	@ 0x44
 8002b8c:	f7fd febc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b90:	2000      	movs	r0, #0
 8002b92:	f7fd feb9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x55);
 8002b96:	2055      	movs	r0, #85	@ 0x55
 8002b98:	f7fd feb6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002b9c:	2000      	movs	r0, #0
 8002b9e:	f7fd feb3 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE9);
 8002ba2:	20e9      	movs	r0, #233	@ 0xe9
 8002ba4:	f7fd fec4 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8002ba8:	20aa      	movs	r0, #170	@ 0xaa
 8002baa:	f7fd fead 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fd feaa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd fea7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bba:	2000      	movs	r0, #0
 8002bbc:	f7fd fea4 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x00);
 8002bc0:	2000      	movs	r0, #0
 8002bc2:	f7fd feb5 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xAA);
 8002bc6:	20aa      	movs	r0, #170	@ 0xaa
 8002bc8:	f7fd fe9e 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xCF);
 8002bcc:	20cf      	movs	r0, #207	@ 0xcf
 8002bce:	f7fd feaf 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002bd2:	2000      	movs	r0, #0
 8002bd4:	f7fd fe98 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bd8:	2000      	movs	r0, #0
 8002bda:	f7fd fe95 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7fd fe92 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7fd fe8f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bea:	2000      	movs	r0, #0
 8002bec:	f7fd fe8c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bf0:	2000      	movs	r0, #0
 8002bf2:	f7fd fe89 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bf6:	2000      	movs	r0, #0
 8002bf8:	f7fd fe86 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002bfc:	2000      	movs	r0, #0
 8002bfe:	f7fd fe83 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c02:	2000      	movs	r0, #0
 8002c04:	f7fd fe80 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c08:	2000      	movs	r0, #0
 8002c0a:	f7fd fe7d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7fd fe7a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c14:	2000      	movs	r0, #0
 8002c16:	f7fd fe77 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c1a:	2000      	movs	r0, #0
 8002c1c:	f7fd fe74 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c20:	2000      	movs	r0, #0
 8002c22:	f7fd fe71 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c26:	2000      	movs	r0, #0
 8002c28:	f7fd fe6e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c2c:	2000      	movs	r0, #0
 8002c2e:	f7fd fe6b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fd fe68 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002c38:	20f0      	movs	r0, #240	@ 0xf0
 8002c3a:	f7fd fe79 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002c3e:	2000      	movs	r0, #0
 8002c40:	f7fd fe62 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x50);
 8002c44:	2050      	movs	r0, #80	@ 0x50
 8002c46:	f7fd fe5f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fd fe5c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c50:	2000      	movs	r0, #0
 8002c52:	f7fd fe59 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c56:	2000      	movs	r0, #0
 8002c58:	f7fd fe56 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF3);
 8002c5c:	20f3      	movs	r0, #243	@ 0xf3
 8002c5e:	f7fd fe67 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002c62:	2000      	movs	r0, #0
 8002c64:	f7fd fe50 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF9);
 8002c68:	20f9      	movs	r0, #249	@ 0xf9
 8002c6a:	f7fd fe61 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x06);
 8002c6e:	2006      	movs	r0, #6
 8002c70:	f7fd fe4a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);
 8002c74:	2010      	movs	r0, #16
 8002c76:	f7fd fe47 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x29);
 8002c7a:	2029      	movs	r0, #41	@ 0x29
 8002c7c:	f7fd fe44 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002c80:	2000      	movs	r0, #0
 8002c82:	f7fd fe41 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8002c86:	203a      	movs	r0, #58	@ 0x3a
 8002c88:	f7fd fe52 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x55);  /* 66 */
 8002c8c:	2055      	movs	r0, #85	@ 0x55
 8002c8e:	f7fd fe3b 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x11);
 8002c92:	2011      	movs	r0, #17
 8002c94:	f7fd fe4c 	bl	8000930 <lcd_wr_regno>
    delay_ms(100);
 8002c98:	2064      	movs	r0, #100	@ 0x64
 8002c9a:	f7fd fd79 	bl	8000790 <delay_ms>
    lcd_wr_regno(0x29);
 8002c9e:	2029      	movs	r0, #41	@ 0x29
 8002ca0:	f7fd fe46 	bl	8000930 <lcd_wr_regno>
    lcd_wr_regno(0x35);
 8002ca4:	2035      	movs	r0, #53	@ 0x35
 8002ca6:	f7fd fe43 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7fd fe2c 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x51);
 8002cb0:	2051      	movs	r0, #81	@ 0x51
 8002cb2:	f7fd fe3d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8002cb6:	20ff      	movs	r0, #255	@ 0xff
 8002cb8:	f7fd fe26 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x53);
 8002cbc:	2053      	movs	r0, #83	@ 0x53
 8002cbe:	f7fd fe37 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x2C);
 8002cc2:	202c      	movs	r0, #44	@ 0x2c
 8002cc4:	f7fd fe20 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x55);
 8002cc8:	2055      	movs	r0, #85	@ 0x55
 8002cca:	f7fd fe31 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x82);
 8002cce:	2082      	movs	r0, #130	@ 0x82
 8002cd0:	f7fd fe1a 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0x2c);
 8002cd4:	202c      	movs	r0, #44	@ 0x2c
 8002cd6:	f7fd fe2b 	bl	8000930 <lcd_wr_regno>
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <lcd_ex_st7796_reginit>:
 * @brief       ST7796寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_st7796_reginit(void)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	af00      	add	r7, sp, #0
    lcd_wr_regno(0x11);
 8002ce2:	2011      	movs	r0, #17
 8002ce4:	f7fd fe24 	bl	8000930 <lcd_wr_regno>

    delay_ms(120);
 8002ce8:	2078      	movs	r0, #120	@ 0x78
 8002cea:	f7fd fd51 	bl	8000790 <delay_ms>

    lcd_wr_regno(0x36); /* Memory Data Access Control MY,MX~~ */
 8002cee:	2036      	movs	r0, #54	@ 0x36
 8002cf0:	f7fd fe1e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x48);
 8002cf4:	2048      	movs	r0, #72	@ 0x48
 8002cf6:	f7fd fe07 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x3A);
 8002cfa:	203a      	movs	r0, #58	@ 0x3a
 8002cfc:	f7fd fe18 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x55);
 8002d00:	2055      	movs	r0, #85	@ 0x55
 8002d02:	f7fd fe01 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002d06:	20f0      	movs	r0, #240	@ 0xf0
 8002d08:	f7fd fe12 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xC3);
 8002d0c:	20c3      	movs	r0, #195	@ 0xc3
 8002d0e:	f7fd fdfb 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002d12:	20f0      	movs	r0, #240	@ 0xf0
 8002d14:	f7fd fe0c 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x96);
 8002d18:	2096      	movs	r0, #150	@ 0x96
 8002d1a:	f7fd fdf5 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB4);
 8002d1e:	20b4      	movs	r0, #180	@ 0xb4
 8002d20:	f7fd fe06 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8002d24:	2001      	movs	r0, #1
 8002d26:	f7fd fdef 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB6); /* Display Function Control */
 8002d2a:	20b6      	movs	r0, #182	@ 0xb6
 8002d2c:	f7fd fe00 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0A);
 8002d30:	200a      	movs	r0, #10
 8002d32:	f7fd fde9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA2);
 8002d36:	20a2      	movs	r0, #162	@ 0xa2
 8002d38:	f7fd fde6 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB7);
 8002d3c:	20b7      	movs	r0, #183	@ 0xb7
 8002d3e:	f7fd fdf7 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xC6);
 8002d42:	20c6      	movs	r0, #198	@ 0xc6
 8002d44:	f7fd fde0 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB9);
 8002d48:	20b9      	movs	r0, #185	@ 0xb9
 8002d4a:	f7fd fdf1 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x02);
 8002d4e:	2002      	movs	r0, #2
 8002d50:	f7fd fdda 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xE0);
 8002d54:	20e0      	movs	r0, #224	@ 0xe0
 8002d56:	f7fd fdd7 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC0);
 8002d5a:	20c0      	movs	r0, #192	@ 0xc0
 8002d5c:	f7fd fde8 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8002d60:	2080      	movs	r0, #128	@ 0x80
 8002d62:	f7fd fdd1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x16);
 8002d66:	2016      	movs	r0, #22
 8002d68:	f7fd fdce 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC1);
 8002d6c:	20c1      	movs	r0, #193	@ 0xc1
 8002d6e:	f7fd fddf 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x19);
 8002d72:	2019      	movs	r0, #25
 8002d74:	f7fd fdc8 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC2);
 8002d78:	20c2      	movs	r0, #194	@ 0xc2
 8002d7a:	f7fd fdd9 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xA7);
 8002d7e:	20a7      	movs	r0, #167	@ 0xa7
 8002d80:	f7fd fdc2 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC5);
 8002d84:	20c5      	movs	r0, #197	@ 0xc5
 8002d86:	f7fd fdd3 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x16);
 8002d8a:	2016      	movs	r0, #22
 8002d8c:	f7fd fdbc 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE8);
 8002d90:	20e8      	movs	r0, #232	@ 0xe8
 8002d92:	f7fd fdcd 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x40);
 8002d96:	2040      	movs	r0, #64	@ 0x40
 8002d98:	f7fd fdb6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x8A);
 8002d9c:	208a      	movs	r0, #138	@ 0x8a
 8002d9e:	f7fd fdb3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002da2:	2000      	movs	r0, #0
 8002da4:	f7fd fdb0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fd fdad 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x29);
 8002dae:	2029      	movs	r0, #41	@ 0x29
 8002db0:	f7fd fdaa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x19);
 8002db4:	2019      	movs	r0, #25
 8002db6:	f7fd fda7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xA5);
 8002dba:	20a5      	movs	r0, #165	@ 0xa5
 8002dbc:	f7fd fda4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x33);
 8002dc0:	2033      	movs	r0, #51	@ 0x33
 8002dc2:	f7fd fda1 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE0);
 8002dc6:	20e0      	movs	r0, #224	@ 0xe0
 8002dc8:	f7fd fdb2 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8002dcc:	20f0      	movs	r0, #240	@ 0xf0
 8002dce:	f7fd fd9b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x07);
 8002dd2:	2007      	movs	r0, #7
 8002dd4:	f7fd fd98 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0D);
 8002dd8:	200d      	movs	r0, #13
 8002dda:	f7fd fd95 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x04);
 8002dde:	2004      	movs	r0, #4
 8002de0:	f7fd fd92 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x05);
 8002de4:	2005      	movs	r0, #5
 8002de6:	f7fd fd8f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x14);
 8002dea:	2014      	movs	r0, #20
 8002dec:	f7fd fd8c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x36);
 8002df0:	2036      	movs	r0, #54	@ 0x36
 8002df2:	f7fd fd89 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x54);
 8002df6:	2054      	movs	r0, #84	@ 0x54
 8002df8:	f7fd fd86 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8002dfc:	204c      	movs	r0, #76	@ 0x4c
 8002dfe:	f7fd fd83 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x38);
 8002e02:	2038      	movs	r0, #56	@ 0x38
 8002e04:	f7fd fd80 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x13);
 8002e08:	2013      	movs	r0, #19
 8002e0a:	f7fd fd7d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x14);
 8002e0e:	2014      	movs	r0, #20
 8002e10:	f7fd fd7a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2E);
 8002e14:	202e      	movs	r0, #46	@ 0x2e
 8002e16:	f7fd fd77 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x34);
 8002e1a:	2034      	movs	r0, #52	@ 0x34
 8002e1c:	f7fd fd74 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE1);
 8002e20:	20e1      	movs	r0, #225	@ 0xe1
 8002e22:	f7fd fd85 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xF0);
 8002e26:	20f0      	movs	r0, #240	@ 0xf0
 8002e28:	f7fd fd6e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);
 8002e2c:	2010      	movs	r0, #16
 8002e2e:	f7fd fd6b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x14);
 8002e32:	2014      	movs	r0, #20
 8002e34:	f7fd fd68 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0E);
 8002e38:	200e      	movs	r0, #14
 8002e3a:	f7fd fd65 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0C);
 8002e3e:	200c      	movs	r0, #12
 8002e40:	f7fd fd62 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x08);
 8002e44:	2008      	movs	r0, #8
 8002e46:	f7fd fd5f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x35);
 8002e4a:	2035      	movs	r0, #53	@ 0x35
 8002e4c:	f7fd fd5c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x44);
 8002e50:	2044      	movs	r0, #68	@ 0x44
 8002e52:	f7fd fd59 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x4C);
 8002e56:	204c      	movs	r0, #76	@ 0x4c
 8002e58:	f7fd fd56 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x26);
 8002e5c:	2026      	movs	r0, #38	@ 0x26
 8002e5e:	f7fd fd53 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);
 8002e62:	2010      	movs	r0, #16
 8002e64:	f7fd fd50 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x12);
 8002e68:	2012      	movs	r0, #18
 8002e6a:	f7fd fd4d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x2C);
 8002e6e:	202c      	movs	r0, #44	@ 0x2c
 8002e70:	f7fd fd4a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x32);
 8002e74:	2032      	movs	r0, #50	@ 0x32
 8002e76:	f7fd fd47 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002e7a:	20f0      	movs	r0, #240	@ 0xf0
 8002e7c:	f7fd fd58 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x3C);
 8002e80:	203c      	movs	r0, #60	@ 0x3c
 8002e82:	f7fd fd41 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF0);
 8002e86:	20f0      	movs	r0, #240	@ 0xf0
 8002e88:	f7fd fd52 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x69);
 8002e8c:	2069      	movs	r0, #105	@ 0x69
 8002e8e:	f7fd fd3b 	bl	8000908 <lcd_wr_data>

    delay_ms(120);
 8002e92:	2078      	movs	r0, #120	@ 0x78
 8002e94:	f7fd fc7c 	bl	8000790 <delay_ms>

    lcd_wr_regno(0x21);
 8002e98:	2021      	movs	r0, #33	@ 0x21
 8002e9a:	f7fd fd49 	bl	8000930 <lcd_wr_regno>
    lcd_wr_regno(0x29);
 8002e9e:	2029      	movs	r0, #41	@ 0x29
 8002ea0:	f7fd fd46 	bl	8000930 <lcd_wr_regno>
}
 8002ea4:	bf00      	nop
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <lcd_ex_nt35510_reginit>:
 * @brief       NT35510寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_nt35510_reginit(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
    lcd_write_reg(0xF000, 0x55);
 8002eac:	2155      	movs	r1, #85	@ 0x55
 8002eae:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8002eb2:	f7fd fd51 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8002eb6:	21aa      	movs	r1, #170	@ 0xaa
 8002eb8:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8002ebc:	f7fd fd4c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8002ec0:	2152      	movs	r1, #82	@ 0x52
 8002ec2:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8002ec6:	f7fd fd47 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8002eca:	2108      	movs	r1, #8
 8002ecc:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8002ed0:	f7fd fd42 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x01);
 8002ed4:	2101      	movs	r1, #1
 8002ed6:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8002eda:	f7fd fd3d 	bl	8000958 <lcd_write_reg>
    /* AVDD Set AVDD 5.2V */
    lcd_write_reg(0xB000, 0x0D);
 8002ede:	210d      	movs	r1, #13
 8002ee0:	f44f 4030 	mov.w	r0, #45056	@ 0xb000
 8002ee4:	f7fd fd38 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB001, 0x0D);
 8002ee8:	210d      	movs	r1, #13
 8002eea:	f24b 0001 	movw	r0, #45057	@ 0xb001
 8002eee:	f7fd fd33 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB002, 0x0D);
 8002ef2:	210d      	movs	r1, #13
 8002ef4:	f24b 0002 	movw	r0, #45058	@ 0xb002
 8002ef8:	f7fd fd2e 	bl	8000958 <lcd_write_reg>
    /* AVDD ratio */
    lcd_write_reg(0xB600, 0x34);
 8002efc:	2134      	movs	r1, #52	@ 0x34
 8002efe:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8002f02:	f7fd fd29 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB601, 0x34);
 8002f06:	2134      	movs	r1, #52	@ 0x34
 8002f08:	f24b 6001 	movw	r0, #46593	@ 0xb601
 8002f0c:	f7fd fd24 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB602, 0x34);
 8002f10:	2134      	movs	r1, #52	@ 0x34
 8002f12:	f24b 6002 	movw	r0, #46594	@ 0xb602
 8002f16:	f7fd fd1f 	bl	8000958 <lcd_write_reg>
    /* AVEE -5.2V */
    lcd_write_reg(0xB100, 0x0D);
 8002f1a:	210d      	movs	r1, #13
 8002f1c:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8002f20:	f7fd fd1a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x0D);
 8002f24:	210d      	movs	r1, #13
 8002f26:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8002f2a:	f7fd fd15 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB102, 0x0D);
 8002f2e:	210d      	movs	r1, #13
 8002f30:	f24b 1002 	movw	r0, #45314	@ 0xb102
 8002f34:	f7fd fd10 	bl	8000958 <lcd_write_reg>
    /* AVEE ratio */
    lcd_write_reg(0xB700, 0x34);
 8002f38:	2134      	movs	r1, #52	@ 0x34
 8002f3a:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8002f3e:	f7fd fd0b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x34);
 8002f42:	2134      	movs	r1, #52	@ 0x34
 8002f44:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8002f48:	f7fd fd06 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB702, 0x34);
 8002f4c:	2134      	movs	r1, #52	@ 0x34
 8002f4e:	f24b 7002 	movw	r0, #46850	@ 0xb702
 8002f52:	f7fd fd01 	bl	8000958 <lcd_write_reg>
    /* VCL -2.5V */
    lcd_write_reg(0xB200, 0x00);
 8002f56:	2100      	movs	r1, #0
 8002f58:	f44f 4032 	mov.w	r0, #45568	@ 0xb200
 8002f5c:	f7fd fcfc 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB201, 0x00);
 8002f60:	2100      	movs	r1, #0
 8002f62:	f24b 2001 	movw	r0, #45569	@ 0xb201
 8002f66:	f7fd fcf7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB202, 0x00);
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	f24b 2002 	movw	r0, #45570	@ 0xb202
 8002f70:	f7fd fcf2 	bl	8000958 <lcd_write_reg>
    /* VCL ratio */
    lcd_write_reg(0xB800, 0x24);
 8002f74:	2124      	movs	r1, #36	@ 0x24
 8002f76:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8002f7a:	f7fd fced 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x24);
 8002f7e:	2124      	movs	r1, #36	@ 0x24
 8002f80:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8002f84:	f7fd fce8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x24);
 8002f88:	2124      	movs	r1, #36	@ 0x24
 8002f8a:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8002f8e:	f7fd fce3 	bl	8000958 <lcd_write_reg>
    /* VGH 15V (Free pump) */
    lcd_write_reg(0xBF00, 0x01);
 8002f92:	2101      	movs	r1, #1
 8002f94:	f44f 403f 	mov.w	r0, #48896	@ 0xbf00
 8002f98:	f7fd fcde 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB300, 0x0F);
 8002f9c:	210f      	movs	r1, #15
 8002f9e:	f44f 4033 	mov.w	r0, #45824	@ 0xb300
 8002fa2:	f7fd fcd9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB301, 0x0F);
 8002fa6:	210f      	movs	r1, #15
 8002fa8:	f24b 3001 	movw	r0, #45825	@ 0xb301
 8002fac:	f7fd fcd4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB302, 0x0F);
 8002fb0:	210f      	movs	r1, #15
 8002fb2:	f24b 3002 	movw	r0, #45826	@ 0xb302
 8002fb6:	f7fd fccf 	bl	8000958 <lcd_write_reg>
    /* VGH ratio */
    lcd_write_reg(0xB900, 0x34);
 8002fba:	2134      	movs	r1, #52	@ 0x34
 8002fbc:	f44f 4039 	mov.w	r0, #47360	@ 0xb900
 8002fc0:	f7fd fcca 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB901, 0x34);
 8002fc4:	2134      	movs	r1, #52	@ 0x34
 8002fc6:	f64b 1001 	movw	r0, #47361	@ 0xb901
 8002fca:	f7fd fcc5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB902, 0x34);
 8002fce:	2134      	movs	r1, #52	@ 0x34
 8002fd0:	f64b 1002 	movw	r0, #47362	@ 0xb902
 8002fd4:	f7fd fcc0 	bl	8000958 <lcd_write_reg>
    /* VGL_REG -10V */
    lcd_write_reg(0xB500, 0x08);
 8002fd8:	2108      	movs	r1, #8
 8002fda:	f44f 4035 	mov.w	r0, #46336	@ 0xb500
 8002fde:	f7fd fcbb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB501, 0x08);
 8002fe2:	2108      	movs	r1, #8
 8002fe4:	f24b 5001 	movw	r0, #46337	@ 0xb501
 8002fe8:	f7fd fcb6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB502, 0x08);
 8002fec:	2108      	movs	r1, #8
 8002fee:	f24b 5002 	movw	r0, #46338	@ 0xb502
 8002ff2:	f7fd fcb1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xC200, 0x03);
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	f44f 4042 	mov.w	r0, #49664	@ 0xc200
 8002ffc:	f7fd fcac 	bl	8000958 <lcd_write_reg>
    /* VGLX ratio */
    lcd_write_reg(0xBA00, 0x24);
 8003000:	2124      	movs	r1, #36	@ 0x24
 8003002:	f44f 403a 	mov.w	r0, #47616	@ 0xba00
 8003006:	f7fd fca7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBA01, 0x24);
 800300a:	2124      	movs	r1, #36	@ 0x24
 800300c:	f64b 2001 	movw	r0, #47617	@ 0xba01
 8003010:	f7fd fca2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBA02, 0x24);
 8003014:	2124      	movs	r1, #36	@ 0x24
 8003016:	f64b 2002 	movw	r0, #47618	@ 0xba02
 800301a:	f7fd fc9d 	bl	8000958 <lcd_write_reg>
    /* VGMP/VGSP 4.5V/0V */
    lcd_write_reg(0xBC00, 0x00);
 800301e:	2100      	movs	r1, #0
 8003020:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8003024:	f7fd fc98 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x78);
 8003028:	2178      	movs	r1, #120	@ 0x78
 800302a:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 800302e:	f7fd fc93 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8003032:	2100      	movs	r1, #0
 8003034:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8003038:	f7fd fc8e 	bl	8000958 <lcd_write_reg>
    /* VGMN/VGSN -4.5V/0V */
    lcd_write_reg(0xBD00, 0x00);
 800303c:	2100      	movs	r1, #0
 800303e:	f44f 403d 	mov.w	r0, #48384	@ 0xbd00
 8003042:	f7fd fc89 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBD01, 0x78);
 8003046:	2178      	movs	r1, #120	@ 0x78
 8003048:	f64b 5001 	movw	r0, #48385	@ 0xbd01
 800304c:	f7fd fc84 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBD02, 0x00);
 8003050:	2100      	movs	r1, #0
 8003052:	f64b 5002 	movw	r0, #48386	@ 0xbd02
 8003056:	f7fd fc7f 	bl	8000958 <lcd_write_reg>
    /* VCOM */
    lcd_write_reg(0xBE00, 0x00);
 800305a:	2100      	movs	r1, #0
 800305c:	f44f 403e 	mov.w	r0, #48640	@ 0xbe00
 8003060:	f7fd fc7a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBE01, 0x64);
 8003064:	2164      	movs	r1, #100	@ 0x64
 8003066:	f64b 6001 	movw	r0, #48641	@ 0xbe01
 800306a:	f7fd fc75 	bl	8000958 <lcd_write_reg>
    /* Gamma Setting */
    lcd_write_reg(0xD100, 0x00);
 800306e:	2100      	movs	r1, #0
 8003070:	f44f 4051 	mov.w	r0, #53504	@ 0xd100
 8003074:	f7fd fc70 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD101, 0x33);
 8003078:	2133      	movs	r1, #51	@ 0x33
 800307a:	f24d 1001 	movw	r0, #53505	@ 0xd101
 800307e:	f7fd fc6b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD102, 0x00);
 8003082:	2100      	movs	r1, #0
 8003084:	f24d 1002 	movw	r0, #53506	@ 0xd102
 8003088:	f7fd fc66 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD103, 0x34);
 800308c:	2134      	movs	r1, #52	@ 0x34
 800308e:	f24d 1003 	movw	r0, #53507	@ 0xd103
 8003092:	f7fd fc61 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD104, 0x00);
 8003096:	2100      	movs	r1, #0
 8003098:	f24d 1004 	movw	r0, #53508	@ 0xd104
 800309c:	f7fd fc5c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD105, 0x3A);
 80030a0:	213a      	movs	r1, #58	@ 0x3a
 80030a2:	f24d 1005 	movw	r0, #53509	@ 0xd105
 80030a6:	f7fd fc57 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD106, 0x00);
 80030aa:	2100      	movs	r1, #0
 80030ac:	f24d 1006 	movw	r0, #53510	@ 0xd106
 80030b0:	f7fd fc52 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD107, 0x4A);
 80030b4:	214a      	movs	r1, #74	@ 0x4a
 80030b6:	f24d 1007 	movw	r0, #53511	@ 0xd107
 80030ba:	f7fd fc4d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD108, 0x00);
 80030be:	2100      	movs	r1, #0
 80030c0:	f24d 1008 	movw	r0, #53512	@ 0xd108
 80030c4:	f7fd fc48 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD109, 0x5C);
 80030c8:	215c      	movs	r1, #92	@ 0x5c
 80030ca:	f24d 1009 	movw	r0, #53513	@ 0xd109
 80030ce:	f7fd fc43 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD10A, 0x00);
 80030d2:	2100      	movs	r1, #0
 80030d4:	f24d 100a 	movw	r0, #53514	@ 0xd10a
 80030d8:	f7fd fc3e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD10B, 0x81);
 80030dc:	2181      	movs	r1, #129	@ 0x81
 80030de:	f24d 100b 	movw	r0, #53515	@ 0xd10b
 80030e2:	f7fd fc39 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD10C, 0x00);
 80030e6:	2100      	movs	r1, #0
 80030e8:	f24d 100c 	movw	r0, #53516	@ 0xd10c
 80030ec:	f7fd fc34 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD10D, 0xA6);
 80030f0:	21a6      	movs	r1, #166	@ 0xa6
 80030f2:	f24d 100d 	movw	r0, #53517	@ 0xd10d
 80030f6:	f7fd fc2f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD10E, 0x00);
 80030fa:	2100      	movs	r1, #0
 80030fc:	f24d 100e 	movw	r0, #53518	@ 0xd10e
 8003100:	f7fd fc2a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD10F, 0xE5);
 8003104:	21e5      	movs	r1, #229	@ 0xe5
 8003106:	f24d 100f 	movw	r0, #53519	@ 0xd10f
 800310a:	f7fd fc25 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD110, 0x01);
 800310e:	2101      	movs	r1, #1
 8003110:	f24d 1010 	movw	r0, #53520	@ 0xd110
 8003114:	f7fd fc20 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD111, 0x13);
 8003118:	2113      	movs	r1, #19
 800311a:	f24d 1011 	movw	r0, #53521	@ 0xd111
 800311e:	f7fd fc1b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD112, 0x01);
 8003122:	2101      	movs	r1, #1
 8003124:	f24d 1012 	movw	r0, #53522	@ 0xd112
 8003128:	f7fd fc16 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD113, 0x54);
 800312c:	2154      	movs	r1, #84	@ 0x54
 800312e:	f24d 1013 	movw	r0, #53523	@ 0xd113
 8003132:	f7fd fc11 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD114, 0x01);
 8003136:	2101      	movs	r1, #1
 8003138:	f24d 1014 	movw	r0, #53524	@ 0xd114
 800313c:	f7fd fc0c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD115, 0x82);
 8003140:	2182      	movs	r1, #130	@ 0x82
 8003142:	f24d 1015 	movw	r0, #53525	@ 0xd115
 8003146:	f7fd fc07 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD116, 0x01);
 800314a:	2101      	movs	r1, #1
 800314c:	f24d 1016 	movw	r0, #53526	@ 0xd116
 8003150:	f7fd fc02 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD117, 0xCA);
 8003154:	21ca      	movs	r1, #202	@ 0xca
 8003156:	f24d 1017 	movw	r0, #53527	@ 0xd117
 800315a:	f7fd fbfd 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD118, 0x02);
 800315e:	2102      	movs	r1, #2
 8003160:	f24d 1018 	movw	r0, #53528	@ 0xd118
 8003164:	f7fd fbf8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD119, 0x00);
 8003168:	2100      	movs	r1, #0
 800316a:	f24d 1019 	movw	r0, #53529	@ 0xd119
 800316e:	f7fd fbf3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD11A, 0x02);
 8003172:	2102      	movs	r1, #2
 8003174:	f24d 101a 	movw	r0, #53530	@ 0xd11a
 8003178:	f7fd fbee 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD11B, 0x01);
 800317c:	2101      	movs	r1, #1
 800317e:	f24d 101b 	movw	r0, #53531	@ 0xd11b
 8003182:	f7fd fbe9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD11C, 0x02);
 8003186:	2102      	movs	r1, #2
 8003188:	f24d 101c 	movw	r0, #53532	@ 0xd11c
 800318c:	f7fd fbe4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD11D, 0x34);
 8003190:	2134      	movs	r1, #52	@ 0x34
 8003192:	f24d 101d 	movw	r0, #53533	@ 0xd11d
 8003196:	f7fd fbdf 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD11E, 0x02);
 800319a:	2102      	movs	r1, #2
 800319c:	f24d 101e 	movw	r0, #53534	@ 0xd11e
 80031a0:	f7fd fbda 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD11F, 0x67);
 80031a4:	2167      	movs	r1, #103	@ 0x67
 80031a6:	f24d 101f 	movw	r0, #53535	@ 0xd11f
 80031aa:	f7fd fbd5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD120, 0x02);
 80031ae:	2102      	movs	r1, #2
 80031b0:	f24d 1020 	movw	r0, #53536	@ 0xd120
 80031b4:	f7fd fbd0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD121, 0x84);
 80031b8:	2184      	movs	r1, #132	@ 0x84
 80031ba:	f24d 1021 	movw	r0, #53537	@ 0xd121
 80031be:	f7fd fbcb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD122, 0x02);
 80031c2:	2102      	movs	r1, #2
 80031c4:	f24d 1022 	movw	r0, #53538	@ 0xd122
 80031c8:	f7fd fbc6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD123, 0xA4);
 80031cc:	21a4      	movs	r1, #164	@ 0xa4
 80031ce:	f24d 1023 	movw	r0, #53539	@ 0xd123
 80031d2:	f7fd fbc1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD124, 0x02);
 80031d6:	2102      	movs	r1, #2
 80031d8:	f24d 1024 	movw	r0, #53540	@ 0xd124
 80031dc:	f7fd fbbc 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD125, 0xB7);
 80031e0:	21b7      	movs	r1, #183	@ 0xb7
 80031e2:	f24d 1025 	movw	r0, #53541	@ 0xd125
 80031e6:	f7fd fbb7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD126, 0x02);
 80031ea:	2102      	movs	r1, #2
 80031ec:	f24d 1026 	movw	r0, #53542	@ 0xd126
 80031f0:	f7fd fbb2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD127, 0xCF);
 80031f4:	21cf      	movs	r1, #207	@ 0xcf
 80031f6:	f24d 1027 	movw	r0, #53543	@ 0xd127
 80031fa:	f7fd fbad 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD128, 0x02);
 80031fe:	2102      	movs	r1, #2
 8003200:	f24d 1028 	movw	r0, #53544	@ 0xd128
 8003204:	f7fd fba8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD129, 0xDE);
 8003208:	21de      	movs	r1, #222	@ 0xde
 800320a:	f24d 1029 	movw	r0, #53545	@ 0xd129
 800320e:	f7fd fba3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD12A, 0x02);
 8003212:	2102      	movs	r1, #2
 8003214:	f24d 102a 	movw	r0, #53546	@ 0xd12a
 8003218:	f7fd fb9e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD12B, 0xF2);
 800321c:	21f2      	movs	r1, #242	@ 0xf2
 800321e:	f24d 102b 	movw	r0, #53547	@ 0xd12b
 8003222:	f7fd fb99 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD12C, 0x02);
 8003226:	2102      	movs	r1, #2
 8003228:	f24d 102c 	movw	r0, #53548	@ 0xd12c
 800322c:	f7fd fb94 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD12D, 0xFE);
 8003230:	21fe      	movs	r1, #254	@ 0xfe
 8003232:	f24d 102d 	movw	r0, #53549	@ 0xd12d
 8003236:	f7fd fb8f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD12E, 0x03);
 800323a:	2103      	movs	r1, #3
 800323c:	f24d 102e 	movw	r0, #53550	@ 0xd12e
 8003240:	f7fd fb8a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD12F, 0x10);
 8003244:	2110      	movs	r1, #16
 8003246:	f24d 102f 	movw	r0, #53551	@ 0xd12f
 800324a:	f7fd fb85 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD130, 0x03);
 800324e:	2103      	movs	r1, #3
 8003250:	f24d 1030 	movw	r0, #53552	@ 0xd130
 8003254:	f7fd fb80 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD131, 0x33);
 8003258:	2133      	movs	r1, #51	@ 0x33
 800325a:	f24d 1031 	movw	r0, #53553	@ 0xd131
 800325e:	f7fd fb7b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD132, 0x03);
 8003262:	2103      	movs	r1, #3
 8003264:	f24d 1032 	movw	r0, #53554	@ 0xd132
 8003268:	f7fd fb76 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD133, 0x6D);
 800326c:	216d      	movs	r1, #109	@ 0x6d
 800326e:	f24d 1033 	movw	r0, #53555	@ 0xd133
 8003272:	f7fd fb71 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD200, 0x00);
 8003276:	2100      	movs	r1, #0
 8003278:	f44f 4052 	mov.w	r0, #53760	@ 0xd200
 800327c:	f7fd fb6c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD201, 0x33);
 8003280:	2133      	movs	r1, #51	@ 0x33
 8003282:	f24d 2001 	movw	r0, #53761	@ 0xd201
 8003286:	f7fd fb67 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD202, 0x00);
 800328a:	2100      	movs	r1, #0
 800328c:	f24d 2002 	movw	r0, #53762	@ 0xd202
 8003290:	f7fd fb62 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD203, 0x34);
 8003294:	2134      	movs	r1, #52	@ 0x34
 8003296:	f24d 2003 	movw	r0, #53763	@ 0xd203
 800329a:	f7fd fb5d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD204, 0x00);
 800329e:	2100      	movs	r1, #0
 80032a0:	f24d 2004 	movw	r0, #53764	@ 0xd204
 80032a4:	f7fd fb58 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD205, 0x3A);
 80032a8:	213a      	movs	r1, #58	@ 0x3a
 80032aa:	f24d 2005 	movw	r0, #53765	@ 0xd205
 80032ae:	f7fd fb53 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD206, 0x00);
 80032b2:	2100      	movs	r1, #0
 80032b4:	f24d 2006 	movw	r0, #53766	@ 0xd206
 80032b8:	f7fd fb4e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD207, 0x4A);
 80032bc:	214a      	movs	r1, #74	@ 0x4a
 80032be:	f24d 2007 	movw	r0, #53767	@ 0xd207
 80032c2:	f7fd fb49 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD208, 0x00);
 80032c6:	2100      	movs	r1, #0
 80032c8:	f24d 2008 	movw	r0, #53768	@ 0xd208
 80032cc:	f7fd fb44 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD209, 0x5C);
 80032d0:	215c      	movs	r1, #92	@ 0x5c
 80032d2:	f24d 2009 	movw	r0, #53769	@ 0xd209
 80032d6:	f7fd fb3f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD20A, 0x00);
 80032da:	2100      	movs	r1, #0
 80032dc:	f24d 200a 	movw	r0, #53770	@ 0xd20a
 80032e0:	f7fd fb3a 	bl	8000958 <lcd_write_reg>

    lcd_write_reg(0xD20B, 0x81);
 80032e4:	2181      	movs	r1, #129	@ 0x81
 80032e6:	f24d 200b 	movw	r0, #53771	@ 0xd20b
 80032ea:	f7fd fb35 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD20C, 0x00);
 80032ee:	2100      	movs	r1, #0
 80032f0:	f24d 200c 	movw	r0, #53772	@ 0xd20c
 80032f4:	f7fd fb30 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD20D, 0xA6);
 80032f8:	21a6      	movs	r1, #166	@ 0xa6
 80032fa:	f24d 200d 	movw	r0, #53773	@ 0xd20d
 80032fe:	f7fd fb2b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD20E, 0x00);
 8003302:	2100      	movs	r1, #0
 8003304:	f24d 200e 	movw	r0, #53774	@ 0xd20e
 8003308:	f7fd fb26 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD20F, 0xE5);
 800330c:	21e5      	movs	r1, #229	@ 0xe5
 800330e:	f24d 200f 	movw	r0, #53775	@ 0xd20f
 8003312:	f7fd fb21 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD210, 0x01);
 8003316:	2101      	movs	r1, #1
 8003318:	f24d 2010 	movw	r0, #53776	@ 0xd210
 800331c:	f7fd fb1c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD211, 0x13);
 8003320:	2113      	movs	r1, #19
 8003322:	f24d 2011 	movw	r0, #53777	@ 0xd211
 8003326:	f7fd fb17 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD212, 0x01);
 800332a:	2101      	movs	r1, #1
 800332c:	f24d 2012 	movw	r0, #53778	@ 0xd212
 8003330:	f7fd fb12 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD213, 0x54);
 8003334:	2154      	movs	r1, #84	@ 0x54
 8003336:	f24d 2013 	movw	r0, #53779	@ 0xd213
 800333a:	f7fd fb0d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD214, 0x01);
 800333e:	2101      	movs	r1, #1
 8003340:	f24d 2014 	movw	r0, #53780	@ 0xd214
 8003344:	f7fd fb08 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD215, 0x82);
 8003348:	2182      	movs	r1, #130	@ 0x82
 800334a:	f24d 2015 	movw	r0, #53781	@ 0xd215
 800334e:	f7fd fb03 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD216, 0x01);
 8003352:	2101      	movs	r1, #1
 8003354:	f24d 2016 	movw	r0, #53782	@ 0xd216
 8003358:	f7fd fafe 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD217, 0xCA);
 800335c:	21ca      	movs	r1, #202	@ 0xca
 800335e:	f24d 2017 	movw	r0, #53783	@ 0xd217
 8003362:	f7fd faf9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD218, 0x02);
 8003366:	2102      	movs	r1, #2
 8003368:	f24d 2018 	movw	r0, #53784	@ 0xd218
 800336c:	f7fd faf4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD219, 0x00);
 8003370:	2100      	movs	r1, #0
 8003372:	f24d 2019 	movw	r0, #53785	@ 0xd219
 8003376:	f7fd faef 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD21A, 0x02);
 800337a:	2102      	movs	r1, #2
 800337c:	f24d 201a 	movw	r0, #53786	@ 0xd21a
 8003380:	f7fd faea 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD21B, 0x01);
 8003384:	2101      	movs	r1, #1
 8003386:	f24d 201b 	movw	r0, #53787	@ 0xd21b
 800338a:	f7fd fae5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD21C, 0x02);
 800338e:	2102      	movs	r1, #2
 8003390:	f24d 201c 	movw	r0, #53788	@ 0xd21c
 8003394:	f7fd fae0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD21D, 0x34);
 8003398:	2134      	movs	r1, #52	@ 0x34
 800339a:	f24d 201d 	movw	r0, #53789	@ 0xd21d
 800339e:	f7fd fadb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD21E, 0x02);
 80033a2:	2102      	movs	r1, #2
 80033a4:	f24d 201e 	movw	r0, #53790	@ 0xd21e
 80033a8:	f7fd fad6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD21F, 0x67);
 80033ac:	2167      	movs	r1, #103	@ 0x67
 80033ae:	f24d 201f 	movw	r0, #53791	@ 0xd21f
 80033b2:	f7fd fad1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD220, 0x02);
 80033b6:	2102      	movs	r1, #2
 80033b8:	f24d 2020 	movw	r0, #53792	@ 0xd220
 80033bc:	f7fd facc 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD221, 0x84);
 80033c0:	2184      	movs	r1, #132	@ 0x84
 80033c2:	f24d 2021 	movw	r0, #53793	@ 0xd221
 80033c6:	f7fd fac7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD222, 0x02);
 80033ca:	2102      	movs	r1, #2
 80033cc:	f24d 2022 	movw	r0, #53794	@ 0xd222
 80033d0:	f7fd fac2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD223, 0xA4);
 80033d4:	21a4      	movs	r1, #164	@ 0xa4
 80033d6:	f24d 2023 	movw	r0, #53795	@ 0xd223
 80033da:	f7fd fabd 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD224, 0x02);
 80033de:	2102      	movs	r1, #2
 80033e0:	f24d 2024 	movw	r0, #53796	@ 0xd224
 80033e4:	f7fd fab8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD225, 0xB7);
 80033e8:	21b7      	movs	r1, #183	@ 0xb7
 80033ea:	f24d 2025 	movw	r0, #53797	@ 0xd225
 80033ee:	f7fd fab3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD226, 0x02);
 80033f2:	2102      	movs	r1, #2
 80033f4:	f24d 2026 	movw	r0, #53798	@ 0xd226
 80033f8:	f7fd faae 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD227, 0xCF);
 80033fc:	21cf      	movs	r1, #207	@ 0xcf
 80033fe:	f24d 2027 	movw	r0, #53799	@ 0xd227
 8003402:	f7fd faa9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD228, 0x02);
 8003406:	2102      	movs	r1, #2
 8003408:	f24d 2028 	movw	r0, #53800	@ 0xd228
 800340c:	f7fd faa4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD229, 0xDE);
 8003410:	21de      	movs	r1, #222	@ 0xde
 8003412:	f24d 2029 	movw	r0, #53801	@ 0xd229
 8003416:	f7fd fa9f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD22A, 0x02);
 800341a:	2102      	movs	r1, #2
 800341c:	f24d 202a 	movw	r0, #53802	@ 0xd22a
 8003420:	f7fd fa9a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD22B, 0xF2);
 8003424:	21f2      	movs	r1, #242	@ 0xf2
 8003426:	f24d 202b 	movw	r0, #53803	@ 0xd22b
 800342a:	f7fd fa95 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD22C, 0x02);
 800342e:	2102      	movs	r1, #2
 8003430:	f24d 202c 	movw	r0, #53804	@ 0xd22c
 8003434:	f7fd fa90 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD22D, 0xFE);
 8003438:	21fe      	movs	r1, #254	@ 0xfe
 800343a:	f24d 202d 	movw	r0, #53805	@ 0xd22d
 800343e:	f7fd fa8b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD22E, 0x03);
 8003442:	2103      	movs	r1, #3
 8003444:	f24d 202e 	movw	r0, #53806	@ 0xd22e
 8003448:	f7fd fa86 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD22F, 0x10);
 800344c:	2110      	movs	r1, #16
 800344e:	f24d 202f 	movw	r0, #53807	@ 0xd22f
 8003452:	f7fd fa81 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD230, 0x03);
 8003456:	2103      	movs	r1, #3
 8003458:	f24d 2030 	movw	r0, #53808	@ 0xd230
 800345c:	f7fd fa7c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD231, 0x33);
 8003460:	2133      	movs	r1, #51	@ 0x33
 8003462:	f24d 2031 	movw	r0, #53809	@ 0xd231
 8003466:	f7fd fa77 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD232, 0x03);
 800346a:	2103      	movs	r1, #3
 800346c:	f24d 2032 	movw	r0, #53810	@ 0xd232
 8003470:	f7fd fa72 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD233, 0x6D);
 8003474:	216d      	movs	r1, #109	@ 0x6d
 8003476:	f24d 2033 	movw	r0, #53811	@ 0xd233
 800347a:	f7fd fa6d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD300, 0x00);
 800347e:	2100      	movs	r1, #0
 8003480:	f44f 4053 	mov.w	r0, #54016	@ 0xd300
 8003484:	f7fd fa68 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD301, 0x33);
 8003488:	2133      	movs	r1, #51	@ 0x33
 800348a:	f24d 3001 	movw	r0, #54017	@ 0xd301
 800348e:	f7fd fa63 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD302, 0x00);
 8003492:	2100      	movs	r1, #0
 8003494:	f24d 3002 	movw	r0, #54018	@ 0xd302
 8003498:	f7fd fa5e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD303, 0x34);
 800349c:	2134      	movs	r1, #52	@ 0x34
 800349e:	f24d 3003 	movw	r0, #54019	@ 0xd303
 80034a2:	f7fd fa59 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD304, 0x00);
 80034a6:	2100      	movs	r1, #0
 80034a8:	f24d 3004 	movw	r0, #54020	@ 0xd304
 80034ac:	f7fd fa54 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD305, 0x3A);
 80034b0:	213a      	movs	r1, #58	@ 0x3a
 80034b2:	f24d 3005 	movw	r0, #54021	@ 0xd305
 80034b6:	f7fd fa4f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD306, 0x00);
 80034ba:	2100      	movs	r1, #0
 80034bc:	f24d 3006 	movw	r0, #54022	@ 0xd306
 80034c0:	f7fd fa4a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD307, 0x4A);
 80034c4:	214a      	movs	r1, #74	@ 0x4a
 80034c6:	f24d 3007 	movw	r0, #54023	@ 0xd307
 80034ca:	f7fd fa45 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD308, 0x00);
 80034ce:	2100      	movs	r1, #0
 80034d0:	f24d 3008 	movw	r0, #54024	@ 0xd308
 80034d4:	f7fd fa40 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD309, 0x5C);
 80034d8:	215c      	movs	r1, #92	@ 0x5c
 80034da:	f24d 3009 	movw	r0, #54025	@ 0xd309
 80034de:	f7fd fa3b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD30A, 0x00);
 80034e2:	2100      	movs	r1, #0
 80034e4:	f24d 300a 	movw	r0, #54026	@ 0xd30a
 80034e8:	f7fd fa36 	bl	8000958 <lcd_write_reg>

    lcd_write_reg(0xD30B, 0x81);
 80034ec:	2181      	movs	r1, #129	@ 0x81
 80034ee:	f24d 300b 	movw	r0, #54027	@ 0xd30b
 80034f2:	f7fd fa31 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD30C, 0x00);
 80034f6:	2100      	movs	r1, #0
 80034f8:	f24d 300c 	movw	r0, #54028	@ 0xd30c
 80034fc:	f7fd fa2c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD30D, 0xA6);
 8003500:	21a6      	movs	r1, #166	@ 0xa6
 8003502:	f24d 300d 	movw	r0, #54029	@ 0xd30d
 8003506:	f7fd fa27 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD30E, 0x00);
 800350a:	2100      	movs	r1, #0
 800350c:	f24d 300e 	movw	r0, #54030	@ 0xd30e
 8003510:	f7fd fa22 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD30F, 0xE5);
 8003514:	21e5      	movs	r1, #229	@ 0xe5
 8003516:	f24d 300f 	movw	r0, #54031	@ 0xd30f
 800351a:	f7fd fa1d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD310, 0x01);
 800351e:	2101      	movs	r1, #1
 8003520:	f24d 3010 	movw	r0, #54032	@ 0xd310
 8003524:	f7fd fa18 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD311, 0x13);
 8003528:	2113      	movs	r1, #19
 800352a:	f24d 3011 	movw	r0, #54033	@ 0xd311
 800352e:	f7fd fa13 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD312, 0x01);
 8003532:	2101      	movs	r1, #1
 8003534:	f24d 3012 	movw	r0, #54034	@ 0xd312
 8003538:	f7fd fa0e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD313, 0x54);
 800353c:	2154      	movs	r1, #84	@ 0x54
 800353e:	f24d 3013 	movw	r0, #54035	@ 0xd313
 8003542:	f7fd fa09 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD314, 0x01);
 8003546:	2101      	movs	r1, #1
 8003548:	f24d 3014 	movw	r0, #54036	@ 0xd314
 800354c:	f7fd fa04 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD315, 0x82);
 8003550:	2182      	movs	r1, #130	@ 0x82
 8003552:	f24d 3015 	movw	r0, #54037	@ 0xd315
 8003556:	f7fd f9ff 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD316, 0x01);
 800355a:	2101      	movs	r1, #1
 800355c:	f24d 3016 	movw	r0, #54038	@ 0xd316
 8003560:	f7fd f9fa 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD317, 0xCA);
 8003564:	21ca      	movs	r1, #202	@ 0xca
 8003566:	f24d 3017 	movw	r0, #54039	@ 0xd317
 800356a:	f7fd f9f5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD318, 0x02);
 800356e:	2102      	movs	r1, #2
 8003570:	f24d 3018 	movw	r0, #54040	@ 0xd318
 8003574:	f7fd f9f0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD319, 0x00);
 8003578:	2100      	movs	r1, #0
 800357a:	f24d 3019 	movw	r0, #54041	@ 0xd319
 800357e:	f7fd f9eb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD31A, 0x02);
 8003582:	2102      	movs	r1, #2
 8003584:	f24d 301a 	movw	r0, #54042	@ 0xd31a
 8003588:	f7fd f9e6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD31B, 0x01);
 800358c:	2101      	movs	r1, #1
 800358e:	f24d 301b 	movw	r0, #54043	@ 0xd31b
 8003592:	f7fd f9e1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD31C, 0x02);
 8003596:	2102      	movs	r1, #2
 8003598:	f24d 301c 	movw	r0, #54044	@ 0xd31c
 800359c:	f7fd f9dc 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD31D, 0x34);
 80035a0:	2134      	movs	r1, #52	@ 0x34
 80035a2:	f24d 301d 	movw	r0, #54045	@ 0xd31d
 80035a6:	f7fd f9d7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD31E, 0x02);
 80035aa:	2102      	movs	r1, #2
 80035ac:	f24d 301e 	movw	r0, #54046	@ 0xd31e
 80035b0:	f7fd f9d2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD31F, 0x67);
 80035b4:	2167      	movs	r1, #103	@ 0x67
 80035b6:	f24d 301f 	movw	r0, #54047	@ 0xd31f
 80035ba:	f7fd f9cd 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD320, 0x02);
 80035be:	2102      	movs	r1, #2
 80035c0:	f24d 3020 	movw	r0, #54048	@ 0xd320
 80035c4:	f7fd f9c8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD321, 0x84);
 80035c8:	2184      	movs	r1, #132	@ 0x84
 80035ca:	f24d 3021 	movw	r0, #54049	@ 0xd321
 80035ce:	f7fd f9c3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD322, 0x02);
 80035d2:	2102      	movs	r1, #2
 80035d4:	f24d 3022 	movw	r0, #54050	@ 0xd322
 80035d8:	f7fd f9be 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD323, 0xA4);
 80035dc:	21a4      	movs	r1, #164	@ 0xa4
 80035de:	f24d 3023 	movw	r0, #54051	@ 0xd323
 80035e2:	f7fd f9b9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD324, 0x02);
 80035e6:	2102      	movs	r1, #2
 80035e8:	f24d 3024 	movw	r0, #54052	@ 0xd324
 80035ec:	f7fd f9b4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD325, 0xB7);
 80035f0:	21b7      	movs	r1, #183	@ 0xb7
 80035f2:	f24d 3025 	movw	r0, #54053	@ 0xd325
 80035f6:	f7fd f9af 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD326, 0x02);
 80035fa:	2102      	movs	r1, #2
 80035fc:	f24d 3026 	movw	r0, #54054	@ 0xd326
 8003600:	f7fd f9aa 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD327, 0xCF);
 8003604:	21cf      	movs	r1, #207	@ 0xcf
 8003606:	f24d 3027 	movw	r0, #54055	@ 0xd327
 800360a:	f7fd f9a5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD328, 0x02);
 800360e:	2102      	movs	r1, #2
 8003610:	f24d 3028 	movw	r0, #54056	@ 0xd328
 8003614:	f7fd f9a0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD329, 0xDE);
 8003618:	21de      	movs	r1, #222	@ 0xde
 800361a:	f24d 3029 	movw	r0, #54057	@ 0xd329
 800361e:	f7fd f99b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD32A, 0x02);
 8003622:	2102      	movs	r1, #2
 8003624:	f24d 302a 	movw	r0, #54058	@ 0xd32a
 8003628:	f7fd f996 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD32B, 0xF2);
 800362c:	21f2      	movs	r1, #242	@ 0xf2
 800362e:	f24d 302b 	movw	r0, #54059	@ 0xd32b
 8003632:	f7fd f991 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD32C, 0x02);
 8003636:	2102      	movs	r1, #2
 8003638:	f24d 302c 	movw	r0, #54060	@ 0xd32c
 800363c:	f7fd f98c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD32D, 0xFE);
 8003640:	21fe      	movs	r1, #254	@ 0xfe
 8003642:	f24d 302d 	movw	r0, #54061	@ 0xd32d
 8003646:	f7fd f987 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD32E, 0x03);
 800364a:	2103      	movs	r1, #3
 800364c:	f24d 302e 	movw	r0, #54062	@ 0xd32e
 8003650:	f7fd f982 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD32F, 0x10);
 8003654:	2110      	movs	r1, #16
 8003656:	f24d 302f 	movw	r0, #54063	@ 0xd32f
 800365a:	f7fd f97d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD330, 0x03);
 800365e:	2103      	movs	r1, #3
 8003660:	f24d 3030 	movw	r0, #54064	@ 0xd330
 8003664:	f7fd f978 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD331, 0x33);
 8003668:	2133      	movs	r1, #51	@ 0x33
 800366a:	f24d 3031 	movw	r0, #54065	@ 0xd331
 800366e:	f7fd f973 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD332, 0x03);
 8003672:	2103      	movs	r1, #3
 8003674:	f24d 3032 	movw	r0, #54066	@ 0xd332
 8003678:	f7fd f96e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD333, 0x6D);
 800367c:	216d      	movs	r1, #109	@ 0x6d
 800367e:	f24d 3033 	movw	r0, #54067	@ 0xd333
 8003682:	f7fd f969 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD400, 0x00);
 8003686:	2100      	movs	r1, #0
 8003688:	f44f 4054 	mov.w	r0, #54272	@ 0xd400
 800368c:	f7fd f964 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD401, 0x33);
 8003690:	2133      	movs	r1, #51	@ 0x33
 8003692:	f24d 4001 	movw	r0, #54273	@ 0xd401
 8003696:	f7fd f95f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD402, 0x00);
 800369a:	2100      	movs	r1, #0
 800369c:	f24d 4002 	movw	r0, #54274	@ 0xd402
 80036a0:	f7fd f95a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD403, 0x34);
 80036a4:	2134      	movs	r1, #52	@ 0x34
 80036a6:	f24d 4003 	movw	r0, #54275	@ 0xd403
 80036aa:	f7fd f955 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD404, 0x00);
 80036ae:	2100      	movs	r1, #0
 80036b0:	f24d 4004 	movw	r0, #54276	@ 0xd404
 80036b4:	f7fd f950 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD405, 0x3A);
 80036b8:	213a      	movs	r1, #58	@ 0x3a
 80036ba:	f24d 4005 	movw	r0, #54277	@ 0xd405
 80036be:	f7fd f94b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD406, 0x00);
 80036c2:	2100      	movs	r1, #0
 80036c4:	f24d 4006 	movw	r0, #54278	@ 0xd406
 80036c8:	f7fd f946 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD407, 0x4A);
 80036cc:	214a      	movs	r1, #74	@ 0x4a
 80036ce:	f24d 4007 	movw	r0, #54279	@ 0xd407
 80036d2:	f7fd f941 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD408, 0x00);
 80036d6:	2100      	movs	r1, #0
 80036d8:	f24d 4008 	movw	r0, #54280	@ 0xd408
 80036dc:	f7fd f93c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD409, 0x5C);
 80036e0:	215c      	movs	r1, #92	@ 0x5c
 80036e2:	f24d 4009 	movw	r0, #54281	@ 0xd409
 80036e6:	f7fd f937 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD40A, 0x00);
 80036ea:	2100      	movs	r1, #0
 80036ec:	f24d 400a 	movw	r0, #54282	@ 0xd40a
 80036f0:	f7fd f932 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD40B, 0x81);
 80036f4:	2181      	movs	r1, #129	@ 0x81
 80036f6:	f24d 400b 	movw	r0, #54283	@ 0xd40b
 80036fa:	f7fd f92d 	bl	8000958 <lcd_write_reg>

    lcd_write_reg(0xD40C, 0x00);
 80036fe:	2100      	movs	r1, #0
 8003700:	f24d 400c 	movw	r0, #54284	@ 0xd40c
 8003704:	f7fd f928 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD40D, 0xA6);
 8003708:	21a6      	movs	r1, #166	@ 0xa6
 800370a:	f24d 400d 	movw	r0, #54285	@ 0xd40d
 800370e:	f7fd f923 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD40E, 0x00);
 8003712:	2100      	movs	r1, #0
 8003714:	f24d 400e 	movw	r0, #54286	@ 0xd40e
 8003718:	f7fd f91e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD40F, 0xE5);
 800371c:	21e5      	movs	r1, #229	@ 0xe5
 800371e:	f24d 400f 	movw	r0, #54287	@ 0xd40f
 8003722:	f7fd f919 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD410, 0x01);
 8003726:	2101      	movs	r1, #1
 8003728:	f24d 4010 	movw	r0, #54288	@ 0xd410
 800372c:	f7fd f914 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD411, 0x13);
 8003730:	2113      	movs	r1, #19
 8003732:	f24d 4011 	movw	r0, #54289	@ 0xd411
 8003736:	f7fd f90f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD412, 0x01);
 800373a:	2101      	movs	r1, #1
 800373c:	f24d 4012 	movw	r0, #54290	@ 0xd412
 8003740:	f7fd f90a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD413, 0x54);
 8003744:	2154      	movs	r1, #84	@ 0x54
 8003746:	f24d 4013 	movw	r0, #54291	@ 0xd413
 800374a:	f7fd f905 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD414, 0x01);
 800374e:	2101      	movs	r1, #1
 8003750:	f24d 4014 	movw	r0, #54292	@ 0xd414
 8003754:	f7fd f900 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD415, 0x82);
 8003758:	2182      	movs	r1, #130	@ 0x82
 800375a:	f24d 4015 	movw	r0, #54293	@ 0xd415
 800375e:	f7fd f8fb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD416, 0x01);
 8003762:	2101      	movs	r1, #1
 8003764:	f24d 4016 	movw	r0, #54294	@ 0xd416
 8003768:	f7fd f8f6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD417, 0xCA);
 800376c:	21ca      	movs	r1, #202	@ 0xca
 800376e:	f24d 4017 	movw	r0, #54295	@ 0xd417
 8003772:	f7fd f8f1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD418, 0x02);
 8003776:	2102      	movs	r1, #2
 8003778:	f24d 4018 	movw	r0, #54296	@ 0xd418
 800377c:	f7fd f8ec 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD419, 0x00);
 8003780:	2100      	movs	r1, #0
 8003782:	f24d 4019 	movw	r0, #54297	@ 0xd419
 8003786:	f7fd f8e7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD41A, 0x02);
 800378a:	2102      	movs	r1, #2
 800378c:	f24d 401a 	movw	r0, #54298	@ 0xd41a
 8003790:	f7fd f8e2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD41B, 0x01);
 8003794:	2101      	movs	r1, #1
 8003796:	f24d 401b 	movw	r0, #54299	@ 0xd41b
 800379a:	f7fd f8dd 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD41C, 0x02);
 800379e:	2102      	movs	r1, #2
 80037a0:	f24d 401c 	movw	r0, #54300	@ 0xd41c
 80037a4:	f7fd f8d8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD41D, 0x34);
 80037a8:	2134      	movs	r1, #52	@ 0x34
 80037aa:	f24d 401d 	movw	r0, #54301	@ 0xd41d
 80037ae:	f7fd f8d3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD41E, 0x02);
 80037b2:	2102      	movs	r1, #2
 80037b4:	f24d 401e 	movw	r0, #54302	@ 0xd41e
 80037b8:	f7fd f8ce 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD41F, 0x67);
 80037bc:	2167      	movs	r1, #103	@ 0x67
 80037be:	f24d 401f 	movw	r0, #54303	@ 0xd41f
 80037c2:	f7fd f8c9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD420, 0x02);
 80037c6:	2102      	movs	r1, #2
 80037c8:	f24d 4020 	movw	r0, #54304	@ 0xd420
 80037cc:	f7fd f8c4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD421, 0x84);
 80037d0:	2184      	movs	r1, #132	@ 0x84
 80037d2:	f24d 4021 	movw	r0, #54305	@ 0xd421
 80037d6:	f7fd f8bf 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD422, 0x02);
 80037da:	2102      	movs	r1, #2
 80037dc:	f24d 4022 	movw	r0, #54306	@ 0xd422
 80037e0:	f7fd f8ba 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD423, 0xA4);
 80037e4:	21a4      	movs	r1, #164	@ 0xa4
 80037e6:	f24d 4023 	movw	r0, #54307	@ 0xd423
 80037ea:	f7fd f8b5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD424, 0x02);
 80037ee:	2102      	movs	r1, #2
 80037f0:	f24d 4024 	movw	r0, #54308	@ 0xd424
 80037f4:	f7fd f8b0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD425, 0xB7);
 80037f8:	21b7      	movs	r1, #183	@ 0xb7
 80037fa:	f24d 4025 	movw	r0, #54309	@ 0xd425
 80037fe:	f7fd f8ab 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD426, 0x02);
 8003802:	2102      	movs	r1, #2
 8003804:	f24d 4026 	movw	r0, #54310	@ 0xd426
 8003808:	f7fd f8a6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD427, 0xCF);
 800380c:	21cf      	movs	r1, #207	@ 0xcf
 800380e:	f24d 4027 	movw	r0, #54311	@ 0xd427
 8003812:	f7fd f8a1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD428, 0x02);
 8003816:	2102      	movs	r1, #2
 8003818:	f24d 4028 	movw	r0, #54312	@ 0xd428
 800381c:	f7fd f89c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD429, 0xDE);
 8003820:	21de      	movs	r1, #222	@ 0xde
 8003822:	f24d 4029 	movw	r0, #54313	@ 0xd429
 8003826:	f7fd f897 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD42A, 0x02);
 800382a:	2102      	movs	r1, #2
 800382c:	f24d 402a 	movw	r0, #54314	@ 0xd42a
 8003830:	f7fd f892 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD42B, 0xF2);
 8003834:	21f2      	movs	r1, #242	@ 0xf2
 8003836:	f24d 402b 	movw	r0, #54315	@ 0xd42b
 800383a:	f7fd f88d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD42C, 0x02);
 800383e:	2102      	movs	r1, #2
 8003840:	f24d 402c 	movw	r0, #54316	@ 0xd42c
 8003844:	f7fd f888 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD42D, 0xFE);
 8003848:	21fe      	movs	r1, #254	@ 0xfe
 800384a:	f24d 402d 	movw	r0, #54317	@ 0xd42d
 800384e:	f7fd f883 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD42E, 0x03);
 8003852:	2103      	movs	r1, #3
 8003854:	f24d 402e 	movw	r0, #54318	@ 0xd42e
 8003858:	f7fd f87e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD42F, 0x10);
 800385c:	2110      	movs	r1, #16
 800385e:	f24d 402f 	movw	r0, #54319	@ 0xd42f
 8003862:	f7fd f879 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD430, 0x03);
 8003866:	2103      	movs	r1, #3
 8003868:	f24d 4030 	movw	r0, #54320	@ 0xd430
 800386c:	f7fd f874 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD431, 0x33);
 8003870:	2133      	movs	r1, #51	@ 0x33
 8003872:	f24d 4031 	movw	r0, #54321	@ 0xd431
 8003876:	f7fd f86f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD432, 0x03);
 800387a:	2103      	movs	r1, #3
 800387c:	f24d 4032 	movw	r0, #54322	@ 0xd432
 8003880:	f7fd f86a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD433, 0x6D);
 8003884:	216d      	movs	r1, #109	@ 0x6d
 8003886:	f24d 4033 	movw	r0, #54323	@ 0xd433
 800388a:	f7fd f865 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD500, 0x00);
 800388e:	2100      	movs	r1, #0
 8003890:	f44f 4055 	mov.w	r0, #54528	@ 0xd500
 8003894:	f7fd f860 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD501, 0x33);
 8003898:	2133      	movs	r1, #51	@ 0x33
 800389a:	f24d 5001 	movw	r0, #54529	@ 0xd501
 800389e:	f7fd f85b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD502, 0x00);
 80038a2:	2100      	movs	r1, #0
 80038a4:	f24d 5002 	movw	r0, #54530	@ 0xd502
 80038a8:	f7fd f856 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD503, 0x34);
 80038ac:	2134      	movs	r1, #52	@ 0x34
 80038ae:	f24d 5003 	movw	r0, #54531	@ 0xd503
 80038b2:	f7fd f851 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD504, 0x00);
 80038b6:	2100      	movs	r1, #0
 80038b8:	f24d 5004 	movw	r0, #54532	@ 0xd504
 80038bc:	f7fd f84c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD505, 0x3A);
 80038c0:	213a      	movs	r1, #58	@ 0x3a
 80038c2:	f24d 5005 	movw	r0, #54533	@ 0xd505
 80038c6:	f7fd f847 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD506, 0x00);
 80038ca:	2100      	movs	r1, #0
 80038cc:	f24d 5006 	movw	r0, #54534	@ 0xd506
 80038d0:	f7fd f842 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD507, 0x4A);
 80038d4:	214a      	movs	r1, #74	@ 0x4a
 80038d6:	f24d 5007 	movw	r0, #54535	@ 0xd507
 80038da:	f7fd f83d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD508, 0x00);
 80038de:	2100      	movs	r1, #0
 80038e0:	f24d 5008 	movw	r0, #54536	@ 0xd508
 80038e4:	f7fd f838 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD509, 0x5C);
 80038e8:	215c      	movs	r1, #92	@ 0x5c
 80038ea:	f24d 5009 	movw	r0, #54537	@ 0xd509
 80038ee:	f7fd f833 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD50A, 0x00);
 80038f2:	2100      	movs	r1, #0
 80038f4:	f24d 500a 	movw	r0, #54538	@ 0xd50a
 80038f8:	f7fd f82e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD50B, 0x81);
 80038fc:	2181      	movs	r1, #129	@ 0x81
 80038fe:	f24d 500b 	movw	r0, #54539	@ 0xd50b
 8003902:	f7fd f829 	bl	8000958 <lcd_write_reg>

    lcd_write_reg(0xD50C, 0x00);
 8003906:	2100      	movs	r1, #0
 8003908:	f24d 500c 	movw	r0, #54540	@ 0xd50c
 800390c:	f7fd f824 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD50D, 0xA6);
 8003910:	21a6      	movs	r1, #166	@ 0xa6
 8003912:	f24d 500d 	movw	r0, #54541	@ 0xd50d
 8003916:	f7fd f81f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD50E, 0x00);
 800391a:	2100      	movs	r1, #0
 800391c:	f24d 500e 	movw	r0, #54542	@ 0xd50e
 8003920:	f7fd f81a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD50F, 0xE5);
 8003924:	21e5      	movs	r1, #229	@ 0xe5
 8003926:	f24d 500f 	movw	r0, #54543	@ 0xd50f
 800392a:	f7fd f815 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD510, 0x01);
 800392e:	2101      	movs	r1, #1
 8003930:	f24d 5010 	movw	r0, #54544	@ 0xd510
 8003934:	f7fd f810 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD511, 0x13);
 8003938:	2113      	movs	r1, #19
 800393a:	f24d 5011 	movw	r0, #54545	@ 0xd511
 800393e:	f7fd f80b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD512, 0x01);
 8003942:	2101      	movs	r1, #1
 8003944:	f24d 5012 	movw	r0, #54546	@ 0xd512
 8003948:	f7fd f806 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD513, 0x54);
 800394c:	2154      	movs	r1, #84	@ 0x54
 800394e:	f24d 5013 	movw	r0, #54547	@ 0xd513
 8003952:	f7fd f801 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD514, 0x01);
 8003956:	2101      	movs	r1, #1
 8003958:	f24d 5014 	movw	r0, #54548	@ 0xd514
 800395c:	f7fc fffc 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD515, 0x82);
 8003960:	2182      	movs	r1, #130	@ 0x82
 8003962:	f24d 5015 	movw	r0, #54549	@ 0xd515
 8003966:	f7fc fff7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD516, 0x01);
 800396a:	2101      	movs	r1, #1
 800396c:	f24d 5016 	movw	r0, #54550	@ 0xd516
 8003970:	f7fc fff2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD517, 0xCA);
 8003974:	21ca      	movs	r1, #202	@ 0xca
 8003976:	f24d 5017 	movw	r0, #54551	@ 0xd517
 800397a:	f7fc ffed 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD518, 0x02);
 800397e:	2102      	movs	r1, #2
 8003980:	f24d 5018 	movw	r0, #54552	@ 0xd518
 8003984:	f7fc ffe8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD519, 0x00);
 8003988:	2100      	movs	r1, #0
 800398a:	f24d 5019 	movw	r0, #54553	@ 0xd519
 800398e:	f7fc ffe3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD51A, 0x02);
 8003992:	2102      	movs	r1, #2
 8003994:	f24d 501a 	movw	r0, #54554	@ 0xd51a
 8003998:	f7fc ffde 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD51B, 0x01);
 800399c:	2101      	movs	r1, #1
 800399e:	f24d 501b 	movw	r0, #54555	@ 0xd51b
 80039a2:	f7fc ffd9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD51C, 0x02);
 80039a6:	2102      	movs	r1, #2
 80039a8:	f24d 501c 	movw	r0, #54556	@ 0xd51c
 80039ac:	f7fc ffd4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD51D, 0x34);
 80039b0:	2134      	movs	r1, #52	@ 0x34
 80039b2:	f24d 501d 	movw	r0, #54557	@ 0xd51d
 80039b6:	f7fc ffcf 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD51E, 0x02);
 80039ba:	2102      	movs	r1, #2
 80039bc:	f24d 501e 	movw	r0, #54558	@ 0xd51e
 80039c0:	f7fc ffca 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD51F, 0x67);
 80039c4:	2167      	movs	r1, #103	@ 0x67
 80039c6:	f24d 501f 	movw	r0, #54559	@ 0xd51f
 80039ca:	f7fc ffc5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD520, 0x02);
 80039ce:	2102      	movs	r1, #2
 80039d0:	f24d 5020 	movw	r0, #54560	@ 0xd520
 80039d4:	f7fc ffc0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD521, 0x84);
 80039d8:	2184      	movs	r1, #132	@ 0x84
 80039da:	f24d 5021 	movw	r0, #54561	@ 0xd521
 80039de:	f7fc ffbb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD522, 0x02);
 80039e2:	2102      	movs	r1, #2
 80039e4:	f24d 5022 	movw	r0, #54562	@ 0xd522
 80039e8:	f7fc ffb6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD523, 0xA4);
 80039ec:	21a4      	movs	r1, #164	@ 0xa4
 80039ee:	f24d 5023 	movw	r0, #54563	@ 0xd523
 80039f2:	f7fc ffb1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD524, 0x02);
 80039f6:	2102      	movs	r1, #2
 80039f8:	f24d 5024 	movw	r0, #54564	@ 0xd524
 80039fc:	f7fc ffac 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD525, 0xB7);
 8003a00:	21b7      	movs	r1, #183	@ 0xb7
 8003a02:	f24d 5025 	movw	r0, #54565	@ 0xd525
 8003a06:	f7fc ffa7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD526, 0x02);
 8003a0a:	2102      	movs	r1, #2
 8003a0c:	f24d 5026 	movw	r0, #54566	@ 0xd526
 8003a10:	f7fc ffa2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD527, 0xCF);
 8003a14:	21cf      	movs	r1, #207	@ 0xcf
 8003a16:	f24d 5027 	movw	r0, #54567	@ 0xd527
 8003a1a:	f7fc ff9d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD528, 0x02);
 8003a1e:	2102      	movs	r1, #2
 8003a20:	f24d 5028 	movw	r0, #54568	@ 0xd528
 8003a24:	f7fc ff98 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD529, 0xDE);
 8003a28:	21de      	movs	r1, #222	@ 0xde
 8003a2a:	f24d 5029 	movw	r0, #54569	@ 0xd529
 8003a2e:	f7fc ff93 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD52A, 0x02);
 8003a32:	2102      	movs	r1, #2
 8003a34:	f24d 502a 	movw	r0, #54570	@ 0xd52a
 8003a38:	f7fc ff8e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD52B, 0xF2);
 8003a3c:	21f2      	movs	r1, #242	@ 0xf2
 8003a3e:	f24d 502b 	movw	r0, #54571	@ 0xd52b
 8003a42:	f7fc ff89 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD52C, 0x02);
 8003a46:	2102      	movs	r1, #2
 8003a48:	f24d 502c 	movw	r0, #54572	@ 0xd52c
 8003a4c:	f7fc ff84 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD52D, 0xFE);
 8003a50:	21fe      	movs	r1, #254	@ 0xfe
 8003a52:	f24d 502d 	movw	r0, #54573	@ 0xd52d
 8003a56:	f7fc ff7f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD52E, 0x03);
 8003a5a:	2103      	movs	r1, #3
 8003a5c:	f24d 502e 	movw	r0, #54574	@ 0xd52e
 8003a60:	f7fc ff7a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD52F, 0x10);
 8003a64:	2110      	movs	r1, #16
 8003a66:	f24d 502f 	movw	r0, #54575	@ 0xd52f
 8003a6a:	f7fc ff75 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD530, 0x03);
 8003a6e:	2103      	movs	r1, #3
 8003a70:	f24d 5030 	movw	r0, #54576	@ 0xd530
 8003a74:	f7fc ff70 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD531, 0x33);
 8003a78:	2133      	movs	r1, #51	@ 0x33
 8003a7a:	f24d 5031 	movw	r0, #54577	@ 0xd531
 8003a7e:	f7fc ff6b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD532, 0x03);
 8003a82:	2103      	movs	r1, #3
 8003a84:	f24d 5032 	movw	r0, #54578	@ 0xd532
 8003a88:	f7fc ff66 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD533, 0x6D);
 8003a8c:	216d      	movs	r1, #109	@ 0x6d
 8003a8e:	f24d 5033 	movw	r0, #54579	@ 0xd533
 8003a92:	f7fc ff61 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD600, 0x00);
 8003a96:	2100      	movs	r1, #0
 8003a98:	f44f 4056 	mov.w	r0, #54784	@ 0xd600
 8003a9c:	f7fc ff5c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD601, 0x33);
 8003aa0:	2133      	movs	r1, #51	@ 0x33
 8003aa2:	f24d 6001 	movw	r0, #54785	@ 0xd601
 8003aa6:	f7fc ff57 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD602, 0x00);
 8003aaa:	2100      	movs	r1, #0
 8003aac:	f24d 6002 	movw	r0, #54786	@ 0xd602
 8003ab0:	f7fc ff52 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD603, 0x34);
 8003ab4:	2134      	movs	r1, #52	@ 0x34
 8003ab6:	f24d 6003 	movw	r0, #54787	@ 0xd603
 8003aba:	f7fc ff4d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD604, 0x00);
 8003abe:	2100      	movs	r1, #0
 8003ac0:	f24d 6004 	movw	r0, #54788	@ 0xd604
 8003ac4:	f7fc ff48 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD605, 0x3A);
 8003ac8:	213a      	movs	r1, #58	@ 0x3a
 8003aca:	f24d 6005 	movw	r0, #54789	@ 0xd605
 8003ace:	f7fc ff43 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD606, 0x00);
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f24d 6006 	movw	r0, #54790	@ 0xd606
 8003ad8:	f7fc ff3e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD607, 0x4A);
 8003adc:	214a      	movs	r1, #74	@ 0x4a
 8003ade:	f24d 6007 	movw	r0, #54791	@ 0xd607
 8003ae2:	f7fc ff39 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD608, 0x00);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	f24d 6008 	movw	r0, #54792	@ 0xd608
 8003aec:	f7fc ff34 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD609, 0x5C);
 8003af0:	215c      	movs	r1, #92	@ 0x5c
 8003af2:	f24d 6009 	movw	r0, #54793	@ 0xd609
 8003af6:	f7fc ff2f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD60A, 0x00);
 8003afa:	2100      	movs	r1, #0
 8003afc:	f24d 600a 	movw	r0, #54794	@ 0xd60a
 8003b00:	f7fc ff2a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD60B, 0x81);
 8003b04:	2181      	movs	r1, #129	@ 0x81
 8003b06:	f24d 600b 	movw	r0, #54795	@ 0xd60b
 8003b0a:	f7fc ff25 	bl	8000958 <lcd_write_reg>

    lcd_write_reg(0xD60C, 0x00);
 8003b0e:	2100      	movs	r1, #0
 8003b10:	f24d 600c 	movw	r0, #54796	@ 0xd60c
 8003b14:	f7fc ff20 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD60D, 0xA6);
 8003b18:	21a6      	movs	r1, #166	@ 0xa6
 8003b1a:	f24d 600d 	movw	r0, #54797	@ 0xd60d
 8003b1e:	f7fc ff1b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD60E, 0x00);
 8003b22:	2100      	movs	r1, #0
 8003b24:	f24d 600e 	movw	r0, #54798	@ 0xd60e
 8003b28:	f7fc ff16 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD60F, 0xE5);
 8003b2c:	21e5      	movs	r1, #229	@ 0xe5
 8003b2e:	f24d 600f 	movw	r0, #54799	@ 0xd60f
 8003b32:	f7fc ff11 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD610, 0x01);
 8003b36:	2101      	movs	r1, #1
 8003b38:	f24d 6010 	movw	r0, #54800	@ 0xd610
 8003b3c:	f7fc ff0c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD611, 0x13);
 8003b40:	2113      	movs	r1, #19
 8003b42:	f24d 6011 	movw	r0, #54801	@ 0xd611
 8003b46:	f7fc ff07 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD612, 0x01);
 8003b4a:	2101      	movs	r1, #1
 8003b4c:	f24d 6012 	movw	r0, #54802	@ 0xd612
 8003b50:	f7fc ff02 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD613, 0x54);
 8003b54:	2154      	movs	r1, #84	@ 0x54
 8003b56:	f24d 6013 	movw	r0, #54803	@ 0xd613
 8003b5a:	f7fc fefd 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD614, 0x01);
 8003b5e:	2101      	movs	r1, #1
 8003b60:	f24d 6014 	movw	r0, #54804	@ 0xd614
 8003b64:	f7fc fef8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD615, 0x82);
 8003b68:	2182      	movs	r1, #130	@ 0x82
 8003b6a:	f24d 6015 	movw	r0, #54805	@ 0xd615
 8003b6e:	f7fc fef3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD616, 0x01);
 8003b72:	2101      	movs	r1, #1
 8003b74:	f24d 6016 	movw	r0, #54806	@ 0xd616
 8003b78:	f7fc feee 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD617, 0xCA);
 8003b7c:	21ca      	movs	r1, #202	@ 0xca
 8003b7e:	f24d 6017 	movw	r0, #54807	@ 0xd617
 8003b82:	f7fc fee9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD618, 0x02);
 8003b86:	2102      	movs	r1, #2
 8003b88:	f24d 6018 	movw	r0, #54808	@ 0xd618
 8003b8c:	f7fc fee4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD619, 0x00);
 8003b90:	2100      	movs	r1, #0
 8003b92:	f24d 6019 	movw	r0, #54809	@ 0xd619
 8003b96:	f7fc fedf 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD61A, 0x02);
 8003b9a:	2102      	movs	r1, #2
 8003b9c:	f24d 601a 	movw	r0, #54810	@ 0xd61a
 8003ba0:	f7fc feda 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD61B, 0x01);
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	f24d 601b 	movw	r0, #54811	@ 0xd61b
 8003baa:	f7fc fed5 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD61C, 0x02);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	f24d 601c 	movw	r0, #54812	@ 0xd61c
 8003bb4:	f7fc fed0 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD61D, 0x34);
 8003bb8:	2134      	movs	r1, #52	@ 0x34
 8003bba:	f24d 601d 	movw	r0, #54813	@ 0xd61d
 8003bbe:	f7fc fecb 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD61E, 0x02);
 8003bc2:	2102      	movs	r1, #2
 8003bc4:	f24d 601e 	movw	r0, #54814	@ 0xd61e
 8003bc8:	f7fc fec6 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD61F, 0x67);
 8003bcc:	2167      	movs	r1, #103	@ 0x67
 8003bce:	f24d 601f 	movw	r0, #54815	@ 0xd61f
 8003bd2:	f7fc fec1 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD620, 0x02);
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	f24d 6020 	movw	r0, #54816	@ 0xd620
 8003bdc:	f7fc febc 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD621, 0x84);
 8003be0:	2184      	movs	r1, #132	@ 0x84
 8003be2:	f24d 6021 	movw	r0, #54817	@ 0xd621
 8003be6:	f7fc feb7 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD622, 0x02);
 8003bea:	2102      	movs	r1, #2
 8003bec:	f24d 6022 	movw	r0, #54818	@ 0xd622
 8003bf0:	f7fc feb2 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD623, 0xA4);
 8003bf4:	21a4      	movs	r1, #164	@ 0xa4
 8003bf6:	f24d 6023 	movw	r0, #54819	@ 0xd623
 8003bfa:	f7fc fead 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD624, 0x02);
 8003bfe:	2102      	movs	r1, #2
 8003c00:	f24d 6024 	movw	r0, #54820	@ 0xd624
 8003c04:	f7fc fea8 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD625, 0xB7);
 8003c08:	21b7      	movs	r1, #183	@ 0xb7
 8003c0a:	f24d 6025 	movw	r0, #54821	@ 0xd625
 8003c0e:	f7fc fea3 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD626, 0x02);
 8003c12:	2102      	movs	r1, #2
 8003c14:	f24d 6026 	movw	r0, #54822	@ 0xd626
 8003c18:	f7fc fe9e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD627, 0xCF);
 8003c1c:	21cf      	movs	r1, #207	@ 0xcf
 8003c1e:	f24d 6027 	movw	r0, #54823	@ 0xd627
 8003c22:	f7fc fe99 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD628, 0x02);
 8003c26:	2102      	movs	r1, #2
 8003c28:	f24d 6028 	movw	r0, #54824	@ 0xd628
 8003c2c:	f7fc fe94 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD629, 0xDE);
 8003c30:	21de      	movs	r1, #222	@ 0xde
 8003c32:	f24d 6029 	movw	r0, #54825	@ 0xd629
 8003c36:	f7fc fe8f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD62A, 0x02);
 8003c3a:	2102      	movs	r1, #2
 8003c3c:	f24d 602a 	movw	r0, #54826	@ 0xd62a
 8003c40:	f7fc fe8a 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD62B, 0xF2);
 8003c44:	21f2      	movs	r1, #242	@ 0xf2
 8003c46:	f24d 602b 	movw	r0, #54827	@ 0xd62b
 8003c4a:	f7fc fe85 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD62C, 0x02);
 8003c4e:	2102      	movs	r1, #2
 8003c50:	f24d 602c 	movw	r0, #54828	@ 0xd62c
 8003c54:	f7fc fe80 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD62D, 0xFE);
 8003c58:	21fe      	movs	r1, #254	@ 0xfe
 8003c5a:	f24d 602d 	movw	r0, #54829	@ 0xd62d
 8003c5e:	f7fc fe7b 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD62E, 0x03);
 8003c62:	2103      	movs	r1, #3
 8003c64:	f24d 602e 	movw	r0, #54830	@ 0xd62e
 8003c68:	f7fc fe76 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD62F, 0x10);
 8003c6c:	2110      	movs	r1, #16
 8003c6e:	f24d 602f 	movw	r0, #54831	@ 0xd62f
 8003c72:	f7fc fe71 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD630, 0x03);
 8003c76:	2103      	movs	r1, #3
 8003c78:	f24d 6030 	movw	r0, #54832	@ 0xd630
 8003c7c:	f7fc fe6c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD631, 0x33);
 8003c80:	2133      	movs	r1, #51	@ 0x33
 8003c82:	f24d 6031 	movw	r0, #54833	@ 0xd631
 8003c86:	f7fc fe67 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD632, 0x03);
 8003c8a:	2103      	movs	r1, #3
 8003c8c:	f24d 6032 	movw	r0, #54834	@ 0xd632
 8003c90:	f7fc fe62 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xD633, 0x6D);
 8003c94:	216d      	movs	r1, #109	@ 0x6d
 8003c96:	f24d 6033 	movw	r0, #54835	@ 0xd633
 8003c9a:	f7fc fe5d 	bl	8000958 <lcd_write_reg>
    /* LV2 Page 0 enable */
    lcd_write_reg(0xF000, 0x55);
 8003c9e:	2155      	movs	r1, #85	@ 0x55
 8003ca0:	f44f 4070 	mov.w	r0, #61440	@ 0xf000
 8003ca4:	f7fc fe58 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF001, 0xAA);
 8003ca8:	21aa      	movs	r1, #170	@ 0xaa
 8003caa:	f24f 0001 	movw	r0, #61441	@ 0xf001
 8003cae:	f7fc fe53 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF002, 0x52);
 8003cb2:	2152      	movs	r1, #82	@ 0x52
 8003cb4:	f24f 0002 	movw	r0, #61442	@ 0xf002
 8003cb8:	f7fc fe4e 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF003, 0x08);
 8003cbc:	2108      	movs	r1, #8
 8003cbe:	f24f 0003 	movw	r0, #61443	@ 0xf003
 8003cc2:	f7fc fe49 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xF004, 0x00);
 8003cc6:	2100      	movs	r1, #0
 8003cc8:	f24f 0004 	movw	r0, #61444	@ 0xf004
 8003ccc:	f7fc fe44 	bl	8000958 <lcd_write_reg>
    /* Display control */
    lcd_write_reg(0xB100, 0xCC);
 8003cd0:	21cc      	movs	r1, #204	@ 0xcc
 8003cd2:	f44f 4031 	mov.w	r0, #45312	@ 0xb100
 8003cd6:	f7fc fe3f 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB101, 0x00);
 8003cda:	2100      	movs	r1, #0
 8003cdc:	f24b 1001 	movw	r0, #45313	@ 0xb101
 8003ce0:	f7fc fe3a 	bl	8000958 <lcd_write_reg>
    /* Source hold time */
    lcd_write_reg(0xB600, 0x05);
 8003ce4:	2105      	movs	r1, #5
 8003ce6:	f44f 4036 	mov.w	r0, #46592	@ 0xb600
 8003cea:	f7fc fe35 	bl	8000958 <lcd_write_reg>
    /* Gate EQ control */
    lcd_write_reg(0xB700, 0x70);
 8003cee:	2170      	movs	r1, #112	@ 0x70
 8003cf0:	f44f 4037 	mov.w	r0, #46848	@ 0xb700
 8003cf4:	f7fc fe30 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB701, 0x70);
 8003cf8:	2170      	movs	r1, #112	@ 0x70
 8003cfa:	f24b 7001 	movw	r0, #46849	@ 0xb701
 8003cfe:	f7fc fe2b 	bl	8000958 <lcd_write_reg>
    /* Source EQ control (Mode 2) */
    lcd_write_reg(0xB800, 0x01);
 8003d02:	2101      	movs	r1, #1
 8003d04:	f44f 4038 	mov.w	r0, #47104	@ 0xb800
 8003d08:	f7fc fe26 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB801, 0x03);
 8003d0c:	2103      	movs	r1, #3
 8003d0e:	f64b 0001 	movw	r0, #47105	@ 0xb801
 8003d12:	f7fc fe21 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB802, 0x03);
 8003d16:	2103      	movs	r1, #3
 8003d18:	f64b 0002 	movw	r0, #47106	@ 0xb802
 8003d1c:	f7fc fe1c 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xB803, 0x03);
 8003d20:	2103      	movs	r1, #3
 8003d22:	f64b 0003 	movw	r0, #47107	@ 0xb803
 8003d26:	f7fc fe17 	bl	8000958 <lcd_write_reg>
    /* Inversion mode (2-dot) */
    lcd_write_reg(0xBC00, 0x02);
 8003d2a:	2102      	movs	r1, #2
 8003d2c:	f44f 403c 	mov.w	r0, #48128	@ 0xbc00
 8003d30:	f7fc fe12 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBC01, 0x00);
 8003d34:	2100      	movs	r1, #0
 8003d36:	f64b 4001 	movw	r0, #48129	@ 0xbc01
 8003d3a:	f7fc fe0d 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xBC02, 0x00);
 8003d3e:	2100      	movs	r1, #0
 8003d40:	f64b 4002 	movw	r0, #48130	@ 0xbc02
 8003d44:	f7fc fe08 	bl	8000958 <lcd_write_reg>
    /* Timing control 4H w/ 4-delay */
    lcd_write_reg(0xC900, 0xD0);
 8003d48:	21d0      	movs	r1, #208	@ 0xd0
 8003d4a:	f44f 4049 	mov.w	r0, #51456	@ 0xc900
 8003d4e:	f7fc fe03 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xC901, 0x02);
 8003d52:	2102      	movs	r1, #2
 8003d54:	f64c 1001 	movw	r0, #51457	@ 0xc901
 8003d58:	f7fc fdfe 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xC902, 0x50);
 8003d5c:	2150      	movs	r1, #80	@ 0x50
 8003d5e:	f64c 1002 	movw	r0, #51458	@ 0xc902
 8003d62:	f7fc fdf9 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xC903, 0x50);
 8003d66:	2150      	movs	r1, #80	@ 0x50
 8003d68:	f64c 1003 	movw	r0, #51459	@ 0xc903
 8003d6c:	f7fc fdf4 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0xC904, 0x50);
 8003d70:	2150      	movs	r1, #80	@ 0x50
 8003d72:	f64c 1004 	movw	r0, #51460	@ 0xc904
 8003d76:	f7fc fdef 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0x3500, 0x00);
 8003d7a:	2100      	movs	r1, #0
 8003d7c:	f44f 5054 	mov.w	r0, #13568	@ 0x3500
 8003d80:	f7fc fdea 	bl	8000958 <lcd_write_reg>
    lcd_write_reg(0x3A00, 0x55); /* 16-bit/pixel */
 8003d84:	2155      	movs	r1, #85	@ 0x55
 8003d86:	f44f 5068 	mov.w	r0, #14848	@ 0x3a00
 8003d8a:	f7fc fde5 	bl	8000958 <lcd_write_reg>
    lcd_wr_regno(0x1100);
 8003d8e:	f44f 5088 	mov.w	r0, #4352	@ 0x1100
 8003d92:	f7fc fdcd 	bl	8000930 <lcd_wr_regno>
    delay_us(120);
 8003d96:	2078      	movs	r0, #120	@ 0x78
 8003d98:	f7fc fcbc 	bl	8000714 <delay_us>
    lcd_wr_regno(0x2900);
 8003d9c:	f44f 5024 	mov.w	r0, #10496	@ 0x2900
 8003da0:	f7fc fdc6 	bl	8000930 <lcd_wr_regno>
}
 8003da4:	bf00      	nop
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <lcd_ex_ili9806_reginit>:
 * @brief       ILI9806寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ili9806_reginit(void)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xFF); /* EXTC Command Set enable register */
 8003dac:	20ff      	movs	r0, #255	@ 0xff
 8003dae:	f7fc fdbf 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0xFF);
 8003db2:	20ff      	movs	r0, #255	@ 0xff
 8003db4:	f7fc fda8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x98);
 8003db8:	2098      	movs	r0, #152	@ 0x98
 8003dba:	f7fc fda5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x06);
 8003dbe:	2006      	movs	r0, #6
 8003dc0:	f7fc fda2 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xBC); /* GIP 1 */
 8003dc4:	20bc      	movs	r0, #188	@ 0xbc
 8003dc6:	f7fc fdb3 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8003dca:	2001      	movs	r0, #1
 8003dcc:	f7fc fd9c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8003dd0:	200f      	movs	r0, #15
 8003dd2:	f7fc fd99 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x61);
 8003dd6:	2061      	movs	r0, #97	@ 0x61
 8003dd8:	f7fc fd96 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003ddc:	20ff      	movs	r0, #255	@ 0xff
 8003dde:	f7fc fd93 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003de2:	2001      	movs	r0, #1
 8003de4:	f7fc fd90 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003de8:	2001      	movs	r0, #1
 8003dea:	f7fc fd8d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8003dee:	200b      	movs	r0, #11
 8003df0:	f7fc fd8a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);
 8003df4:	2010      	movs	r0, #16
 8003df6:	f7fc fd87 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x37);
 8003dfa:	2037      	movs	r0, #55	@ 0x37
 8003dfc:	f7fc fd84 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x63);
 8003e00:	2063      	movs	r0, #99	@ 0x63
 8003e02:	f7fc fd81 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003e06:	20ff      	movs	r0, #255	@ 0xff
 8003e08:	f7fc fd7e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003e0c:	20ff      	movs	r0, #255	@ 0xff
 8003e0e:	f7fc fd7b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003e12:	2001      	movs	r0, #1
 8003e14:	f7fc fd78 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003e18:	2001      	movs	r0, #1
 8003e1a:	f7fc fd75 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003e1e:	2000      	movs	r0, #0
 8003e20:	f7fc fd72 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003e24:	2000      	movs	r0, #0
 8003e26:	f7fc fd6f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8003e2a:	20ff      	movs	r0, #255	@ 0xff
 8003e2c:	f7fc fd6c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x52);
 8003e30:	2052      	movs	r0, #82	@ 0x52
 8003e32:	f7fc fd69 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003e36:	2001      	movs	r0, #1
 8003e38:	f7fc fd66 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003e3c:	2000      	movs	r0, #0
 8003e3e:	f7fc fd63 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x40);
 8003e42:	2040      	movs	r0, #64	@ 0x40
 8003e44:	f7fc fd60 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xBD); /* GIP 2 */
 8003e48:	20bd      	movs	r0, #189	@ 0xbd
 8003e4a:	f7fc fd71 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);
 8003e4e:	2001      	movs	r0, #1
 8003e50:	f7fc fd5a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x23);
 8003e54:	2023      	movs	r0, #35	@ 0x23
 8003e56:	f7fc fd57 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x45);
 8003e5a:	2045      	movs	r0, #69	@ 0x45
 8003e5c:	f7fc fd54 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x67);
 8003e60:	2067      	movs	r0, #103	@ 0x67
 8003e62:	f7fc fd51 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003e66:	2001      	movs	r0, #1
 8003e68:	f7fc fd4e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x23);
 8003e6c:	2023      	movs	r0, #35	@ 0x23
 8003e6e:	f7fc fd4b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x45);
 8003e72:	2045      	movs	r0, #69	@ 0x45
 8003e74:	f7fc fd48 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x67);
 8003e78:	2067      	movs	r0, #103	@ 0x67
 8003e7a:	f7fc fd45 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* GIP 3 */
 8003e7e:	20be      	movs	r0, #190	@ 0xbe
 8003e80:	f7fc fd56 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003e84:	2000      	movs	r0, #0
 8003e86:	f7fc fd3f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8003e8a:	2001      	movs	r0, #1
 8003e8c:	f7fc fd3c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xAB);
 8003e90:	20ab      	movs	r0, #171	@ 0xab
 8003e92:	f7fc fd39 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x60);
 8003e96:	2060      	movs	r0, #96	@ 0x60
 8003e98:	f7fc fd36 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003e9c:	2022      	movs	r0, #34	@ 0x22
 8003e9e:	f7fc fd33 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003ea2:	2022      	movs	r0, #34	@ 0x22
 8003ea4:	f7fc fd30 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003ea8:	2022      	movs	r0, #34	@ 0x22
 8003eaa:	f7fc fd2d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003eae:	2022      	movs	r0, #34	@ 0x22
 8003eb0:	f7fc fd2a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x22);
 8003eb4:	2022      	movs	r0, #34	@ 0x22
 8003eb6:	f7fc fd27 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xC7); /* VCOM Control */
 8003eba:	20c7      	movs	r0, #199	@ 0xc7
 8003ebc:	f7fc fd38 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x36);
 8003ec0:	2036      	movs	r0, #54	@ 0x36
 8003ec2:	f7fc fd21 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xED); /* EN_volt_reg VGMP / VGMN /VGSP / VGSN voltage to output */
 8003ec6:	20ed      	movs	r0, #237	@ 0xed
 8003ec8:	f7fc fd32 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x7F);
 8003ecc:	207f      	movs	r0, #127	@ 0x7f
 8003ece:	f7fc fd1b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);
 8003ed2:	200f      	movs	r0, #15
 8003ed4:	f7fc fd18 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0XC0); /* Power Control 1 Setting AVDD / AVEE / VGH / VGL */
 8003ed8:	20c0      	movs	r0, #192	@ 0xc0
 8003eda:	f7fc fd29 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x0F);
 8003ede:	200f      	movs	r0, #15
 8003ee0:	f7fc fd12 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0B);
 8003ee4:	200b      	movs	r0, #11
 8003ee6:	f7fc fd0f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* VGH 15V,VGLO-10V */
 8003eea:	200a      	movs	r0, #10
 8003eec:	f7fc fd0c 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0XFC); /* AVDD / AVEE generated by internal pumping. */
 8003ef0:	20fc      	movs	r0, #252	@ 0xfc
 8003ef2:	f7fc fd1d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x08);
 8003ef6:	2008      	movs	r0, #8
 8003ef8:	f7fc fd06 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0XDF);
 8003efc:	20df      	movs	r0, #223	@ 0xdf
 8003efe:	f7fc fd17 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003f02:	2000      	movs	r0, #0
 8003f04:	f7fc fd00 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f7fc fcfd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003f0e:	2000      	movs	r0, #0
 8003f10:	f7fc fcfa 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003f14:	2000      	movs	r0, #0
 8003f16:	f7fc fcf7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8003f1a:	2000      	movs	r0, #0
 8003f1c:	f7fc fcf4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x20);
 8003f20:	2020      	movs	r0, #32
 8003f22:	f7fc fcf1 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0XF3); /* DVDD Voltage Setting */
 8003f26:	20f3      	movs	r0, #243	@ 0xf3
 8003f28:	f7fc fd02 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x74);
 8003f2c:	2074      	movs	r0, #116	@ 0x74
 8003f2e:	f7fc fceb 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Inversion Type */
 8003f32:	20b4      	movs	r0, #180	@ 0xb4
 8003f34:	f7fc fcfc 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02 */
 8003f38:	2000      	movs	r0, #0
 8003f3a:	f7fc fce5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8003f3e:	2000      	movs	r0, #0
 8003f40:	f7fc fce2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 02 */
 8003f44:	2000      	movs	r0, #0
 8003f46:	f7fc fcdf 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF7); /* Resolution Control */
 8003f4a:	20f7      	movs	r0, #247	@ 0xf7
 8003f4c:	f7fc fcf0 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x82);  /* 480*800 */
 8003f50:	2082      	movs	r0, #130	@ 0x82
 8003f52:	f7fc fcd9 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB1); /* FRAME RATE Setting */
 8003f56:	20b1      	movs	r0, #177	@ 0xb1
 8003f58:	f7fc fcea 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 8003f5c:	2000      	movs	r0, #0
 8003f5e:	f7fc fcd3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x13);
 8003f62:	2013      	movs	r0, #19
 8003f64:	f7fc fcd0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x13);
 8003f68:	2013      	movs	r0, #19
 8003f6a:	f7fc fccd 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0XF2); /* CR_EQ_PC_SDT  #C0,06,40,28 */
 8003f6e:	20f2      	movs	r0, #242	@ 0xf2
 8003f70:	f7fc fcde 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x80);
 8003f74:	2080      	movs	r0, #128	@ 0x80
 8003f76:	f7fc fcc7 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x04);
 8003f7a:	2004      	movs	r0, #4
 8003f7c:	f7fc fcc4 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x40);
 8003f80:	2040      	movs	r0, #64	@ 0x40
 8003f82:	f7fc fcc1 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x28);
 8003f86:	2028      	movs	r0, #40	@ 0x28
 8003f88:	f7fc fcbe 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0XC1); /* Power Control 2  SD OP Bias_VRH1_VRH2_EXT_CPCK_SEL */
 8003f8c:	20c1      	movs	r0, #193	@ 0xc1
 8003f8e:	f7fc fccf 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x17);
 8003f92:	2017      	movs	r0, #23
 8003f94:	f7fc fcb8 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMP */
 8003f98:	2088      	movs	r0, #136	@ 0x88
 8003f9a:	f7fc fcb5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x88);  /* VGMN */
 8003f9e:	2088      	movs	r0, #136	@ 0x88
 8003fa0:	f7fc fcb2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x20);
 8003fa4:	2020      	movs	r0, #32
 8003fa6:	f7fc fcaf 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE0); /* Positive Gamma Control */
 8003faa:	20e0      	movs	r0, #224	@ 0xe0
 8003fac:	f7fc fcc0 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8003fb0:	2000      	movs	r0, #0
 8003fb2:	f7fc fca9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P2 */
 8003fb6:	200a      	movs	r0, #10
 8003fb8:	f7fc fca6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x12);  /* P3 */
 8003fbc:	2012      	movs	r0, #18
 8003fbe:	f7fc fca3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P4 */
 8003fc2:	2010      	movs	r0, #16
 8003fc4:	f7fc fca0 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 8003fc8:	200e      	movs	r0, #14
 8003fca:	f7fc fc9d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x20);  /* P6 */
 8003fce:	2020      	movs	r0, #32
 8003fd0:	f7fc fc9a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xCC);  /* P7 */
 8003fd4:	20cc      	movs	r0, #204	@ 0xcc
 8003fd6:	f7fc fc97 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x07);  /* P8 */
 8003fda:	2007      	movs	r0, #7
 8003fdc:	f7fc fc94 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8003fe0:	2006      	movs	r0, #6
 8003fe2:	f7fc fc91 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P10 */
 8003fe6:	200b      	movs	r0, #11
 8003fe8:	f7fc fc8e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P11 */
 8003fec:	200e      	movs	r0, #14
 8003fee:	f7fc fc8b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P12 */
 8003ff2:	200f      	movs	r0, #15
 8003ff4:	f7fc fc88 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P13 */
 8003ff8:	200d      	movs	r0, #13
 8003ffa:	f7fc fc85 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8003ffe:	2015      	movs	r0, #21
 8004000:	f7fc fc82 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x10);  /* P15 */
 8004004:	2010      	movs	r0, #16
 8004006:	f7fc fc7f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 800400a:	2000      	movs	r0, #0
 800400c:	f7fc fc7c 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xE1); /* Negative Gamma Correction */
 8004010:	20e1      	movs	r0, #225	@ 0xe1
 8004012:	f7fc fc8d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* P1 */
 8004016:	2000      	movs	r0, #0
 8004018:	f7fc fc76 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0B);  /* P2 */
 800401c:	200b      	movs	r0, #11
 800401e:	f7fc fc73 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x13);  /* P3 */
 8004022:	2013      	movs	r0, #19
 8004024:	f7fc fc70 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0D);  /* P4 */
 8004028:	200d      	movs	r0, #13
 800402a:	f7fc fc6d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P5 */
 800402e:	200e      	movs	r0, #14
 8004030:	f7fc fc6a 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1B);  /* P6 */
 8004034:	201b      	movs	r0, #27
 8004036:	f7fc fc67 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x71);  /* P7 */
 800403a:	2071      	movs	r0, #113	@ 0x71
 800403c:	f7fc fc64 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P8 */
 8004040:	2006      	movs	r0, #6
 8004042:	f7fc fc61 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x06);  /* P9 */
 8004046:	2006      	movs	r0, #6
 8004048:	f7fc fc5e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0A);  /* P10 */
 800404c:	200a      	movs	r0, #10
 800404e:	f7fc fc5b 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P11 */
 8004052:	200f      	movs	r0, #15
 8004054:	f7fc fc58 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0E);  /* P12 */
 8004058:	200e      	movs	r0, #14
 800405a:	f7fc fc55 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0F);  /* P13 */
 800405e:	200f      	movs	r0, #15
 8004060:	f7fc fc52 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x15);  /* P14 */
 8004064:	2015      	movs	r0, #21
 8004066:	f7fc fc4f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x0C);  /* P15 */
 800406a:	200c      	movs	r0, #12
 800406c:	f7fc fc4c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* P16 */
 8004070:	2000      	movs	r0, #0
 8004072:	f7fc fc49 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x2a);
 8004076:	202a      	movs	r0, #42	@ 0x2a
 8004078:	f7fc fc5a 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800407c:	2000      	movs	r0, #0
 800407e:	f7fc fc43 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 8004082:	2000      	movs	r0, #0
 8004084:	f7fc fc40 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);
 8004088:	2001      	movs	r0, #1
 800408a:	f7fc fc3d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xdf);
 800408e:	20df      	movs	r0, #223	@ 0xdf
 8004090:	f7fc fc3a 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x2b);
 8004094:	202b      	movs	r0, #43	@ 0x2b
 8004096:	f7fc fc4b 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);
 800409a:	2000      	movs	r0, #0
 800409c:	f7fc fc34 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80040a0:	2000      	movs	r0, #0
 80040a2:	f7fc fc31 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x03);
 80040a6:	2003      	movs	r0, #3
 80040a8:	f7fc fc2e 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x1f);
 80040ac:	201f      	movs	r0, #31
 80040ae:	f7fc fc2b 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x3A); /* Pixel Format */
 80040b2:	203a      	movs	r0, #58	@ 0x3a
 80040b4:	f7fc fc3c 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x55);
 80040b8:	2055      	movs	r0, #85	@ 0x55
 80040ba:	f7fc fc25 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x36); /* Memory Access Control */
 80040be:	2036      	movs	r0, #54	@ 0x36
 80040c0:	f7fc fc36 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* 02-180 */
 80040c4:	2000      	movs	r0, #0
 80040c6:	f7fc fc1f 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x11);
 80040ca:	2011      	movs	r0, #17
 80040cc:	f7fc fc30 	bl	8000930 <lcd_wr_regno>
    delay_ms(120);
 80040d0:	2078      	movs	r0, #120	@ 0x78
 80040d2:	f7fc fb5d 	bl	8000790 <delay_ms>
    lcd_wr_regno(0x29);
 80040d6:	2029      	movs	r0, #41	@ 0x29
 80040d8:	f7fc fc2a 	bl	8000930 <lcd_wr_regno>
    delay_ms(20);
 80040dc:	2014      	movs	r0, #20
 80040de:	f7fc fb57 	bl	8000790 <delay_ms>
    lcd_wr_regno(0x2C);
 80040e2:	202c      	movs	r0, #44	@ 0x2c
 80040e4:	f7fc fc24 	bl	8000930 <lcd_wr_regno>
}
 80040e8:	bf00      	nop
 80040ea:	bd80      	pop	{r7, pc}

080040ec <lcd_ex_ssd1963_reginit>:
 * @brief       SSD1963寄存器初始化代码
 * @param       无
 * @retval      无
 */
void lcd_ex_ssd1963_reginit(void)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	af00      	add	r7, sp, #0
    lcd_wr_regno(0xE2); /* Set PLL with OSC = 10MHz (hardware),	Multiplier N = 35, 250MHz < VCO < 800MHz = OSC*(N+1), VCO = 300MHz */
 80040f0:	20e2      	movs	r0, #226	@ 0xe2
 80040f2:	f7fc fc1d 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x1D);  /* 参数1 */
 80040f6:	201d      	movs	r0, #29
 80040f8:	f7fc fc06 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x02);  /* 参数2 Divider M = 2, PLL = 300/(M+1) = 100MHz */
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fc fc03 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x04);  /* 参数3 Validate M and N values */
 8004102:	2004      	movs	r0, #4
 8004104:	f7fc fc00 	bl	8000908 <lcd_wr_data>
    delay_us(100);
 8004108:	2064      	movs	r0, #100	@ 0x64
 800410a:	f7fc fb03 	bl	8000714 <delay_us>
    lcd_wr_regno(0xE0); /*  Start PLL command */
 800410e:	20e0      	movs	r0, #224	@ 0xe0
 8004110:	f7fc fc0e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x01);  /*  enable PLL */
 8004114:	2001      	movs	r0, #1
 8004116:	f7fc fbf7 	bl	8000908 <lcd_wr_data>
    delay_ms(10);
 800411a:	200a      	movs	r0, #10
 800411c:	f7fc fb38 	bl	8000790 <delay_ms>
    lcd_wr_regno(0xE0); /*  Start PLL command again */
 8004120:	20e0      	movs	r0, #224	@ 0xe0
 8004122:	f7fc fc05 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x03);  /*  now, use PLL output as system clock */
 8004126:	2003      	movs	r0, #3
 8004128:	f7fc fbee 	bl	8000908 <lcd_wr_data>
    delay_ms(12);
 800412c:	200c      	movs	r0, #12
 800412e:	f7fc fb2f 	bl	8000790 <delay_ms>
    lcd_wr_regno(0x01); /* 软复位 */
 8004132:	2001      	movs	r0, #1
 8004134:	f7fc fbfc 	bl	8000930 <lcd_wr_regno>
    delay_ms(10);
 8004138:	200a      	movs	r0, #10
 800413a:	f7fc fb29 	bl	8000790 <delay_ms>

    lcd_wr_regno(0xE6); /* 设置像素频率,33Mhz */
 800413e:	20e6      	movs	r0, #230	@ 0xe6
 8004140:	f7fc fbf6 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x2F);
 8004144:	202f      	movs	r0, #47	@ 0x2f
 8004146:	f7fc fbdf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 800414a:	20ff      	movs	r0, #255	@ 0xff
 800414c:	f7fc fbdc 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFF);
 8004150:	20ff      	movs	r0, #255	@ 0xff
 8004152:	f7fc fbd9 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB0); /* 设置LCD模式 */
 8004156:	20b0      	movs	r0, #176	@ 0xb0
 8004158:	f7fc fbea 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x20);  /* 24位模式 */
 800415c:	2020      	movs	r0, #32
 800415e:	f7fc fbd3 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* TFT 模式 */
 8004162:	2000      	movs	r0, #0
 8004164:	f7fc fbd0 	bl	8000908 <lcd_wr_data>

    lcd_wr_data((SSD_HOR_RESOLUTION - 1) >> 8); /* 设置LCD水平像素 */
 8004168:	2003      	movs	r0, #3
 800416a:	f7fc fbcd 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_RESOLUTION - 1);
 800416e:	f240 301f 	movw	r0, #799	@ 0x31f
 8004172:	f7fc fbc9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data((SSD_VER_RESOLUTION - 1) >> 8); /* 设置LCD垂直像素 */
 8004176:	2001      	movs	r0, #1
 8004178:	f7fc fbc6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_VER_RESOLUTION - 1);
 800417c:	f240 10df 	movw	r0, #479	@ 0x1df
 8004180:	f7fc fbc2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* RGB序列 */
 8004184:	2000      	movs	r0, #0
 8004186:	f7fc fbbf 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB4); /* Set horizontal period */
 800418a:	20b4      	movs	r0, #180	@ 0xb4
 800418c:	f7fc fbd0 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data((SSD_HT - 1) >> 8);
 8004190:	2004      	movs	r0, #4
 8004192:	f7fc fbb9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_HT - 1);
 8004196:	f240 401f 	movw	r0, #1055	@ 0x41f
 800419a:	f7fc fbb5 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_HPS >> 8);
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fc fbb2 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_HPS);
 80041a4:	202e      	movs	r0, #46	@ 0x2e
 80041a6:	f7fc fbaf 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_HOR_PULSE_WIDTH - 1);
 80041aa:	2000      	movs	r0, #0
 80041ac:	f7fc fbac 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80041b0:	2000      	movs	r0, #0
 80041b2:	f7fc fba9 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80041b6:	2000      	movs	r0, #0
 80041b8:	f7fc fba6 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80041bc:	2000      	movs	r0, #0
 80041be:	f7fc fba3 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xB6); /* Set vertical perio */
 80041c2:	20b6      	movs	r0, #182	@ 0xb6
 80041c4:	f7fc fbb4 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data((SSD_VT - 1) >> 8);
 80041c8:	2002      	movs	r0, #2
 80041ca:	f7fc fb9d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_VT - 1);
 80041ce:	f44f 7003 	mov.w	r0, #524	@ 0x20c
 80041d2:	f7fc fb99 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_VPS >> 8);
 80041d6:	2000      	movs	r0, #0
 80041d8:	f7fc fb96 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_VPS);
 80041dc:	2017      	movs	r0, #23
 80041de:	f7fc fb93 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(SSD_VER_FRONT_PORCH - 1);
 80041e2:	2015      	movs	r0, #21
 80041e4:	f7fc fb90 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80041e8:	2000      	movs	r0, #0
 80041ea:	f7fc fb8d 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);
 80041ee:	2000      	movs	r0, #0
 80041f0:	f7fc fb8a 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xF0); /* 设置SSD1963与CPU接口为16bit */
 80041f4:	20f0      	movs	r0, #240	@ 0xf0
 80041f6:	f7fc fb9b 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 16-bit(565 format) data for 16bpp */
 80041fa:	2003      	movs	r0, #3
 80041fc:	f7fc fb84 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0x29); /* 开启显示 */
 8004200:	2029      	movs	r0, #41	@ 0x29
 8004202:	f7fc fb95 	bl	8000930 <lcd_wr_regno>
    /* 设置PWM输出  背光通过占空比可调 */
    lcd_wr_regno(0xD0); /* 设置自动白平衡DBC */
 8004206:	20d0      	movs	r0, #208	@ 0xd0
 8004208:	f7fc fb92 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x00);  /* disable */
 800420c:	2000      	movs	r0, #0
 800420e:	f7fc fb7b 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xBE); /* 配置PWM输出 */
 8004212:	20be      	movs	r0, #190	@ 0xbe
 8004214:	f7fc fb8c 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x05);  /* 1设置PWM频率 */
 8004218:	2005      	movs	r0, #5
 800421a:	f7fc fb75 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0xFE);  /* 2设置PWM占空比 */
 800421e:	20fe      	movs	r0, #254	@ 0xfe
 8004220:	f7fc fb72 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);  /* 3设置C */
 8004224:	2001      	movs	r0, #1
 8004226:	f7fc fb6f 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 4设置D */
 800422a:	2000      	movs	r0, #0
 800422c:	f7fc fb6c 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 5设置E */
 8004230:	2000      	movs	r0, #0
 8004232:	f7fc fb69 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x00);  /* 6设置F */
 8004236:	2000      	movs	r0, #0
 8004238:	f7fc fb66 	bl	8000908 <lcd_wr_data>

    lcd_wr_regno(0xB8); /* 设置GPIO配置 */
 800423c:	20b8      	movs	r0, #184	@ 0xb8
 800423e:	f7fc fb77 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0x03);  /* 2个IO口设置成输出 */
 8004242:	2003      	movs	r0, #3
 8004244:	f7fc fb60 	bl	8000908 <lcd_wr_data>
    lcd_wr_data(0x01);  /* GPIO使用正常的IO功能 */
 8004248:	2001      	movs	r0, #1
 800424a:	f7fc fb5d 	bl	8000908 <lcd_wr_data>
    lcd_wr_regno(0xBA);
 800424e:	20ba      	movs	r0, #186	@ 0xba
 8004250:	f7fc fb6e 	bl	8000930 <lcd_wr_regno>
    lcd_wr_data(0X01);  /* GPIO[1:0]=01,控制LCD方向 */
 8004254:	2001      	movs	r0, #1
 8004256:	f7fc fb57 	bl	8000908 <lcd_wr_data>
}
 800425a:	bf00      	nop
 800425c:	bd80      	pop	{r7, pc}
	...

08004260 <main>:
#include <stdio.h>

void SystemClock_Config(void);

int main(void)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b088      	sub	sp, #32
 8004264:	af04      	add	r7, sp, #16
  uint8_t x = 0;
 8004266:	2300      	movs	r3, #0
 8004268:	73fb      	strb	r3, [r7, #15]
  uint8_t lcd_id[12];
  HAL_Init();
 800426a:	f000 fbf1 	bl	8004a50 <HAL_Init>
  SystemClock_Config();
 800426e:	f000 f8bd 	bl	80043ec <SystemClock_Config>
  bsp_init();
 8004272:	f7fc fb3d 	bl	80008f0 <bsp_init>
  lcd_init();
 8004276:	f7fc ff89 	bl	800118c <lcd_init>
  g_point_color = RED;
 800427a:	4b55      	ldr	r3, [pc, #340]	@ (80043d0 <main+0x170>)
 800427c:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8004280:	601a      	str	r2, [r3, #0]
  sprintf((char *)lcd_id, "LCD ID:%04X", lcddev.id);
 8004282:	4b54      	ldr	r3, [pc, #336]	@ (80043d4 <main+0x174>)
 8004284:	889b      	ldrh	r3, [r3, #4]
 8004286:	461a      	mov	r2, r3
 8004288:	463b      	mov	r3, r7
 800428a:	4953      	ldr	r1, [pc, #332]	@ (80043d8 <main+0x178>)
 800428c:	4618      	mov	r0, r3
 800428e:	f006 fb35 	bl	800a8fc <siprintf>
  while (1)
  {
      switch (x)
 8004292:	7bfb      	ldrb	r3, [r7, #15]
 8004294:	2b0b      	cmp	r3, #11
 8004296:	d855      	bhi.n	8004344 <main+0xe4>
 8004298:	a201      	add	r2, pc, #4	@ (adr r2, 80042a0 <main+0x40>)
 800429a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429e:	bf00      	nop
 80042a0:	080042d1 	.word	0x080042d1
 80042a4:	080042db 	.word	0x080042db
 80042a8:	080042e3 	.word	0x080042e3
 80042ac:	080042eb 	.word	0x080042eb
 80042b0:	080042f5 	.word	0x080042f5
 80042b4:	080042ff 	.word	0x080042ff
 80042b8:	08004309 	.word	0x08004309
 80042bc:	08004313 	.word	0x08004313
 80042c0:	0800431d 	.word	0x0800431d
 80042c4:	08004327 	.word	0x08004327
 80042c8:	08004331 	.word	0x08004331
 80042cc:	0800433b 	.word	0x0800433b
      {
          case 0:
              lcd_clear(WHITE);
 80042d0:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80042d4:	f7fd fa3e 	bl	8001754 <lcd_clear>
              break;
 80042d8:	e034      	b.n	8004344 <main+0xe4>

          case 1:
              lcd_clear(BLACK);
 80042da:	2000      	movs	r0, #0
 80042dc:	f7fd fa3a 	bl	8001754 <lcd_clear>
              break;
 80042e0:	e030      	b.n	8004344 <main+0xe4>

          case 2:
              lcd_clear(BLUE);
 80042e2:	201f      	movs	r0, #31
 80042e4:	f7fd fa36 	bl	8001754 <lcd_clear>
              break;
 80042e8:	e02c      	b.n	8004344 <main+0xe4>

          case 3:
              lcd_clear(RED);
 80042ea:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 80042ee:	f7fd fa31 	bl	8001754 <lcd_clear>
              break;
 80042f2:	e027      	b.n	8004344 <main+0xe4>

          case 4:
              lcd_clear(MAGENTA);
 80042f4:	f64f 001f 	movw	r0, #63519	@ 0xf81f
 80042f8:	f7fd fa2c 	bl	8001754 <lcd_clear>
              break;
 80042fc:	e022      	b.n	8004344 <main+0xe4>

          case 5:
              lcd_clear(GREEN);
 80042fe:	f44f 60fc 	mov.w	r0, #2016	@ 0x7e0
 8004302:	f7fd fa27 	bl	8001754 <lcd_clear>
              break;
 8004306:	e01d      	b.n	8004344 <main+0xe4>

          case 6:
              lcd_clear(CYAN);
 8004308:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 800430c:	f7fd fa22 	bl	8001754 <lcd_clear>
              break;
 8004310:	e018      	b.n	8004344 <main+0xe4>

          case 7:
              lcd_clear(YELLOW);
 8004312:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8004316:	f7fd fa1d 	bl	8001754 <lcd_clear>
              break;
 800431a:	e013      	b.n	8004344 <main+0xe4>

          case 8:
              lcd_clear(BRRED);
 800431c:	f64f 4007 	movw	r0, #64519	@ 0xfc07
 8004320:	f7fd fa18 	bl	8001754 <lcd_clear>
              break;
 8004324:	e00e      	b.n	8004344 <main+0xe4>

          case 9:
              lcd_clear(GRAY);
 8004326:	f248 4030 	movw	r0, #33840	@ 0x8430
 800432a:	f7fd fa13 	bl	8001754 <lcd_clear>
              break;
 800432e:	e009      	b.n	8004344 <main+0xe4>

          case 10:
              lcd_clear(LGRAY);
 8004330:	f24c 6018 	movw	r0, #50712	@ 0xc618
 8004334:	f7fd fa0e 	bl	8001754 <lcd_clear>
              break;
 8004338:	e004      	b.n	8004344 <main+0xe4>

          case 11:
              lcd_clear(BROWN);
 800433a:	f64b 4040 	movw	r0, #48192	@ 0xbc40
 800433e:	f7fd fa09 	bl	8001754 <lcd_clear>
              break;
 8004342:	bf00      	nop
      }

      lcd_show_string(10, 40, 240, 32, 32, "STM32", RED);
 8004344:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004348:	9302      	str	r3, [sp, #8]
 800434a:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <main+0x17c>)
 800434c:	9301      	str	r3, [sp, #4]
 800434e:	2320      	movs	r3, #32
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	2320      	movs	r3, #32
 8004354:	22f0      	movs	r2, #240	@ 0xf0
 8004356:	2128      	movs	r1, #40	@ 0x28
 8004358:	200a      	movs	r0, #10
 800435a:	f7fd fb07 	bl	800196c <lcd_show_string>
      lcd_show_string(10, 80, 240, 24, 24, "TFTLCD TEST", RED);
 800435e:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004362:	9302      	str	r3, [sp, #8]
 8004364:	4b1e      	ldr	r3, [pc, #120]	@ (80043e0 <main+0x180>)
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	2318      	movs	r3, #24
 800436a:	9300      	str	r3, [sp, #0]
 800436c:	2318      	movs	r3, #24
 800436e:	22f0      	movs	r2, #240	@ 0xf0
 8004370:	2150      	movs	r1, #80	@ 0x50
 8004372:	200a      	movs	r0, #10
 8004374:	f7fd fafa 	bl	800196c <lcd_show_string>
      lcd_show_string(10, 110, 240, 16, 16, "ATOM@ALIENTEK", RED);
 8004378:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 800437c:	9302      	str	r3, [sp, #8]
 800437e:	4b19      	ldr	r3, [pc, #100]	@ (80043e4 <main+0x184>)
 8004380:	9301      	str	r3, [sp, #4]
 8004382:	2310      	movs	r3, #16
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2310      	movs	r3, #16
 8004388:	22f0      	movs	r2, #240	@ 0xf0
 800438a:	216e      	movs	r1, #110	@ 0x6e
 800438c:	200a      	movs	r0, #10
 800438e:	f7fd faed 	bl	800196c <lcd_show_string>
      lcd_show_string(10, 130, 240, 16, 16, (char*)lcd_id, RED);  /* 显示LCD ID */
 8004392:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8004396:	9302      	str	r3, [sp, #8]
 8004398:	463b      	mov	r3, r7
 800439a:	9301      	str	r3, [sp, #4]
 800439c:	2310      	movs	r3, #16
 800439e:	9300      	str	r3, [sp, #0]
 80043a0:	2310      	movs	r3, #16
 80043a2:	22f0      	movs	r2, #240	@ 0xf0
 80043a4:	2182      	movs	r1, #130	@ 0x82
 80043a6:	200a      	movs	r0, #10
 80043a8:	f7fd fae0 	bl	800196c <lcd_show_string>
      x++;
 80043ac:	7bfb      	ldrb	r3, [r7, #15]
 80043ae:	3301      	adds	r3, #1
 80043b0:	73fb      	strb	r3, [r7, #15]

      if (x == 12)x = 0;
 80043b2:	7bfb      	ldrb	r3, [r7, #15]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	d101      	bne.n	80043bc <main+0x15c>
 80043b8:	2300      	movs	r3, #0
 80043ba:	73fb      	strb	r3, [r7, #15]

      HAL_GPIO_TogglePin(LED_RED_Port,LED_RED_Pin);
 80043bc:	2140      	movs	r1, #64	@ 0x40
 80043be:	480a      	ldr	r0, [pc, #40]	@ (80043e8 <main+0x188>)
 80043c0:	f001 fc21 	bl	8005c06 <HAL_GPIO_TogglePin>
      HAL_Delay(1000);
 80043c4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80043c8:	f7fc f9f3 	bl	80007b2 <HAL_Delay>
      switch (x)
 80043cc:	e761      	b.n	8004292 <main+0x32>
 80043ce:	bf00      	nop
 80043d0:	24000000 	.word	0x24000000
 80043d4:	240000e0 	.word	0x240000e0
 80043d8:	0800b984 	.word	0x0800b984
 80043dc:	0800b990 	.word	0x0800b990
 80043e0:	0800b998 	.word	0x0800b998
 80043e4:	0800b9a4 	.word	0x0800b9a4
 80043e8:	58021000 	.word	0x58021000

080043ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b09c      	sub	sp, #112	@ 0x70
 80043f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80043f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043f6:	224c      	movs	r2, #76	@ 0x4c
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f006 fae3 	bl	800a9c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004400:	1d3b      	adds	r3, r7, #4
 8004402:	2220      	movs	r2, #32
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f006 fadd 	bl	800a9c6 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800440c:	2002      	movs	r0, #2
 800440e:	f001 fc39 	bl	8005c84 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8004412:	2300      	movs	r3, #0
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4b30      	ldr	r3, [pc, #192]	@ (80044d8 <SystemClock_Config+0xec>)
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	4a2f      	ldr	r2, [pc, #188]	@ (80044d8 <SystemClock_Config+0xec>)
 800441c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004420:	6193      	str	r3, [r2, #24]
 8004422:	4b2d      	ldr	r3, [pc, #180]	@ (80044d8 <SystemClock_Config+0xec>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800442a:	603b      	str	r3, [r7, #0]
 800442c:	4b2b      	ldr	r3, [pc, #172]	@ (80044dc <SystemClock_Config+0xf0>)
 800442e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004430:	4a2a      	ldr	r2, [pc, #168]	@ (80044dc <SystemClock_Config+0xf0>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004438:	4b28      	ldr	r3, [pc, #160]	@ (80044dc <SystemClock_Config+0xf0>)
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	603b      	str	r3, [r7, #0]
 8004442:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8004444:	bf00      	nop
 8004446:	4b24      	ldr	r3, [pc, #144]	@ (80044d8 <SystemClock_Config+0xec>)
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800444e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004452:	d1f8      	bne.n	8004446 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004454:	2301      	movs	r3, #1
 8004456:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004458:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800445c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800445e:	2302      	movs	r3, #2
 8004460:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004462:	2302      	movs	r3, #2
 8004464:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8004466:	2302      	movs	r3, #2
 8004468:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 800446a:	23f0      	movs	r3, #240	@ 0xf0
 800446c:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800446e:	2302      	movs	r3, #2
 8004470:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004472:	2302      	movs	r3, #2
 8004474:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004476:	2302      	movs	r3, #2
 8004478:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800447a:	2308      	movs	r3, #8
 800447c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800447e:	2300      	movs	r3, #0
 8004480:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004486:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800448a:	4618      	mov	r0, r3
 800448c:	f001 fc34 	bl	8005cf8 <HAL_RCC_OscConfig>
 8004490:	4603      	mov	r3, r0
 8004492:	2b00      	cmp	r3, #0
 8004494:	d001      	beq.n	800449a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8004496:	f000 f823 	bl	80044e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800449a:	233f      	movs	r3, #63	@ 0x3f
 800449c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800449e:	2303      	movs	r3, #3
 80044a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80044a2:	2300      	movs	r3, #0
 80044a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80044a6:	2308      	movs	r3, #8
 80044a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80044aa:	2340      	movs	r3, #64	@ 0x40
 80044ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80044ae:	2340      	movs	r3, #64	@ 0x40
 80044b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80044b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80044b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80044b8:	2340      	movs	r3, #64	@ 0x40
 80044ba:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80044bc:	1d3b      	adds	r3, r7, #4
 80044be:	2104      	movs	r1, #4
 80044c0:	4618      	mov	r0, r3
 80044c2:	f002 f873 	bl	80065ac <HAL_RCC_ClockConfig>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 80044cc:	f000 f808 	bl	80044e0 <Error_Handler>
  }
}
 80044d0:	bf00      	nop
 80044d2:	3770      	adds	r7, #112	@ 0x70
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	58024800 	.word	0x58024800
 80044dc:	58000400 	.word	0x58000400

080044e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80044e4:	b672      	cpsid	i
}
 80044e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80044e8:	bf00      	nop
 80044ea:	e7fd      	b.n	80044e8 <Error_Handler+0x8>

080044ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044f2:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <HAL_MspInit+0x30>)
 80044f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044f8:	4a08      	ldr	r2, [pc, #32]	@ (800451c <HAL_MspInit+0x30>)
 80044fa:	f043 0302 	orr.w	r3, r3, #2
 80044fe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004502:	4b06      	ldr	r3, [pc, #24]	@ (800451c <HAL_MspInit+0x30>)
 8004504:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr
 800451c:	58024400 	.word	0x58024400

08004520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004524:	bf00      	nop
 8004526:	e7fd      	b.n	8004524 <NMI_Handler+0x4>

08004528 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004528:	b480      	push	{r7}
 800452a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800452c:	bf00      	nop
 800452e:	e7fd      	b.n	800452c <HardFault_Handler+0x4>

08004530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004534:	bf00      	nop
 8004536:	e7fd      	b.n	8004534 <MemManage_Handler+0x4>

08004538 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800453c:	bf00      	nop
 800453e:	e7fd      	b.n	800453c <BusFault_Handler+0x4>

08004540 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <UsageFault_Handler+0x4>

08004548 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800454c:	bf00      	nop
 800454e:	46bd      	mov	sp, r7
 8004550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004554:	4770      	bx	lr

08004556 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004556:	b480      	push	{r7}
 8004558:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800455a:	bf00      	nop
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004572:	b580      	push	{r7, lr}
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004576:	f000 fadd 	bl	8004b34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800457a:	bf00      	nop
 800457c:	bd80      	pop	{r7, pc}

0800457e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8004582:	2002      	movs	r0, #2
 8004584:	f001 fb59 	bl	8005c3a <HAL_GPIO_EXTI_IRQHandler>
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8004588:	bf00      	nop
 800458a:	bd80      	pop	{r7, pc}

0800458c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004590:	4802      	ldr	r0, [pc, #8]	@ (800459c <USART1_IRQHandler+0x10>)
 8004592:	f004 faf1 	bl	8008b78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	240000f4 	.word	0x240000f4

080045a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b086      	sub	sp, #24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
 80045b0:	e00a      	b.n	80045c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80045b2:	f3af 8000 	nop.w
 80045b6:	4601      	mov	r1, r0
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	60ba      	str	r2, [r7, #8]
 80045be:	b2ca      	uxtb	r2, r1
 80045c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	3301      	adds	r3, #1
 80045c6:	617b      	str	r3, [r7, #20]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	dbf0      	blt.n	80045b2 <_read+0x12>
  }

  return len;
 80045d0:	687b      	ldr	r3, [r7, #4]
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}

080045da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80045da:	b580      	push	{r7, lr}
 80045dc:	b086      	sub	sp, #24
 80045de:	af00      	add	r7, sp, #0
 80045e0:	60f8      	str	r0, [r7, #12]
 80045e2:	60b9      	str	r1, [r7, #8]
 80045e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045e6:	2300      	movs	r3, #0
 80045e8:	617b      	str	r3, [r7, #20]
 80045ea:	e009      	b.n	8004600 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	1c5a      	adds	r2, r3, #1
 80045f0:	60ba      	str	r2, [r7, #8]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	4618      	mov	r0, r3
 80045f6:	f000 f9ed 	bl	80049d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	3301      	adds	r3, #1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	dbf1      	blt.n	80045ec <_write+0x12>
  }
  return len;
 8004608:	687b      	ldr	r3, [r7, #4]
}
 800460a:	4618      	mov	r0, r3
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <_close>:

int _close(int file)
{
 8004612:	b480      	push	{r7}
 8004614:	b083      	sub	sp, #12
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800461a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800461e:	4618      	mov	r0, r3
 8004620:	370c      	adds	r7, #12
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800462a:	b480      	push	{r7}
 800462c:	b083      	sub	sp, #12
 800462e:	af00      	add	r7, sp, #0
 8004630:	6078      	str	r0, [r7, #4]
 8004632:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800463a:	605a      	str	r2, [r3, #4]
  return 0;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	370c      	adds	r7, #12
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <_isatty>:

int _isatty(int file)
{
 800464a:	b480      	push	{r7}
 800464c:	b083      	sub	sp, #12
 800464e:	af00      	add	r7, sp, #0
 8004650:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004652:	2301      	movs	r3, #1
}
 8004654:	4618      	mov	r0, r3
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3714      	adds	r7, #20
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
	...

0800467c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004684:	4a14      	ldr	r2, [pc, #80]	@ (80046d8 <_sbrk+0x5c>)
 8004686:	4b15      	ldr	r3, [pc, #84]	@ (80046dc <_sbrk+0x60>)
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004690:	4b13      	ldr	r3, [pc, #76]	@ (80046e0 <_sbrk+0x64>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <_sbrk+0x64>)
 800469a:	4a12      	ldr	r2, [pc, #72]	@ (80046e4 <_sbrk+0x68>)
 800469c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800469e:	4b10      	ldr	r3, [pc, #64]	@ (80046e0 <_sbrk+0x64>)
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	4413      	add	r3, r2
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d207      	bcs.n	80046bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046ac:	f006 f9da 	bl	800aa64 <__errno>
 80046b0:	4603      	mov	r3, r0
 80046b2:	220c      	movs	r2, #12
 80046b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80046b6:	f04f 33ff 	mov.w	r3, #4294967295
 80046ba:	e009      	b.n	80046d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80046bc:	4b08      	ldr	r3, [pc, #32]	@ (80046e0 <_sbrk+0x64>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80046c2:	4b07      	ldr	r3, [pc, #28]	@ (80046e0 <_sbrk+0x64>)
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	4a05      	ldr	r2, [pc, #20]	@ (80046e0 <_sbrk+0x64>)
 80046cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80046ce:	68fb      	ldr	r3, [r7, #12]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	24080000 	.word	0x24080000
 80046dc:	00000400 	.word	0x00000400
 80046e0:	240000f0 	.word	0x240000f0
 80046e4:	240002d8 	.word	0x240002d8

080046e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80046ec:	4b43      	ldr	r3, [pc, #268]	@ (80047fc <SystemInit+0x114>)
 80046ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046f2:	4a42      	ldr	r2, [pc, #264]	@ (80047fc <SystemInit+0x114>)
 80046f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80046f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80046fc:	4b40      	ldr	r3, [pc, #256]	@ (8004800 <SystemInit+0x118>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	2b06      	cmp	r3, #6
 8004706:	d807      	bhi.n	8004718 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004708:	4b3d      	ldr	r3, [pc, #244]	@ (8004800 <SystemInit+0x118>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f023 030f 	bic.w	r3, r3, #15
 8004710:	4a3b      	ldr	r2, [pc, #236]	@ (8004800 <SystemInit+0x118>)
 8004712:	f043 0307 	orr.w	r3, r3, #7
 8004716:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004718:	4b3a      	ldr	r3, [pc, #232]	@ (8004804 <SystemInit+0x11c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a39      	ldr	r2, [pc, #228]	@ (8004804 <SystemInit+0x11c>)
 800471e:	f043 0301 	orr.w	r3, r3, #1
 8004722:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004724:	4b37      	ldr	r3, [pc, #220]	@ (8004804 <SystemInit+0x11c>)
 8004726:	2200      	movs	r2, #0
 8004728:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800472a:	4b36      	ldr	r3, [pc, #216]	@ (8004804 <SystemInit+0x11c>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4935      	ldr	r1, [pc, #212]	@ (8004804 <SystemInit+0x11c>)
 8004730:	4b35      	ldr	r3, [pc, #212]	@ (8004808 <SystemInit+0x120>)
 8004732:	4013      	ands	r3, r2
 8004734:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004736:	4b32      	ldr	r3, [pc, #200]	@ (8004800 <SystemInit+0x118>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d007      	beq.n	8004752 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004742:	4b2f      	ldr	r3, [pc, #188]	@ (8004800 <SystemInit+0x118>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 030f 	bic.w	r3, r3, #15
 800474a:	4a2d      	ldr	r2, [pc, #180]	@ (8004800 <SystemInit+0x118>)
 800474c:	f043 0307 	orr.w	r3, r3, #7
 8004750:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004752:	4b2c      	ldr	r3, [pc, #176]	@ (8004804 <SystemInit+0x11c>)
 8004754:	2200      	movs	r2, #0
 8004756:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004758:	4b2a      	ldr	r3, [pc, #168]	@ (8004804 <SystemInit+0x11c>)
 800475a:	2200      	movs	r2, #0
 800475c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800475e:	4b29      	ldr	r3, [pc, #164]	@ (8004804 <SystemInit+0x11c>)
 8004760:	2200      	movs	r2, #0
 8004762:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004764:	4b27      	ldr	r3, [pc, #156]	@ (8004804 <SystemInit+0x11c>)
 8004766:	4a29      	ldr	r2, [pc, #164]	@ (800480c <SystemInit+0x124>)
 8004768:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800476a:	4b26      	ldr	r3, [pc, #152]	@ (8004804 <SystemInit+0x11c>)
 800476c:	4a28      	ldr	r2, [pc, #160]	@ (8004810 <SystemInit+0x128>)
 800476e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004770:	4b24      	ldr	r3, [pc, #144]	@ (8004804 <SystemInit+0x11c>)
 8004772:	4a28      	ldr	r2, [pc, #160]	@ (8004814 <SystemInit+0x12c>)
 8004774:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004776:	4b23      	ldr	r3, [pc, #140]	@ (8004804 <SystemInit+0x11c>)
 8004778:	2200      	movs	r2, #0
 800477a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800477c:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <SystemInit+0x11c>)
 800477e:	4a25      	ldr	r2, [pc, #148]	@ (8004814 <SystemInit+0x12c>)
 8004780:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004782:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <SystemInit+0x11c>)
 8004784:	2200      	movs	r2, #0
 8004786:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004788:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <SystemInit+0x11c>)
 800478a:	4a22      	ldr	r2, [pc, #136]	@ (8004814 <SystemInit+0x12c>)
 800478c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800478e:	4b1d      	ldr	r3, [pc, #116]	@ (8004804 <SystemInit+0x11c>)
 8004790:	2200      	movs	r2, #0
 8004792:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004794:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <SystemInit+0x11c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <SystemInit+0x11c>)
 800479a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800479e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80047a0:	4b18      	ldr	r3, [pc, #96]	@ (8004804 <SystemInit+0x11c>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80047a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004818 <SystemInit+0x130>)
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b1c      	ldr	r3, [pc, #112]	@ (800481c <SystemInit+0x134>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80047b2:	d202      	bcs.n	80047ba <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80047b4:	4b1a      	ldr	r3, [pc, #104]	@ (8004820 <SystemInit+0x138>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80047ba:	4b12      	ldr	r3, [pc, #72]	@ (8004804 <SystemInit+0x11c>)
 80047bc:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047c0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d113      	bne.n	80047f0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80047c8:	4b0e      	ldr	r3, [pc, #56]	@ (8004804 <SystemInit+0x11c>)
 80047ca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047ce:	4a0d      	ldr	r2, [pc, #52]	@ (8004804 <SystemInit+0x11c>)
 80047d0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80047d4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80047d8:	4b12      	ldr	r3, [pc, #72]	@ (8004824 <SystemInit+0x13c>)
 80047da:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80047de:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80047e0:	4b08      	ldr	r3, [pc, #32]	@ (8004804 <SystemInit+0x11c>)
 80047e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80047e6:	4a07      	ldr	r2, [pc, #28]	@ (8004804 <SystemInit+0x11c>)
 80047e8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80047ec:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80047f0:	bf00      	nop
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	e000ed00 	.word	0xe000ed00
 8004800:	52002000 	.word	0x52002000
 8004804:	58024400 	.word	0x58024400
 8004808:	eaf6ed7f 	.word	0xeaf6ed7f
 800480c:	02020200 	.word	0x02020200
 8004810:	01ff0000 	.word	0x01ff0000
 8004814:	01010280 	.word	0x01010280
 8004818:	5c001000 	.word	0x5c001000
 800481c:	ffff0000 	.word	0xffff0000
 8004820:	51008108 	.word	0x51008108
 8004824:	52004000 	.word	0x52004000

08004828 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8004828:	b480      	push	{r7}
 800482a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 800482c:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <ExitRun0Mode+0x2c>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	4a08      	ldr	r2, [pc, #32]	@ (8004854 <ExitRun0Mode+0x2c>)
 8004832:	f043 0302 	orr.w	r3, r3, #2
 8004836:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8004838:	bf00      	nop
 800483a:	4b06      	ldr	r3, [pc, #24]	@ (8004854 <ExitRun0Mode+0x2c>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f9      	beq.n	800483a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8004846:	bf00      	nop
 8004848:	bf00      	nop
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	58024800 	.word	0x58024800

08004858 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800485c:	4b22      	ldr	r3, [pc, #136]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 800485e:	4a23      	ldr	r2, [pc, #140]	@ (80048ec <MX_USART1_UART_Init+0x94>)
 8004860:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004862:	4b21      	ldr	r3, [pc, #132]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 8004864:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004868:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800486a:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 800486c:	2200      	movs	r2, #0
 800486e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004870:	4b1d      	ldr	r3, [pc, #116]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 8004872:	2200      	movs	r2, #0
 8004874:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004876:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 8004878:	2200      	movs	r2, #0
 800487a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800487c:	4b1a      	ldr	r3, [pc, #104]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 800487e:	220c      	movs	r2, #12
 8004880:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004882:	4b19      	ldr	r3, [pc, #100]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 8004884:	2200      	movs	r2, #0
 8004886:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004888:	4b17      	ldr	r3, [pc, #92]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 800488a:	2200      	movs	r2, #0
 800488c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800488e:	4b16      	ldr	r3, [pc, #88]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 8004890:	2200      	movs	r2, #0
 8004892:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004894:	4b14      	ldr	r3, [pc, #80]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 8004896:	2200      	movs	r2, #0
 8004898:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800489a:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 800489c:	2200      	movs	r2, #0
 800489e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80048a0:	4811      	ldr	r0, [pc, #68]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 80048a2:	f004 f88b 	bl	80089bc <HAL_UART_Init>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80048ac:	f7ff fe18 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048b0:	2100      	movs	r1, #0
 80048b2:	480d      	ldr	r0, [pc, #52]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 80048b4:	f005 fd72 	bl	800a39c <HAL_UARTEx_SetTxFifoThreshold>
 80048b8:	4603      	mov	r3, r0
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80048be:	f7ff fe0f 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80048c2:	2100      	movs	r1, #0
 80048c4:	4808      	ldr	r0, [pc, #32]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 80048c6:	f005 fda7 	bl	800a418 <HAL_UARTEx_SetRxFifoThreshold>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80048d0:	f7ff fe06 	bl	80044e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80048d4:	4804      	ldr	r0, [pc, #16]	@ (80048e8 <MX_USART1_UART_Init+0x90>)
 80048d6:	f005 fd28 	bl	800a32a <HAL_UARTEx_DisableFifoMode>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d001      	beq.n	80048e4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80048e0:	f7ff fdfe 	bl	80044e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80048e4:	bf00      	nop
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	240000f4 	.word	0x240000f4
 80048ec:	40011000 	.word	0x40011000

080048f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b0ba      	sub	sp, #232	@ 0xe8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048f8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80048fc:	2200      	movs	r2, #0
 80048fe:	601a      	str	r2, [r3, #0]
 8004900:	605a      	str	r2, [r3, #4]
 8004902:	609a      	str	r2, [r3, #8]
 8004904:	60da      	str	r2, [r3, #12]
 8004906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004908:	f107 0310 	add.w	r3, r7, #16
 800490c:	22c0      	movs	r2, #192	@ 0xc0
 800490e:	2100      	movs	r1, #0
 8004910:	4618      	mov	r0, r3
 8004912:	f006 f858 	bl	800a9c6 <memset>
  if(uartHandle->Instance==USART1)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a2b      	ldr	r2, [pc, #172]	@ (80049c8 <HAL_UART_MspInit+0xd8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d14e      	bne.n	80049be <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004920:	f04f 0201 	mov.w	r2, #1
 8004924:	f04f 0300 	mov.w	r3, #0
 8004928:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800492c:	2300      	movs	r3, #0
 800492e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004932:	f107 0310 	add.w	r3, r7, #16
 8004936:	4618      	mov	r0, r3
 8004938:	f002 f9c4 	bl	8006cc4 <HAL_RCCEx_PeriphCLKConfig>
 800493c:	4603      	mov	r3, r0
 800493e:	2b00      	cmp	r3, #0
 8004940:	d001      	beq.n	8004946 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8004942:	f7ff fdcd 	bl	80044e0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004946:	4b21      	ldr	r3, [pc, #132]	@ (80049cc <HAL_UART_MspInit+0xdc>)
 8004948:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800494c:	4a1f      	ldr	r2, [pc, #124]	@ (80049cc <HAL_UART_MspInit+0xdc>)
 800494e:	f043 0310 	orr.w	r3, r3, #16
 8004952:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004956:	4b1d      	ldr	r3, [pc, #116]	@ (80049cc <HAL_UART_MspInit+0xdc>)
 8004958:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	60fb      	str	r3, [r7, #12]
 8004962:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004964:	4b19      	ldr	r3, [pc, #100]	@ (80049cc <HAL_UART_MspInit+0xdc>)
 8004966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800496a:	4a18      	ldr	r2, [pc, #96]	@ (80049cc <HAL_UART_MspInit+0xdc>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004974:	4b15      	ldr	r3, [pc, #84]	@ (80049cc <HAL_UART_MspInit+0xdc>)
 8004976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800497a:	f003 0301 	and.w	r3, r3, #1
 800497e:	60bb      	str	r3, [r7, #8]
 8004980:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004982:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498a:	2302      	movs	r3, #2
 800498c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004990:	2301      	movs	r3, #1
 8004992:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004996:	2302      	movs	r3, #2
 8004998:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800499c:	2307      	movs	r3, #7
 800499e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80049a6:	4619      	mov	r1, r3
 80049a8:	4809      	ldr	r0, [pc, #36]	@ (80049d0 <HAL_UART_MspInit+0xe0>)
 80049aa:	f000 ff63 	bl	8005874 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80049ae:	2200      	movs	r2, #0
 80049b0:	2100      	movs	r1, #0
 80049b2:	2025      	movs	r0, #37	@ 0x25
 80049b4:	f000 f9c5 	bl	8004d42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80049b8:	2025      	movs	r0, #37	@ 0x25
 80049ba:	f000 f9dc 	bl	8004d76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80049be:	bf00      	nop
 80049c0:	37e8      	adds	r7, #232	@ 0xe8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	40011000 	.word	0x40011000
 80049cc:	58024400 	.word	0x58024400
 80049d0:	58020000 	.word	0x58020000

080049d4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b082      	sub	sp, #8
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80049dc:	1d39      	adds	r1, r7, #4
 80049de:	f04f 33ff 	mov.w	r3, #4294967295
 80049e2:	2201      	movs	r2, #1
 80049e4:	4803      	ldr	r0, [pc, #12]	@ (80049f4 <__io_putchar+0x20>)
 80049e6:	f004 f839 	bl	8008a5c <HAL_UART_Transmit>
    return ch;
 80049ea:	687b      	ldr	r3, [r7, #4]
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3708      	adds	r7, #8
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	240000f4 	.word	0x240000f4

080049f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80049f8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8004a34 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80049fc:	f7ff ff14 	bl	8004828 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004a00:	f7ff fe72 	bl	80046e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004a04:	480c      	ldr	r0, [pc, #48]	@ (8004a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004a06:	490d      	ldr	r1, [pc, #52]	@ (8004a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004a08:	4a0d      	ldr	r2, [pc, #52]	@ (8004a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004a0c:	e002      	b.n	8004a14 <LoopCopyDataInit>

08004a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004a12:	3304      	adds	r3, #4

08004a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a18:	d3f9      	bcc.n	8004a0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8004a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004a1c:	4c0a      	ldr	r4, [pc, #40]	@ (8004a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a20:	e001      	b.n	8004a26 <LoopFillZerobss>

08004a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a24:	3204      	adds	r2, #4

08004a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a28:	d3fb      	bcc.n	8004a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a2a:	f006 f821 	bl	800aa70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004a2e:	f7ff fc17 	bl	8004260 <main>
  bx  lr
 8004a32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004a34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8004a38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004a3c:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 8004a40:	08010170 	.word	0x08010170
  ldr r2, =_sbss
 8004a44:	24000074 	.word	0x24000074
  ldr r4, =_ebss
 8004a48:	240002d8 	.word	0x240002d8

08004a4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a4c:	e7fe      	b.n	8004a4c <ADC3_IRQHandler>
	...

08004a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a56:	2003      	movs	r0, #3
 8004a58:	f000 f968 	bl	8004d2c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004a5c:	f001 ff5c 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 8004a60:	4602      	mov	r2, r0
 8004a62:	4b15      	ldr	r3, [pc, #84]	@ (8004ab8 <HAL_Init+0x68>)
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	0a1b      	lsrs	r3, r3, #8
 8004a68:	f003 030f 	and.w	r3, r3, #15
 8004a6c:	4913      	ldr	r1, [pc, #76]	@ (8004abc <HAL_Init+0x6c>)
 8004a6e:	5ccb      	ldrb	r3, [r1, r3]
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	fa22 f303 	lsr.w	r3, r2, r3
 8004a78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004a7a:	4b0f      	ldr	r3, [pc, #60]	@ (8004ab8 <HAL_Init+0x68>)
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 030f 	and.w	r3, r3, #15
 8004a82:	4a0e      	ldr	r2, [pc, #56]	@ (8004abc <HAL_Init+0x6c>)
 8004a84:	5cd3      	ldrb	r3, [r2, r3]
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a90:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac0 <HAL_Init+0x70>)
 8004a92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004a94:	4a0b      	ldr	r2, [pc, #44]	@ (8004ac4 <HAL_Init+0x74>)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a9a:	200f      	movs	r0, #15
 8004a9c:	f000 f814 	bl	8004ac8 <HAL_InitTick>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e002      	b.n	8004ab0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004aaa:	f7ff fd1f 	bl	80044ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	58024400 	.word	0x58024400
 8004abc:	080100f4 	.word	0x080100f4
 8004ac0:	2400000c 	.word	0x2400000c
 8004ac4:	24000008 	.word	0x24000008

08004ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004ad0:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <HAL_InitTick+0x60>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	e021      	b.n	8004b20 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004adc:	4b13      	ldr	r3, [pc, #76]	@ (8004b2c <HAL_InitTick+0x64>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b11      	ldr	r3, [pc, #68]	@ (8004b28 <HAL_InitTick+0x60>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004aea:	fbb3 f3f1 	udiv	r3, r3, r1
 8004aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 f94d 	bl	8004d92 <HAL_SYSTICK_Config>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e00e      	b.n	8004b20 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b0f      	cmp	r3, #15
 8004b06:	d80a      	bhi.n	8004b1e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b08:	2200      	movs	r2, #0
 8004b0a:	6879      	ldr	r1, [r7, #4]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	f000 f917 	bl	8004d42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b14:	4a06      	ldr	r2, [pc, #24]	@ (8004b30 <HAL_InitTick+0x68>)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	e000      	b.n	8004b20 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	24000014 	.word	0x24000014
 8004b2c:	24000008 	.word	0x24000008
 8004b30:	24000010 	.word	0x24000010

08004b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004b38:	4b06      	ldr	r3, [pc, #24]	@ (8004b54 <HAL_IncTick+0x20>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	461a      	mov	r2, r3
 8004b3e:	4b06      	ldr	r3, [pc, #24]	@ (8004b58 <HAL_IncTick+0x24>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4413      	add	r3, r2
 8004b44:	4a04      	ldr	r2, [pc, #16]	@ (8004b58 <HAL_IncTick+0x24>)
 8004b46:	6013      	str	r3, [r2, #0]
}
 8004b48:	bf00      	nop
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	24000014 	.word	0x24000014
 8004b58:	24000188 	.word	0x24000188

08004b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004b60:	4b03      	ldr	r3, [pc, #12]	@ (8004b70 <HAL_GetTick+0x14>)
 8004b62:	681b      	ldr	r3, [r3, #0]
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	46bd      	mov	sp, r7
 8004b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6c:	4770      	bx	lr
 8004b6e:	bf00      	nop
 8004b70:	24000188 	.word	0x24000188

08004b74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004b78:	4b03      	ldr	r3, [pc, #12]	@ (8004b88 <HAL_GetREVID+0x14>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	0c1b      	lsrs	r3, r3, #16
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	5c001000 	.word	0x5c001000

08004b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b085      	sub	sp, #20
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bcc <__NVIC_SetPriorityGrouping+0x40>)
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004bb4:	4b06      	ldr	r3, [pc, #24]	@ (8004bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bba:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <__NVIC_SetPriorityGrouping+0x40>)
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	60d3      	str	r3, [r2, #12]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00
 8004bd0:	05fa0000 	.word	0x05fa0000

08004bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__NVIC_GetPriorityGrouping+0x18>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	0a1b      	lsrs	r3, r3, #8
 8004bde:	f003 0307 	and.w	r3, r3, #7
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	e000ed00 	.word	0xe000ed00

08004bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004bfa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	db0b      	blt.n	8004c1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c02:	88fb      	ldrh	r3, [r7, #6]
 8004c04:	f003 021f 	and.w	r2, r3, #31
 8004c08:	4907      	ldr	r1, [pc, #28]	@ (8004c28 <__NVIC_EnableIRQ+0x38>)
 8004c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c0e:	095b      	lsrs	r3, r3, #5
 8004c10:	2001      	movs	r0, #1
 8004c12:	fa00 f202 	lsl.w	r2, r0, r2
 8004c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	e000e100 	.word	0xe000e100

08004c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	4603      	mov	r3, r0
 8004c34:	6039      	str	r1, [r7, #0]
 8004c36:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004c38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	db0a      	blt.n	8004c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	b2da      	uxtb	r2, r3
 8004c44:	490c      	ldr	r1, [pc, #48]	@ (8004c78 <__NVIC_SetPriority+0x4c>)
 8004c46:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c4a:	0112      	lsls	r2, r2, #4
 8004c4c:	b2d2      	uxtb	r2, r2
 8004c4e:	440b      	add	r3, r1
 8004c50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c54:	e00a      	b.n	8004c6c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	4908      	ldr	r1, [pc, #32]	@ (8004c7c <__NVIC_SetPriority+0x50>)
 8004c5c:	88fb      	ldrh	r3, [r7, #6]
 8004c5e:	f003 030f 	and.w	r3, r3, #15
 8004c62:	3b04      	subs	r3, #4
 8004c64:	0112      	lsls	r2, r2, #4
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	440b      	add	r3, r1
 8004c6a:	761a      	strb	r2, [r3, #24]
}
 8004c6c:	bf00      	nop
 8004c6e:	370c      	adds	r7, #12
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	e000e100 	.word	0xe000e100
 8004c7c:	e000ed00 	.word	0xe000ed00

08004c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	@ 0x24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	f1c3 0307 	rsb	r3, r3, #7
 8004c9a:	2b04      	cmp	r3, #4
 8004c9c:	bf28      	it	cs
 8004c9e:	2304      	movcs	r3, #4
 8004ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2b06      	cmp	r3, #6
 8004ca8:	d902      	bls.n	8004cb0 <NVIC_EncodePriority+0x30>
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	3b03      	subs	r3, #3
 8004cae:	e000      	b.n	8004cb2 <NVIC_EncodePriority+0x32>
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	fa02 f303 	lsl.w	r3, r2, r3
 8004cbe:	43da      	mvns	r2, r3
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	401a      	ands	r2, r3
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	fa01 f303 	lsl.w	r3, r1, r3
 8004cd2:	43d9      	mvns	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cd8:	4313      	orrs	r3, r2
         );
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3724      	adds	r7, #36	@ 0x24
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
	...

08004ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b082      	sub	sp, #8
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004cf8:	d301      	bcc.n	8004cfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e00f      	b.n	8004d1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8004d28 <SysTick_Config+0x40>)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	3b01      	subs	r3, #1
 8004d04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d06:	210f      	movs	r1, #15
 8004d08:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0c:	f7ff ff8e 	bl	8004c2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d10:	4b05      	ldr	r3, [pc, #20]	@ (8004d28 <SysTick_Config+0x40>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d16:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <SysTick_Config+0x40>)
 8004d18:	2207      	movs	r2, #7
 8004d1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3708      	adds	r7, #8
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	e000e010 	.word	0xe000e010

08004d2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ff29 	bl	8004b8c <__NVIC_SetPriorityGrouping>
}
 8004d3a:	bf00      	nop
 8004d3c:	3708      	adds	r7, #8
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b086      	sub	sp, #24
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	4603      	mov	r3, r0
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	607a      	str	r2, [r7, #4]
 8004d4e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d50:	f7ff ff40 	bl	8004bd4 <__NVIC_GetPriorityGrouping>
 8004d54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	68b9      	ldr	r1, [r7, #8]
 8004d5a:	6978      	ldr	r0, [r7, #20]
 8004d5c:	f7ff ff90 	bl	8004c80 <NVIC_EncodePriority>
 8004d60:	4602      	mov	r2, r0
 8004d62:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff5f 	bl	8004c2c <__NVIC_SetPriority>
}
 8004d6e:	bf00      	nop
 8004d70:	3718      	adds	r7, #24
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7ff ff33 	bl	8004bf0 <__NVIC_EnableIRQ>
}
 8004d8a:	bf00      	nop
 8004d8c:	3708      	adds	r7, #8
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}

08004d92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d92:	b580      	push	{r7, lr}
 8004d94:	b082      	sub	sp, #8
 8004d96:	af00      	add	r7, sp, #0
 8004d98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f7ff ffa4 	bl	8004ce8 <SysTick_Config>
 8004da0:	4603      	mov	r3, r0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004db4:	f7ff fed2 	bl	8004b5c <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e2dc      	b.n	800537e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d008      	beq.n	8004de2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2280      	movs	r2, #128	@ 0x80
 8004dd4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e2cd      	b.n	800537e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a76      	ldr	r2, [pc, #472]	@ (8004fc0 <HAL_DMA_Abort+0x214>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d04a      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a74      	ldr	r2, [pc, #464]	@ (8004fc4 <HAL_DMA_Abort+0x218>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d045      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	4a73      	ldr	r2, [pc, #460]	@ (8004fc8 <HAL_DMA_Abort+0x21c>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d040      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a71      	ldr	r2, [pc, #452]	@ (8004fcc <HAL_DMA_Abort+0x220>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d03b      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a70      	ldr	r2, [pc, #448]	@ (8004fd0 <HAL_DMA_Abort+0x224>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d036      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a6e      	ldr	r2, [pc, #440]	@ (8004fd4 <HAL_DMA_Abort+0x228>)
 8004e1a:	4293      	cmp	r3, r2
 8004e1c:	d031      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a6d      	ldr	r2, [pc, #436]	@ (8004fd8 <HAL_DMA_Abort+0x22c>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d02c      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8004fdc <HAL_DMA_Abort+0x230>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d027      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a6a      	ldr	r2, [pc, #424]	@ (8004fe0 <HAL_DMA_Abort+0x234>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d022      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a68      	ldr	r2, [pc, #416]	@ (8004fe4 <HAL_DMA_Abort+0x238>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d01d      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a67      	ldr	r2, [pc, #412]	@ (8004fe8 <HAL_DMA_Abort+0x23c>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d018      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a65      	ldr	r2, [pc, #404]	@ (8004fec <HAL_DMA_Abort+0x240>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d013      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a64      	ldr	r2, [pc, #400]	@ (8004ff0 <HAL_DMA_Abort+0x244>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d00e      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a62      	ldr	r2, [pc, #392]	@ (8004ff4 <HAL_DMA_Abort+0x248>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d009      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a61      	ldr	r2, [pc, #388]	@ (8004ff8 <HAL_DMA_Abort+0x24c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d004      	beq.n	8004e82 <HAL_DMA_Abort+0xd6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a5f      	ldr	r2, [pc, #380]	@ (8004ffc <HAL_DMA_Abort+0x250>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d101      	bne.n	8004e86 <HAL_DMA_Abort+0xda>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_DMA_Abort+0xdc>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d013      	beq.n	8004eb4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 021e 	bic.w	r2, r2, #30
 8004e9a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	695a      	ldr	r2, [r3, #20]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004eaa:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	617b      	str	r3, [r7, #20]
 8004eb2:	e00a      	b.n	8004eca <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f022 020e 	bic.w	r2, r2, #14
 8004ec2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a3c      	ldr	r2, [pc, #240]	@ (8004fc0 <HAL_DMA_Abort+0x214>)
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d072      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fc4 <HAL_DMA_Abort+0x218>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d06d      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a39      	ldr	r2, [pc, #228]	@ (8004fc8 <HAL_DMA_Abort+0x21c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d068      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a37      	ldr	r2, [pc, #220]	@ (8004fcc <HAL_DMA_Abort+0x220>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d063      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a36      	ldr	r2, [pc, #216]	@ (8004fd0 <HAL_DMA_Abort+0x224>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d05e      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a34      	ldr	r2, [pc, #208]	@ (8004fd4 <HAL_DMA_Abort+0x228>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d059      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a33      	ldr	r2, [pc, #204]	@ (8004fd8 <HAL_DMA_Abort+0x22c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d054      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a31      	ldr	r2, [pc, #196]	@ (8004fdc <HAL_DMA_Abort+0x230>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d04f      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a30      	ldr	r2, [pc, #192]	@ (8004fe0 <HAL_DMA_Abort+0x234>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d04a      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a2e      	ldr	r2, [pc, #184]	@ (8004fe4 <HAL_DMA_Abort+0x238>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d045      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe8 <HAL_DMA_Abort+0x23c>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d040      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fec <HAL_DMA_Abort+0x240>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d03b      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a2a      	ldr	r2, [pc, #168]	@ (8004ff0 <HAL_DMA_Abort+0x244>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d036      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a28      	ldr	r2, [pc, #160]	@ (8004ff4 <HAL_DMA_Abort+0x248>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d031      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a27      	ldr	r2, [pc, #156]	@ (8004ff8 <HAL_DMA_Abort+0x24c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d02c      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a25      	ldr	r2, [pc, #148]	@ (8004ffc <HAL_DMA_Abort+0x250>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d027      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a24      	ldr	r2, [pc, #144]	@ (8005000 <HAL_DMA_Abort+0x254>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d022      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a22      	ldr	r2, [pc, #136]	@ (8005004 <HAL_DMA_Abort+0x258>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d01d      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a21      	ldr	r2, [pc, #132]	@ (8005008 <HAL_DMA_Abort+0x25c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d018      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1f      	ldr	r2, [pc, #124]	@ (800500c <HAL_DMA_Abort+0x260>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d013      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a1e      	ldr	r2, [pc, #120]	@ (8005010 <HAL_DMA_Abort+0x264>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d00e      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a1c      	ldr	r2, [pc, #112]	@ (8005014 <HAL_DMA_Abort+0x268>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d009      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a1b      	ldr	r2, [pc, #108]	@ (8005018 <HAL_DMA_Abort+0x26c>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d004      	beq.n	8004fba <HAL_DMA_Abort+0x20e>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a19      	ldr	r2, [pc, #100]	@ (800501c <HAL_DMA_Abort+0x270>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d132      	bne.n	8005020 <HAL_DMA_Abort+0x274>
 8004fba:	2301      	movs	r3, #1
 8004fbc:	e031      	b.n	8005022 <HAL_DMA_Abort+0x276>
 8004fbe:	bf00      	nop
 8004fc0:	40020010 	.word	0x40020010
 8004fc4:	40020028 	.word	0x40020028
 8004fc8:	40020040 	.word	0x40020040
 8004fcc:	40020058 	.word	0x40020058
 8004fd0:	40020070 	.word	0x40020070
 8004fd4:	40020088 	.word	0x40020088
 8004fd8:	400200a0 	.word	0x400200a0
 8004fdc:	400200b8 	.word	0x400200b8
 8004fe0:	40020410 	.word	0x40020410
 8004fe4:	40020428 	.word	0x40020428
 8004fe8:	40020440 	.word	0x40020440
 8004fec:	40020458 	.word	0x40020458
 8004ff0:	40020470 	.word	0x40020470
 8004ff4:	40020488 	.word	0x40020488
 8004ff8:	400204a0 	.word	0x400204a0
 8004ffc:	400204b8 	.word	0x400204b8
 8005000:	58025408 	.word	0x58025408
 8005004:	5802541c 	.word	0x5802541c
 8005008:	58025430 	.word	0x58025430
 800500c:	58025444 	.word	0x58025444
 8005010:	58025458 	.word	0x58025458
 8005014:	5802546c 	.word	0x5802546c
 8005018:	58025480 	.word	0x58025480
 800501c:	58025494 	.word	0x58025494
 8005020:	2300      	movs	r3, #0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d007      	beq.n	8005036 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800502a:	681a      	ldr	r2, [r3, #0]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005030:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005034:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a6d      	ldr	r2, [pc, #436]	@ (80051f0 <HAL_DMA_Abort+0x444>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d04a      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a6b      	ldr	r2, [pc, #428]	@ (80051f4 <HAL_DMA_Abort+0x448>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d045      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a6a      	ldr	r2, [pc, #424]	@ (80051f8 <HAL_DMA_Abort+0x44c>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d040      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a68      	ldr	r2, [pc, #416]	@ (80051fc <HAL_DMA_Abort+0x450>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d03b      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a67      	ldr	r2, [pc, #412]	@ (8005200 <HAL_DMA_Abort+0x454>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d036      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a65      	ldr	r2, [pc, #404]	@ (8005204 <HAL_DMA_Abort+0x458>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d031      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a64      	ldr	r2, [pc, #400]	@ (8005208 <HAL_DMA_Abort+0x45c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d02c      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a62      	ldr	r2, [pc, #392]	@ (800520c <HAL_DMA_Abort+0x460>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d027      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a61      	ldr	r2, [pc, #388]	@ (8005210 <HAL_DMA_Abort+0x464>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d022      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a5f      	ldr	r2, [pc, #380]	@ (8005214 <HAL_DMA_Abort+0x468>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d01d      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a5e      	ldr	r2, [pc, #376]	@ (8005218 <HAL_DMA_Abort+0x46c>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d018      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a5c      	ldr	r2, [pc, #368]	@ (800521c <HAL_DMA_Abort+0x470>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d013      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a5b      	ldr	r2, [pc, #364]	@ (8005220 <HAL_DMA_Abort+0x474>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00e      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a59      	ldr	r2, [pc, #356]	@ (8005224 <HAL_DMA_Abort+0x478>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d009      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a58      	ldr	r2, [pc, #352]	@ (8005228 <HAL_DMA_Abort+0x47c>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d004      	beq.n	80050d6 <HAL_DMA_Abort+0x32a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a56      	ldr	r2, [pc, #344]	@ (800522c <HAL_DMA_Abort+0x480>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d108      	bne.n	80050e8 <HAL_DMA_Abort+0x33c>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
 80050e6:	e007      	b.n	80050f8 <HAL_DMA_Abort+0x34c>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80050f8:	e013      	b.n	8005122 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80050fa:	f7ff fd2f 	bl	8004b5c <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	2b05      	cmp	r3, #5
 8005106:	d90c      	bls.n	8005122 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2220      	movs	r2, #32
 800510c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2203      	movs	r2, #3
 8005112:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e12d      	b.n	800537e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0301 	and.w	r3, r3, #1
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1e5      	bne.n	80050fa <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a2f      	ldr	r2, [pc, #188]	@ (80051f0 <HAL_DMA_Abort+0x444>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d04a      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a2d      	ldr	r2, [pc, #180]	@ (80051f4 <HAL_DMA_Abort+0x448>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d045      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2c      	ldr	r2, [pc, #176]	@ (80051f8 <HAL_DMA_Abort+0x44c>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d040      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2a      	ldr	r2, [pc, #168]	@ (80051fc <HAL_DMA_Abort+0x450>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d03b      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <HAL_DMA_Abort+0x454>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d036      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a27      	ldr	r2, [pc, #156]	@ (8005204 <HAL_DMA_Abort+0x458>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d031      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <HAL_DMA_Abort+0x45c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d02c      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a24      	ldr	r2, [pc, #144]	@ (800520c <HAL_DMA_Abort+0x460>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d027      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a23      	ldr	r2, [pc, #140]	@ (8005210 <HAL_DMA_Abort+0x464>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d022      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <HAL_DMA_Abort+0x468>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d01d      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a20      	ldr	r2, [pc, #128]	@ (8005218 <HAL_DMA_Abort+0x46c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d018      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1e      	ldr	r2, [pc, #120]	@ (800521c <HAL_DMA_Abort+0x470>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d013      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_DMA_Abort+0x474>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d00e      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005224 <HAL_DMA_Abort+0x478>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d009      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1a      	ldr	r2, [pc, #104]	@ (8005228 <HAL_DMA_Abort+0x47c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d004      	beq.n	80051ce <HAL_DMA_Abort+0x422>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a18      	ldr	r2, [pc, #96]	@ (800522c <HAL_DMA_Abort+0x480>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d101      	bne.n	80051d2 <HAL_DMA_Abort+0x426>
 80051ce:	2301      	movs	r3, #1
 80051d0:	e000      	b.n	80051d4 <HAL_DMA_Abort+0x428>
 80051d2:	2300      	movs	r3, #0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d02b      	beq.n	8005230 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051dc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	223f      	movs	r2, #63	@ 0x3f
 80051e8:	409a      	lsls	r2, r3
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	609a      	str	r2, [r3, #8]
 80051ee:	e02a      	b.n	8005246 <HAL_DMA_Abort+0x49a>
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005234:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800523a:	f003 031f 	and.w	r3, r3, #31
 800523e:	2201      	movs	r2, #1
 8005240:	409a      	lsls	r2, r3
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a4f      	ldr	r2, [pc, #316]	@ (8005388 <HAL_DMA_Abort+0x5dc>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d072      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a4d      	ldr	r2, [pc, #308]	@ (800538c <HAL_DMA_Abort+0x5e0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d06d      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a4c      	ldr	r2, [pc, #304]	@ (8005390 <HAL_DMA_Abort+0x5e4>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d068      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a4a      	ldr	r2, [pc, #296]	@ (8005394 <HAL_DMA_Abort+0x5e8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d063      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a49      	ldr	r2, [pc, #292]	@ (8005398 <HAL_DMA_Abort+0x5ec>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d05e      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a47      	ldr	r2, [pc, #284]	@ (800539c <HAL_DMA_Abort+0x5f0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d059      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a46      	ldr	r2, [pc, #280]	@ (80053a0 <HAL_DMA_Abort+0x5f4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d054      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a44      	ldr	r2, [pc, #272]	@ (80053a4 <HAL_DMA_Abort+0x5f8>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d04f      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a43      	ldr	r2, [pc, #268]	@ (80053a8 <HAL_DMA_Abort+0x5fc>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d04a      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a41      	ldr	r2, [pc, #260]	@ (80053ac <HAL_DMA_Abort+0x600>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d045      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a40      	ldr	r2, [pc, #256]	@ (80053b0 <HAL_DMA_Abort+0x604>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d040      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a3e      	ldr	r2, [pc, #248]	@ (80053b4 <HAL_DMA_Abort+0x608>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d03b      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3d      	ldr	r2, [pc, #244]	@ (80053b8 <HAL_DMA_Abort+0x60c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d036      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a3b      	ldr	r2, [pc, #236]	@ (80053bc <HAL_DMA_Abort+0x610>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d031      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a3a      	ldr	r2, [pc, #232]	@ (80053c0 <HAL_DMA_Abort+0x614>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d02c      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a38      	ldr	r2, [pc, #224]	@ (80053c4 <HAL_DMA_Abort+0x618>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d027      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a37      	ldr	r2, [pc, #220]	@ (80053c8 <HAL_DMA_Abort+0x61c>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a35      	ldr	r2, [pc, #212]	@ (80053cc <HAL_DMA_Abort+0x620>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d01d      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a34      	ldr	r2, [pc, #208]	@ (80053d0 <HAL_DMA_Abort+0x624>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a32      	ldr	r2, [pc, #200]	@ (80053d4 <HAL_DMA_Abort+0x628>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a31      	ldr	r2, [pc, #196]	@ (80053d8 <HAL_DMA_Abort+0x62c>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2f      	ldr	r2, [pc, #188]	@ (80053dc <HAL_DMA_Abort+0x630>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2e      	ldr	r2, [pc, #184]	@ (80053e0 <HAL_DMA_Abort+0x634>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_DMA_Abort+0x58a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2c      	ldr	r2, [pc, #176]	@ (80053e4 <HAL_DMA_Abort+0x638>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d101      	bne.n	800533a <HAL_DMA_Abort+0x58e>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_DMA_Abort+0x590>
 800533a:	2300      	movs	r3, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d015      	beq.n	800536c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005348:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00c      	beq.n	800536c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800535c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005360:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800536a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2201      	movs	r2, #1
 8005370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800537c:	2300      	movs	r3, #0
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	40020010 	.word	0x40020010
 800538c:	40020028 	.word	0x40020028
 8005390:	40020040 	.word	0x40020040
 8005394:	40020058 	.word	0x40020058
 8005398:	40020070 	.word	0x40020070
 800539c:	40020088 	.word	0x40020088
 80053a0:	400200a0 	.word	0x400200a0
 80053a4:	400200b8 	.word	0x400200b8
 80053a8:	40020410 	.word	0x40020410
 80053ac:	40020428 	.word	0x40020428
 80053b0:	40020440 	.word	0x40020440
 80053b4:	40020458 	.word	0x40020458
 80053b8:	40020470 	.word	0x40020470
 80053bc:	40020488 	.word	0x40020488
 80053c0:	400204a0 	.word	0x400204a0
 80053c4:	400204b8 	.word	0x400204b8
 80053c8:	58025408 	.word	0x58025408
 80053cc:	5802541c 	.word	0x5802541c
 80053d0:	58025430 	.word	0x58025430
 80053d4:	58025444 	.word	0x58025444
 80053d8:	58025458 	.word	0x58025458
 80053dc:	5802546c 	.word	0x5802546c
 80053e0:	58025480 	.word	0x58025480
 80053e4:	58025494 	.word	0x58025494

080053e8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b084      	sub	sp, #16
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d101      	bne.n	80053fa <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	e237      	b.n	800586a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b02      	cmp	r3, #2
 8005404:	d004      	beq.n	8005410 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2280      	movs	r2, #128	@ 0x80
 800540a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	e22c      	b.n	800586a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a5c      	ldr	r2, [pc, #368]	@ (8005588 <HAL_DMA_Abort_IT+0x1a0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d04a      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a5b      	ldr	r2, [pc, #364]	@ (800558c <HAL_DMA_Abort_IT+0x1a4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d045      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a59      	ldr	r2, [pc, #356]	@ (8005590 <HAL_DMA_Abort_IT+0x1a8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d040      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a58      	ldr	r2, [pc, #352]	@ (8005594 <HAL_DMA_Abort_IT+0x1ac>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d03b      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a56      	ldr	r2, [pc, #344]	@ (8005598 <HAL_DMA_Abort_IT+0x1b0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d036      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a55      	ldr	r2, [pc, #340]	@ (800559c <HAL_DMA_Abort_IT+0x1b4>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d031      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a53      	ldr	r2, [pc, #332]	@ (80055a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d02c      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a52      	ldr	r2, [pc, #328]	@ (80055a4 <HAL_DMA_Abort_IT+0x1bc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d027      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a50      	ldr	r2, [pc, #320]	@ (80055a8 <HAL_DMA_Abort_IT+0x1c0>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d022      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a4f      	ldr	r2, [pc, #316]	@ (80055ac <HAL_DMA_Abort_IT+0x1c4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d01d      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a4d      	ldr	r2, [pc, #308]	@ (80055b0 <HAL_DMA_Abort_IT+0x1c8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d018      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a4c      	ldr	r2, [pc, #304]	@ (80055b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d013      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a4a      	ldr	r2, [pc, #296]	@ (80055b8 <HAL_DMA_Abort_IT+0x1d0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00e      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a49      	ldr	r2, [pc, #292]	@ (80055bc <HAL_DMA_Abort_IT+0x1d4>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d009      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a47      	ldr	r2, [pc, #284]	@ (80055c0 <HAL_DMA_Abort_IT+0x1d8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d004      	beq.n	80054b0 <HAL_DMA_Abort_IT+0xc8>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a46      	ldr	r2, [pc, #280]	@ (80055c4 <HAL_DMA_Abort_IT+0x1dc>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d101      	bne.n	80054b4 <HAL_DMA_Abort_IT+0xcc>
 80054b0:	2301      	movs	r3, #1
 80054b2:	e000      	b.n	80054b6 <HAL_DMA_Abort_IT+0xce>
 80054b4:	2300      	movs	r3, #0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 8086 	beq.w	80055c8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2204      	movs	r2, #4
 80054c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a2f      	ldr	r2, [pc, #188]	@ (8005588 <HAL_DMA_Abort_IT+0x1a0>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04a      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a2e      	ldr	r2, [pc, #184]	@ (800558c <HAL_DMA_Abort_IT+0x1a4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d045      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005590 <HAL_DMA_Abort_IT+0x1a8>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d040      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005594 <HAL_DMA_Abort_IT+0x1ac>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d03b      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a29      	ldr	r2, [pc, #164]	@ (8005598 <HAL_DMA_Abort_IT+0x1b0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d036      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a28      	ldr	r2, [pc, #160]	@ (800559c <HAL_DMA_Abort_IT+0x1b4>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d031      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a26      	ldr	r2, [pc, #152]	@ (80055a0 <HAL_DMA_Abort_IT+0x1b8>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d02c      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a25      	ldr	r2, [pc, #148]	@ (80055a4 <HAL_DMA_Abort_IT+0x1bc>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d027      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a23      	ldr	r2, [pc, #140]	@ (80055a8 <HAL_DMA_Abort_IT+0x1c0>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d022      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a22      	ldr	r2, [pc, #136]	@ (80055ac <HAL_DMA_Abort_IT+0x1c4>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d01d      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a20      	ldr	r2, [pc, #128]	@ (80055b0 <HAL_DMA_Abort_IT+0x1c8>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d018      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a1f      	ldr	r2, [pc, #124]	@ (80055b4 <HAL_DMA_Abort_IT+0x1cc>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d013      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a1d      	ldr	r2, [pc, #116]	@ (80055b8 <HAL_DMA_Abort_IT+0x1d0>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00e      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a1c      	ldr	r2, [pc, #112]	@ (80055bc <HAL_DMA_Abort_IT+0x1d4>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d009      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a1a      	ldr	r2, [pc, #104]	@ (80055c0 <HAL_DMA_Abort_IT+0x1d8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_DMA_Abort_IT+0x17c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a19      	ldr	r2, [pc, #100]	@ (80055c4 <HAL_DMA_Abort_IT+0x1dc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d108      	bne.n	8005576 <HAL_DMA_Abort_IT+0x18e>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0201 	bic.w	r2, r2, #1
 8005572:	601a      	str	r2, [r3, #0]
 8005574:	e178      	b.n	8005868 <HAL_DMA_Abort_IT+0x480>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f022 0201 	bic.w	r2, r2, #1
 8005584:	601a      	str	r2, [r3, #0]
 8005586:	e16f      	b.n	8005868 <HAL_DMA_Abort_IT+0x480>
 8005588:	40020010 	.word	0x40020010
 800558c:	40020028 	.word	0x40020028
 8005590:	40020040 	.word	0x40020040
 8005594:	40020058 	.word	0x40020058
 8005598:	40020070 	.word	0x40020070
 800559c:	40020088 	.word	0x40020088
 80055a0:	400200a0 	.word	0x400200a0
 80055a4:	400200b8 	.word	0x400200b8
 80055a8:	40020410 	.word	0x40020410
 80055ac:	40020428 	.word	0x40020428
 80055b0:	40020440 	.word	0x40020440
 80055b4:	40020458 	.word	0x40020458
 80055b8:	40020470 	.word	0x40020470
 80055bc:	40020488 	.word	0x40020488
 80055c0:	400204a0 	.word	0x400204a0
 80055c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 020e 	bic.w	r2, r2, #14
 80055d6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a6c      	ldr	r2, [pc, #432]	@ (8005790 <HAL_DMA_Abort_IT+0x3a8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d04a      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a6b      	ldr	r2, [pc, #428]	@ (8005794 <HAL_DMA_Abort_IT+0x3ac>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d045      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a69      	ldr	r2, [pc, #420]	@ (8005798 <HAL_DMA_Abort_IT+0x3b0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d040      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a68      	ldr	r2, [pc, #416]	@ (800579c <HAL_DMA_Abort_IT+0x3b4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d03b      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a66      	ldr	r2, [pc, #408]	@ (80057a0 <HAL_DMA_Abort_IT+0x3b8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d036      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a65      	ldr	r2, [pc, #404]	@ (80057a4 <HAL_DMA_Abort_IT+0x3bc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d031      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a63      	ldr	r2, [pc, #396]	@ (80057a8 <HAL_DMA_Abort_IT+0x3c0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d02c      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a62      	ldr	r2, [pc, #392]	@ (80057ac <HAL_DMA_Abort_IT+0x3c4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d027      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a60      	ldr	r2, [pc, #384]	@ (80057b0 <HAL_DMA_Abort_IT+0x3c8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d022      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a5f      	ldr	r2, [pc, #380]	@ (80057b4 <HAL_DMA_Abort_IT+0x3cc>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d01d      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a5d      	ldr	r2, [pc, #372]	@ (80057b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d018      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a5c      	ldr	r2, [pc, #368]	@ (80057bc <HAL_DMA_Abort_IT+0x3d4>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a5a      	ldr	r2, [pc, #360]	@ (80057c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00e      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4a59      	ldr	r2, [pc, #356]	@ (80057c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d009      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4a57      	ldr	r2, [pc, #348]	@ (80057c8 <HAL_DMA_Abort_IT+0x3e0>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d004      	beq.n	8005678 <HAL_DMA_Abort_IT+0x290>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a56      	ldr	r2, [pc, #344]	@ (80057cc <HAL_DMA_Abort_IT+0x3e4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <HAL_DMA_Abort_IT+0x2a2>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f022 0201 	bic.w	r2, r2, #1
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e007      	b.n	800569a <HAL_DMA_Abort_IT+0x2b2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f022 0201 	bic.w	r2, r2, #1
 8005698:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a3c      	ldr	r2, [pc, #240]	@ (8005790 <HAL_DMA_Abort_IT+0x3a8>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d072      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a3a      	ldr	r2, [pc, #232]	@ (8005794 <HAL_DMA_Abort_IT+0x3ac>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d06d      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a39      	ldr	r2, [pc, #228]	@ (8005798 <HAL_DMA_Abort_IT+0x3b0>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d068      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a37      	ldr	r2, [pc, #220]	@ (800579c <HAL_DMA_Abort_IT+0x3b4>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d063      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a36      	ldr	r2, [pc, #216]	@ (80057a0 <HAL_DMA_Abort_IT+0x3b8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d05e      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a34      	ldr	r2, [pc, #208]	@ (80057a4 <HAL_DMA_Abort_IT+0x3bc>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d059      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a33      	ldr	r2, [pc, #204]	@ (80057a8 <HAL_DMA_Abort_IT+0x3c0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d054      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a31      	ldr	r2, [pc, #196]	@ (80057ac <HAL_DMA_Abort_IT+0x3c4>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d04f      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a30      	ldr	r2, [pc, #192]	@ (80057b0 <HAL_DMA_Abort_IT+0x3c8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d04a      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a2e      	ldr	r2, [pc, #184]	@ (80057b4 <HAL_DMA_Abort_IT+0x3cc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d045      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a2d      	ldr	r2, [pc, #180]	@ (80057b8 <HAL_DMA_Abort_IT+0x3d0>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d040      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a2b      	ldr	r2, [pc, #172]	@ (80057bc <HAL_DMA_Abort_IT+0x3d4>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d03b      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a2a      	ldr	r2, [pc, #168]	@ (80057c0 <HAL_DMA_Abort_IT+0x3d8>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d036      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a28      	ldr	r2, [pc, #160]	@ (80057c4 <HAL_DMA_Abort_IT+0x3dc>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d031      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a27      	ldr	r2, [pc, #156]	@ (80057c8 <HAL_DMA_Abort_IT+0x3e0>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d02c      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a25      	ldr	r2, [pc, #148]	@ (80057cc <HAL_DMA_Abort_IT+0x3e4>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d027      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a24      	ldr	r2, [pc, #144]	@ (80057d0 <HAL_DMA_Abort_IT+0x3e8>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d022      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a22      	ldr	r2, [pc, #136]	@ (80057d4 <HAL_DMA_Abort_IT+0x3ec>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d01d      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a21      	ldr	r2, [pc, #132]	@ (80057d8 <HAL_DMA_Abort_IT+0x3f0>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d018      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a1f      	ldr	r2, [pc, #124]	@ (80057dc <HAL_DMA_Abort_IT+0x3f4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d013      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <HAL_DMA_Abort_IT+0x3f8>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d00e      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a1c      	ldr	r2, [pc, #112]	@ (80057e4 <HAL_DMA_Abort_IT+0x3fc>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d009      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <HAL_DMA_Abort_IT+0x400>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <HAL_DMA_Abort_IT+0x3a2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a19      	ldr	r2, [pc, #100]	@ (80057ec <HAL_DMA_Abort_IT+0x404>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d132      	bne.n	80057f0 <HAL_DMA_Abort_IT+0x408>
 800578a:	2301      	movs	r3, #1
 800578c:	e031      	b.n	80057f2 <HAL_DMA_Abort_IT+0x40a>
 800578e:	bf00      	nop
 8005790:	40020010 	.word	0x40020010
 8005794:	40020028 	.word	0x40020028
 8005798:	40020040 	.word	0x40020040
 800579c:	40020058 	.word	0x40020058
 80057a0:	40020070 	.word	0x40020070
 80057a4:	40020088 	.word	0x40020088
 80057a8:	400200a0 	.word	0x400200a0
 80057ac:	400200b8 	.word	0x400200b8
 80057b0:	40020410 	.word	0x40020410
 80057b4:	40020428 	.word	0x40020428
 80057b8:	40020440 	.word	0x40020440
 80057bc:	40020458 	.word	0x40020458
 80057c0:	40020470 	.word	0x40020470
 80057c4:	40020488 	.word	0x40020488
 80057c8:	400204a0 	.word	0x400204a0
 80057cc:	400204b8 	.word	0x400204b8
 80057d0:	58025408 	.word	0x58025408
 80057d4:	5802541c 	.word	0x5802541c
 80057d8:	58025430 	.word	0x58025430
 80057dc:	58025444 	.word	0x58025444
 80057e0:	58025458 	.word	0x58025458
 80057e4:	5802546c 	.word	0x5802546c
 80057e8:	58025480 	.word	0x58025480
 80057ec:	58025494 	.word	0x58025494
 80057f0:	2300      	movs	r3, #0
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d028      	beq.n	8005848 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005800:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005804:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800580a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005810:	f003 031f 	and.w	r3, r3, #31
 8005814:	2201      	movs	r2, #1
 8005816:	409a      	lsls	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005820:	687a      	ldr	r2, [r7, #4]
 8005822:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005824:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00c      	beq.n	8005848 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005838:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800583c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005846:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2201      	movs	r2, #1
 800584c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3710      	adds	r7, #16
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop

08005874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8005874:	b480      	push	{r7}
 8005876:	b089      	sub	sp, #36	@ 0x24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800587e:	2300      	movs	r3, #0
 8005880:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005882:	4b89      	ldr	r3, [pc, #548]	@ (8005aa8 <HAL_GPIO_Init+0x234>)
 8005884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005886:	e194      	b.n	8005bb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	2101      	movs	r1, #1
 800588e:	69fb      	ldr	r3, [r7, #28]
 8005890:	fa01 f303 	lsl.w	r3, r1, r3
 8005894:	4013      	ands	r3, r2
 8005896:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005898:	693b      	ldr	r3, [r7, #16]
 800589a:	2b00      	cmp	r3, #0
 800589c:	f000 8186 	beq.w	8005bac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d005      	beq.n	80058b8 <HAL_GPIO_Init+0x44>
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f003 0303 	and.w	r3, r3, #3
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d130      	bne.n	800591a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	2203      	movs	r2, #3
 80058c4:	fa02 f303 	lsl.w	r3, r2, r3
 80058c8:	43db      	mvns	r3, r3
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	4013      	ands	r3, r2
 80058ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	68da      	ldr	r2, [r3, #12]
 80058d4:	69fb      	ldr	r3, [r7, #28]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fa02 f303 	lsl.w	r3, r2, r3
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	4313      	orrs	r3, r2
 80058e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69ba      	ldr	r2, [r7, #24]
 80058e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80058ee:	2201      	movs	r2, #1
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	fa02 f303 	lsl.w	r3, r2, r3
 80058f6:	43db      	mvns	r3, r3
 80058f8:	69ba      	ldr	r2, [r7, #24]
 80058fa:	4013      	ands	r3, r2
 80058fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	091b      	lsrs	r3, r3, #4
 8005904:	f003 0201 	and.w	r2, r3, #1
 8005908:	69fb      	ldr	r3, [r7, #28]
 800590a:	fa02 f303 	lsl.w	r3, r2, r3
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4313      	orrs	r3, r2
 8005912:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	69ba      	ldr	r2, [r7, #24]
 8005918:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	2b03      	cmp	r3, #3
 8005924:	d017      	beq.n	8005956 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	2203      	movs	r2, #3
 8005932:	fa02 f303 	lsl.w	r3, r2, r3
 8005936:	43db      	mvns	r3, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	4013      	ands	r3, r2
 800593c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	689a      	ldr	r2, [r3, #8]
 8005942:	69fb      	ldr	r3, [r7, #28]
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	fa02 f303 	lsl.w	r3, r2, r3
 800594a:	69ba      	ldr	r2, [r7, #24]
 800594c:	4313      	orrs	r3, r2
 800594e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	69ba      	ldr	r2, [r7, #24]
 8005954:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b02      	cmp	r3, #2
 8005960:	d123      	bne.n	80059aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	08da      	lsrs	r2, r3, #3
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	3208      	adds	r2, #8
 800596a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800596e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f003 0307 	and.w	r3, r3, #7
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	220f      	movs	r2, #15
 800597a:	fa02 f303 	lsl.w	r3, r2, r3
 800597e:	43db      	mvns	r3, r3
 8005980:	69ba      	ldr	r2, [r7, #24]
 8005982:	4013      	ands	r3, r2
 8005984:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	691a      	ldr	r2, [r3, #16]
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	f003 0307 	and.w	r3, r3, #7
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	fa02 f303 	lsl.w	r3, r2, r3
 8005996:	69ba      	ldr	r2, [r7, #24]
 8005998:	4313      	orrs	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	08da      	lsrs	r2, r3, #3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	3208      	adds	r2, #8
 80059a4:	69b9      	ldr	r1, [r7, #24]
 80059a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	2203      	movs	r2, #3
 80059b6:	fa02 f303 	lsl.w	r3, r2, r3
 80059ba:	43db      	mvns	r3, r3
 80059bc:	69ba      	ldr	r2, [r7, #24]
 80059be:	4013      	ands	r3, r2
 80059c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f003 0203 	and.w	r2, r3, #3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	fa02 f303 	lsl.w	r3, r2, r3
 80059d2:	69ba      	ldr	r2, [r7, #24]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	69ba      	ldr	r2, [r7, #24]
 80059dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f000 80e0 	beq.w	8005bac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059ec:	4b2f      	ldr	r3, [pc, #188]	@ (8005aac <HAL_GPIO_Init+0x238>)
 80059ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80059f2:	4a2e      	ldr	r2, [pc, #184]	@ (8005aac <HAL_GPIO_Init+0x238>)
 80059f4:	f043 0302 	orr.w	r3, r3, #2
 80059f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80059fc:	4b2b      	ldr	r3, [pc, #172]	@ (8005aac <HAL_GPIO_Init+0x238>)
 80059fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005a02:	f003 0302 	and.w	r3, r3, #2
 8005a06:	60fb      	str	r3, [r7, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005a0a:	4a29      	ldr	r2, [pc, #164]	@ (8005ab0 <HAL_GPIO_Init+0x23c>)
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	3302      	adds	r3, #2
 8005a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005a18:	69fb      	ldr	r3, [r7, #28]
 8005a1a:	f003 0303 	and.w	r3, r3, #3
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	220f      	movs	r2, #15
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43db      	mvns	r3, r3
 8005a28:	69ba      	ldr	r2, [r7, #24]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a20      	ldr	r2, [pc, #128]	@ (8005ab4 <HAL_GPIO_Init+0x240>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d052      	beq.n	8005adc <HAL_GPIO_Init+0x268>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1f      	ldr	r2, [pc, #124]	@ (8005ab8 <HAL_GPIO_Init+0x244>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d031      	beq.n	8005aa2 <HAL_GPIO_Init+0x22e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1e      	ldr	r2, [pc, #120]	@ (8005abc <HAL_GPIO_Init+0x248>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02b      	beq.n	8005a9e <HAL_GPIO_Init+0x22a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1d      	ldr	r2, [pc, #116]	@ (8005ac0 <HAL_GPIO_Init+0x24c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d025      	beq.n	8005a9a <HAL_GPIO_Init+0x226>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a1c      	ldr	r2, [pc, #112]	@ (8005ac4 <HAL_GPIO_Init+0x250>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d01f      	beq.n	8005a96 <HAL_GPIO_Init+0x222>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <HAL_GPIO_Init+0x254>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d019      	beq.n	8005a92 <HAL_GPIO_Init+0x21e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a1a      	ldr	r2, [pc, #104]	@ (8005acc <HAL_GPIO_Init+0x258>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d013      	beq.n	8005a8e <HAL_GPIO_Init+0x21a>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a19      	ldr	r2, [pc, #100]	@ (8005ad0 <HAL_GPIO_Init+0x25c>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d00d      	beq.n	8005a8a <HAL_GPIO_Init+0x216>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a18      	ldr	r2, [pc, #96]	@ (8005ad4 <HAL_GPIO_Init+0x260>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d007      	beq.n	8005a86 <HAL_GPIO_Init+0x212>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a17      	ldr	r2, [pc, #92]	@ (8005ad8 <HAL_GPIO_Init+0x264>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d101      	bne.n	8005a82 <HAL_GPIO_Init+0x20e>
 8005a7e:	2309      	movs	r3, #9
 8005a80:	e02d      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a82:	230a      	movs	r3, #10
 8005a84:	e02b      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a86:	2308      	movs	r3, #8
 8005a88:	e029      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a8a:	2307      	movs	r3, #7
 8005a8c:	e027      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a8e:	2306      	movs	r3, #6
 8005a90:	e025      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a92:	2305      	movs	r3, #5
 8005a94:	e023      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a96:	2304      	movs	r3, #4
 8005a98:	e021      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a9a:	2303      	movs	r3, #3
 8005a9c:	e01f      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005a9e:	2302      	movs	r3, #2
 8005aa0:	e01d      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e01b      	b.n	8005ade <HAL_GPIO_Init+0x26a>
 8005aa6:	bf00      	nop
 8005aa8:	58000080 	.word	0x58000080
 8005aac:	58024400 	.word	0x58024400
 8005ab0:	58000400 	.word	0x58000400
 8005ab4:	58020000 	.word	0x58020000
 8005ab8:	58020400 	.word	0x58020400
 8005abc:	58020800 	.word	0x58020800
 8005ac0:	58020c00 	.word	0x58020c00
 8005ac4:	58021000 	.word	0x58021000
 8005ac8:	58021400 	.word	0x58021400
 8005acc:	58021800 	.word	0x58021800
 8005ad0:	58021c00 	.word	0x58021c00
 8005ad4:	58022000 	.word	0x58022000
 8005ad8:	58022400 	.word	0x58022400
 8005adc:	2300      	movs	r3, #0
 8005ade:	69fa      	ldr	r2, [r7, #28]
 8005ae0:	f002 0203 	and.w	r2, r2, #3
 8005ae4:	0092      	lsls	r2, r2, #2
 8005ae6:	4093      	lsls	r3, r2
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005aee:	4938      	ldr	r1, [pc, #224]	@ (8005bd0 <HAL_GPIO_Init+0x35c>)
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	089b      	lsrs	r3, r3, #2
 8005af4:	3302      	adds	r3, #2
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005afc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	43db      	mvns	r3, r3
 8005b08:	69ba      	ldr	r2, [r7, #24]
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	693b      	ldr	r3, [r7, #16]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005b22:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005b2a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	43db      	mvns	r3, r3
 8005b36:	69ba      	ldr	r2, [r7, #24]
 8005b38:	4013      	ands	r3, r2
 8005b3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005b50:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	43db      	mvns	r3, r3
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	4013      	ands	r3, r2
 8005b66:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005b74:	69ba      	ldr	r2, [r7, #24]
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	69ba      	ldr	r2, [r7, #24]
 8005b80:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	69ba      	ldr	r2, [r7, #24]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d003      	beq.n	8005ba6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	69ba      	ldr	r2, [r7, #24]
 8005baa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f47f ae63 	bne.w	8005888 <HAL_GPIO_Init+0x14>
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	3724      	adds	r7, #36	@ 0x24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bce:	4770      	bx	lr
 8005bd0:	58000400 	.word	0x58000400

08005bd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	460b      	mov	r3, r1
 8005bde:	807b      	strh	r3, [r7, #2]
 8005be0:	4613      	mov	r3, r2
 8005be2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005be4:	787b      	ldrb	r3, [r7, #1]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005bea:	887a      	ldrh	r2, [r7, #2]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005bf0:	e003      	b.n	8005bfa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005bf2:	887b      	ldrh	r3, [r7, #2]
 8005bf4:	041a      	lsls	r2, r3, #16
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	619a      	str	r2, [r3, #24]
}
 8005bfa:	bf00      	nop
 8005bfc:	370c      	adds	r7, #12
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005c06:	b480      	push	{r7}
 8005c08:	b085      	sub	sp, #20
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	460b      	mov	r3, r1
 8005c10:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005c18:	887a      	ldrh	r2, [r7, #2]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4013      	ands	r3, r2
 8005c1e:	041a      	lsls	r2, r3, #16
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	43d9      	mvns	r1, r3
 8005c24:	887b      	ldrh	r3, [r7, #2]
 8005c26:	400b      	ands	r3, r1
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	619a      	str	r2, [r3, #24]
}
 8005c2e:	bf00      	nop
 8005c30:	3714      	adds	r7, #20
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005c3a:	b580      	push	{r7, lr}
 8005c3c:	b082      	sub	sp, #8
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	4603      	mov	r3, r0
 8005c42:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005c44:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c48:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005c54:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005c58:	88fb      	ldrh	r3, [r7, #6]
 8005c5a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f000 f804 	bl	8005c6e <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8005c66:	bf00      	nop
 8005c68:	3708      	adds	r7, #8
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	4603      	mov	r3, r0
 8005c76:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005c78:	bf00      	nop
 8005c7a:	370c      	adds	r7, #12
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr

08005c84 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005c8c:	4b19      	ldr	r3, [pc, #100]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0304 	and.w	r3, r3, #4
 8005c94:	2b04      	cmp	r3, #4
 8005c96:	d00a      	beq.n	8005cae <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005c98:	4b16      	ldr	r3, [pc, #88]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0307 	and.w	r3, r3, #7
 8005ca0:	687a      	ldr	r2, [r7, #4]
 8005ca2:	429a      	cmp	r2, r3
 8005ca4:	d001      	beq.n	8005caa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e01f      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005caa:	2300      	movs	r3, #0
 8005cac:	e01d      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005cae:	4b11      	ldr	r3, [pc, #68]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f023 0207 	bic.w	r2, r3, #7
 8005cb6:	490f      	ldr	r1, [pc, #60]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005cbe:	f7fe ff4d 	bl	8004b5c <HAL_GetTick>
 8005cc2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cc4:	e009      	b.n	8005cda <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005cc6:	f7fe ff49 	bl	8004b5c <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005cd4:	d901      	bls.n	8005cda <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e007      	b.n	8005cea <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005cda:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <HAL_PWREx_ConfigSupply+0x70>)
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005ce6:	d1ee      	bne.n	8005cc6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	58024800 	.word	0x58024800

08005cf8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b08c      	sub	sp, #48	@ 0x30
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d102      	bne.n	8005d0c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	f000 bc48 	b.w	800659c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0301 	and.w	r3, r3, #1
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 8088 	beq.w	8005e2a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005d1a:	4b99      	ldr	r3, [pc, #612]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005d24:	4b96      	ldr	r3, [pc, #600]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d28:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d2c:	2b10      	cmp	r3, #16
 8005d2e:	d007      	beq.n	8005d40 <HAL_RCC_OscConfig+0x48>
 8005d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d32:	2b18      	cmp	r3, #24
 8005d34:	d111      	bne.n	8005d5a <HAL_RCC_OscConfig+0x62>
 8005d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d10c      	bne.n	8005d5a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d40:	4b8f      	ldr	r3, [pc, #572]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d06d      	beq.n	8005e28 <HAL_RCC_OscConfig+0x130>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d169      	bne.n	8005e28 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f000 bc21 	b.w	800659c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d62:	d106      	bne.n	8005d72 <HAL_RCC_OscConfig+0x7a>
 8005d64:	4b86      	ldr	r3, [pc, #536]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a85      	ldr	r2, [pc, #532]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	e02e      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd8>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d10c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x9c>
 8005d7a:	4b81      	ldr	r3, [pc, #516]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a80      	ldr	r2, [pc, #512]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d84:	6013      	str	r3, [r2, #0]
 8005d86:	4b7e      	ldr	r3, [pc, #504]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a7d      	ldr	r2, [pc, #500]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005d8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d90:	6013      	str	r3, [r2, #0]
 8005d92:	e01d      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd8>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	685b      	ldr	r3, [r3, #4]
 8005d98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d9c:	d10c      	bne.n	8005db8 <HAL_RCC_OscConfig+0xc0>
 8005d9e:	4b78      	ldr	r3, [pc, #480]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a77      	ldr	r2, [pc, #476]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005da8:	6013      	str	r3, [r2, #0]
 8005daa:	4b75      	ldr	r3, [pc, #468]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a74      	ldr	r2, [pc, #464]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005db0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	e00b      	b.n	8005dd0 <HAL_RCC_OscConfig+0xd8>
 8005db8:	4b71      	ldr	r3, [pc, #452]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a70      	ldr	r2, [pc, #448]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005dbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	4b6e      	ldr	r3, [pc, #440]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a6d      	ldr	r2, [pc, #436]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005dca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005dce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d013      	beq.n	8005e00 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dd8:	f7fe fec0 	bl	8004b5c <HAL_GetTick>
 8005ddc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005dde:	e008      	b.n	8005df2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005de0:	f7fe febc 	bl	8004b5c <HAL_GetTick>
 8005de4:	4602      	mov	r2, r0
 8005de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005de8:	1ad3      	subs	r3, r2, r3
 8005dea:	2b64      	cmp	r3, #100	@ 0x64
 8005dec:	d901      	bls.n	8005df2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005dee:	2303      	movs	r3, #3
 8005df0:	e3d4      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005df2:	4b63      	ldr	r3, [pc, #396]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0f0      	beq.n	8005de0 <HAL_RCC_OscConfig+0xe8>
 8005dfe:	e014      	b.n	8005e2a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e00:	f7fe feac 	bl	8004b5c <HAL_GetTick>
 8005e04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e06:	e008      	b.n	8005e1a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005e08:	f7fe fea8 	bl	8004b5c <HAL_GetTick>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e10:	1ad3      	subs	r3, r2, r3
 8005e12:	2b64      	cmp	r3, #100	@ 0x64
 8005e14:	d901      	bls.n	8005e1a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	e3c0      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005e1a:	4b59      	ldr	r3, [pc, #356]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1f0      	bne.n	8005e08 <HAL_RCC_OscConfig+0x110>
 8005e26:	e000      	b.n	8005e2a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0302 	and.w	r3, r3, #2
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80ca 	beq.w	8005fcc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e38:	4b51      	ldr	r3, [pc, #324]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e40:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e42:	4b4f      	ldr	r3, [pc, #316]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e46:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005e48:	6a3b      	ldr	r3, [r7, #32]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d007      	beq.n	8005e5e <HAL_RCC_OscConfig+0x166>
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	2b18      	cmp	r3, #24
 8005e52:	d156      	bne.n	8005f02 <HAL_RCC_OscConfig+0x20a>
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d151      	bne.n	8005f02 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e5e:	4b48      	ldr	r3, [pc, #288]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d005      	beq.n	8005e76 <HAL_RCC_OscConfig+0x17e>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e392      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005e76:	4b42      	ldr	r3, [pc, #264]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f023 0219 	bic.w	r2, r3, #25
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	493f      	ldr	r1, [pc, #252]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005e84:	4313      	orrs	r3, r2
 8005e86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e88:	f7fe fe68 	bl	8004b5c <HAL_GetTick>
 8005e8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005e8e:	e008      	b.n	8005ea2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e90:	f7fe fe64 	bl	8004b5c <HAL_GetTick>
 8005e94:	4602      	mov	r2, r0
 8005e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e98:	1ad3      	subs	r3, r2, r3
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d901      	bls.n	8005ea2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005e9e:	2303      	movs	r3, #3
 8005ea0:	e37c      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005ea2:	4b37      	ldr	r3, [pc, #220]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d0f0      	beq.n	8005e90 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eae:	f7fe fe61 	bl	8004b74 <HAL_GetREVID>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d817      	bhi.n	8005eec <HAL_RCC_OscConfig+0x1f4>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	691b      	ldr	r3, [r3, #16]
 8005ec0:	2b40      	cmp	r3, #64	@ 0x40
 8005ec2:	d108      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x1de>
 8005ec4:	4b2e      	ldr	r3, [pc, #184]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005ecc:	4a2c      	ldr	r2, [pc, #176]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ed2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ed4:	e07a      	b.n	8005fcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ed6:	4b2a      	ldr	r3, [pc, #168]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	691b      	ldr	r3, [r3, #16]
 8005ee2:	031b      	lsls	r3, r3, #12
 8005ee4:	4926      	ldr	r1, [pc, #152]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005eea:	e06f      	b.n	8005fcc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005eec:	4b24      	ldr	r3, [pc, #144]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	061b      	lsls	r3, r3, #24
 8005efa:	4921      	ldr	r1, [pc, #132]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005efc:	4313      	orrs	r3, r2
 8005efe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005f00:	e064      	b.n	8005fcc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	68db      	ldr	r3, [r3, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d047      	beq.n	8005f9a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f023 0219 	bic.w	r2, r3, #25
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	491a      	ldr	r1, [pc, #104]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f1c:	f7fe fe1e 	bl	8004b5c <HAL_GetTick>
 8005f20:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f22:	e008      	b.n	8005f36 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f24:	f7fe fe1a 	bl	8004b5c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	2b02      	cmp	r3, #2
 8005f30:	d901      	bls.n	8005f36 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005f32:	2303      	movs	r3, #3
 8005f34:	e332      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005f36:	4b12      	ldr	r3, [pc, #72]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d0f0      	beq.n	8005f24 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f42:	f7fe fe17 	bl	8004b74 <HAL_GetREVID>
 8005f46:	4603      	mov	r3, r0
 8005f48:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d819      	bhi.n	8005f84 <HAL_RCC_OscConfig+0x28c>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	691b      	ldr	r3, [r3, #16]
 8005f54:	2b40      	cmp	r3, #64	@ 0x40
 8005f56:	d108      	bne.n	8005f6a <HAL_RCC_OscConfig+0x272>
 8005f58:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005f60:	4a07      	ldr	r2, [pc, #28]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005f66:	6053      	str	r3, [r2, #4]
 8005f68:	e030      	b.n	8005fcc <HAL_RCC_OscConfig+0x2d4>
 8005f6a:	4b05      	ldr	r3, [pc, #20]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	031b      	lsls	r3, r3, #12
 8005f78:	4901      	ldr	r1, [pc, #4]	@ (8005f80 <HAL_RCC_OscConfig+0x288>)
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	604b      	str	r3, [r1, #4]
 8005f7e:	e025      	b.n	8005fcc <HAL_RCC_OscConfig+0x2d4>
 8005f80:	58024400 	.word	0x58024400
 8005f84:	4b9a      	ldr	r3, [pc, #616]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	691b      	ldr	r3, [r3, #16]
 8005f90:	061b      	lsls	r3, r3, #24
 8005f92:	4997      	ldr	r1, [pc, #604]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005f94:	4313      	orrs	r3, r2
 8005f96:	604b      	str	r3, [r1, #4]
 8005f98:	e018      	b.n	8005fcc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005f9a:	4b95      	ldr	r3, [pc, #596]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a94      	ldr	r2, [pc, #592]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005fa0:	f023 0301 	bic.w	r3, r3, #1
 8005fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa6:	f7fe fdd9 	bl	8004b5c <HAL_GetTick>
 8005faa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fac:	e008      	b.n	8005fc0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fae:	f7fe fdd5 	bl	8004b5c <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d901      	bls.n	8005fc0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005fbc:	2303      	movs	r3, #3
 8005fbe:	e2ed      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005fc0:	4b8b      	ldr	r3, [pc, #556]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d1f0      	bne.n	8005fae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f003 0310 	and.w	r3, r3, #16
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f000 80a9 	beq.w	800612c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fda:	4b85      	ldr	r3, [pc, #532]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005fdc:	691b      	ldr	r3, [r3, #16]
 8005fde:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fe4:	4b82      	ldr	r3, [pc, #520]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8005fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	2b08      	cmp	r3, #8
 8005fee:	d007      	beq.n	8006000 <HAL_RCC_OscConfig+0x308>
 8005ff0:	69bb      	ldr	r3, [r7, #24]
 8005ff2:	2b18      	cmp	r3, #24
 8005ff4:	d13a      	bne.n	800606c <HAL_RCC_OscConfig+0x374>
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f003 0303 	and.w	r3, r3, #3
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d135      	bne.n	800606c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006000:	4b7b      	ldr	r3, [pc, #492]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <HAL_RCC_OscConfig+0x320>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	69db      	ldr	r3, [r3, #28]
 8006010:	2b80      	cmp	r3, #128	@ 0x80
 8006012:	d001      	beq.n	8006018 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	e2c1      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006018:	f7fe fdac 	bl	8004b74 <HAL_GetREVID>
 800601c:	4603      	mov	r3, r0
 800601e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006022:	4293      	cmp	r3, r2
 8006024:	d817      	bhi.n	8006056 <HAL_RCC_OscConfig+0x35e>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	2b20      	cmp	r3, #32
 800602c:	d108      	bne.n	8006040 <HAL_RCC_OscConfig+0x348>
 800602e:	4b70      	ldr	r3, [pc, #448]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006036:	4a6e      	ldr	r2, [pc, #440]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006038:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800603c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800603e:	e075      	b.n	800612c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006040:	4b6b      	ldr	r3, [pc, #428]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6a1b      	ldr	r3, [r3, #32]
 800604c:	069b      	lsls	r3, r3, #26
 800604e:	4968      	ldr	r1, [pc, #416]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006050:	4313      	orrs	r3, r2
 8006052:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006054:	e06a      	b.n	800612c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006056:	4b66      	ldr	r3, [pc, #408]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	061b      	lsls	r3, r3, #24
 8006064:	4962      	ldr	r1, [pc, #392]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006066:	4313      	orrs	r3, r2
 8006068:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800606a:	e05f      	b.n	800612c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d042      	beq.n	80060fa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006074:	4b5e      	ldr	r3, [pc, #376]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a5d      	ldr	r2, [pc, #372]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 800607a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800607e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006080:	f7fe fd6c 	bl	8004b5c <HAL_GetTick>
 8006084:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006086:	e008      	b.n	800609a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006088:	f7fe fd68 	bl	8004b5c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006090:	1ad3      	subs	r3, r2, r3
 8006092:	2b02      	cmp	r3, #2
 8006094:	d901      	bls.n	800609a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e280      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800609a:	4b55      	ldr	r3, [pc, #340]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d0f0      	beq.n	8006088 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80060a6:	f7fe fd65 	bl	8004b74 <HAL_GetREVID>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d817      	bhi.n	80060e4 <HAL_RCC_OscConfig+0x3ec>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6a1b      	ldr	r3, [r3, #32]
 80060b8:	2b20      	cmp	r3, #32
 80060ba:	d108      	bne.n	80060ce <HAL_RCC_OscConfig+0x3d6>
 80060bc:	4b4c      	ldr	r3, [pc, #304]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80060c4:	4a4a      	ldr	r2, [pc, #296]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060c6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80060ca:	6053      	str	r3, [r2, #4]
 80060cc:	e02e      	b.n	800612c <HAL_RCC_OscConfig+0x434>
 80060ce:	4b48      	ldr	r3, [pc, #288]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6a1b      	ldr	r3, [r3, #32]
 80060da:	069b      	lsls	r3, r3, #26
 80060dc:	4944      	ldr	r1, [pc, #272]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060de:	4313      	orrs	r3, r2
 80060e0:	604b      	str	r3, [r1, #4]
 80060e2:	e023      	b.n	800612c <HAL_RCC_OscConfig+0x434>
 80060e4:	4b42      	ldr	r3, [pc, #264]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	061b      	lsls	r3, r3, #24
 80060f2:	493f      	ldr	r1, [pc, #252]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060f4:	4313      	orrs	r3, r2
 80060f6:	60cb      	str	r3, [r1, #12]
 80060f8:	e018      	b.n	800612c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80060fa:	4b3d      	ldr	r3, [pc, #244]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a3c      	ldr	r2, [pc, #240]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006100:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006104:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fe fd29 	bl	8004b5c <HAL_GetTick>
 800610a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800610c:	e008      	b.n	8006120 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800610e:	f7fe fd25 	bl	8004b5c <HAL_GetTick>
 8006112:	4602      	mov	r2, r0
 8006114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006116:	1ad3      	subs	r3, r2, r3
 8006118:	2b02      	cmp	r3, #2
 800611a:	d901      	bls.n	8006120 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800611c:	2303      	movs	r3, #3
 800611e:	e23d      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006120:	4b33      	ldr	r3, [pc, #204]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1f0      	bne.n	800610e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0308 	and.w	r3, r3, #8
 8006134:	2b00      	cmp	r3, #0
 8006136:	d036      	beq.n	80061a6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d019      	beq.n	8006174 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006140:	4b2b      	ldr	r3, [pc, #172]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006144:	4a2a      	ldr	r2, [pc, #168]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006146:	f043 0301 	orr.w	r3, r3, #1
 800614a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800614c:	f7fe fd06 	bl	8004b5c <HAL_GetTick>
 8006150:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006152:	e008      	b.n	8006166 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006154:	f7fe fd02 	bl	8004b5c <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d901      	bls.n	8006166 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006162:	2303      	movs	r3, #3
 8006164:	e21a      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006166:	4b22      	ldr	r3, [pc, #136]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006168:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d0f0      	beq.n	8006154 <HAL_RCC_OscConfig+0x45c>
 8006172:	e018      	b.n	80061a6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006174:	4b1e      	ldr	r3, [pc, #120]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 8006176:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006178:	4a1d      	ldr	r2, [pc, #116]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 800617a:	f023 0301 	bic.w	r3, r3, #1
 800617e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006180:	f7fe fcec 	bl	8004b5c <HAL_GetTick>
 8006184:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006186:	e008      	b.n	800619a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006188:	f7fe fce8 	bl	8004b5c <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	2b02      	cmp	r3, #2
 8006194:	d901      	bls.n	800619a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006196:	2303      	movs	r3, #3
 8006198:	e200      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800619a:	4b15      	ldr	r3, [pc, #84]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 800619c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1f0      	bne.n	8006188 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0320 	and.w	r3, r3, #32
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d039      	beq.n	8006226 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d01c      	beq.n	80061f4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80061ba:	4b0d      	ldr	r3, [pc, #52]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a0c      	ldr	r2, [pc, #48]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80061c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80061c4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80061c6:	f7fe fcc9 	bl	8004b5c <HAL_GetTick>
 80061ca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061cc:	e008      	b.n	80061e0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80061ce:	f7fe fcc5 	bl	8004b5c <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	2b02      	cmp	r3, #2
 80061da:	d901      	bls.n	80061e0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80061dc:	2303      	movs	r3, #3
 80061de:	e1dd      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80061e0:	4b03      	ldr	r3, [pc, #12]	@ (80061f0 <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d0f0      	beq.n	80061ce <HAL_RCC_OscConfig+0x4d6>
 80061ec:	e01b      	b.n	8006226 <HAL_RCC_OscConfig+0x52e>
 80061ee:	bf00      	nop
 80061f0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80061f4:	4b9b      	ldr	r3, [pc, #620]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a9a      	ldr	r2, [pc, #616]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80061fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006200:	f7fe fcac 	bl	8004b5c <HAL_GetTick>
 8006204:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006206:	e008      	b.n	800621a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006208:	f7fe fca8 	bl	8004b5c <HAL_GetTick>
 800620c:	4602      	mov	r2, r0
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	2b02      	cmp	r3, #2
 8006214:	d901      	bls.n	800621a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006216:	2303      	movs	r3, #3
 8006218:	e1c0      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800621a:	4b92      	ldr	r3, [pc, #584]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006222:	2b00      	cmp	r3, #0
 8006224:	d1f0      	bne.n	8006208 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 0304 	and.w	r3, r3, #4
 800622e:	2b00      	cmp	r3, #0
 8006230:	f000 8081 	beq.w	8006336 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006234:	4b8c      	ldr	r3, [pc, #560]	@ (8006468 <HAL_RCC_OscConfig+0x770>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a8b      	ldr	r2, [pc, #556]	@ (8006468 <HAL_RCC_OscConfig+0x770>)
 800623a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800623e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006240:	f7fe fc8c 	bl	8004b5c <HAL_GetTick>
 8006244:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006248:	f7fe fc88 	bl	8004b5c <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b64      	cmp	r3, #100	@ 0x64
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e1a0      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800625a:	4b83      	ldr	r3, [pc, #524]	@ (8006468 <HAL_RCC_OscConfig+0x770>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0f0      	beq.n	8006248 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d106      	bne.n	800627c <HAL_RCC_OscConfig+0x584>
 800626e:	4b7d      	ldr	r3, [pc, #500]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006272:	4a7c      	ldr	r2, [pc, #496]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006274:	f043 0301 	orr.w	r3, r3, #1
 8006278:	6713      	str	r3, [r2, #112]	@ 0x70
 800627a:	e02d      	b.n	80062d8 <HAL_RCC_OscConfig+0x5e0>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10c      	bne.n	800629e <HAL_RCC_OscConfig+0x5a6>
 8006284:	4b77      	ldr	r3, [pc, #476]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006288:	4a76      	ldr	r2, [pc, #472]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800628a:	f023 0301 	bic.w	r3, r3, #1
 800628e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006290:	4b74      	ldr	r3, [pc, #464]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	4a73      	ldr	r2, [pc, #460]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006296:	f023 0304 	bic.w	r3, r3, #4
 800629a:	6713      	str	r3, [r2, #112]	@ 0x70
 800629c:	e01c      	b.n	80062d8 <HAL_RCC_OscConfig+0x5e0>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x5c8>
 80062a6:	4b6f      	ldr	r3, [pc, #444]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062aa:	4a6e      	ldr	r2, [pc, #440]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062ac:	f043 0304 	orr.w	r3, r3, #4
 80062b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b2:	4b6c      	ldr	r3, [pc, #432]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	4a6b      	ldr	r2, [pc, #428]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062be:	e00b      	b.n	80062d8 <HAL_RCC_OscConfig+0x5e0>
 80062c0:	4b68      	ldr	r3, [pc, #416]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c4:	4a67      	ldr	r2, [pc, #412]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80062cc:	4b65      	ldr	r3, [pc, #404]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d0:	4a64      	ldr	r2, [pc, #400]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80062d2:	f023 0304 	bic.w	r3, r3, #4
 80062d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fe fc3c 	bl	8004b5c <HAL_GetTick>
 80062e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e8:	f7fe fc38 	bl	8004b5c <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e14e      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80062fe:	4b59      	ldr	r3, [pc, #356]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ee      	beq.n	80062e8 <HAL_RCC_OscConfig+0x5f0>
 800630a:	e014      	b.n	8006336 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800630c:	f7fe fc26 	bl	8004b5c <HAL_GetTick>
 8006310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006312:	e00a      	b.n	800632a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006314:	f7fe fc22 	bl	8004b5c <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e138      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800632a:	4b4e      	ldr	r3, [pc, #312]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ee      	bne.n	8006314 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 812d 	beq.w	800659a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006340:	4b48      	ldr	r3, [pc, #288]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006348:	2b18      	cmp	r3, #24
 800634a:	f000 80bd 	beq.w	80064c8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006352:	2b02      	cmp	r3, #2
 8006354:	f040 809e 	bne.w	8006494 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006358:	4b42      	ldr	r3, [pc, #264]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a41      	ldr	r2, [pc, #260]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800635e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006364:	f7fe fbfa 	bl	8004b5c <HAL_GetTick>
 8006368:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800636a:	e008      	b.n	800637e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800636c:	f7fe fbf6 	bl	8004b5c <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e10e      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800637e:	4b39      	ldr	r3, [pc, #228]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006386:	2b00      	cmp	r3, #0
 8006388:	d1f0      	bne.n	800636c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800638a:	4b36      	ldr	r3, [pc, #216]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800638c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800638e:	4b37      	ldr	r3, [pc, #220]	@ (800646c <HAL_RCC_OscConfig+0x774>)
 8006390:	4013      	ands	r3, r2
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800639a:	0112      	lsls	r2, r2, #4
 800639c:	430a      	orrs	r2, r1
 800639e:	4931      	ldr	r1, [pc, #196]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063a0:	4313      	orrs	r3, r2
 80063a2:	628b      	str	r3, [r1, #40]	@ 0x28
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063a8:	3b01      	subs	r3, #1
 80063aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063b2:	3b01      	subs	r3, #1
 80063b4:	025b      	lsls	r3, r3, #9
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	431a      	orrs	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063be:	3b01      	subs	r3, #1
 80063c0:	041b      	lsls	r3, r3, #16
 80063c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80063c6:	431a      	orrs	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063cc:	3b01      	subs	r3, #1
 80063ce:	061b      	lsls	r3, r3, #24
 80063d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80063d4:	4923      	ldr	r1, [pc, #140]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063d6:	4313      	orrs	r3, r2
 80063d8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80063da:	4b22      	ldr	r3, [pc, #136]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063de:	4a21      	ldr	r2, [pc, #132]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063e0:	f023 0301 	bic.w	r3, r3, #1
 80063e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80063e6:	4b1f      	ldr	r3, [pc, #124]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063ea:	4b21      	ldr	r3, [pc, #132]	@ (8006470 <HAL_RCC_OscConfig+0x778>)
 80063ec:	4013      	ands	r3, r2
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80063f2:	00d2      	lsls	r2, r2, #3
 80063f4:	491b      	ldr	r1, [pc, #108]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063f6:	4313      	orrs	r3, r2
 80063f8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80063fa:	4b1a      	ldr	r3, [pc, #104]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 80063fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063fe:	f023 020c 	bic.w	r2, r3, #12
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006406:	4917      	ldr	r1, [pc, #92]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006408:	4313      	orrs	r3, r2
 800640a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800640c:	4b15      	ldr	r3, [pc, #84]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800640e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006410:	f023 0202 	bic.w	r2, r3, #2
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006418:	4912      	ldr	r1, [pc, #72]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800641a:	4313      	orrs	r3, r2
 800641c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800641e:	4b11      	ldr	r3, [pc, #68]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	4a10      	ldr	r2, [pc, #64]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006424:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006428:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800642a:	4b0e      	ldr	r3, [pc, #56]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800642c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800642e:	4a0d      	ldr	r2, [pc, #52]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006434:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006436:	4b0b      	ldr	r3, [pc, #44]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800643a:	4a0a      	ldr	r2, [pc, #40]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 800643c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006442:	4b08      	ldr	r3, [pc, #32]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006446:	4a07      	ldr	r2, [pc, #28]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006448:	f043 0301 	orr.w	r3, r3, #1
 800644c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800644e:	4b05      	ldr	r3, [pc, #20]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a04      	ldr	r2, [pc, #16]	@ (8006464 <HAL_RCC_OscConfig+0x76c>)
 8006454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006458:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645a:	f7fe fb7f 	bl	8004b5c <HAL_GetTick>
 800645e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006460:	e011      	b.n	8006486 <HAL_RCC_OscConfig+0x78e>
 8006462:	bf00      	nop
 8006464:	58024400 	.word	0x58024400
 8006468:	58024800 	.word	0x58024800
 800646c:	fffffc0c 	.word	0xfffffc0c
 8006470:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006474:	f7fe fb72 	bl	8004b5c <HAL_GetTick>
 8006478:	4602      	mov	r2, r0
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	1ad3      	subs	r3, r2, r3
 800647e:	2b02      	cmp	r3, #2
 8006480:	d901      	bls.n	8006486 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006482:	2303      	movs	r3, #3
 8006484:	e08a      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006486:	4b47      	ldr	r3, [pc, #284]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d0f0      	beq.n	8006474 <HAL_RCC_OscConfig+0x77c>
 8006492:	e082      	b.n	800659a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006494:	4b43      	ldr	r3, [pc, #268]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a42      	ldr	r2, [pc, #264]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 800649a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800649e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fe fb5c 	bl	8004b5c <HAL_GetTick>
 80064a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80064a8:	f7fe fb58 	bl	8004b5c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e070      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80064ba:	4b3a      	ldr	r3, [pc, #232]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x7b0>
 80064c6:	e068      	b.n	800659a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80064c8:	4b36      	ldr	r3, [pc, #216]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 80064ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064cc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80064ce:	4b35      	ldr	r3, [pc, #212]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 80064d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d031      	beq.n	8006540 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f003 0203 	and.w	r2, r3, #3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d12a      	bne.n	8006540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	091b      	lsrs	r3, r3, #4
 80064ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064f6:	429a      	cmp	r2, r3
 80064f8:	d122      	bne.n	8006540 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006504:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006506:	429a      	cmp	r2, r3
 8006508:	d11a      	bne.n	8006540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	0a5b      	lsrs	r3, r3, #9
 800650e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006516:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006518:	429a      	cmp	r2, r3
 800651a:	d111      	bne.n	8006540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	0c1b      	lsrs	r3, r3, #16
 8006520:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006528:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800652a:	429a      	cmp	r2, r3
 800652c:	d108      	bne.n	8006540 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800653c:	429a      	cmp	r2, r3
 800653e:	d001      	beq.n	8006544 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e02b      	b.n	800659c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006544:	4b17      	ldr	r3, [pc, #92]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 8006546:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006548:	08db      	lsrs	r3, r3, #3
 800654a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800654e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	429a      	cmp	r2, r3
 8006558:	d01f      	beq.n	800659a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800655a:	4b12      	ldr	r3, [pc, #72]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 800655c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800655e:	4a11      	ldr	r2, [pc, #68]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 8006560:	f023 0301 	bic.w	r3, r3, #1
 8006564:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006566:	f7fe faf9 	bl	8004b5c <HAL_GetTick>
 800656a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800656c:	bf00      	nop
 800656e:	f7fe faf5 	bl	8004b5c <HAL_GetTick>
 8006572:	4602      	mov	r2, r0
 8006574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006576:	4293      	cmp	r3, r2
 8006578:	d0f9      	beq.n	800656e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800657a:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 800657c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800657e:	4b0a      	ldr	r3, [pc, #40]	@ (80065a8 <HAL_RCC_OscConfig+0x8b0>)
 8006580:	4013      	ands	r3, r2
 8006582:	687a      	ldr	r2, [r7, #4]
 8006584:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006586:	00d2      	lsls	r2, r2, #3
 8006588:	4906      	ldr	r1, [pc, #24]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 800658a:	4313      	orrs	r3, r2
 800658c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800658e:	4b05      	ldr	r3, [pc, #20]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 8006590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006592:	4a04      	ldr	r2, [pc, #16]	@ (80065a4 <HAL_RCC_OscConfig+0x8ac>)
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800659a:	2300      	movs	r3, #0
}
 800659c:	4618      	mov	r0, r3
 800659e:	3730      	adds	r7, #48	@ 0x30
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	58024400 	.word	0x58024400
 80065a8:	ffff0007 	.word	0xffff0007

080065ac <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d101      	bne.n	80065c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e19c      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80065c0:	4b8a      	ldr	r3, [pc, #552]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 030f 	and.w	r3, r3, #15
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d910      	bls.n	80065f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065ce:	4b87      	ldr	r3, [pc, #540]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f023 020f 	bic.w	r2, r3, #15
 80065d6:	4985      	ldr	r1, [pc, #532]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	4313      	orrs	r3, r2
 80065dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065de:	4b83      	ldr	r3, [pc, #524]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f003 030f 	and.w	r3, r3, #15
 80065e6:	683a      	ldr	r2, [r7, #0]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d001      	beq.n	80065f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e184      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d010      	beq.n	800661e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	691a      	ldr	r2, [r3, #16]
 8006600:	4b7b      	ldr	r3, [pc, #492]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 8006602:	699b      	ldr	r3, [r3, #24]
 8006604:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006608:	429a      	cmp	r2, r3
 800660a:	d908      	bls.n	800661e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800660c:	4b78      	ldr	r3, [pc, #480]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800660e:	699b      	ldr	r3, [r3, #24]
 8006610:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691b      	ldr	r3, [r3, #16]
 8006618:	4975      	ldr	r1, [pc, #468]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800661a:	4313      	orrs	r3, r2
 800661c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f003 0308 	and.w	r3, r3, #8
 8006626:	2b00      	cmp	r3, #0
 8006628:	d010      	beq.n	800664c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	695a      	ldr	r2, [r3, #20]
 800662e:	4b70      	ldr	r3, [pc, #448]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 8006630:	69db      	ldr	r3, [r3, #28]
 8006632:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006636:	429a      	cmp	r2, r3
 8006638:	d908      	bls.n	800664c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800663a:	4b6d      	ldr	r3, [pc, #436]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	695b      	ldr	r3, [r3, #20]
 8006646:	496a      	ldr	r1, [pc, #424]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 8006648:	4313      	orrs	r3, r2
 800664a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0310 	and.w	r3, r3, #16
 8006654:	2b00      	cmp	r3, #0
 8006656:	d010      	beq.n	800667a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699a      	ldr	r2, [r3, #24]
 800665c:	4b64      	ldr	r3, [pc, #400]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006664:	429a      	cmp	r2, r3
 8006666:	d908      	bls.n	800667a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006668:	4b61      	ldr	r3, [pc, #388]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800666a:	69db      	ldr	r3, [r3, #28]
 800666c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	699b      	ldr	r3, [r3, #24]
 8006674:	495e      	ldr	r1, [pc, #376]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 8006676:	4313      	orrs	r3, r2
 8006678:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f003 0320 	and.w	r3, r3, #32
 8006682:	2b00      	cmp	r3, #0
 8006684:	d010      	beq.n	80066a8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69da      	ldr	r2, [r3, #28]
 800668a:	4b59      	ldr	r3, [pc, #356]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006692:	429a      	cmp	r2, r3
 8006694:	d908      	bls.n	80066a8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006696:	4b56      	ldr	r3, [pc, #344]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	69db      	ldr	r3, [r3, #28]
 80066a2:	4953      	ldr	r1, [pc, #332]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066a4:	4313      	orrs	r3, r2
 80066a6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d010      	beq.n	80066d6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68da      	ldr	r2, [r3, #12]
 80066b8:	4b4d      	ldr	r3, [pc, #308]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066ba:	699b      	ldr	r3, [r3, #24]
 80066bc:	f003 030f 	and.w	r3, r3, #15
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d908      	bls.n	80066d6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80066c4:	4b4a      	ldr	r3, [pc, #296]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	f023 020f 	bic.w	r2, r3, #15
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	68db      	ldr	r3, [r3, #12]
 80066d0:	4947      	ldr	r1, [pc, #284]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d055      	beq.n	800678e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80066e2:	4b43      	ldr	r3, [pc, #268]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	4940      	ldr	r1, [pc, #256]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066f0:	4313      	orrs	r3, r2
 80066f2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d107      	bne.n	800670c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80066fc:	4b3c      	ldr	r3, [pc, #240]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006704:	2b00      	cmp	r3, #0
 8006706:	d121      	bne.n	800674c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006708:	2301      	movs	r3, #1
 800670a:	e0f6      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b03      	cmp	r3, #3
 8006712:	d107      	bne.n	8006724 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006714:	4b36      	ldr	r3, [pc, #216]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d115      	bne.n	800674c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e0ea      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d107      	bne.n	800673c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800672c:	4b30      	ldr	r3, [pc, #192]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006734:	2b00      	cmp	r3, #0
 8006736:	d109      	bne.n	800674c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006738:	2301      	movs	r3, #1
 800673a:	e0de      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800673c:	4b2c      	ldr	r3, [pc, #176]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f003 0304 	and.w	r3, r3, #4
 8006744:	2b00      	cmp	r3, #0
 8006746:	d101      	bne.n	800674c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	e0d6      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800674c:	4b28      	ldr	r3, [pc, #160]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800674e:	691b      	ldr	r3, [r3, #16]
 8006750:	f023 0207 	bic.w	r2, r3, #7
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4925      	ldr	r1, [pc, #148]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800675a:	4313      	orrs	r3, r2
 800675c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800675e:	f7fe f9fd 	bl	8004b5c <HAL_GetTick>
 8006762:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006764:	e00a      	b.n	800677c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006766:	f7fe f9f9 	bl	8004b5c <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e0be      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800677c:	4b1c      	ldr	r3, [pc, #112]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	00db      	lsls	r3, r3, #3
 800678a:	429a      	cmp	r2, r3
 800678c:	d1eb      	bne.n	8006766 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0302 	and.w	r3, r3, #2
 8006796:	2b00      	cmp	r3, #0
 8006798:	d010      	beq.n	80067bc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68da      	ldr	r2, [r3, #12]
 800679e:	4b14      	ldr	r3, [pc, #80]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	f003 030f 	and.w	r3, r3, #15
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d208      	bcs.n	80067bc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80067aa:	4b11      	ldr	r3, [pc, #68]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f023 020f 	bic.w	r2, r3, #15
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	490e      	ldr	r1, [pc, #56]	@ (80067f0 <HAL_RCC_ClockConfig+0x244>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80067bc:	4b0b      	ldr	r3, [pc, #44]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f003 030f 	and.w	r3, r3, #15
 80067c4:	683a      	ldr	r2, [r7, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d214      	bcs.n	80067f4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067ca:	4b08      	ldr	r3, [pc, #32]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f023 020f 	bic.w	r2, r3, #15
 80067d2:	4906      	ldr	r1, [pc, #24]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80067da:	4b04      	ldr	r3, [pc, #16]	@ (80067ec <HAL_RCC_ClockConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	683a      	ldr	r2, [r7, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d005      	beq.n	80067f4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e086      	b.n	80068fa <HAL_RCC_ClockConfig+0x34e>
 80067ec:	52002000 	.word	0x52002000
 80067f0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d010      	beq.n	8006822 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	4b3f      	ldr	r3, [pc, #252]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 8006806:	699b      	ldr	r3, [r3, #24]
 8006808:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800680c:	429a      	cmp	r2, r3
 800680e:	d208      	bcs.n	8006822 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006810:	4b3c      	ldr	r3, [pc, #240]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4939      	ldr	r1, [pc, #228]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 800681e:	4313      	orrs	r3, r2
 8006820:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0308 	and.w	r3, r3, #8
 800682a:	2b00      	cmp	r3, #0
 800682c:	d010      	beq.n	8006850 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	4b34      	ldr	r3, [pc, #208]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800683a:	429a      	cmp	r2, r3
 800683c:	d208      	bcs.n	8006850 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800683e:	4b31      	ldr	r3, [pc, #196]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	492e      	ldr	r1, [pc, #184]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 800684c:	4313      	orrs	r3, r2
 800684e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f003 0310 	and.w	r3, r3, #16
 8006858:	2b00      	cmp	r3, #0
 800685a:	d010      	beq.n	800687e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	4b28      	ldr	r3, [pc, #160]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006868:	429a      	cmp	r2, r3
 800686a:	d208      	bcs.n	800687e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800686c:	4b25      	ldr	r3, [pc, #148]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 800686e:	69db      	ldr	r3, [r3, #28]
 8006870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	699b      	ldr	r3, [r3, #24]
 8006878:	4922      	ldr	r1, [pc, #136]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 800687a:	4313      	orrs	r3, r2
 800687c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f003 0320 	and.w	r3, r3, #32
 8006886:	2b00      	cmp	r3, #0
 8006888:	d010      	beq.n	80068ac <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	69da      	ldr	r2, [r3, #28]
 800688e:	4b1d      	ldr	r3, [pc, #116]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006896:	429a      	cmp	r2, r3
 8006898:	d208      	bcs.n	80068ac <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800689a:	4b1a      	ldr	r3, [pc, #104]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	4917      	ldr	r1, [pc, #92]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 80068a8:	4313      	orrs	r3, r2
 80068aa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80068ac:	f000 f834 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 80068b0:	4602      	mov	r2, r0
 80068b2:	4b14      	ldr	r3, [pc, #80]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	f003 030f 	and.w	r3, r3, #15
 80068bc:	4912      	ldr	r1, [pc, #72]	@ (8006908 <HAL_RCC_ClockConfig+0x35c>)
 80068be:	5ccb      	ldrb	r3, [r1, r3]
 80068c0:	f003 031f 	and.w	r3, r3, #31
 80068c4:	fa22 f303 	lsr.w	r3, r2, r3
 80068c8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80068ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006904 <HAL_RCC_ClockConfig+0x358>)
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	f003 030f 	and.w	r3, r3, #15
 80068d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006908 <HAL_RCC_ClockConfig+0x35c>)
 80068d4:	5cd3      	ldrb	r3, [r2, r3]
 80068d6:	f003 031f 	and.w	r3, r3, #31
 80068da:	693a      	ldr	r2, [r7, #16]
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
 80068e0:	4a0a      	ldr	r2, [pc, #40]	@ (800690c <HAL_RCC_ClockConfig+0x360>)
 80068e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80068e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006910 <HAL_RCC_ClockConfig+0x364>)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80068ea:	4b0a      	ldr	r3, [pc, #40]	@ (8006914 <HAL_RCC_ClockConfig+0x368>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fe f8ea 	bl	8004ac8 <HAL_InitTick>
 80068f4:	4603      	mov	r3, r0
 80068f6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80068f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3718      	adds	r7, #24
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	58024400 	.word	0x58024400
 8006908:	080100f4 	.word	0x080100f4
 800690c:	2400000c 	.word	0x2400000c
 8006910:	24000008 	.word	0x24000008
 8006914:	24000010 	.word	0x24000010

08006918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006918:	b480      	push	{r7}
 800691a:	b089      	sub	sp, #36	@ 0x24
 800691c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800691e:	4bb3      	ldr	r3, [pc, #716]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006920:	691b      	ldr	r3, [r3, #16]
 8006922:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006926:	2b18      	cmp	r3, #24
 8006928:	f200 8155 	bhi.w	8006bd6 <HAL_RCC_GetSysClockFreq+0x2be>
 800692c:	a201      	add	r2, pc, #4	@ (adr r2, 8006934 <HAL_RCC_GetSysClockFreq+0x1c>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006999 	.word	0x08006999
 8006938:	08006bd7 	.word	0x08006bd7
 800693c:	08006bd7 	.word	0x08006bd7
 8006940:	08006bd7 	.word	0x08006bd7
 8006944:	08006bd7 	.word	0x08006bd7
 8006948:	08006bd7 	.word	0x08006bd7
 800694c:	08006bd7 	.word	0x08006bd7
 8006950:	08006bd7 	.word	0x08006bd7
 8006954:	080069bf 	.word	0x080069bf
 8006958:	08006bd7 	.word	0x08006bd7
 800695c:	08006bd7 	.word	0x08006bd7
 8006960:	08006bd7 	.word	0x08006bd7
 8006964:	08006bd7 	.word	0x08006bd7
 8006968:	08006bd7 	.word	0x08006bd7
 800696c:	08006bd7 	.word	0x08006bd7
 8006970:	08006bd7 	.word	0x08006bd7
 8006974:	080069c5 	.word	0x080069c5
 8006978:	08006bd7 	.word	0x08006bd7
 800697c:	08006bd7 	.word	0x08006bd7
 8006980:	08006bd7 	.word	0x08006bd7
 8006984:	08006bd7 	.word	0x08006bd7
 8006988:	08006bd7 	.word	0x08006bd7
 800698c:	08006bd7 	.word	0x08006bd7
 8006990:	08006bd7 	.word	0x08006bd7
 8006994:	080069cb 	.word	0x080069cb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006998:	4b94      	ldr	r3, [pc, #592]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0320 	and.w	r3, r3, #32
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d009      	beq.n	80069b8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069a4:	4b91      	ldr	r3, [pc, #580]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	08db      	lsrs	r3, r3, #3
 80069aa:	f003 0303 	and.w	r3, r3, #3
 80069ae:	4a90      	ldr	r2, [pc, #576]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069b0:	fa22 f303 	lsr.w	r3, r2, r3
 80069b4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80069b6:	e111      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80069b8:	4b8d      	ldr	r3, [pc, #564]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80069ba:	61bb      	str	r3, [r7, #24]
      break;
 80069bc:	e10e      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80069be:	4b8d      	ldr	r3, [pc, #564]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80069c0:	61bb      	str	r3, [r7, #24]
      break;
 80069c2:	e10b      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80069c4:	4b8c      	ldr	r3, [pc, #560]	@ (8006bf8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80069c6:	61bb      	str	r3, [r7, #24]
      break;
 80069c8:	e108      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069ca:	4b88      	ldr	r3, [pc, #544]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80069d4:	4b85      	ldr	r3, [pc, #532]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069de:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80069e0:	4b82      	ldr	r3, [pc, #520]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80069ea:	4b80      	ldr	r3, [pc, #512]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ee:	08db      	lsrs	r3, r3, #3
 80069f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	fb02 f303 	mul.w	r3, r2, r3
 80069fa:	ee07 3a90 	vmov	s15, r3
 80069fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a02:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	f000 80e1 	beq.w	8006bd0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	f000 8083 	beq.w	8006b1c <HAL_RCC_GetSysClockFreq+0x204>
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f200 80a1 	bhi.w	8006b60 <HAL_RCC_GetSysClockFreq+0x248>
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d003      	beq.n	8006a2c <HAL_RCC_GetSysClockFreq+0x114>
 8006a24:	697b      	ldr	r3, [r7, #20]
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d056      	beq.n	8006ad8 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006a2a:	e099      	b.n	8006b60 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a2c:	4b6f      	ldr	r3, [pc, #444]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f003 0320 	and.w	r3, r3, #32
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d02d      	beq.n	8006a94 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a38:	4b6c      	ldr	r3, [pc, #432]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	08db      	lsrs	r3, r3, #3
 8006a3e:	f003 0303 	and.w	r3, r3, #3
 8006a42:	4a6b      	ldr	r2, [pc, #428]	@ (8006bf0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006a44:	fa22 f303 	lsr.w	r3, r2, r3
 8006a48:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	ee07 3a90 	vmov	s15, r3
 8006a50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a62:	4b62      	ldr	r3, [pc, #392]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6a:	ee07 3a90 	vmov	s15, r3
 8006a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a76:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006a92:	e087      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	ee07 3a90 	vmov	s15, r3
 8006a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a9e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c00 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aa6:	4b51      	ldr	r3, [pc, #324]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8006aba:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ad6:	e065      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aea:	4b40      	ldr	r3, [pc, #256]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af2:	ee07 3a90 	vmov	s15, r3
 8006af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8006afe:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b1a:	e043      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b26:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006c08 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b36:	ee07 3a90 	vmov	s15, r3
 8006b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b42:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006b5e:	e021      	b.n	8006ba4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006b60:	693b      	ldr	r3, [r7, #16]
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b6a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006c04 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b72:	4b1e      	ldr	r3, [pc, #120]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b7a:	ee07 3a90 	vmov	s15, r3
 8006b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8006b86:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006bfc <HAL_RCC_GetSysClockFreq+0x2e4>
 8006b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006ba2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006ba4:	4b11      	ldr	r3, [pc, #68]	@ (8006bec <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba8:	0a5b      	lsrs	r3, r3, #9
 8006baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bae:	3301      	adds	r3, #1
 8006bb0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	ee07 3a90 	vmov	s15, r3
 8006bb8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006bbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bc8:	ee17 3a90 	vmov	r3, s15
 8006bcc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006bce:	e005      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61bb      	str	r3, [r7, #24]
      break;
 8006bd4:	e002      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006bd6:	4b07      	ldr	r3, [pc, #28]	@ (8006bf4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006bd8:	61bb      	str	r3, [r7, #24]
      break;
 8006bda:	bf00      	nop
  }

  return sysclockfreq;
 8006bdc:	69bb      	ldr	r3, [r7, #24]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3724      	adds	r7, #36	@ 0x24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	58024400 	.word	0x58024400
 8006bf0:	03d09000 	.word	0x03d09000
 8006bf4:	003d0900 	.word	0x003d0900
 8006bf8:	007a1200 	.word	0x007a1200
 8006bfc:	46000000 	.word	0x46000000
 8006c00:	4c742400 	.word	0x4c742400
 8006c04:	4a742400 	.word	0x4a742400
 8006c08:	4af42400 	.word	0x4af42400

08006c0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006c12:	f7ff fe81 	bl	8006918 <HAL_RCC_GetSysClockFreq>
 8006c16:	4602      	mov	r2, r0
 8006c18:	4b10      	ldr	r3, [pc, #64]	@ (8006c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c1a:	699b      	ldr	r3, [r3, #24]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	490f      	ldr	r1, [pc, #60]	@ (8006c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c24:	5ccb      	ldrb	r3, [r1, r3]
 8006c26:	f003 031f 	and.w	r3, r3, #31
 8006c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006c30:	4b0a      	ldr	r3, [pc, #40]	@ (8006c5c <HAL_RCC_GetHCLKFreq+0x50>)
 8006c32:	699b      	ldr	r3, [r3, #24]
 8006c34:	f003 030f 	and.w	r3, r3, #15
 8006c38:	4a09      	ldr	r2, [pc, #36]	@ (8006c60 <HAL_RCC_GetHCLKFreq+0x54>)
 8006c3a:	5cd3      	ldrb	r3, [r2, r3]
 8006c3c:	f003 031f 	and.w	r3, r3, #31
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	fa22 f303 	lsr.w	r3, r2, r3
 8006c46:	4a07      	ldr	r2, [pc, #28]	@ (8006c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006c4a:	4a07      	ldr	r2, [pc, #28]	@ (8006c68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006c50:	4b04      	ldr	r3, [pc, #16]	@ (8006c64 <HAL_RCC_GetHCLKFreq+0x58>)
 8006c52:	681b      	ldr	r3, [r3, #0]
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}
 8006c5c:	58024400 	.word	0x58024400
 8006c60:	080100f4 	.word	0x080100f4
 8006c64:	2400000c 	.word	0x2400000c
 8006c68:	24000008 	.word	0x24000008

08006c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006c70:	f7ff ffcc 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006c74:	4602      	mov	r2, r0
 8006c76:	4b06      	ldr	r3, [pc, #24]	@ (8006c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	f003 0307 	and.w	r3, r3, #7
 8006c80:	4904      	ldr	r1, [pc, #16]	@ (8006c94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006c82:	5ccb      	ldrb	r3, [r1, r3]
 8006c84:	f003 031f 	and.w	r3, r3, #31
 8006c88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	58024400 	.word	0x58024400
 8006c94:	080100f4 	.word	0x080100f4

08006c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006c9c:	f7ff ffb6 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	4b06      	ldr	r3, [pc, #24]	@ (8006cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	0a1b      	lsrs	r3, r3, #8
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	4904      	ldr	r1, [pc, #16]	@ (8006cc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006cae:	5ccb      	ldrb	r3, [r1, r3]
 8006cb0:	f003 031f 	and.w	r3, r3, #31
 8006cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	58024400 	.word	0x58024400
 8006cc0:	080100f4 	.word	0x080100f4

08006cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cc8:	b0ca      	sub	sp, #296	@ 0x128
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006ce8:	2500      	movs	r5, #0
 8006cea:	ea54 0305 	orrs.w	r3, r4, r5
 8006cee:	d049      	beq.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006cf6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006cfa:	d02f      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006cfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006d00:	d828      	bhi.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d06:	d01a      	beq.n	8006d3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006d08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d0c:	d822      	bhi.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006d12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d16:	d007      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006d18:	e01c      	b.n	8006d54 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d1a:	4bb8      	ldr	r3, [pc, #736]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d1e:	4ab7      	ldr	r2, [pc, #732]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d26:	e01a      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006d28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2c:	3308      	adds	r3, #8
 8006d2e:	2102      	movs	r1, #2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fc8f 	bl	8008654 <RCCEx_PLL2_Config>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d3c:	e00f      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d42:	3328      	adds	r3, #40	@ 0x28
 8006d44:	2102      	movs	r1, #2
 8006d46:	4618      	mov	r0, r3
 8006d48:	f001 fd36 	bl	80087b8 <RCCEx_PLL3_Config>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006d52:	e004      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d5a:	e000      	b.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d10a      	bne.n	8006d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006d66:	4ba5      	ldr	r3, [pc, #660]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d6a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d74:	4aa1      	ldr	r2, [pc, #644]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d76:	430b      	orrs	r3, r1
 8006d78:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d7a:	e003      	b.n	8006d84 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d80:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006d90:	f04f 0900 	mov.w	r9, #0
 8006d94:	ea58 0309 	orrs.w	r3, r8, r9
 8006d98:	d047      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006da0:	2b04      	cmp	r3, #4
 8006da2:	d82a      	bhi.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006da4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dac <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006daa:	bf00      	nop
 8006dac:	08006dc1 	.word	0x08006dc1
 8006db0:	08006dcf 	.word	0x08006dcf
 8006db4:	08006de5 	.word	0x08006de5
 8006db8:	08006e03 	.word	0x08006e03
 8006dbc:	08006e03 	.word	0x08006e03
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dc0:	4b8e      	ldr	r3, [pc, #568]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc4:	4a8d      	ldr	r2, [pc, #564]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dcc:	e01a      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dd2:	3308      	adds	r3, #8
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f001 fc3c 	bl	8008654 <RCCEx_PLL2_Config>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006de2:	e00f      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006de8:	3328      	adds	r3, #40	@ 0x28
 8006dea:	2100      	movs	r1, #0
 8006dec:	4618      	mov	r0, r3
 8006dee:	f001 fce3 	bl	80087b8 <RCCEx_PLL3_Config>
 8006df2:	4603      	mov	r3, r0
 8006df4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006df8:	e004      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e00:	e000      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006e02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d10a      	bne.n	8006e22 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006e0c:	4b7b      	ldr	r3, [pc, #492]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e10:	f023 0107 	bic.w	r1, r3, #7
 8006e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e1a:	4a78      	ldr	r2, [pc, #480]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e1c:	430b      	orrs	r3, r1
 8006e1e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006e20:	e003      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e32:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006e36:	f04f 0b00 	mov.w	fp, #0
 8006e3a:	ea5a 030b 	orrs.w	r3, sl, fp
 8006e3e:	d04c      	beq.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e4a:	d030      	beq.n	8006eae <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006e4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006e50:	d829      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e52:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e54:	d02d      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006e56:	2bc0      	cmp	r3, #192	@ 0xc0
 8006e58:	d825      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e5a:	2b80      	cmp	r3, #128	@ 0x80
 8006e5c:	d018      	beq.n	8006e90 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006e5e:	2b80      	cmp	r3, #128	@ 0x80
 8006e60:	d821      	bhi.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006e66:	2b40      	cmp	r3, #64	@ 0x40
 8006e68:	d007      	beq.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006e6a:	e01c      	b.n	8006ea6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e6c:	4b63      	ldr	r3, [pc, #396]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e70:	4a62      	ldr	r2, [pc, #392]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006e76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e78:	e01c      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e7e:	3308      	adds	r3, #8
 8006e80:	2100      	movs	r1, #0
 8006e82:	4618      	mov	r0, r3
 8006e84:	f001 fbe6 	bl	8008654 <RCCEx_PLL2_Config>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006e8e:	e011      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e94:	3328      	adds	r3, #40	@ 0x28
 8006e96:	2100      	movs	r1, #0
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f001 fc8d 	bl	80087b8 <RCCEx_PLL3_Config>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006ea4:	e006      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006eac:	e002      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006eae:	bf00      	nop
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006eb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006eb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d10a      	bne.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ebe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ec0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006eca:	4a4c      	ldr	r2, [pc, #304]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ecc:	430b      	orrs	r3, r1
 8006ece:	6513      	str	r3, [r2, #80]	@ 0x50
 8006ed0:	e003      	b.n	8006eda <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ee2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006ee6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006eea:	2300      	movs	r3, #0
 8006eec:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006ef0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	d053      	beq.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006efe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f06:	d035      	beq.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006f08:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006f0c:	d82e      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f0e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f12:	d031      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006f14:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006f18:	d828      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f1e:	d01a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006f20:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006f24:	d822      	bhi.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d003      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006f2a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f2e:	d007      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006f30:	e01c      	b.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f32:	4b32      	ldr	r3, [pc, #200]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f36:	4a31      	ldr	r2, [pc, #196]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f3e:	e01c      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	3308      	adds	r3, #8
 8006f46:	2100      	movs	r1, #0
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f001 fb83 	bl	8008654 <RCCEx_PLL2_Config>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006f54:	e011      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f5a:	3328      	adds	r3, #40	@ 0x28
 8006f5c:	2100      	movs	r1, #0
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 fc2a 	bl	80087b8 <RCCEx_PLL3_Config>
 8006f64:	4603      	mov	r3, r0
 8006f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f6a:	e006      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f72:	e002      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f74:	bf00      	nop
 8006f76:	e000      	b.n	8006f7a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006f78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d10b      	bne.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006f82:	4b1e      	ldr	r3, [pc, #120]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f86:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006f92:	4a1a      	ldr	r2, [pc, #104]	@ (8006ffc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f94:	430b      	orrs	r3, r1
 8006f96:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f98:	e003      	b.n	8006fa2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006fae:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006fb8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	d056      	beq.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fc6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006fca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fce:	d038      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006fd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006fd4:	d831      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fd6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fda:	d034      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006fdc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006fe0:	d82b      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fe6:	d01d      	beq.n	8007024 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006fe8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006fec:	d825      	bhi.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d006      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006ff2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ff6:	d00a      	beq.n	800700e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006ff8:	e01f      	b.n	800703a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006ffa:	bf00      	nop
 8006ffc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007000:	4ba2      	ldr	r3, [pc, #648]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007004:	4aa1      	ldr	r2, [pc, #644]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800700a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800700c:	e01c      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800700e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007012:	3308      	adds	r3, #8
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f001 fb1c 	bl	8008654 <RCCEx_PLL2_Config>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007022:	e011      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007028:	3328      	adds	r3, #40	@ 0x28
 800702a:	2100      	movs	r1, #0
 800702c:	4618      	mov	r0, r3
 800702e:	f001 fbc3 	bl	80087b8 <RCCEx_PLL3_Config>
 8007032:	4603      	mov	r3, r0
 8007034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007038:	e006      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007040:	e002      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007042:	bf00      	nop
 8007044:	e000      	b.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007046:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007048:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10b      	bne.n	8007068 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007050:	4b8e      	ldr	r3, [pc, #568]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007054:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8007058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800705c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007060:	4a8a      	ldr	r2, [pc, #552]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007062:	430b      	orrs	r3, r1
 8007064:	6593      	str	r3, [r2, #88]	@ 0x58
 8007066:	e003      	b.n	8007070 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800706c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800707c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007080:	2300      	movs	r3, #0
 8007082:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007086:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800708a:	460b      	mov	r3, r1
 800708c:	4313      	orrs	r3, r2
 800708e:	d03a      	beq.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007090:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007096:	2b30      	cmp	r3, #48	@ 0x30
 8007098:	d01f      	beq.n	80070da <HAL_RCCEx_PeriphCLKConfig+0x416>
 800709a:	2b30      	cmp	r3, #48	@ 0x30
 800709c:	d819      	bhi.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800709e:	2b20      	cmp	r3, #32
 80070a0:	d00c      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80070a2:	2b20      	cmp	r3, #32
 80070a4:	d815      	bhi.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d019      	beq.n	80070de <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d111      	bne.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070ae:	4b77      	ldr	r3, [pc, #476]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a76      	ldr	r2, [pc, #472]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070ba:	e011      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80070bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070c0:	3308      	adds	r3, #8
 80070c2:	2102      	movs	r1, #2
 80070c4:	4618      	mov	r0, r3
 80070c6:	f001 fac5 	bl	8008654 <RCCEx_PLL2_Config>
 80070ca:	4603      	mov	r3, r0
 80070cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80070d0:	e006      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80070d8:	e002      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070da:	bf00      	nop
 80070dc:	e000      	b.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80070de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d10a      	bne.n	80070fe <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80070e8:	4b68      	ldr	r3, [pc, #416]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070ec:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80070f6:	4a65      	ldr	r2, [pc, #404]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80070f8:	430b      	orrs	r3, r1
 80070fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80070fc:	e003      	b.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007102:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007106:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800710a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800710e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8007112:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8007116:	2300      	movs	r3, #0
 8007118:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800711c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8007120:	460b      	mov	r3, r1
 8007122:	4313      	orrs	r3, r2
 8007124:	d051      	beq.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007126:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800712c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007130:	d035      	beq.n	800719e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007132:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007136:	d82e      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007138:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800713c:	d031      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800713e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007142:	d828      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007144:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007148:	d01a      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800714a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800714e:	d822      	bhi.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007150:	2b00      	cmp	r3, #0
 8007152:	d003      	beq.n	800715c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007154:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007158:	d007      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800715a:	e01c      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800715c:	4b4b      	ldr	r3, [pc, #300]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800715e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007160:	4a4a      	ldr	r2, [pc, #296]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007162:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007166:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007168:	e01c      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800716a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716e:	3308      	adds	r3, #8
 8007170:	2100      	movs	r1, #0
 8007172:	4618      	mov	r0, r3
 8007174:	f001 fa6e 	bl	8008654 <RCCEx_PLL2_Config>
 8007178:	4603      	mov	r3, r0
 800717a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800717e:	e011      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007184:	3328      	adds	r3, #40	@ 0x28
 8007186:	2100      	movs	r1, #0
 8007188:	4618      	mov	r0, r3
 800718a:	f001 fb15 	bl	80087b8 <RCCEx_PLL3_Config>
 800718e:	4603      	mov	r3, r0
 8007190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007194:	e006      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800719c:	e002      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800719e:	bf00      	nop
 80071a0:	e000      	b.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80071a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d10a      	bne.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80071ac:	4b37      	ldr	r3, [pc, #220]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80071b0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80071ba:	4a34      	ldr	r2, [pc, #208]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071bc:	430b      	orrs	r3, r1
 80071be:	6513      	str	r3, [r2, #80]	@ 0x50
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80071ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80071d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80071da:	2300      	movs	r3, #0
 80071dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80071e0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80071e4:	460b      	mov	r3, r1
 80071e6:	4313      	orrs	r3, r2
 80071e8:	d056      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80071ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80071f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071f4:	d033      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80071f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071fa:	d82c      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80071fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007200:	d02f      	beq.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007202:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007206:	d826      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007208:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800720c:	d02b      	beq.n	8007266 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800720e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007212:	d820      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007214:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007218:	d012      	beq.n	8007240 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800721a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800721e:	d81a      	bhi.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007220:	2b00      	cmp	r3, #0
 8007222:	d022      	beq.n	800726a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007224:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007228:	d115      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800722a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800722e:	3308      	adds	r3, #8
 8007230:	2101      	movs	r1, #1
 8007232:	4618      	mov	r0, r3
 8007234:	f001 fa0e 	bl	8008654 <RCCEx_PLL2_Config>
 8007238:	4603      	mov	r3, r0
 800723a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800723e:	e015      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007244:	3328      	adds	r3, #40	@ 0x28
 8007246:	2101      	movs	r1, #1
 8007248:	4618      	mov	r0, r3
 800724a:	f001 fab5 	bl	80087b8 <RCCEx_PLL3_Config>
 800724e:	4603      	mov	r3, r0
 8007250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007254:	e00a      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800725c:	e006      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800725e:	bf00      	nop
 8007260:	e004      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007262:	bf00      	nop
 8007264:	e002      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007266:	bf00      	nop
 8007268:	e000      	b.n	800726c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800726a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800726c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007270:	2b00      	cmp	r3, #0
 8007272:	d10d      	bne.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007274:	4b05      	ldr	r3, [pc, #20]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007276:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007278:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800727c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007280:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007282:	4a02      	ldr	r2, [pc, #8]	@ (800728c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007284:	430b      	orrs	r3, r1
 8007286:	6513      	str	r3, [r2, #80]	@ 0x50
 8007288:	e006      	b.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800728a:	bf00      	nop
 800728c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007290:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007294:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800729c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80072a4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80072a8:	2300      	movs	r3, #0
 80072aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80072ae:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80072b2:	460b      	mov	r3, r1
 80072b4:	4313      	orrs	r3, r2
 80072b6:	d055      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80072b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80072c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072c4:	d033      	beq.n	800732e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80072c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80072ca:	d82c      	bhi.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d0:	d02f      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80072d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072d6:	d826      	bhi.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072d8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072dc:	d02b      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80072de:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80072e2:	d820      	bhi.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072e8:	d012      	beq.n	8007310 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80072ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80072ee:	d81a      	bhi.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d022      	beq.n	800733a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80072f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80072f8:	d115      	bne.n	8007326 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80072fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072fe:	3308      	adds	r3, #8
 8007300:	2101      	movs	r1, #1
 8007302:	4618      	mov	r0, r3
 8007304:	f001 f9a6 	bl	8008654 <RCCEx_PLL2_Config>
 8007308:	4603      	mov	r3, r0
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800730e:	e015      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007310:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007314:	3328      	adds	r3, #40	@ 0x28
 8007316:	2101      	movs	r1, #1
 8007318:	4618      	mov	r0, r3
 800731a:	f001 fa4d 	bl	80087b8 <RCCEx_PLL3_Config>
 800731e:	4603      	mov	r3, r0
 8007320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007324:	e00a      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007326:	2301      	movs	r3, #1
 8007328:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800732c:	e006      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800732e:	bf00      	nop
 8007330:	e004      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007332:	bf00      	nop
 8007334:	e002      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007336:	bf00      	nop
 8007338:	e000      	b.n	800733c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800733a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800733c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10b      	bne.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007344:	4ba3      	ldr	r3, [pc, #652]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007348:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800734c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007350:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007354:	4a9f      	ldr	r2, [pc, #636]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007356:	430b      	orrs	r3, r1
 8007358:	6593      	str	r3, [r2, #88]	@ 0x58
 800735a:	e003      	b.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800735c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007360:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007370:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007374:	2300      	movs	r3, #0
 8007376:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800737a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800737e:	460b      	mov	r3, r1
 8007380:	4313      	orrs	r3, r2
 8007382:	d037      	beq.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007384:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800738a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800738e:	d00e      	beq.n	80073ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007390:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007394:	d816      	bhi.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <HAL_RCCEx_PeriphCLKConfig+0x708>
 800739a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800739e:	d111      	bne.n	80073c4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80073a0:	4b8c      	ldr	r3, [pc, #560]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	4a8b      	ldr	r2, [pc, #556]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80073aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073ac:	e00f      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073b2:	3308      	adds	r3, #8
 80073b4:	2101      	movs	r1, #1
 80073b6:	4618      	mov	r0, r3
 80073b8:	f001 f94c 	bl	8008654 <RCCEx_PLL2_Config>
 80073bc:	4603      	mov	r3, r0
 80073be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80073c2:	e004      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073c4:	2301      	movs	r3, #1
 80073c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073ca:	e000      	b.n	80073ce <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80073cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80073ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d10a      	bne.n	80073ec <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80073d6:	4b7f      	ldr	r3, [pc, #508]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073da:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073e4:	4a7b      	ldr	r2, [pc, #492]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073e6:	430b      	orrs	r3, r1
 80073e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80073ea:	e003      	b.n	80073f4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80073f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80073f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8007400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007404:	2300      	movs	r3, #0
 8007406:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800740a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800740e:	460b      	mov	r3, r1
 8007410:	4313      	orrs	r3, r2
 8007412:	d039      	beq.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007414:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800741a:	2b03      	cmp	r3, #3
 800741c:	d81c      	bhi.n	8007458 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800741e:	a201      	add	r2, pc, #4	@ (adr r2, 8007424 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007424:	08007461 	.word	0x08007461
 8007428:	08007435 	.word	0x08007435
 800742c:	08007443 	.word	0x08007443
 8007430:	08007461 	.word	0x08007461
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007434:	4b67      	ldr	r3, [pc, #412]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007438:	4a66      	ldr	r2, [pc, #408]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800743e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007440:	e00f      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007446:	3308      	adds	r3, #8
 8007448:	2102      	movs	r1, #2
 800744a:	4618      	mov	r0, r3
 800744c:	f001 f902 	bl	8008654 <RCCEx_PLL2_Config>
 8007450:	4603      	mov	r3, r0
 8007452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007456:	e004      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007458:	2301      	movs	r3, #1
 800745a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800745e:	e000      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800746a:	4b5a      	ldr	r3, [pc, #360]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800746c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800746e:	f023 0103 	bic.w	r1, r3, #3
 8007472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007476:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007478:	4a56      	ldr	r2, [pc, #344]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800747a:	430b      	orrs	r3, r1
 800747c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800747e:	e003      	b.n	8007488 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007494:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007498:	2300      	movs	r3, #0
 800749a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800749e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80074a2:	460b      	mov	r3, r1
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f000 809f 	beq.w	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80074aa:	4b4b      	ldr	r3, [pc, #300]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a4a      	ldr	r2, [pc, #296]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074b4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80074b6:	f7fd fb51 	bl	8004b5c <HAL_GetTick>
 80074ba:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074be:	e00b      	b.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80074c0:	f7fd fb4c 	bl	8004b5c <HAL_GetTick>
 80074c4:	4602      	mov	r2, r0
 80074c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b64      	cmp	r3, #100	@ 0x64
 80074ce:	d903      	bls.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074d6:	e005      	b.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80074d8:	4b3f      	ldr	r3, [pc, #252]	@ (80075d8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d0ed      	beq.n	80074c0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80074e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d179      	bne.n	80075e0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80074ec:	4b39      	ldr	r3, [pc, #228]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074ee:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80074f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80074f8:	4053      	eors	r3, r2
 80074fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d015      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007502:	4b34      	ldr	r3, [pc, #208]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007504:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007506:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800750a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800750e:	4b31      	ldr	r3, [pc, #196]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007510:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007512:	4a30      	ldr	r2, [pc, #192]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007518:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800751a:	4b2e      	ldr	r3, [pc, #184]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800751c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800751e:	4a2d      	ldr	r2, [pc, #180]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007524:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007526:	4a2b      	ldr	r2, [pc, #172]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007528:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800752c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800752e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007532:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007536:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800753a:	d118      	bne.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800753c:	f7fd fb0e 	bl	8004b5c <HAL_GetTick>
 8007540:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007544:	e00d      	b.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007546:	f7fd fb09 	bl	8004b5c <HAL_GetTick>
 800754a:	4602      	mov	r2, r0
 800754c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007550:	1ad2      	subs	r2, r2, r3
 8007552:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007556:	429a      	cmp	r2, r3
 8007558:	d903      	bls.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800755a:	2303      	movs	r3, #3
 800755c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007560:	e005      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007562:	4b1c      	ldr	r3, [pc, #112]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007564:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007566:	f003 0302 	and.w	r3, r3, #2
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0eb      	beq.n	8007546 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007572:	2b00      	cmp	r3, #0
 8007574:	d129      	bne.n	80075ca <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800757a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800757e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007582:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007586:	d10e      	bne.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007588:	4b12      	ldr	r3, [pc, #72]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800758a:	691b      	ldr	r3, [r3, #16]
 800758c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007594:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007598:	091a      	lsrs	r2, r3, #4
 800759a:	4b10      	ldr	r3, [pc, #64]	@ (80075dc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800759c:	4013      	ands	r3, r2
 800759e:	4a0d      	ldr	r2, [pc, #52]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a0:	430b      	orrs	r3, r1
 80075a2:	6113      	str	r3, [r2, #16]
 80075a4:	e005      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80075a6:	4b0b      	ldr	r3, [pc, #44]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	4a0a      	ldr	r2, [pc, #40]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075ac:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80075b0:	6113      	str	r3, [r2, #16]
 80075b2:	4b08      	ldr	r3, [pc, #32]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075b4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80075be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075c2:	4a04      	ldr	r2, [pc, #16]	@ (80075d4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075c4:	430b      	orrs	r3, r1
 80075c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80075c8:	e00e      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80075ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80075d2:	e009      	b.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80075d4:	58024400 	.word	0x58024400
 80075d8:	58024800 	.word	0x58024800
 80075dc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80075e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075f0:	f002 0301 	and.w	r3, r2, #1
 80075f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80075f8:	2300      	movs	r3, #0
 80075fa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80075fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007602:	460b      	mov	r3, r1
 8007604:	4313      	orrs	r3, r2
 8007606:	f000 8089 	beq.w	800771c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800760a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800760e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007610:	2b28      	cmp	r3, #40	@ 0x28
 8007612:	d86b      	bhi.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8007614:	a201      	add	r2, pc, #4	@ (adr r2, 800761c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8007616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800761a:	bf00      	nop
 800761c:	080076f5 	.word	0x080076f5
 8007620:	080076ed 	.word	0x080076ed
 8007624:	080076ed 	.word	0x080076ed
 8007628:	080076ed 	.word	0x080076ed
 800762c:	080076ed 	.word	0x080076ed
 8007630:	080076ed 	.word	0x080076ed
 8007634:	080076ed 	.word	0x080076ed
 8007638:	080076ed 	.word	0x080076ed
 800763c:	080076c1 	.word	0x080076c1
 8007640:	080076ed 	.word	0x080076ed
 8007644:	080076ed 	.word	0x080076ed
 8007648:	080076ed 	.word	0x080076ed
 800764c:	080076ed 	.word	0x080076ed
 8007650:	080076ed 	.word	0x080076ed
 8007654:	080076ed 	.word	0x080076ed
 8007658:	080076ed 	.word	0x080076ed
 800765c:	080076d7 	.word	0x080076d7
 8007660:	080076ed 	.word	0x080076ed
 8007664:	080076ed 	.word	0x080076ed
 8007668:	080076ed 	.word	0x080076ed
 800766c:	080076ed 	.word	0x080076ed
 8007670:	080076ed 	.word	0x080076ed
 8007674:	080076ed 	.word	0x080076ed
 8007678:	080076ed 	.word	0x080076ed
 800767c:	080076f5 	.word	0x080076f5
 8007680:	080076ed 	.word	0x080076ed
 8007684:	080076ed 	.word	0x080076ed
 8007688:	080076ed 	.word	0x080076ed
 800768c:	080076ed 	.word	0x080076ed
 8007690:	080076ed 	.word	0x080076ed
 8007694:	080076ed 	.word	0x080076ed
 8007698:	080076ed 	.word	0x080076ed
 800769c:	080076f5 	.word	0x080076f5
 80076a0:	080076ed 	.word	0x080076ed
 80076a4:	080076ed 	.word	0x080076ed
 80076a8:	080076ed 	.word	0x080076ed
 80076ac:	080076ed 	.word	0x080076ed
 80076b0:	080076ed 	.word	0x080076ed
 80076b4:	080076ed 	.word	0x080076ed
 80076b8:	080076ed 	.word	0x080076ed
 80076bc:	080076f5 	.word	0x080076f5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c4:	3308      	adds	r3, #8
 80076c6:	2101      	movs	r1, #1
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 ffc3 	bl	8008654 <RCCEx_PLL2_Config>
 80076ce:	4603      	mov	r3, r0
 80076d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076d4:	e00f      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076da:	3328      	adds	r3, #40	@ 0x28
 80076dc:	2101      	movs	r1, #1
 80076de:	4618      	mov	r0, r3
 80076e0:	f001 f86a 	bl	80087b8 <RCCEx_PLL3_Config>
 80076e4:	4603      	mov	r3, r0
 80076e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80076ea:	e004      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076f2:	e000      	b.n	80076f6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80076f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d10a      	bne.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80076fe:	4bbf      	ldr	r3, [pc, #764]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007700:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007702:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8007706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800770a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800770c:	4abb      	ldr	r2, [pc, #748]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800770e:	430b      	orrs	r3, r1
 8007710:	6553      	str	r3, [r2, #84]	@ 0x54
 8007712:	e003      	b.n	800771c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007714:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007718:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800771c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007724:	f002 0302 	and.w	r3, r2, #2
 8007728:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800772c:	2300      	movs	r3, #0
 800772e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8007732:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8007736:	460b      	mov	r3, r1
 8007738:	4313      	orrs	r3, r2
 800773a:	d041      	beq.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800773c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007740:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007742:	2b05      	cmp	r3, #5
 8007744:	d824      	bhi.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8007746:	a201      	add	r2, pc, #4	@ (adr r2, 800774c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8007748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800774c:	08007799 	.word	0x08007799
 8007750:	08007765 	.word	0x08007765
 8007754:	0800777b 	.word	0x0800777b
 8007758:	08007799 	.word	0x08007799
 800775c:	08007799 	.word	0x08007799
 8007760:	08007799 	.word	0x08007799
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007764:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007768:	3308      	adds	r3, #8
 800776a:	2101      	movs	r1, #1
 800776c:	4618      	mov	r0, r3
 800776e:	f000 ff71 	bl	8008654 <RCCEx_PLL2_Config>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007778:	e00f      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800777a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800777e:	3328      	adds	r3, #40	@ 0x28
 8007780:	2101      	movs	r1, #1
 8007782:	4618      	mov	r0, r3
 8007784:	f001 f818 	bl	80087b8 <RCCEx_PLL3_Config>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800778e:	e004      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007796:	e000      	b.n	800779a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007798:	bf00      	nop
    }

    if (ret == HAL_OK)
 800779a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d10a      	bne.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80077a2:	4b96      	ldr	r3, [pc, #600]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077a6:	f023 0107 	bic.w	r1, r3, #7
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80077b0:	4a92      	ldr	r2, [pc, #584]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077b2:	430b      	orrs	r3, r1
 80077b4:	6553      	str	r3, [r2, #84]	@ 0x54
 80077b6:	e003      	b.n	80077c0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80077c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c8:	f002 0304 	and.w	r3, r2, #4
 80077cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80077d0:	2300      	movs	r3, #0
 80077d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80077d6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80077da:	460b      	mov	r3, r1
 80077dc:	4313      	orrs	r3, r2
 80077de:	d044      	beq.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80077e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80077e8:	2b05      	cmp	r3, #5
 80077ea:	d825      	bhi.n	8007838 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80077ec:	a201      	add	r2, pc, #4	@ (adr r2, 80077f4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80077ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f2:	bf00      	nop
 80077f4:	08007841 	.word	0x08007841
 80077f8:	0800780d 	.word	0x0800780d
 80077fc:	08007823 	.word	0x08007823
 8007800:	08007841 	.word	0x08007841
 8007804:	08007841 	.word	0x08007841
 8007808:	08007841 	.word	0x08007841
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800780c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007810:	3308      	adds	r3, #8
 8007812:	2101      	movs	r1, #1
 8007814:	4618      	mov	r0, r3
 8007816:	f000 ff1d 	bl	8008654 <RCCEx_PLL2_Config>
 800781a:	4603      	mov	r3, r0
 800781c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007820:	e00f      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007826:	3328      	adds	r3, #40	@ 0x28
 8007828:	2101      	movs	r1, #1
 800782a:	4618      	mov	r0, r3
 800782c:	f000 ffc4 	bl	80087b8 <RCCEx_PLL3_Config>
 8007830:	4603      	mov	r3, r0
 8007832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8007836:	e004      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800783e:	e000      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8007840:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007846:	2b00      	cmp	r3, #0
 8007848:	d10b      	bne.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800784a:	4b6c      	ldr	r3, [pc, #432]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800784c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800784e:	f023 0107 	bic.w	r1, r3, #7
 8007852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800785a:	4a68      	ldr	r2, [pc, #416]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800785c:	430b      	orrs	r3, r1
 800785e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007860:	e003      	b.n	800786a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800786a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800786e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007872:	f002 0320 	and.w	r3, r2, #32
 8007876:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800787a:	2300      	movs	r3, #0
 800787c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007880:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007884:	460b      	mov	r3, r1
 8007886:	4313      	orrs	r3, r2
 8007888:	d055      	beq.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800788a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800788e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007892:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007896:	d033      	beq.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007898:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800789c:	d82c      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800789e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a2:	d02f      	beq.n	8007904 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80078a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078a8:	d826      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078ae:	d02b      	beq.n	8007908 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80078b0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80078b4:	d820      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078ba:	d012      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80078bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80078c0:	d81a      	bhi.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d022      	beq.n	800790c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80078c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80078ca:	d115      	bne.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078d0:	3308      	adds	r3, #8
 80078d2:	2100      	movs	r1, #0
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 febd 	bl	8008654 <RCCEx_PLL2_Config>
 80078da:	4603      	mov	r3, r0
 80078dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078e0:	e015      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e6:	3328      	adds	r3, #40	@ 0x28
 80078e8:	2102      	movs	r1, #2
 80078ea:	4618      	mov	r0, r3
 80078ec:	f000 ff64 	bl	80087b8 <RCCEx_PLL3_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80078f6:	e00a      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80078f8:	2301      	movs	r3, #1
 80078fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80078fe:	e006      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007900:	bf00      	nop
 8007902:	e004      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007904:	bf00      	nop
 8007906:	e002      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007908:	bf00      	nop
 800790a:	e000      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800790c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800790e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10b      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007916:	4b39      	ldr	r3, [pc, #228]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007918:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800791a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800791e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007926:	4a35      	ldr	r2, [pc, #212]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007928:	430b      	orrs	r3, r1
 800792a:	6553      	str	r3, [r2, #84]	@ 0x54
 800792c:	e003      	b.n	8007936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800792e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800793a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007942:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007946:	2300      	movs	r3, #0
 8007948:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800794c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007950:	460b      	mov	r3, r1
 8007952:	4313      	orrs	r3, r2
 8007954:	d058      	beq.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800795a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800795e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007962:	d033      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007964:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007968:	d82c      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800796a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800796e:	d02f      	beq.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007974:	d826      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007976:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800797a:	d02b      	beq.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800797c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007980:	d820      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007982:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007986:	d012      	beq.n	80079ae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007988:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800798c:	d81a      	bhi.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d022      	beq.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007996:	d115      	bne.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800799c:	3308      	adds	r3, #8
 800799e:	2100      	movs	r1, #0
 80079a0:	4618      	mov	r0, r3
 80079a2:	f000 fe57 	bl	8008654 <RCCEx_PLL2_Config>
 80079a6:	4603      	mov	r3, r0
 80079a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079ac:	e015      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80079ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b2:	3328      	adds	r3, #40	@ 0x28
 80079b4:	2102      	movs	r1, #2
 80079b6:	4618      	mov	r0, r3
 80079b8:	f000 fefe 	bl	80087b8 <RCCEx_PLL3_Config>
 80079bc:	4603      	mov	r3, r0
 80079be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80079c2:	e00a      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079ca:	e006      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079cc:	bf00      	nop
 80079ce:	e004      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079d0:	bf00      	nop
 80079d2:	e002      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079d4:	bf00      	nop
 80079d6:	e000      	b.n	80079da <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80079d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d10e      	bne.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80079e2:	4b06      	ldr	r3, [pc, #24]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079e6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80079ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80079f2:	4a02      	ldr	r2, [pc, #8]	@ (80079fc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079f4:	430b      	orrs	r3, r1
 80079f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80079f8:	e006      	b.n	8007a08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80079fa:	bf00      	nop
 80079fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a00:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a10:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007a14:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a1e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007a22:	460b      	mov	r3, r1
 8007a24:	4313      	orrs	r3, r2
 8007a26:	d055      	beq.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007a28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007a30:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a34:	d033      	beq.n	8007a9e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007a36:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007a3a:	d82c      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a40:	d02f      	beq.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007a42:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a46:	d826      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a48:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a4c:	d02b      	beq.n	8007aa6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007a4e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007a52:	d820      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a54:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a58:	d012      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007a5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007a5e:	d81a      	bhi.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d022      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007a64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a68:	d115      	bne.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a6e:	3308      	adds	r3, #8
 8007a70:	2100      	movs	r1, #0
 8007a72:	4618      	mov	r0, r3
 8007a74:	f000 fdee 	bl	8008654 <RCCEx_PLL2_Config>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a7e:	e015      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	3328      	adds	r3, #40	@ 0x28
 8007a86:	2102      	movs	r1, #2
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fe95 	bl	80087b8 <RCCEx_PLL3_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007a94:	e00a      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a9c:	e006      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007a9e:	bf00      	nop
 8007aa0:	e004      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aa2:	bf00      	nop
 8007aa4:	e002      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aa6:	bf00      	nop
 8007aa8:	e000      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007ab4:	4ba1      	ldr	r3, [pc, #644]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ab8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007ac4:	4a9d      	ldr	r2, [pc, #628]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ac6:	430b      	orrs	r3, r1
 8007ac8:	6593      	str	r3, [r2, #88]	@ 0x58
 8007aca:	e003      	b.n	8007ad4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007acc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007adc:	f002 0308 	and.w	r3, r2, #8
 8007ae0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007aea:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007aee:	460b      	mov	r3, r1
 8007af0:	4313      	orrs	r3, r2
 8007af2:	d01e      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b00:	d10c      	bne.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b06:	3328      	adds	r3, #40	@ 0x28
 8007b08:	2102      	movs	r1, #2
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 fe54 	bl	80087b8 <RCCEx_PLL3_Config>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d002      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007b1c:	4b87      	ldr	r3, [pc, #540]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b20:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007b2c:	4a83      	ldr	r2, [pc, #524]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b2e:	430b      	orrs	r3, r1
 8007b30:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3a:	f002 0310 	and.w	r3, r2, #16
 8007b3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007b42:	2300      	movs	r3, #0
 8007b44:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007b48:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007b4c:	460b      	mov	r3, r1
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	d01e      	beq.n	8007b90 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b5e:	d10c      	bne.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b64:	3328      	adds	r3, #40	@ 0x28
 8007b66:	2102      	movs	r1, #2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f000 fe25 	bl	80087b8 <RCCEx_PLL3_Config>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d002      	beq.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007b74:	2301      	movs	r3, #1
 8007b76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b7a:	4b70      	ldr	r3, [pc, #448]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b7e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007b8a:	4a6c      	ldr	r2, [pc, #432]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b8c:	430b      	orrs	r3, r1
 8007b8e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b98:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007b9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007ba6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007baa:	460b      	mov	r3, r1
 8007bac:	4313      	orrs	r3, r2
 8007bae:	d03e      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007bb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007bb8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bbc:	d022      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007bbe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007bc2:	d81b      	bhi.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007bcc:	d00b      	beq.n	8007be6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007bce:	e015      	b.n	8007bfc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	2100      	movs	r1, #0
 8007bd8:	4618      	mov	r0, r3
 8007bda:	f000 fd3b 	bl	8008654 <RCCEx_PLL2_Config>
 8007bde:	4603      	mov	r3, r0
 8007be0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007be4:	e00f      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bea:	3328      	adds	r3, #40	@ 0x28
 8007bec:	2102      	movs	r1, #2
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fde2 	bl	80087b8 <RCCEx_PLL3_Config>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007bfa:	e004      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c02:	e000      	b.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007c04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d10b      	bne.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c12:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007c16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c1a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007c1e:	4a47      	ldr	r2, [pc, #284]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c20:	430b      	orrs	r3, r1
 8007c22:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c24:	e003      	b.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007c3a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c40:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d03b      	beq.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007c52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c56:	d01f      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007c58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007c5c:	d818      	bhi.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007c5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007c62:	d003      	beq.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007c64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007c68:	d007      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007c6a:	e011      	b.n	8007c90 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c6c:	4b33      	ldr	r3, [pc, #204]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c70:	4a32      	ldr	r2, [pc, #200]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c78:	e00f      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c7e:	3328      	adds	r3, #40	@ 0x28
 8007c80:	2101      	movs	r1, #1
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 fd98 	bl	80087b8 <RCCEx_PLL3_Config>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007c8e:	e004      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c90:	2301      	movs	r3, #1
 8007c92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c96:	e000      	b.n	8007c9a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007c98:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d10b      	bne.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ca2:	4b26      	ldr	r3, [pc, #152]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007cb2:	4a22      	ldr	r2, [pc, #136]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cb8:	e003      	b.n	8007cc2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cbe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cca:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007cce:	673b      	str	r3, [r7, #112]	@ 0x70
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	677b      	str	r3, [r7, #116]	@ 0x74
 8007cd4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007cd8:	460b      	mov	r3, r1
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	d034      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d003      	beq.n	8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007cec:	d007      	beq.n	8007cfe <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007cee:	e011      	b.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007cf0:	4b12      	ldr	r3, [pc, #72]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf4:	4a11      	ldr	r2, [pc, #68]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007cfc:	e00e      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d02:	3308      	adds	r3, #8
 8007d04:	2102      	movs	r1, #2
 8007d06:	4618      	mov	r0, r3
 8007d08:	f000 fca4 	bl	8008654 <RCCEx_PLL2_Config>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007d12:	e003      	b.n	8007d1c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007d1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007d1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d10d      	bne.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007d24:	4b05      	ldr	r3, [pc, #20]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007d28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d32:	4a02      	ldr	r2, [pc, #8]	@ (8007d3c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d34:	430b      	orrs	r3, r1
 8007d36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007d38:	e006      	b.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007d3a:	bf00      	nop
 8007d3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007d44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007d48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d50:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007d54:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007d56:	2300      	movs	r3, #0
 8007d58:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007d5a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4313      	orrs	r3, r2
 8007d62:	d00c      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d68:	3328      	adds	r3, #40	@ 0x28
 8007d6a:	2102      	movs	r1, #2
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f000 fd23 	bl	80087b8 <RCCEx_PLL3_Config>
 8007d72:	4603      	mov	r3, r0
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d86:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007d8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007d90:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007d94:	460b      	mov	r3, r1
 8007d96:	4313      	orrs	r3, r2
 8007d98:	d038      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007da2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007da6:	d018      	beq.n	8007dda <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007da8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007dac:	d811      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db2:	d014      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007db4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007db8:	d80b      	bhi.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d011      	beq.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dc2:	d106      	bne.n	8007dd2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007dc4:	4bc3      	ldr	r3, [pc, #780]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007dc8:	4ac2      	ldr	r2, [pc, #776]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007dce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007dd0:	e008      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007dd8:	e004      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dda:	bf00      	nop
 8007ddc:	e002      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007dde:	bf00      	nop
 8007de0:	e000      	b.n	8007de4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007de2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007de4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d10b      	bne.n	8007e04 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007dec:	4bb9      	ldr	r3, [pc, #740]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007df0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007df8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007dfc:	4ab5      	ldr	r2, [pc, #724]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dfe:	430b      	orrs	r3, r1
 8007e00:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e02:	e003      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e14:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007e18:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e1e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007e22:	460b      	mov	r3, r1
 8007e24:	4313      	orrs	r3, r2
 8007e26:	d009      	beq.n	8007e3c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e28:	4baa      	ldr	r3, [pc, #680]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e2c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007e36:	4aa7      	ldr	r2, [pc, #668]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e38:	430b      	orrs	r3, r1
 8007e3a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e44:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007e48:	653b      	str	r3, [r7, #80]	@ 0x50
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8007e4e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007e52:	460b      	mov	r3, r1
 8007e54:	4313      	orrs	r3, r2
 8007e56:	d00a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007e58:	4b9e      	ldr	r3, [pc, #632]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007e68:	4a9a      	ldr	r2, [pc, #616]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e6a:	430b      	orrs	r3, r1
 8007e6c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e76:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007e7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e80:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007e84:	460b      	mov	r3, r1
 8007e86:	4313      	orrs	r3, r2
 8007e88:	d009      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e8a:	4b92      	ldr	r3, [pc, #584]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007e98:	4a8e      	ldr	r2, [pc, #568]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007eaa:	643b      	str	r3, [r7, #64]	@ 0x40
 8007eac:	2300      	movs	r3, #0
 8007eae:	647b      	str	r3, [r7, #68]	@ 0x44
 8007eb0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007eb4:	460b      	mov	r3, r1
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	d00e      	beq.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007eba:	4b86      	ldr	r3, [pc, #536]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	4a85      	ldr	r2, [pc, #532]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007ec4:	6113      	str	r3, [r2, #16]
 8007ec6:	4b83      	ldr	r3, [pc, #524]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ec8:	6919      	ldr	r1, [r3, #16]
 8007eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ece:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007ed2:	4a80      	ldr	r2, [pc, #512]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007eea:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	d009      	beq.n	8007f08 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007ef4:	4b77      	ldr	r3, [pc, #476]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ef8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f02:	4a74      	ldr	r2, [pc, #464]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f04:	430b      	orrs	r3, r1
 8007f06:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f10:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007f14:	633b      	str	r3, [r7, #48]	@ 0x30
 8007f16:	2300      	movs	r3, #0
 8007f18:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f1a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007f1e:	460b      	mov	r3, r1
 8007f20:	4313      	orrs	r3, r2
 8007f22:	d00a      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007f24:	4b6b      	ldr	r3, [pc, #428]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f28:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007f34:	4a67      	ldr	r2, [pc, #412]	@ (80080d4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f36:	430b      	orrs	r3, r1
 8007f38:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f42:	2100      	movs	r1, #0
 8007f44:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007f46:	f003 0301 	and.w	r3, r3, #1
 8007f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007f4c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007f50:	460b      	mov	r3, r1
 8007f52:	4313      	orrs	r3, r2
 8007f54:	d011      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f5a:	3308      	adds	r3, #8
 8007f5c:	2100      	movs	r1, #0
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 fb78 	bl	8008654 <RCCEx_PLL2_Config>
 8007f64:	4603      	mov	r3, r0
 8007f66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f82:	2100      	movs	r1, #0
 8007f84:	6239      	str	r1, [r7, #32]
 8007f86:	f003 0302 	and.w	r3, r3, #2
 8007f8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f8c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007f90:	460b      	mov	r3, r1
 8007f92:	4313      	orrs	r3, r2
 8007f94:	d011      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	2101      	movs	r1, #1
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f000 fb58 	bl	8008654 <RCCEx_PLL2_Config>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007faa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d003      	beq.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007fba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc2:	2100      	movs	r1, #0
 8007fc4:	61b9      	str	r1, [r7, #24]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	61fb      	str	r3, [r7, #28]
 8007fcc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	d011      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fda:	3308      	adds	r3, #8
 8007fdc:	2102      	movs	r1, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fb38 	bl	8008654 <RCCEx_PLL2_Config>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007fea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d003      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ff2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ff6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007ffa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008002:	2100      	movs	r1, #0
 8008004:	6139      	str	r1, [r7, #16]
 8008006:	f003 0308 	and.w	r3, r3, #8
 800800a:	617b      	str	r3, [r7, #20]
 800800c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008010:	460b      	mov	r3, r1
 8008012:	4313      	orrs	r3, r2
 8008014:	d011      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008016:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800801a:	3328      	adds	r3, #40	@ 0x28
 800801c:	2100      	movs	r1, #0
 800801e:	4618      	mov	r0, r3
 8008020:	f000 fbca 	bl	80087b8 <RCCEx_PLL3_Config>
 8008024:	4603      	mov	r3, r0
 8008026:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800802a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800802e:	2b00      	cmp	r3, #0
 8008030:	d003      	beq.n	800803a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800803a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800803e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008042:	2100      	movs	r1, #0
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	f003 0310 	and.w	r3, r3, #16
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008050:	460b      	mov	r3, r1
 8008052:	4313      	orrs	r3, r2
 8008054:	d011      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008056:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800805a:	3328      	adds	r3, #40	@ 0x28
 800805c:	2101      	movs	r1, #1
 800805e:	4618      	mov	r0, r3
 8008060:	f000 fbaa 	bl	80087b8 <RCCEx_PLL3_Config>
 8008064:	4603      	mov	r3, r0
 8008066:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800806a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800807a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008082:	2100      	movs	r1, #0
 8008084:	6039      	str	r1, [r7, #0]
 8008086:	f003 0320 	and.w	r3, r3, #32
 800808a:	607b      	str	r3, [r7, #4]
 800808c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008090:	460b      	mov	r3, r1
 8008092:	4313      	orrs	r3, r2
 8008094:	d011      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008096:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800809a:	3328      	adds	r3, #40	@ 0x28
 800809c:	2102      	movs	r1, #2
 800809e:	4618      	mov	r0, r3
 80080a0:	f000 fb8a 	bl	80087b8 <RCCEx_PLL3_Config>
 80080a4:	4603      	mov	r3, r0
 80080a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80080aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d003      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80080b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80080ba:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	e000      	b.n	80080c8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80080c6:	2301      	movs	r3, #1
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80080ce:	46bd      	mov	sp, r7
 80080d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080d4:	58024400 	.word	0x58024400

080080d8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80080dc:	f7fe fd96 	bl	8006c0c <HAL_RCC_GetHCLKFreq>
 80080e0:	4602      	mov	r2, r0
 80080e2:	4b06      	ldr	r3, [pc, #24]	@ (80080fc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	091b      	lsrs	r3, r3, #4
 80080e8:	f003 0307 	and.w	r3, r3, #7
 80080ec:	4904      	ldr	r1, [pc, #16]	@ (8008100 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80080ee:	5ccb      	ldrb	r3, [r1, r3]
 80080f0:	f003 031f 	and.w	r3, r3, #31
 80080f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	bd80      	pop	{r7, pc}
 80080fc:	58024400 	.word	0x58024400
 8008100:	080100f4 	.word	0x080100f4

08008104 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008104:	b480      	push	{r7}
 8008106:	b089      	sub	sp, #36	@ 0x24
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800810c:	4ba1      	ldr	r3, [pc, #644]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800810e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008110:	f003 0303 	and.w	r3, r3, #3
 8008114:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008116:	4b9f      	ldr	r3, [pc, #636]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811a:	0b1b      	lsrs	r3, r3, #12
 800811c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008120:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008122:	4b9c      	ldr	r3, [pc, #624]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008126:	091b      	lsrs	r3, r3, #4
 8008128:	f003 0301 	and.w	r3, r3, #1
 800812c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800812e:	4b99      	ldr	r3, [pc, #612]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008130:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008132:	08db      	lsrs	r3, r3, #3
 8008134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	fb02 f303 	mul.w	r3, r2, r3
 800813e:	ee07 3a90 	vmov	s15, r3
 8008142:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008146:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	f000 8111 	beq.w	8008374 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	2b02      	cmp	r3, #2
 8008156:	f000 8083 	beq.w	8008260 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800815a:	69bb      	ldr	r3, [r7, #24]
 800815c:	2b02      	cmp	r3, #2
 800815e:	f200 80a1 	bhi.w	80082a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d003      	beq.n	8008170 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008168:	69bb      	ldr	r3, [r7, #24]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d056      	beq.n	800821c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800816e:	e099      	b.n	80082a4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008170:	4b88      	ldr	r3, [pc, #544]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f003 0320 	and.w	r3, r3, #32
 8008178:	2b00      	cmp	r3, #0
 800817a:	d02d      	beq.n	80081d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800817c:	4b85      	ldr	r3, [pc, #532]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	08db      	lsrs	r3, r3, #3
 8008182:	f003 0303 	and.w	r3, r3, #3
 8008186:	4a84      	ldr	r2, [pc, #528]	@ (8008398 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008188:	fa22 f303 	lsr.w	r3, r2, r3
 800818c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	ee07 3a90 	vmov	s15, r3
 8008194:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	ee07 3a90 	vmov	s15, r3
 800819e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081a6:	4b7b      	ldr	r3, [pc, #492]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081ae:	ee07 3a90 	vmov	s15, r3
 80081b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80081ba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80081be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80081c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80081c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80081ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80081ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80081d2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80081d6:	e087      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	ee07 3a90 	vmov	s15, r3
 80081de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081e2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80083a0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80081e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081ea:	4b6a      	ldr	r3, [pc, #424]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081f2:	ee07 3a90 	vmov	s15, r3
 80081f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80081fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80081fe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008202:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008206:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800820a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800820e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008216:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800821a:	e065      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800821c:	697b      	ldr	r3, [r7, #20]
 800821e:	ee07 3a90 	vmov	s15, r3
 8008222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008226:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800822a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800822e:	4b59      	ldr	r3, [pc, #356]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008230:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008232:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008236:	ee07 3a90 	vmov	s15, r3
 800823a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800823e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008242:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008246:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800824a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800824e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008252:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800825a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800825e:	e043      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008260:	697b      	ldr	r3, [r7, #20]
 8008262:	ee07 3a90 	vmov	s15, r3
 8008266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800826a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80083a8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800826e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008272:	4b48      	ldr	r3, [pc, #288]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800827a:	ee07 3a90 	vmov	s15, r3
 800827e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008282:	ed97 6a03 	vldr	s12, [r7, #12]
 8008286:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800828a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800828e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008292:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008296:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800829a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800829e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082a2:	e021      	b.n	80082e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	ee07 3a90 	vmov	s15, r3
 80082aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082ae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80083a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80082b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082b6:	4b37      	ldr	r3, [pc, #220]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082be:	ee07 3a90 	vmov	s15, r3
 80082c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80082ca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800839c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80082ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80082d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80082d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80082da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80082de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80082e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80082e6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80082e8:	4b2a      	ldr	r3, [pc, #168]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082ec:	0a5b      	lsrs	r3, r3, #9
 80082ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80082fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008302:	edd7 6a07 	vldr	s13, [r7, #28]
 8008306:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800830a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800830e:	ee17 2a90 	vmov	r2, s15
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008316:	4b1f      	ldr	r3, [pc, #124]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800831a:	0c1b      	lsrs	r3, r3, #16
 800831c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008320:	ee07 3a90 	vmov	s15, r3
 8008324:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008328:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800832c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008330:	edd7 6a07 	vldr	s13, [r7, #28]
 8008334:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008338:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800833c:	ee17 2a90 	vmov	r2, s15
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008344:	4b13      	ldr	r3, [pc, #76]	@ (8008394 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008348:	0e1b      	lsrs	r3, r3, #24
 800834a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008356:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800835a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800835e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800836a:	ee17 2a90 	vmov	r2, s15
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008372:	e008      	b.n	8008386 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2200      	movs	r2, #0
 8008384:	609a      	str	r2, [r3, #8]
}
 8008386:	bf00      	nop
 8008388:	3724      	adds	r7, #36	@ 0x24
 800838a:	46bd      	mov	sp, r7
 800838c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008390:	4770      	bx	lr
 8008392:	bf00      	nop
 8008394:	58024400 	.word	0x58024400
 8008398:	03d09000 	.word	0x03d09000
 800839c:	46000000 	.word	0x46000000
 80083a0:	4c742400 	.word	0x4c742400
 80083a4:	4a742400 	.word	0x4a742400
 80083a8:	4af42400 	.word	0x4af42400

080083ac <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b089      	sub	sp, #36	@ 0x24
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80083b4:	4ba1      	ldr	r3, [pc, #644]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80083be:	4b9f      	ldr	r3, [pc, #636]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083c2:	0d1b      	lsrs	r3, r3, #20
 80083c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80083c8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80083ca:	4b9c      	ldr	r3, [pc, #624]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ce:	0a1b      	lsrs	r3, r3, #8
 80083d0:	f003 0301 	and.w	r3, r3, #1
 80083d4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80083d6:	4b99      	ldr	r3, [pc, #612]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083da:	08db      	lsrs	r3, r3, #3
 80083dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80083e0:	693a      	ldr	r2, [r7, #16]
 80083e2:	fb02 f303 	mul.w	r3, r2, r3
 80083e6:	ee07 3a90 	vmov	s15, r3
 80083ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083ee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	f000 8111 	beq.w	800861c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80083fa:	69bb      	ldr	r3, [r7, #24]
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	f000 8083 	beq.w	8008508 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8008402:	69bb      	ldr	r3, [r7, #24]
 8008404:	2b02      	cmp	r3, #2
 8008406:	f200 80a1 	bhi.w	800854c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800840a:	69bb      	ldr	r3, [r7, #24]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d003      	beq.n	8008418 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d056      	beq.n	80084c4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008416:	e099      	b.n	800854c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008418:	4b88      	ldr	r3, [pc, #544]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0320 	and.w	r3, r3, #32
 8008420:	2b00      	cmp	r3, #0
 8008422:	d02d      	beq.n	8008480 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008424:	4b85      	ldr	r3, [pc, #532]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	08db      	lsrs	r3, r3, #3
 800842a:	f003 0303 	and.w	r3, r3, #3
 800842e:	4a84      	ldr	r2, [pc, #528]	@ (8008640 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008430:	fa22 f303 	lsr.w	r3, r2, r3
 8008434:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	ee07 3a90 	vmov	s15, r3
 800843c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	ee07 3a90 	vmov	s15, r3
 8008446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800844e:	4b7b      	ldr	r3, [pc, #492]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008456:	ee07 3a90 	vmov	s15, r3
 800845a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800845e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008462:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800846a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800846e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800847a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800847e:	e087      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	ee07 3a90 	vmov	s15, r3
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800848a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008648 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800848e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008492:	4b6a      	ldr	r3, [pc, #424]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800849a:	ee07 3a90 	vmov	s15, r3
 800849e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80084a6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80084c2:	e065      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	ee07 3a90 	vmov	s15, r3
 80084ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80084d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084d6:	4b59      	ldr	r3, [pc, #356]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80084d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084de:	ee07 3a90 	vmov	s15, r3
 80084e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80084ea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80084ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80084fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008502:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008506:	e043      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008650 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800851a:	4b48      	ldr	r3, [pc, #288]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800851c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800851e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008522:	ee07 3a90 	vmov	s15, r3
 8008526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800852a:	ed97 6a03 	vldr	s12, [r7, #12]
 800852e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800853a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800853e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008546:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800854a:	e021      	b.n	8008590 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	ee07 3a90 	vmov	s15, r3
 8008552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008556:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800864c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800855a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800855e:	4b37      	ldr	r3, [pc, #220]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800856e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008572:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8008644 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008576:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800857a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800857e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008582:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800858a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800858e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008590:	4b2a      	ldr	r3, [pc, #168]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008594:	0a5b      	lsrs	r3, r3, #9
 8008596:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80085ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085b6:	ee17 2a90 	vmov	r2, s15
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80085be:	4b1f      	ldr	r3, [pc, #124]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085c2:	0c1b      	lsrs	r3, r3, #16
 80085c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085c8:	ee07 3a90 	vmov	s15, r3
 80085cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085d0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80085d4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80085d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80085dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80085e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80085e4:	ee17 2a90 	vmov	r2, s15
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80085ec:	4b13      	ldr	r3, [pc, #76]	@ (800863c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f0:	0e1b      	lsrs	r3, r3, #24
 80085f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008602:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008606:	edd7 6a07 	vldr	s13, [r7, #28]
 800860a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800860e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008612:	ee17 2a90 	vmov	r2, s15
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800861a:	e008      	b.n	800862e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
}
 800862e:	bf00      	nop
 8008630:	3724      	adds	r7, #36	@ 0x24
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	58024400 	.word	0x58024400
 8008640:	03d09000 	.word	0x03d09000
 8008644:	46000000 	.word	0x46000000
 8008648:	4c742400 	.word	0x4c742400
 800864c:	4a742400 	.word	0x4a742400
 8008650:	4af42400 	.word	0x4af42400

08008654 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b084      	sub	sp, #16
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800865e:	2300      	movs	r3, #0
 8008660:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008662:	4b53      	ldr	r3, [pc, #332]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008664:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008666:	f003 0303 	and.w	r3, r3, #3
 800866a:	2b03      	cmp	r3, #3
 800866c:	d101      	bne.n	8008672 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	e099      	b.n	80087a6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008672:	4b4f      	ldr	r3, [pc, #316]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a4e      	ldr	r2, [pc, #312]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008678:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800867c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800867e:	f7fc fa6d 	bl	8004b5c <HAL_GetTick>
 8008682:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008684:	e008      	b.n	8008698 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008686:	f7fc fa69 	bl	8004b5c <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	2b02      	cmp	r3, #2
 8008692:	d901      	bls.n	8008698 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e086      	b.n	80087a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008698:	4b45      	ldr	r3, [pc, #276]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1f0      	bne.n	8008686 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80086a4:	4b42      	ldr	r3, [pc, #264]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	031b      	lsls	r3, r3, #12
 80086b2:	493f      	ldr	r1, [pc, #252]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086b4:	4313      	orrs	r3, r2
 80086b6:	628b      	str	r3, [r1, #40]	@ 0x28
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	685b      	ldr	r3, [r3, #4]
 80086bc:	3b01      	subs	r3, #1
 80086be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	3b01      	subs	r3, #1
 80086c8:	025b      	lsls	r3, r3, #9
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	431a      	orrs	r2, r3
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	3b01      	subs	r3, #1
 80086d4:	041b      	lsls	r3, r3, #16
 80086d6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	691b      	ldr	r3, [r3, #16]
 80086e0:	3b01      	subs	r3, #1
 80086e2:	061b      	lsls	r3, r3, #24
 80086e4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086e8:	4931      	ldr	r1, [pc, #196]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80086ee:	4b30      	ldr	r3, [pc, #192]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086f2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	492d      	ldr	r1, [pc, #180]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 80086fc:	4313      	orrs	r3, r2
 80086fe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008700:	4b2b      	ldr	r3, [pc, #172]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008704:	f023 0220 	bic.w	r2, r3, #32
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	699b      	ldr	r3, [r3, #24]
 800870c:	4928      	ldr	r1, [pc, #160]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800870e:	4313      	orrs	r3, r2
 8008710:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008712:	4b27      	ldr	r3, [pc, #156]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008716:	4a26      	ldr	r2, [pc, #152]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008718:	f023 0310 	bic.w	r3, r3, #16
 800871c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800871e:	4b24      	ldr	r3, [pc, #144]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008720:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008722:	4b24      	ldr	r3, [pc, #144]	@ (80087b4 <RCCEx_PLL2_Config+0x160>)
 8008724:	4013      	ands	r3, r2
 8008726:	687a      	ldr	r2, [r7, #4]
 8008728:	69d2      	ldr	r2, [r2, #28]
 800872a:	00d2      	lsls	r2, r2, #3
 800872c:	4920      	ldr	r1, [pc, #128]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800872e:	4313      	orrs	r3, r2
 8008730:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008732:	4b1f      	ldr	r3, [pc, #124]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008736:	4a1e      	ldr	r2, [pc, #120]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008738:	f043 0310 	orr.w	r3, r3, #16
 800873c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d106      	bne.n	8008752 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008744:	4b1a      	ldr	r3, [pc, #104]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008748:	4a19      	ldr	r2, [pc, #100]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800874a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800874e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008750:	e00f      	b.n	8008772 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d106      	bne.n	8008766 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008758:	4b15      	ldr	r3, [pc, #84]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	4a14      	ldr	r2, [pc, #80]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800875e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008764:	e005      	b.n	8008772 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008766:	4b12      	ldr	r3, [pc, #72]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800876a:	4a11      	ldr	r2, [pc, #68]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800876c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008770:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008772:	4b0f      	ldr	r3, [pc, #60]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a0e      	ldr	r2, [pc, #56]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 8008778:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800877c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800877e:	f7fc f9ed 	bl	8004b5c <HAL_GetTick>
 8008782:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008784:	e008      	b.n	8008798 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008786:	f7fc f9e9 	bl	8004b5c <HAL_GetTick>
 800878a:	4602      	mov	r2, r0
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	1ad3      	subs	r3, r2, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	d901      	bls.n	8008798 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008794:	2303      	movs	r3, #3
 8008796:	e006      	b.n	80087a6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008798:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <RCCEx_PLL2_Config+0x15c>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d0f0      	beq.n	8008786 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80087a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	58024400 	.word	0x58024400
 80087b4:	ffff0007 	.word	0xffff0007

080087b8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b084      	sub	sp, #16
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80087c6:	4b53      	ldr	r3, [pc, #332]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ca:	f003 0303 	and.w	r3, r3, #3
 80087ce:	2b03      	cmp	r3, #3
 80087d0:	d101      	bne.n	80087d6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e099      	b.n	800890a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80087d6:	4b4f      	ldr	r3, [pc, #316]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a4e      	ldr	r2, [pc, #312]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80087e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087e2:	f7fc f9bb 	bl	8004b5c <HAL_GetTick>
 80087e6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087e8:	e008      	b.n	80087fc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80087ea:	f7fc f9b7 	bl	8004b5c <HAL_GetTick>
 80087ee:	4602      	mov	r2, r0
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	1ad3      	subs	r3, r2, r3
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d901      	bls.n	80087fc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80087f8:	2303      	movs	r3, #3
 80087fa:	e086      	b.n	800890a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80087fc:	4b45      	ldr	r3, [pc, #276]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008804:	2b00      	cmp	r3, #0
 8008806:	d1f0      	bne.n	80087ea <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008808:	4b42      	ldr	r3, [pc, #264]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 800880a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800880c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	051b      	lsls	r3, r3, #20
 8008816:	493f      	ldr	r1, [pc, #252]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008818:	4313      	orrs	r3, r2
 800881a:	628b      	str	r3, [r1, #40]	@ 0x28
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	3b01      	subs	r3, #1
 8008822:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	3b01      	subs	r3, #1
 800882c:	025b      	lsls	r3, r3, #9
 800882e:	b29b      	uxth	r3, r3
 8008830:	431a      	orrs	r2, r3
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	3b01      	subs	r3, #1
 8008838:	041b      	lsls	r3, r3, #16
 800883a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800883e:	431a      	orrs	r2, r3
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	691b      	ldr	r3, [r3, #16]
 8008844:	3b01      	subs	r3, #1
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800884c:	4931      	ldr	r1, [pc, #196]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 800884e:	4313      	orrs	r3, r2
 8008850:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008852:	4b30      	ldr	r3, [pc, #192]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008856:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	695b      	ldr	r3, [r3, #20]
 800885e:	492d      	ldr	r1, [pc, #180]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008860:	4313      	orrs	r3, r2
 8008862:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008864:	4b2b      	ldr	r3, [pc, #172]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008868:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	699b      	ldr	r3, [r3, #24]
 8008870:	4928      	ldr	r1, [pc, #160]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008872:	4313      	orrs	r3, r2
 8008874:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008876:	4b27      	ldr	r3, [pc, #156]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800887a:	4a26      	ldr	r2, [pc, #152]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 800887c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008880:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008882:	4b24      	ldr	r3, [pc, #144]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008884:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008886:	4b24      	ldr	r3, [pc, #144]	@ (8008918 <RCCEx_PLL3_Config+0x160>)
 8008888:	4013      	ands	r3, r2
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	69d2      	ldr	r2, [r2, #28]
 800888e:	00d2      	lsls	r2, r2, #3
 8008890:	4920      	ldr	r1, [pc, #128]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008892:	4313      	orrs	r3, r2
 8008894:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008896:	4b1f      	ldr	r3, [pc, #124]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 8008898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800889a:	4a1e      	ldr	r2, [pc, #120]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 800889c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088a2:	683b      	ldr	r3, [r7, #0]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d106      	bne.n	80088b6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80088a8:	4b1a      	ldr	r3, [pc, #104]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ac:	4a19      	ldr	r2, [pc, #100]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80088b2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088b4:	e00f      	b.n	80088d6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d106      	bne.n	80088ca <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80088bc:	4b15      	ldr	r3, [pc, #84]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c0:	4a14      	ldr	r2, [pc, #80]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80088c6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088c8:	e005      	b.n	80088d6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80088ca:	4b12      	ldr	r3, [pc, #72]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ce:	4a11      	ldr	r2, [pc, #68]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088d0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80088d4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80088d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4a0e      	ldr	r2, [pc, #56]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80088e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088e2:	f7fc f93b 	bl	8004b5c <HAL_GetTick>
 80088e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088e8:	e008      	b.n	80088fc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80088ea:	f7fc f937 	bl	8004b5c <HAL_GetTick>
 80088ee:	4602      	mov	r2, r0
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	1ad3      	subs	r3, r2, r3
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d901      	bls.n	80088fc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80088f8:	2303      	movs	r3, #3
 80088fa:	e006      	b.n	800890a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80088fc:	4b05      	ldr	r3, [pc, #20]	@ (8008914 <RCCEx_PLL3_Config+0x15c>)
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008904:	2b00      	cmp	r3, #0
 8008906:	d0f0      	beq.n	80088ea <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
}
 800890a:	4618      	mov	r0, r3
 800890c:	3710      	adds	r7, #16
 800890e:	46bd      	mov	sp, r7
 8008910:	bd80      	pop	{r7, pc}
 8008912:	bf00      	nop
 8008914:	58024400 	.word	0x58024400
 8008918:	ffff0007 	.word	0xffff0007

0800891c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	60f8      	str	r0, [r7, #12]
 8008924:	60b9      	str	r1, [r7, #8]
 8008926:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d101      	bne.n	8008932 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e03e      	b.n	80089b0 <HAL_SRAM_Init+0x94>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d106      	bne.n	800894c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8008946:	68f8      	ldr	r0, [r7, #12]
 8008948:	f7f8 fbca 	bl	80010e0 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	3308      	adds	r3, #8
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f001 fdea 	bl	800a530 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	461a      	mov	r2, r3
 8008966:	68b9      	ldr	r1, [r7, #8]
 8008968:	f001 fe72 	bl	800a650 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	6858      	ldr	r0, [r3, #4]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689a      	ldr	r2, [r3, #8]
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008978:	6879      	ldr	r1, [r7, #4]
 800897a:	f001 feb3 	bl	800a6e4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68fa      	ldr	r2, [r7, #12]
 8008984:	6892      	ldr	r2, [r2, #8]
 8008986:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	6892      	ldr	r2, [r2, #8]
 8008992:	f041 0101 	orr.w	r1, r1, #1
 8008996:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800899a:	4b07      	ldr	r3, [pc, #28]	@ (80089b8 <HAL_SRAM_Init+0x9c>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4a06      	ldr	r2, [pc, #24]	@ (80089b8 <HAL_SRAM_Init+0x9c>)
 80089a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80089a4:	6013      	str	r3, [r2, #0]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	2201      	movs	r2, #1
 80089aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	52004000 	.word	0x52004000

080089bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d101      	bne.n	80089ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	e042      	b.n	8008a54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d106      	bne.n	80089e6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f7fb ff85 	bl	80048f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2224      	movs	r2, #36	@ 0x24
 80089ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	681a      	ldr	r2, [r3, #0]
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f022 0201 	bic.w	r2, r2, #1
 80089fc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d002      	beq.n	8008a0c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f001 fa14 	bl	8009e34 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f000 fca9 	bl	8009364 <UART_SetConfig>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b01      	cmp	r3, #1
 8008a16:	d101      	bne.n	8008a1c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e01b      	b.n	8008a54 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	685a      	ldr	r2, [r3, #4]
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	689a      	ldr	r2, [r3, #8]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f042 0201 	orr.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	f001 fa93 	bl	8009f78 <UART_CheckIdleState>
 8008a52:	4603      	mov	r3, r0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3708      	adds	r7, #8
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08a      	sub	sp, #40	@ 0x28
 8008a60:	af02      	add	r7, sp, #8
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	603b      	str	r3, [r7, #0]
 8008a68:	4613      	mov	r3, r2
 8008a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008a72:	2b20      	cmp	r3, #32
 8008a74:	d17b      	bne.n	8008b6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d002      	beq.n	8008a82 <HAL_UART_Transmit+0x26>
 8008a7c:	88fb      	ldrh	r3, [r7, #6]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d101      	bne.n	8008a86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	e074      	b.n	8008b70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2221      	movs	r2, #33	@ 0x21
 8008a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a96:	f7fc f861 	bl	8004b5c <HAL_GetTick>
 8008a9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	88fa      	ldrh	r2, [r7, #6]
 8008aa0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	88fa      	ldrh	r2, [r7, #6]
 8008aa8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	689b      	ldr	r3, [r3, #8]
 8008ab0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ab4:	d108      	bne.n	8008ac8 <HAL_UART_Transmit+0x6c>
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d104      	bne.n	8008ac8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008abe:	2300      	movs	r3, #0
 8008ac0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	61bb      	str	r3, [r7, #24]
 8008ac6:	e003      	b.n	8008ad0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008acc:	2300      	movs	r3, #0
 8008ace:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008ad0:	e030      	b.n	8008b34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	9300      	str	r3, [sp, #0]
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	2180      	movs	r1, #128	@ 0x80
 8008adc:	68f8      	ldr	r0, [r7, #12]
 8008ade:	f001 faf5 	bl	800a0cc <UART_WaitOnFlagUntilTimeout>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d005      	beq.n	8008af4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2220      	movs	r2, #32
 8008aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8008af0:	2303      	movs	r3, #3
 8008af2:	e03d      	b.n	8008b70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	461a      	mov	r2, r3
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b08:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	3302      	adds	r3, #2
 8008b0e:	61bb      	str	r3, [r7, #24]
 8008b10:	e007      	b.n	8008b22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	781a      	ldrb	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	3301      	adds	r3, #1
 8008b20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	3b01      	subs	r3, #1
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8008b3a:	b29b      	uxth	r3, r3
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d1c8      	bne.n	8008ad2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	9300      	str	r3, [sp, #0]
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	2200      	movs	r2, #0
 8008b48:	2140      	movs	r1, #64	@ 0x40
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	f001 fabe 	bl	800a0cc <UART_WaitOnFlagUntilTimeout>
 8008b50:	4603      	mov	r3, r0
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d005      	beq.n	8008b62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2220      	movs	r2, #32
 8008b5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e006      	b.n	8008b70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2220      	movs	r2, #32
 8008b66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	e000      	b.n	8008b70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8008b6e:	2302      	movs	r3, #2
  }
}
 8008b70:	4618      	mov	r0, r3
 8008b72:	3720      	adds	r7, #32
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b0ba      	sub	sp, #232	@ 0xe8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	69db      	ldr	r3, [r3, #28]
 8008b86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	689b      	ldr	r3, [r3, #8]
 8008b9a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008b9e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008ba2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008ba6:	4013      	ands	r3, r2
 8008ba8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d11b      	bne.n	8008bec <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008bb8:	f003 0320 	and.w	r3, r3, #32
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d015      	beq.n	8008bec <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008bc4:	f003 0320 	and.w	r3, r3, #32
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d105      	bne.n	8008bd8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008bcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008bd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d009      	beq.n	8008bec <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 8393 	beq.w	8009308 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
      }
      return;
 8008bea:	e38d      	b.n	8009308 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 8123 	beq.w	8008e3c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008bf6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008bfa:	4b8d      	ldr	r3, [pc, #564]	@ (8008e30 <HAL_UART_IRQHandler+0x2b8>)
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c02:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c06:	4b8b      	ldr	r3, [pc, #556]	@ (8008e34 <HAL_UART_IRQHandler+0x2bc>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	f000 8116 	beq.w	8008e3c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c14:	f003 0301 	and.w	r3, r3, #1
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d011      	beq.n	8008c40 <HAL_UART_IRQHandler+0xc8>
 8008c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d00b      	beq.n	8008c40 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2201      	movs	r2, #1
 8008c2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c36:	f043 0201 	orr.w	r2, r3, #1
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c44:	f003 0302 	and.w	r3, r3, #2
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d011      	beq.n	8008c70 <HAL_UART_IRQHandler+0xf8>
 8008c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c50:	f003 0301 	and.w	r3, r3, #1
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d00b      	beq.n	8008c70 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2202      	movs	r2, #2
 8008c5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c66:	f043 0204 	orr.w	r2, r3, #4
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c74:	f003 0304 	and.w	r3, r3, #4
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d011      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x128>
 8008c7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c80:	f003 0301 	and.w	r3, r3, #1
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c96:	f043 0202 	orr.w	r2, r3, #2
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ca4:	f003 0308 	and.w	r3, r3, #8
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d017      	beq.n	8008cdc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d105      	bne.n	8008cc4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008cb8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008cbc:	4b5c      	ldr	r3, [pc, #368]	@ (8008e30 <HAL_UART_IRQHandler+0x2b8>)
 8008cbe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d00b      	beq.n	8008cdc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	2208      	movs	r2, #8
 8008cca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cd2:	f043 0208 	orr.w	r2, r3, #8
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008cdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008ce0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d012      	beq.n	8008d0e <HAL_UART_IRQHandler+0x196>
 8008ce8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cec:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d00c      	beq.n	8008d0e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d04:	f043 0220 	orr.w	r2, r3, #32
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 82f9 	beq.w	800930c <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d1e:	f003 0320 	and.w	r3, r3, #32
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d013      	beq.n	8008d4e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d2a:	f003 0320 	and.w	r3, r3, #32
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d105      	bne.n	8008d3e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d007      	beq.n	8008d4e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d54:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d62:	2b40      	cmp	r3, #64	@ 0x40
 8008d64:	d005      	beq.n	8008d72 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008d66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008d6a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d054      	beq.n	8008e1c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d72:	6878      	ldr	r0, [r7, #4]
 8008d74:	f001 fa18 	bl	800a1a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	689b      	ldr	r3, [r3, #8]
 8008d7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008d82:	2b40      	cmp	r3, #64	@ 0x40
 8008d84:	d146      	bne.n	8008e14 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	3308      	adds	r3, #8
 8008d8c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d90:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008d94:	e853 3f00 	ldrex	r3, [r3]
 8008d98:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008d9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008da0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	3308      	adds	r3, #8
 8008dae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008db2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008db6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008dbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008dc2:	e841 2300 	strex	r3, r2, [r1]
 8008dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008dca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d1d9      	bne.n	8008d86 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d017      	beq.n	8008e0c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008de2:	4a15      	ldr	r2, [pc, #84]	@ (8008e38 <HAL_UART_IRQHandler+0x2c0>)
 8008de4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fc fafb 	bl	80053e8 <HAL_DMA_Abort_IT>
 8008df2:	4603      	mov	r3, r0
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d019      	beq.n	8008e2c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008dfe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e06:	4610      	mov	r0, r2
 8008e08:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e0a:	e00f      	b.n	8008e2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fa93 	bl	8009338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e12:	e00b      	b.n	8008e2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e14:	6878      	ldr	r0, [r7, #4]
 8008e16:	f000 fa8f 	bl	8009338 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e1a:	e007      	b.n	8008e2c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fa8b 	bl	8009338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e2a:	e26f      	b.n	800930c <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e2c:	bf00      	nop
    return;
 8008e2e:	e26d      	b.n	800930c <HAL_UART_IRQHandler+0x794>
 8008e30:	10000001 	.word	0x10000001
 8008e34:	04000120 	.word	0x04000120
 8008e38:	0800a275 	.word	0x0800a275

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	f040 8203 	bne.w	800924c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e4a:	f003 0310 	and.w	r3, r3, #16
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f000 81fc 	beq.w	800924c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e58:	f003 0310 	and.w	r3, r3, #16
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f000 81f5 	beq.w	800924c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2210      	movs	r2, #16
 8008e68:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e74:	2b40      	cmp	r3, #64	@ 0x40
 8008e76:	f040 816d 	bne.w	8009154 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4aa4      	ldr	r2, [pc, #656]	@ (8009114 <HAL_UART_IRQHandler+0x59c>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d068      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4aa1      	ldr	r2, [pc, #644]	@ (8009118 <HAL_UART_IRQHandler+0x5a0>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d061      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a9f      	ldr	r2, [pc, #636]	@ (800911c <HAL_UART_IRQHandler+0x5a4>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d05a      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a9c      	ldr	r2, [pc, #624]	@ (8009120 <HAL_UART_IRQHandler+0x5a8>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d053      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a9a      	ldr	r2, [pc, #616]	@ (8009124 <HAL_UART_IRQHandler+0x5ac>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d04c      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4a97      	ldr	r2, [pc, #604]	@ (8009128 <HAL_UART_IRQHandler+0x5b0>)
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d045      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	4a95      	ldr	r2, [pc, #596]	@ (800912c <HAL_UART_IRQHandler+0x5b4>)
 8008ed8:	4293      	cmp	r3, r2
 8008eda:	d03e      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a92      	ldr	r2, [pc, #584]	@ (8009130 <HAL_UART_IRQHandler+0x5b8>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d037      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	4a90      	ldr	r2, [pc, #576]	@ (8009134 <HAL_UART_IRQHandler+0x5bc>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d030      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a8d      	ldr	r2, [pc, #564]	@ (8009138 <HAL_UART_IRQHandler+0x5c0>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d029      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4a8b      	ldr	r2, [pc, #556]	@ (800913c <HAL_UART_IRQHandler+0x5c4>)
 8008f10:	4293      	cmp	r3, r2
 8008f12:	d022      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	4a88      	ldr	r2, [pc, #544]	@ (8009140 <HAL_UART_IRQHandler+0x5c8>)
 8008f1e:	4293      	cmp	r3, r2
 8008f20:	d01b      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a86      	ldr	r2, [pc, #536]	@ (8009144 <HAL_UART_IRQHandler+0x5cc>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d014      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a83      	ldr	r2, [pc, #524]	@ (8009148 <HAL_UART_IRQHandler+0x5d0>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d00d      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4a81      	ldr	r2, [pc, #516]	@ (800914c <HAL_UART_IRQHandler+0x5d4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d006      	beq.n	8008f5a <HAL_UART_IRQHandler+0x3e2>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a7e      	ldr	r2, [pc, #504]	@ (8009150 <HAL_UART_IRQHandler+0x5d8>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d106      	bne.n	8008f68 <HAL_UART_IRQHandler+0x3f0>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	685b      	ldr	r3, [r3, #4]
 8008f64:	b29b      	uxth	r3, r3
 8008f66:	e005      	b.n	8008f74 <HAL_UART_IRQHandler+0x3fc>
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	685b      	ldr	r3, [r3, #4]
 8008f72:	b29b      	uxth	r3, r3
 8008f74:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f78:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	f000 80ad 	beq.w	80090dc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f88:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	f080 80a5 	bcs.w	80090dc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f98:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008fa2:	69db      	ldr	r3, [r3, #28]
 8008fa4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008fa8:	f000 8087 	beq.w	80090ba <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008fb8:	e853 3f00 	ldrex	r3, [r3]
 8008fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008fc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fc8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	461a      	mov	r2, r3
 8008fd2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008fda:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008fe2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008fe6:	e841 2300 	strex	r3, r2, [r1]
 8008fea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008fee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1da      	bne.n	8008fac <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009006:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009008:	f023 0301 	bic.w	r3, r3, #1
 800900c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	3308      	adds	r3, #8
 8009016:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800901a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800901e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009020:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8009022:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009026:	e841 2300 	strex	r3, r2, [r1]
 800902a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800902c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1e1      	bne.n	8008ff6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	3308      	adds	r3, #8
 8009038:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800903c:	e853 3f00 	ldrex	r3, [r3]
 8009040:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009042:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009044:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009048:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009056:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009058:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800905c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e3      	bne.n	8009032 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2220      	movs	r2, #32
 800906e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800907e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009080:	e853 3f00 	ldrex	r3, [r3]
 8009084:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009088:	f023 0310 	bic.w	r3, r3, #16
 800908c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	461a      	mov	r2, r3
 8009096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800909c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800909e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80090a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80090a2:	e841 2300 	strex	r3, r2, [r1]
 80090a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80090a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1e4      	bne.n	8009078 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090b4:	4618      	mov	r0, r3
 80090b6:	f7fb fe79 	bl	8004dac <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2202      	movs	r2, #2
 80090be:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090cc:	b29b      	uxth	r3, r3
 80090ce:	1ad3      	subs	r3, r2, r3
 80090d0:	b29b      	uxth	r3, r3
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f939 	bl	800934c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80090da:	e119      	b.n	8009310 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80090e6:	429a      	cmp	r2, r3
 80090e8:	f040 8112 	bne.w	8009310 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80090f2:	69db      	ldr	r3, [r3, #28]
 80090f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090f8:	f040 810a 	bne.w	8009310 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2202      	movs	r2, #2
 8009100:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009108:	4619      	mov	r1, r3
 800910a:	6878      	ldr	r0, [r7, #4]
 800910c:	f000 f91e 	bl	800934c <HAL_UARTEx_RxEventCallback>
      return;
 8009110:	e0fe      	b.n	8009310 <HAL_UART_IRQHandler+0x798>
 8009112:	bf00      	nop
 8009114:	40020010 	.word	0x40020010
 8009118:	40020028 	.word	0x40020028
 800911c:	40020040 	.word	0x40020040
 8009120:	40020058 	.word	0x40020058
 8009124:	40020070 	.word	0x40020070
 8009128:	40020088 	.word	0x40020088
 800912c:	400200a0 	.word	0x400200a0
 8009130:	400200b8 	.word	0x400200b8
 8009134:	40020410 	.word	0x40020410
 8009138:	40020428 	.word	0x40020428
 800913c:	40020440 	.word	0x40020440
 8009140:	40020458 	.word	0x40020458
 8009144:	40020470 	.word	0x40020470
 8009148:	40020488 	.word	0x40020488
 800914c:	400204a0 	.word	0x400204a0
 8009150:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009160:	b29b      	uxth	r3, r3
 8009162:	1ad3      	subs	r3, r2, r3
 8009164:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800916e:	b29b      	uxth	r3, r3
 8009170:	2b00      	cmp	r3, #0
 8009172:	f000 80cf 	beq.w	8009314 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8009176:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800917a:	2b00      	cmp	r3, #0
 800917c:	f000 80ca 	beq.w	8009314 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009188:	e853 3f00 	ldrex	r3, [r3]
 800918c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800918e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009190:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009194:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	461a      	mov	r2, r3
 800919e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80091a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80091a4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091aa:	e841 2300 	strex	r3, r2, [r1]
 80091ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1e4      	bne.n	8009180 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	3308      	adds	r3, #8
 80091bc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091c0:	e853 3f00 	ldrex	r3, [r3]
 80091c4:	623b      	str	r3, [r7, #32]
   return(result);
 80091c6:	6a3a      	ldr	r2, [r7, #32]
 80091c8:	4b55      	ldr	r3, [pc, #340]	@ (8009320 <HAL_UART_IRQHandler+0x7a8>)
 80091ca:	4013      	ands	r3, r2
 80091cc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	3308      	adds	r3, #8
 80091d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80091da:	633a      	str	r2, [r7, #48]	@ 0x30
 80091dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e3      	bne.n	80091b6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2200      	movs	r2, #0
 80091fa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2200      	movs	r2, #0
 8009200:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f023 0310 	bic.w	r3, r3, #16
 8009216:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	461a      	mov	r2, r3
 8009220:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	69b9      	ldr	r1, [r7, #24]
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	617b      	str	r3, [r7, #20]
   return(result);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e4      	bne.n	8009202 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	2202      	movs	r2, #2
 800923c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800923e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009242:	4619      	mov	r1, r3
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f881 	bl	800934c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800924a:	e063      	b.n	8009314 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800924c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009250:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00e      	beq.n	8009276 <HAL_UART_IRQHandler+0x6fe>
 8009258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800925c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009260:	2b00      	cmp	r3, #0
 8009262:	d008      	beq.n	8009276 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800926c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f001 f83d 	bl	800a2ee <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009274:	e051      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800927a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800927e:	2b00      	cmp	r3, #0
 8009280:	d014      	beq.n	80092ac <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009286:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800928a:	2b00      	cmp	r3, #0
 800928c:	d105      	bne.n	800929a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800928e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d03a      	beq.n	8009318 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	4798      	blx	r3
    }
    return;
 80092aa:	e035      	b.n	8009318 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80092ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d009      	beq.n	80092cc <HAL_UART_IRQHandler+0x754>
 80092b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d003      	beq.n	80092cc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f000 ffe7 	bl	800a298 <UART_EndTransmit_IT>
    return;
 80092ca:	e026      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80092cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d009      	beq.n	80092ec <HAL_UART_IRQHandler+0x774>
 80092d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092dc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d003      	beq.n	80092ec <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80092e4:	6878      	ldr	r0, [r7, #4]
 80092e6:	f001 f816 	bl	800a316 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80092ea:	e016      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80092ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d010      	beq.n	800931a <HAL_UART_IRQHandler+0x7a2>
 80092f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	da0c      	bge.n	800931a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f000 fffe 	bl	800a302 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009306:	e008      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009308:	bf00      	nop
 800930a:	e006      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
    return;
 800930c:	bf00      	nop
 800930e:	e004      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009310:	bf00      	nop
 8009312:	e002      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
      return;
 8009314:	bf00      	nop
 8009316:	e000      	b.n	800931a <HAL_UART_IRQHandler+0x7a2>
    return;
 8009318:	bf00      	nop
  }
}
 800931a:	37e8      	adds	r7, #232	@ 0xe8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}
 8009320:	effffffe 	.word	0xeffffffe

08009324 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800932c:	bf00      	nop
 800932e:	370c      	adds	r7, #12
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800934c:	b480      	push	{r7}
 800934e:	b083      	sub	sp, #12
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	460b      	mov	r3, r1
 8009356:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009368:	b092      	sub	sp, #72	@ 0x48
 800936a:	af00      	add	r7, sp, #0
 800936c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800936e:	2300      	movs	r3, #0
 8009370:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	689a      	ldr	r2, [r3, #8]
 8009378:	697b      	ldr	r3, [r7, #20]
 800937a:	691b      	ldr	r3, [r3, #16]
 800937c:	431a      	orrs	r2, r3
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	695b      	ldr	r3, [r3, #20]
 8009382:	431a      	orrs	r2, r3
 8009384:	697b      	ldr	r3, [r7, #20]
 8009386:	69db      	ldr	r3, [r3, #28]
 8009388:	4313      	orrs	r3, r2
 800938a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4bbe      	ldr	r3, [pc, #760]	@ (800968c <UART_SetConfig+0x328>)
 8009394:	4013      	ands	r3, r2
 8009396:	697a      	ldr	r2, [r7, #20]
 8009398:	6812      	ldr	r2, [r2, #0]
 800939a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800939c:	430b      	orrs	r3, r1
 800939e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	685b      	ldr	r3, [r3, #4]
 80093a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	68da      	ldr	r2, [r3, #12]
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	430a      	orrs	r2, r1
 80093b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80093bc:	697b      	ldr	r3, [r7, #20]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	4ab3      	ldr	r2, [pc, #716]	@ (8009690 <UART_SetConfig+0x32c>)
 80093c2:	4293      	cmp	r3, r2
 80093c4:	d004      	beq.n	80093d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80093c6:	697b      	ldr	r3, [r7, #20]
 80093c8:	6a1b      	ldr	r3, [r3, #32]
 80093ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093cc:	4313      	orrs	r3, r2
 80093ce:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80093d0:	697b      	ldr	r3, [r7, #20]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	689a      	ldr	r2, [r3, #8]
 80093d6:	4baf      	ldr	r3, [pc, #700]	@ (8009694 <UART_SetConfig+0x330>)
 80093d8:	4013      	ands	r3, r2
 80093da:	697a      	ldr	r2, [r7, #20]
 80093dc:	6812      	ldr	r2, [r2, #0]
 80093de:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80093e0:	430b      	orrs	r3, r1
 80093e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80093e4:	697b      	ldr	r3, [r7, #20]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ea:	f023 010f 	bic.w	r1, r3, #15
 80093ee:	697b      	ldr	r3, [r7, #20]
 80093f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	430a      	orrs	r2, r1
 80093f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4aa6      	ldr	r2, [pc, #664]	@ (8009698 <UART_SetConfig+0x334>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d177      	bne.n	80094f4 <UART_SetConfig+0x190>
 8009404:	4ba5      	ldr	r3, [pc, #660]	@ (800969c <UART_SetConfig+0x338>)
 8009406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009408:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800940c:	2b28      	cmp	r3, #40	@ 0x28
 800940e:	d86d      	bhi.n	80094ec <UART_SetConfig+0x188>
 8009410:	a201      	add	r2, pc, #4	@ (adr r2, 8009418 <UART_SetConfig+0xb4>)
 8009412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009416:	bf00      	nop
 8009418:	080094bd 	.word	0x080094bd
 800941c:	080094ed 	.word	0x080094ed
 8009420:	080094ed 	.word	0x080094ed
 8009424:	080094ed 	.word	0x080094ed
 8009428:	080094ed 	.word	0x080094ed
 800942c:	080094ed 	.word	0x080094ed
 8009430:	080094ed 	.word	0x080094ed
 8009434:	080094ed 	.word	0x080094ed
 8009438:	080094c5 	.word	0x080094c5
 800943c:	080094ed 	.word	0x080094ed
 8009440:	080094ed 	.word	0x080094ed
 8009444:	080094ed 	.word	0x080094ed
 8009448:	080094ed 	.word	0x080094ed
 800944c:	080094ed 	.word	0x080094ed
 8009450:	080094ed 	.word	0x080094ed
 8009454:	080094ed 	.word	0x080094ed
 8009458:	080094cd 	.word	0x080094cd
 800945c:	080094ed 	.word	0x080094ed
 8009460:	080094ed 	.word	0x080094ed
 8009464:	080094ed 	.word	0x080094ed
 8009468:	080094ed 	.word	0x080094ed
 800946c:	080094ed 	.word	0x080094ed
 8009470:	080094ed 	.word	0x080094ed
 8009474:	080094ed 	.word	0x080094ed
 8009478:	080094d5 	.word	0x080094d5
 800947c:	080094ed 	.word	0x080094ed
 8009480:	080094ed 	.word	0x080094ed
 8009484:	080094ed 	.word	0x080094ed
 8009488:	080094ed 	.word	0x080094ed
 800948c:	080094ed 	.word	0x080094ed
 8009490:	080094ed 	.word	0x080094ed
 8009494:	080094ed 	.word	0x080094ed
 8009498:	080094dd 	.word	0x080094dd
 800949c:	080094ed 	.word	0x080094ed
 80094a0:	080094ed 	.word	0x080094ed
 80094a4:	080094ed 	.word	0x080094ed
 80094a8:	080094ed 	.word	0x080094ed
 80094ac:	080094ed 	.word	0x080094ed
 80094b0:	080094ed 	.word	0x080094ed
 80094b4:	080094ed 	.word	0x080094ed
 80094b8:	080094e5 	.word	0x080094e5
 80094bc:	2301      	movs	r3, #1
 80094be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094c2:	e222      	b.n	800990a <UART_SetConfig+0x5a6>
 80094c4:	2304      	movs	r3, #4
 80094c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ca:	e21e      	b.n	800990a <UART_SetConfig+0x5a6>
 80094cc:	2308      	movs	r3, #8
 80094ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094d2:	e21a      	b.n	800990a <UART_SetConfig+0x5a6>
 80094d4:	2310      	movs	r3, #16
 80094d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094da:	e216      	b.n	800990a <UART_SetConfig+0x5a6>
 80094dc:	2320      	movs	r3, #32
 80094de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094e2:	e212      	b.n	800990a <UART_SetConfig+0x5a6>
 80094e4:	2340      	movs	r3, #64	@ 0x40
 80094e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094ea:	e20e      	b.n	800990a <UART_SetConfig+0x5a6>
 80094ec:	2380      	movs	r3, #128	@ 0x80
 80094ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80094f2:	e20a      	b.n	800990a <UART_SetConfig+0x5a6>
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a69      	ldr	r2, [pc, #420]	@ (80096a0 <UART_SetConfig+0x33c>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d130      	bne.n	8009560 <UART_SetConfig+0x1fc>
 80094fe:	4b67      	ldr	r3, [pc, #412]	@ (800969c <UART_SetConfig+0x338>)
 8009500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009502:	f003 0307 	and.w	r3, r3, #7
 8009506:	2b05      	cmp	r3, #5
 8009508:	d826      	bhi.n	8009558 <UART_SetConfig+0x1f4>
 800950a:	a201      	add	r2, pc, #4	@ (adr r2, 8009510 <UART_SetConfig+0x1ac>)
 800950c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009510:	08009529 	.word	0x08009529
 8009514:	08009531 	.word	0x08009531
 8009518:	08009539 	.word	0x08009539
 800951c:	08009541 	.word	0x08009541
 8009520:	08009549 	.word	0x08009549
 8009524:	08009551 	.word	0x08009551
 8009528:	2300      	movs	r3, #0
 800952a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800952e:	e1ec      	b.n	800990a <UART_SetConfig+0x5a6>
 8009530:	2304      	movs	r3, #4
 8009532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009536:	e1e8      	b.n	800990a <UART_SetConfig+0x5a6>
 8009538:	2308      	movs	r3, #8
 800953a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800953e:	e1e4      	b.n	800990a <UART_SetConfig+0x5a6>
 8009540:	2310      	movs	r3, #16
 8009542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009546:	e1e0      	b.n	800990a <UART_SetConfig+0x5a6>
 8009548:	2320      	movs	r3, #32
 800954a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800954e:	e1dc      	b.n	800990a <UART_SetConfig+0x5a6>
 8009550:	2340      	movs	r3, #64	@ 0x40
 8009552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009556:	e1d8      	b.n	800990a <UART_SetConfig+0x5a6>
 8009558:	2380      	movs	r3, #128	@ 0x80
 800955a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800955e:	e1d4      	b.n	800990a <UART_SetConfig+0x5a6>
 8009560:	697b      	ldr	r3, [r7, #20]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	4a4f      	ldr	r2, [pc, #316]	@ (80096a4 <UART_SetConfig+0x340>)
 8009566:	4293      	cmp	r3, r2
 8009568:	d130      	bne.n	80095cc <UART_SetConfig+0x268>
 800956a:	4b4c      	ldr	r3, [pc, #304]	@ (800969c <UART_SetConfig+0x338>)
 800956c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800956e:	f003 0307 	and.w	r3, r3, #7
 8009572:	2b05      	cmp	r3, #5
 8009574:	d826      	bhi.n	80095c4 <UART_SetConfig+0x260>
 8009576:	a201      	add	r2, pc, #4	@ (adr r2, 800957c <UART_SetConfig+0x218>)
 8009578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800957c:	08009595 	.word	0x08009595
 8009580:	0800959d 	.word	0x0800959d
 8009584:	080095a5 	.word	0x080095a5
 8009588:	080095ad 	.word	0x080095ad
 800958c:	080095b5 	.word	0x080095b5
 8009590:	080095bd 	.word	0x080095bd
 8009594:	2300      	movs	r3, #0
 8009596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800959a:	e1b6      	b.n	800990a <UART_SetConfig+0x5a6>
 800959c:	2304      	movs	r3, #4
 800959e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095a2:	e1b2      	b.n	800990a <UART_SetConfig+0x5a6>
 80095a4:	2308      	movs	r3, #8
 80095a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095aa:	e1ae      	b.n	800990a <UART_SetConfig+0x5a6>
 80095ac:	2310      	movs	r3, #16
 80095ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095b2:	e1aa      	b.n	800990a <UART_SetConfig+0x5a6>
 80095b4:	2320      	movs	r3, #32
 80095b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ba:	e1a6      	b.n	800990a <UART_SetConfig+0x5a6>
 80095bc:	2340      	movs	r3, #64	@ 0x40
 80095be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095c2:	e1a2      	b.n	800990a <UART_SetConfig+0x5a6>
 80095c4:	2380      	movs	r3, #128	@ 0x80
 80095c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80095ca:	e19e      	b.n	800990a <UART_SetConfig+0x5a6>
 80095cc:	697b      	ldr	r3, [r7, #20]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a35      	ldr	r2, [pc, #212]	@ (80096a8 <UART_SetConfig+0x344>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d130      	bne.n	8009638 <UART_SetConfig+0x2d4>
 80095d6:	4b31      	ldr	r3, [pc, #196]	@ (800969c <UART_SetConfig+0x338>)
 80095d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095da:	f003 0307 	and.w	r3, r3, #7
 80095de:	2b05      	cmp	r3, #5
 80095e0:	d826      	bhi.n	8009630 <UART_SetConfig+0x2cc>
 80095e2:	a201      	add	r2, pc, #4	@ (adr r2, 80095e8 <UART_SetConfig+0x284>)
 80095e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e8:	08009601 	.word	0x08009601
 80095ec:	08009609 	.word	0x08009609
 80095f0:	08009611 	.word	0x08009611
 80095f4:	08009619 	.word	0x08009619
 80095f8:	08009621 	.word	0x08009621
 80095fc:	08009629 	.word	0x08009629
 8009600:	2300      	movs	r3, #0
 8009602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009606:	e180      	b.n	800990a <UART_SetConfig+0x5a6>
 8009608:	2304      	movs	r3, #4
 800960a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800960e:	e17c      	b.n	800990a <UART_SetConfig+0x5a6>
 8009610:	2308      	movs	r3, #8
 8009612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009616:	e178      	b.n	800990a <UART_SetConfig+0x5a6>
 8009618:	2310      	movs	r3, #16
 800961a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800961e:	e174      	b.n	800990a <UART_SetConfig+0x5a6>
 8009620:	2320      	movs	r3, #32
 8009622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009626:	e170      	b.n	800990a <UART_SetConfig+0x5a6>
 8009628:	2340      	movs	r3, #64	@ 0x40
 800962a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800962e:	e16c      	b.n	800990a <UART_SetConfig+0x5a6>
 8009630:	2380      	movs	r3, #128	@ 0x80
 8009632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009636:	e168      	b.n	800990a <UART_SetConfig+0x5a6>
 8009638:	697b      	ldr	r3, [r7, #20]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a1b      	ldr	r2, [pc, #108]	@ (80096ac <UART_SetConfig+0x348>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d142      	bne.n	80096c8 <UART_SetConfig+0x364>
 8009642:	4b16      	ldr	r3, [pc, #88]	@ (800969c <UART_SetConfig+0x338>)
 8009644:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009646:	f003 0307 	and.w	r3, r3, #7
 800964a:	2b05      	cmp	r3, #5
 800964c:	d838      	bhi.n	80096c0 <UART_SetConfig+0x35c>
 800964e:	a201      	add	r2, pc, #4	@ (adr r2, 8009654 <UART_SetConfig+0x2f0>)
 8009650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009654:	0800966d 	.word	0x0800966d
 8009658:	08009675 	.word	0x08009675
 800965c:	0800967d 	.word	0x0800967d
 8009660:	08009685 	.word	0x08009685
 8009664:	080096b1 	.word	0x080096b1
 8009668:	080096b9 	.word	0x080096b9
 800966c:	2300      	movs	r3, #0
 800966e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009672:	e14a      	b.n	800990a <UART_SetConfig+0x5a6>
 8009674:	2304      	movs	r3, #4
 8009676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800967a:	e146      	b.n	800990a <UART_SetConfig+0x5a6>
 800967c:	2308      	movs	r3, #8
 800967e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009682:	e142      	b.n	800990a <UART_SetConfig+0x5a6>
 8009684:	2310      	movs	r3, #16
 8009686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800968a:	e13e      	b.n	800990a <UART_SetConfig+0x5a6>
 800968c:	cfff69f3 	.word	0xcfff69f3
 8009690:	58000c00 	.word	0x58000c00
 8009694:	11fff4ff 	.word	0x11fff4ff
 8009698:	40011000 	.word	0x40011000
 800969c:	58024400 	.word	0x58024400
 80096a0:	40004400 	.word	0x40004400
 80096a4:	40004800 	.word	0x40004800
 80096a8:	40004c00 	.word	0x40004c00
 80096ac:	40005000 	.word	0x40005000
 80096b0:	2320      	movs	r3, #32
 80096b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096b6:	e128      	b.n	800990a <UART_SetConfig+0x5a6>
 80096b8:	2340      	movs	r3, #64	@ 0x40
 80096ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096be:	e124      	b.n	800990a <UART_SetConfig+0x5a6>
 80096c0:	2380      	movs	r3, #128	@ 0x80
 80096c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80096c6:	e120      	b.n	800990a <UART_SetConfig+0x5a6>
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4acb      	ldr	r2, [pc, #812]	@ (80099fc <UART_SetConfig+0x698>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d176      	bne.n	80097c0 <UART_SetConfig+0x45c>
 80096d2:	4bcb      	ldr	r3, [pc, #812]	@ (8009a00 <UART_SetConfig+0x69c>)
 80096d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80096da:	2b28      	cmp	r3, #40	@ 0x28
 80096dc:	d86c      	bhi.n	80097b8 <UART_SetConfig+0x454>
 80096de:	a201      	add	r2, pc, #4	@ (adr r2, 80096e4 <UART_SetConfig+0x380>)
 80096e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e4:	08009789 	.word	0x08009789
 80096e8:	080097b9 	.word	0x080097b9
 80096ec:	080097b9 	.word	0x080097b9
 80096f0:	080097b9 	.word	0x080097b9
 80096f4:	080097b9 	.word	0x080097b9
 80096f8:	080097b9 	.word	0x080097b9
 80096fc:	080097b9 	.word	0x080097b9
 8009700:	080097b9 	.word	0x080097b9
 8009704:	08009791 	.word	0x08009791
 8009708:	080097b9 	.word	0x080097b9
 800970c:	080097b9 	.word	0x080097b9
 8009710:	080097b9 	.word	0x080097b9
 8009714:	080097b9 	.word	0x080097b9
 8009718:	080097b9 	.word	0x080097b9
 800971c:	080097b9 	.word	0x080097b9
 8009720:	080097b9 	.word	0x080097b9
 8009724:	08009799 	.word	0x08009799
 8009728:	080097b9 	.word	0x080097b9
 800972c:	080097b9 	.word	0x080097b9
 8009730:	080097b9 	.word	0x080097b9
 8009734:	080097b9 	.word	0x080097b9
 8009738:	080097b9 	.word	0x080097b9
 800973c:	080097b9 	.word	0x080097b9
 8009740:	080097b9 	.word	0x080097b9
 8009744:	080097a1 	.word	0x080097a1
 8009748:	080097b9 	.word	0x080097b9
 800974c:	080097b9 	.word	0x080097b9
 8009750:	080097b9 	.word	0x080097b9
 8009754:	080097b9 	.word	0x080097b9
 8009758:	080097b9 	.word	0x080097b9
 800975c:	080097b9 	.word	0x080097b9
 8009760:	080097b9 	.word	0x080097b9
 8009764:	080097a9 	.word	0x080097a9
 8009768:	080097b9 	.word	0x080097b9
 800976c:	080097b9 	.word	0x080097b9
 8009770:	080097b9 	.word	0x080097b9
 8009774:	080097b9 	.word	0x080097b9
 8009778:	080097b9 	.word	0x080097b9
 800977c:	080097b9 	.word	0x080097b9
 8009780:	080097b9 	.word	0x080097b9
 8009784:	080097b1 	.word	0x080097b1
 8009788:	2301      	movs	r3, #1
 800978a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800978e:	e0bc      	b.n	800990a <UART_SetConfig+0x5a6>
 8009790:	2304      	movs	r3, #4
 8009792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009796:	e0b8      	b.n	800990a <UART_SetConfig+0x5a6>
 8009798:	2308      	movs	r3, #8
 800979a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800979e:	e0b4      	b.n	800990a <UART_SetConfig+0x5a6>
 80097a0:	2310      	movs	r3, #16
 80097a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097a6:	e0b0      	b.n	800990a <UART_SetConfig+0x5a6>
 80097a8:	2320      	movs	r3, #32
 80097aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097ae:	e0ac      	b.n	800990a <UART_SetConfig+0x5a6>
 80097b0:	2340      	movs	r3, #64	@ 0x40
 80097b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097b6:	e0a8      	b.n	800990a <UART_SetConfig+0x5a6>
 80097b8:	2380      	movs	r3, #128	@ 0x80
 80097ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097be:	e0a4      	b.n	800990a <UART_SetConfig+0x5a6>
 80097c0:	697b      	ldr	r3, [r7, #20]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a8f      	ldr	r2, [pc, #572]	@ (8009a04 <UART_SetConfig+0x6a0>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d130      	bne.n	800982c <UART_SetConfig+0x4c8>
 80097ca:	4b8d      	ldr	r3, [pc, #564]	@ (8009a00 <UART_SetConfig+0x69c>)
 80097cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ce:	f003 0307 	and.w	r3, r3, #7
 80097d2:	2b05      	cmp	r3, #5
 80097d4:	d826      	bhi.n	8009824 <UART_SetConfig+0x4c0>
 80097d6:	a201      	add	r2, pc, #4	@ (adr r2, 80097dc <UART_SetConfig+0x478>)
 80097d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097dc:	080097f5 	.word	0x080097f5
 80097e0:	080097fd 	.word	0x080097fd
 80097e4:	08009805 	.word	0x08009805
 80097e8:	0800980d 	.word	0x0800980d
 80097ec:	08009815 	.word	0x08009815
 80097f0:	0800981d 	.word	0x0800981d
 80097f4:	2300      	movs	r3, #0
 80097f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80097fa:	e086      	b.n	800990a <UART_SetConfig+0x5a6>
 80097fc:	2304      	movs	r3, #4
 80097fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009802:	e082      	b.n	800990a <UART_SetConfig+0x5a6>
 8009804:	2308      	movs	r3, #8
 8009806:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800980a:	e07e      	b.n	800990a <UART_SetConfig+0x5a6>
 800980c:	2310      	movs	r3, #16
 800980e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009812:	e07a      	b.n	800990a <UART_SetConfig+0x5a6>
 8009814:	2320      	movs	r3, #32
 8009816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800981a:	e076      	b.n	800990a <UART_SetConfig+0x5a6>
 800981c:	2340      	movs	r3, #64	@ 0x40
 800981e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009822:	e072      	b.n	800990a <UART_SetConfig+0x5a6>
 8009824:	2380      	movs	r3, #128	@ 0x80
 8009826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800982a:	e06e      	b.n	800990a <UART_SetConfig+0x5a6>
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4a75      	ldr	r2, [pc, #468]	@ (8009a08 <UART_SetConfig+0x6a4>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d130      	bne.n	8009898 <UART_SetConfig+0x534>
 8009836:	4b72      	ldr	r3, [pc, #456]	@ (8009a00 <UART_SetConfig+0x69c>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800983a:	f003 0307 	and.w	r3, r3, #7
 800983e:	2b05      	cmp	r3, #5
 8009840:	d826      	bhi.n	8009890 <UART_SetConfig+0x52c>
 8009842:	a201      	add	r2, pc, #4	@ (adr r2, 8009848 <UART_SetConfig+0x4e4>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	08009861 	.word	0x08009861
 800984c:	08009869 	.word	0x08009869
 8009850:	08009871 	.word	0x08009871
 8009854:	08009879 	.word	0x08009879
 8009858:	08009881 	.word	0x08009881
 800985c:	08009889 	.word	0x08009889
 8009860:	2300      	movs	r3, #0
 8009862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009866:	e050      	b.n	800990a <UART_SetConfig+0x5a6>
 8009868:	2304      	movs	r3, #4
 800986a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800986e:	e04c      	b.n	800990a <UART_SetConfig+0x5a6>
 8009870:	2308      	movs	r3, #8
 8009872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009876:	e048      	b.n	800990a <UART_SetConfig+0x5a6>
 8009878:	2310      	movs	r3, #16
 800987a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800987e:	e044      	b.n	800990a <UART_SetConfig+0x5a6>
 8009880:	2320      	movs	r3, #32
 8009882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009886:	e040      	b.n	800990a <UART_SetConfig+0x5a6>
 8009888:	2340      	movs	r3, #64	@ 0x40
 800988a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800988e:	e03c      	b.n	800990a <UART_SetConfig+0x5a6>
 8009890:	2380      	movs	r3, #128	@ 0x80
 8009892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009896:	e038      	b.n	800990a <UART_SetConfig+0x5a6>
 8009898:	697b      	ldr	r3, [r7, #20]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a5b      	ldr	r2, [pc, #364]	@ (8009a0c <UART_SetConfig+0x6a8>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d130      	bne.n	8009904 <UART_SetConfig+0x5a0>
 80098a2:	4b57      	ldr	r3, [pc, #348]	@ (8009a00 <UART_SetConfig+0x69c>)
 80098a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098a6:	f003 0307 	and.w	r3, r3, #7
 80098aa:	2b05      	cmp	r3, #5
 80098ac:	d826      	bhi.n	80098fc <UART_SetConfig+0x598>
 80098ae:	a201      	add	r2, pc, #4	@ (adr r2, 80098b4 <UART_SetConfig+0x550>)
 80098b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098b4:	080098cd 	.word	0x080098cd
 80098b8:	080098d5 	.word	0x080098d5
 80098bc:	080098dd 	.word	0x080098dd
 80098c0:	080098e5 	.word	0x080098e5
 80098c4:	080098ed 	.word	0x080098ed
 80098c8:	080098f5 	.word	0x080098f5
 80098cc:	2302      	movs	r3, #2
 80098ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098d2:	e01a      	b.n	800990a <UART_SetConfig+0x5a6>
 80098d4:	2304      	movs	r3, #4
 80098d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098da:	e016      	b.n	800990a <UART_SetConfig+0x5a6>
 80098dc:	2308      	movs	r3, #8
 80098de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098e2:	e012      	b.n	800990a <UART_SetConfig+0x5a6>
 80098e4:	2310      	movs	r3, #16
 80098e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098ea:	e00e      	b.n	800990a <UART_SetConfig+0x5a6>
 80098ec:	2320      	movs	r3, #32
 80098ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098f2:	e00a      	b.n	800990a <UART_SetConfig+0x5a6>
 80098f4:	2340      	movs	r3, #64	@ 0x40
 80098f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80098fa:	e006      	b.n	800990a <UART_SetConfig+0x5a6>
 80098fc:	2380      	movs	r3, #128	@ 0x80
 80098fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8009902:	e002      	b.n	800990a <UART_SetConfig+0x5a6>
 8009904:	2380      	movs	r3, #128	@ 0x80
 8009906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	4a3f      	ldr	r2, [pc, #252]	@ (8009a0c <UART_SetConfig+0x6a8>)
 8009910:	4293      	cmp	r3, r2
 8009912:	f040 80f8 	bne.w	8009b06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009916:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800991a:	2b20      	cmp	r3, #32
 800991c:	dc46      	bgt.n	80099ac <UART_SetConfig+0x648>
 800991e:	2b02      	cmp	r3, #2
 8009920:	f2c0 8082 	blt.w	8009a28 <UART_SetConfig+0x6c4>
 8009924:	3b02      	subs	r3, #2
 8009926:	2b1e      	cmp	r3, #30
 8009928:	d87e      	bhi.n	8009a28 <UART_SetConfig+0x6c4>
 800992a:	a201      	add	r2, pc, #4	@ (adr r2, 8009930 <UART_SetConfig+0x5cc>)
 800992c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009930:	080099b3 	.word	0x080099b3
 8009934:	08009a29 	.word	0x08009a29
 8009938:	080099bb 	.word	0x080099bb
 800993c:	08009a29 	.word	0x08009a29
 8009940:	08009a29 	.word	0x08009a29
 8009944:	08009a29 	.word	0x08009a29
 8009948:	080099cb 	.word	0x080099cb
 800994c:	08009a29 	.word	0x08009a29
 8009950:	08009a29 	.word	0x08009a29
 8009954:	08009a29 	.word	0x08009a29
 8009958:	08009a29 	.word	0x08009a29
 800995c:	08009a29 	.word	0x08009a29
 8009960:	08009a29 	.word	0x08009a29
 8009964:	08009a29 	.word	0x08009a29
 8009968:	080099db 	.word	0x080099db
 800996c:	08009a29 	.word	0x08009a29
 8009970:	08009a29 	.word	0x08009a29
 8009974:	08009a29 	.word	0x08009a29
 8009978:	08009a29 	.word	0x08009a29
 800997c:	08009a29 	.word	0x08009a29
 8009980:	08009a29 	.word	0x08009a29
 8009984:	08009a29 	.word	0x08009a29
 8009988:	08009a29 	.word	0x08009a29
 800998c:	08009a29 	.word	0x08009a29
 8009990:	08009a29 	.word	0x08009a29
 8009994:	08009a29 	.word	0x08009a29
 8009998:	08009a29 	.word	0x08009a29
 800999c:	08009a29 	.word	0x08009a29
 80099a0:	08009a29 	.word	0x08009a29
 80099a4:	08009a29 	.word	0x08009a29
 80099a8:	08009a1b 	.word	0x08009a1b
 80099ac:	2b40      	cmp	r3, #64	@ 0x40
 80099ae:	d037      	beq.n	8009a20 <UART_SetConfig+0x6bc>
 80099b0:	e03a      	b.n	8009a28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80099b2:	f7fe fb91 	bl	80080d8 <HAL_RCCEx_GetD3PCLK1Freq>
 80099b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80099b8:	e03c      	b.n	8009a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80099ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80099be:	4618      	mov	r0, r3
 80099c0:	f7fe fba0 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099c8:	e034      	b.n	8009a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099ca:	f107 0318 	add.w	r3, r7, #24
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fe fcec 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80099d4:	69fb      	ldr	r3, [r7, #28]
 80099d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80099d8:	e02c      	b.n	8009a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80099da:	4b09      	ldr	r3, [pc, #36]	@ (8009a00 <UART_SetConfig+0x69c>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80099e6:	4b06      	ldr	r3, [pc, #24]	@ (8009a00 <UART_SetConfig+0x69c>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	08db      	lsrs	r3, r3, #3
 80099ec:	f003 0303 	and.w	r3, r3, #3
 80099f0:	4a07      	ldr	r2, [pc, #28]	@ (8009a10 <UART_SetConfig+0x6ac>)
 80099f2:	fa22 f303 	lsr.w	r3, r2, r3
 80099f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80099f8:	e01c      	b.n	8009a34 <UART_SetConfig+0x6d0>
 80099fa:	bf00      	nop
 80099fc:	40011400 	.word	0x40011400
 8009a00:	58024400 	.word	0x58024400
 8009a04:	40007800 	.word	0x40007800
 8009a08:	40007c00 	.word	0x40007c00
 8009a0c:	58000c00 	.word	0x58000c00
 8009a10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8009a14:	4b9d      	ldr	r3, [pc, #628]	@ (8009c8c <UART_SetConfig+0x928>)
 8009a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a18:	e00c      	b.n	8009a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009a1a:	4b9d      	ldr	r3, [pc, #628]	@ (8009c90 <UART_SetConfig+0x92c>)
 8009a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a1e:	e009      	b.n	8009a34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a20:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009a26:	e005      	b.n	8009a34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009a32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009a34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	f000 81de 	beq.w	8009df8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009a3c:	697b      	ldr	r3, [r7, #20]
 8009a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a40:	4a94      	ldr	r2, [pc, #592]	@ (8009c94 <UART_SetConfig+0x930>)
 8009a42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a46:	461a      	mov	r2, r3
 8009a48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a4e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	685a      	ldr	r2, [r3, #4]
 8009a54:	4613      	mov	r3, r2
 8009a56:	005b      	lsls	r3, r3, #1
 8009a58:	4413      	add	r3, r2
 8009a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a5c:	429a      	cmp	r2, r3
 8009a5e:	d305      	bcc.n	8009a6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009a66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d903      	bls.n	8009a74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009a72:	e1c1      	b.n	8009df8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009a74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009a76:	2200      	movs	r2, #0
 8009a78:	60bb      	str	r3, [r7, #8]
 8009a7a:	60fa      	str	r2, [r7, #12]
 8009a7c:	697b      	ldr	r3, [r7, #20]
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a80:	4a84      	ldr	r2, [pc, #528]	@ (8009c94 <UART_SetConfig+0x930>)
 8009a82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009a86:	b29b      	uxth	r3, r3
 8009a88:	2200      	movs	r2, #0
 8009a8a:	603b      	str	r3, [r7, #0]
 8009a8c:	607a      	str	r2, [r7, #4]
 8009a8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009a96:	f7f6 fc73 	bl	8000380 <__aeabi_uldivmod>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	4619      	mov	r1, r3
 8009aa2:	f04f 0200 	mov.w	r2, #0
 8009aa6:	f04f 0300 	mov.w	r3, #0
 8009aaa:	020b      	lsls	r3, r1, #8
 8009aac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009ab0:	0202      	lsls	r2, r0, #8
 8009ab2:	6979      	ldr	r1, [r7, #20]
 8009ab4:	6849      	ldr	r1, [r1, #4]
 8009ab6:	0849      	lsrs	r1, r1, #1
 8009ab8:	2000      	movs	r0, #0
 8009aba:	460c      	mov	r4, r1
 8009abc:	4605      	mov	r5, r0
 8009abe:	eb12 0804 	adds.w	r8, r2, r4
 8009ac2:	eb43 0905 	adc.w	r9, r3, r5
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	469a      	mov	sl, r3
 8009ace:	4693      	mov	fp, r2
 8009ad0:	4652      	mov	r2, sl
 8009ad2:	465b      	mov	r3, fp
 8009ad4:	4640      	mov	r0, r8
 8009ad6:	4649      	mov	r1, r9
 8009ad8:	f7f6 fc52 	bl	8000380 <__aeabi_uldivmod>
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	4613      	mov	r3, r2
 8009ae2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009aea:	d308      	bcc.n	8009afe <UART_SetConfig+0x79a>
 8009aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009aee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009af2:	d204      	bcs.n	8009afe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009afa:	60da      	str	r2, [r3, #12]
 8009afc:	e17c      	b.n	8009df8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009afe:	2301      	movs	r3, #1
 8009b00:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009b04:	e178      	b.n	8009df8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b06:	697b      	ldr	r3, [r7, #20]
 8009b08:	69db      	ldr	r3, [r3, #28]
 8009b0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009b0e:	f040 80c5 	bne.w	8009c9c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8009b12:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009b16:	2b20      	cmp	r3, #32
 8009b18:	dc48      	bgt.n	8009bac <UART_SetConfig+0x848>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	db7b      	blt.n	8009c16 <UART_SetConfig+0x8b2>
 8009b1e:	2b20      	cmp	r3, #32
 8009b20:	d879      	bhi.n	8009c16 <UART_SetConfig+0x8b2>
 8009b22:	a201      	add	r2, pc, #4	@ (adr r2, 8009b28 <UART_SetConfig+0x7c4>)
 8009b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b28:	08009bb3 	.word	0x08009bb3
 8009b2c:	08009bbb 	.word	0x08009bbb
 8009b30:	08009c17 	.word	0x08009c17
 8009b34:	08009c17 	.word	0x08009c17
 8009b38:	08009bc3 	.word	0x08009bc3
 8009b3c:	08009c17 	.word	0x08009c17
 8009b40:	08009c17 	.word	0x08009c17
 8009b44:	08009c17 	.word	0x08009c17
 8009b48:	08009bd3 	.word	0x08009bd3
 8009b4c:	08009c17 	.word	0x08009c17
 8009b50:	08009c17 	.word	0x08009c17
 8009b54:	08009c17 	.word	0x08009c17
 8009b58:	08009c17 	.word	0x08009c17
 8009b5c:	08009c17 	.word	0x08009c17
 8009b60:	08009c17 	.word	0x08009c17
 8009b64:	08009c17 	.word	0x08009c17
 8009b68:	08009be3 	.word	0x08009be3
 8009b6c:	08009c17 	.word	0x08009c17
 8009b70:	08009c17 	.word	0x08009c17
 8009b74:	08009c17 	.word	0x08009c17
 8009b78:	08009c17 	.word	0x08009c17
 8009b7c:	08009c17 	.word	0x08009c17
 8009b80:	08009c17 	.word	0x08009c17
 8009b84:	08009c17 	.word	0x08009c17
 8009b88:	08009c17 	.word	0x08009c17
 8009b8c:	08009c17 	.word	0x08009c17
 8009b90:	08009c17 	.word	0x08009c17
 8009b94:	08009c17 	.word	0x08009c17
 8009b98:	08009c17 	.word	0x08009c17
 8009b9c:	08009c17 	.word	0x08009c17
 8009ba0:	08009c17 	.word	0x08009c17
 8009ba4:	08009c17 	.word	0x08009c17
 8009ba8:	08009c09 	.word	0x08009c09
 8009bac:	2b40      	cmp	r3, #64	@ 0x40
 8009bae:	d02e      	beq.n	8009c0e <UART_SetConfig+0x8aa>
 8009bb0:	e031      	b.n	8009c16 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009bb2:	f7fd f85b 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 8009bb6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bb8:	e033      	b.n	8009c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009bba:	f7fd f86d 	bl	8006c98 <HAL_RCC_GetPCLK2Freq>
 8009bbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009bc0:	e02f      	b.n	8009c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	f7fe fa9c 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009bd0:	e027      	b.n	8009c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009bd2:	f107 0318 	add.w	r3, r7, #24
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f7fe fbe8 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009bdc:	69fb      	ldr	r3, [r7, #28]
 8009bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009be0:	e01f      	b.n	8009c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009be2:	4b2d      	ldr	r3, [pc, #180]	@ (8009c98 <UART_SetConfig+0x934>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f003 0320 	and.w	r3, r3, #32
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d009      	beq.n	8009c02 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009bee:	4b2a      	ldr	r3, [pc, #168]	@ (8009c98 <UART_SetConfig+0x934>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	08db      	lsrs	r3, r3, #3
 8009bf4:	f003 0303 	and.w	r3, r3, #3
 8009bf8:	4a24      	ldr	r2, [pc, #144]	@ (8009c8c <UART_SetConfig+0x928>)
 8009bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009c00:	e00f      	b.n	8009c22 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8009c02:	4b22      	ldr	r3, [pc, #136]	@ (8009c8c <UART_SetConfig+0x928>)
 8009c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c06:	e00c      	b.n	8009c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009c08:	4b21      	ldr	r3, [pc, #132]	@ (8009c90 <UART_SetConfig+0x92c>)
 8009c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c0c:	e009      	b.n	8009c22 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009c0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c14:	e005      	b.n	8009c22 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8009c16:	2300      	movs	r3, #0
 8009c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009c20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f000 80e7 	beq.w	8009df8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2e:	4a19      	ldr	r2, [pc, #100]	@ (8009c94 <UART_SetConfig+0x930>)
 8009c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009c34:	461a      	mov	r2, r3
 8009c36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8009c3c:	005a      	lsls	r2, r3, #1
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	085b      	lsrs	r3, r3, #1
 8009c44:	441a      	add	r2, r3
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	2b0f      	cmp	r3, #15
 8009c54:	d916      	bls.n	8009c84 <UART_SetConfig+0x920>
 8009c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009c5c:	d212      	bcs.n	8009c84 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c60:	b29b      	uxth	r3, r3
 8009c62:	f023 030f 	bic.w	r3, r3, #15
 8009c66:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009c68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c6a:	085b      	lsrs	r3, r3, #1
 8009c6c:	b29b      	uxth	r3, r3
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	b29a      	uxth	r2, r3
 8009c74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8009c76:	4313      	orrs	r3, r2
 8009c78:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8009c80:	60da      	str	r2, [r3, #12]
 8009c82:	e0b9      	b.n	8009df8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009c84:	2301      	movs	r3, #1
 8009c86:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8009c8a:	e0b5      	b.n	8009df8 <UART_SetConfig+0xa94>
 8009c8c:	03d09000 	.word	0x03d09000
 8009c90:	003d0900 	.word	0x003d0900
 8009c94:	08010104 	.word	0x08010104
 8009c98:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009c9c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8009ca0:	2b20      	cmp	r3, #32
 8009ca2:	dc49      	bgt.n	8009d38 <UART_SetConfig+0x9d4>
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	db7c      	blt.n	8009da2 <UART_SetConfig+0xa3e>
 8009ca8:	2b20      	cmp	r3, #32
 8009caa:	d87a      	bhi.n	8009da2 <UART_SetConfig+0xa3e>
 8009cac:	a201      	add	r2, pc, #4	@ (adr r2, 8009cb4 <UART_SetConfig+0x950>)
 8009cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cb2:	bf00      	nop
 8009cb4:	08009d3f 	.word	0x08009d3f
 8009cb8:	08009d47 	.word	0x08009d47
 8009cbc:	08009da3 	.word	0x08009da3
 8009cc0:	08009da3 	.word	0x08009da3
 8009cc4:	08009d4f 	.word	0x08009d4f
 8009cc8:	08009da3 	.word	0x08009da3
 8009ccc:	08009da3 	.word	0x08009da3
 8009cd0:	08009da3 	.word	0x08009da3
 8009cd4:	08009d5f 	.word	0x08009d5f
 8009cd8:	08009da3 	.word	0x08009da3
 8009cdc:	08009da3 	.word	0x08009da3
 8009ce0:	08009da3 	.word	0x08009da3
 8009ce4:	08009da3 	.word	0x08009da3
 8009ce8:	08009da3 	.word	0x08009da3
 8009cec:	08009da3 	.word	0x08009da3
 8009cf0:	08009da3 	.word	0x08009da3
 8009cf4:	08009d6f 	.word	0x08009d6f
 8009cf8:	08009da3 	.word	0x08009da3
 8009cfc:	08009da3 	.word	0x08009da3
 8009d00:	08009da3 	.word	0x08009da3
 8009d04:	08009da3 	.word	0x08009da3
 8009d08:	08009da3 	.word	0x08009da3
 8009d0c:	08009da3 	.word	0x08009da3
 8009d10:	08009da3 	.word	0x08009da3
 8009d14:	08009da3 	.word	0x08009da3
 8009d18:	08009da3 	.word	0x08009da3
 8009d1c:	08009da3 	.word	0x08009da3
 8009d20:	08009da3 	.word	0x08009da3
 8009d24:	08009da3 	.word	0x08009da3
 8009d28:	08009da3 	.word	0x08009da3
 8009d2c:	08009da3 	.word	0x08009da3
 8009d30:	08009da3 	.word	0x08009da3
 8009d34:	08009d95 	.word	0x08009d95
 8009d38:	2b40      	cmp	r3, #64	@ 0x40
 8009d3a:	d02e      	beq.n	8009d9a <UART_SetConfig+0xa36>
 8009d3c:	e031      	b.n	8009da2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009d3e:	f7fc ff95 	bl	8006c6c <HAL_RCC_GetPCLK1Freq>
 8009d42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d44:	e033      	b.n	8009dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009d46:	f7fc ffa7 	bl	8006c98 <HAL_RCC_GetPCLK2Freq>
 8009d4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8009d4c:	e02f      	b.n	8009dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009d52:	4618      	mov	r0, r3
 8009d54:	f7fe f9d6 	bl	8008104 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d5c:	e027      	b.n	8009dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009d5e:	f107 0318 	add.w	r3, r7, #24
 8009d62:	4618      	mov	r0, r3
 8009d64:	f7fe fb22 	bl	80083ac <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d6c:	e01f      	b.n	8009dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009d6e:	4b2d      	ldr	r3, [pc, #180]	@ (8009e24 <UART_SetConfig+0xac0>)
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	f003 0320 	and.w	r3, r3, #32
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d009      	beq.n	8009d8e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009d7a:	4b2a      	ldr	r3, [pc, #168]	@ (8009e24 <UART_SetConfig+0xac0>)
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	08db      	lsrs	r3, r3, #3
 8009d80:	f003 0303 	and.w	r3, r3, #3
 8009d84:	4a28      	ldr	r2, [pc, #160]	@ (8009e28 <UART_SetConfig+0xac4>)
 8009d86:	fa22 f303 	lsr.w	r3, r2, r3
 8009d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009d8c:	e00f      	b.n	8009dae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009d8e:	4b26      	ldr	r3, [pc, #152]	@ (8009e28 <UART_SetConfig+0xac4>)
 8009d90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d92:	e00c      	b.n	8009dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009d94:	4b25      	ldr	r3, [pc, #148]	@ (8009e2c <UART_SetConfig+0xac8>)
 8009d96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d98:	e009      	b.n	8009dae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009d9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009da0:	e005      	b.n	8009dae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8009da2:	2300      	movs	r3, #0
 8009da4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8009da6:	2301      	movs	r3, #1
 8009da8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8009dac:	bf00      	nop
    }

    if (pclk != 0U)
 8009dae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d021      	beq.n	8009df8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009db8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e30 <UART_SetConfig+0xacc>)
 8009dba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009dc2:	fbb3 f2f2 	udiv	r2, r3, r2
 8009dc6:	697b      	ldr	r3, [r7, #20]
 8009dc8:	685b      	ldr	r3, [r3, #4]
 8009dca:	085b      	lsrs	r3, r3, #1
 8009dcc:	441a      	add	r2, r3
 8009dce:	697b      	ldr	r3, [r7, #20]
 8009dd0:	685b      	ldr	r3, [r3, #4]
 8009dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8009dd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dda:	2b0f      	cmp	r3, #15
 8009ddc:	d909      	bls.n	8009df2 <UART_SetConfig+0xa8e>
 8009dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009de4:	d205      	bcs.n	8009df2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009de8:	b29a      	uxth	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	60da      	str	r2, [r3, #12]
 8009df0:	e002      	b.n	8009df8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009e00:	697b      	ldr	r3, [r7, #20]
 8009e02:	2201      	movs	r2, #1
 8009e04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	2200      	movs	r2, #0
 8009e12:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8009e14:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3748      	adds	r7, #72	@ 0x48
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e22:	bf00      	nop
 8009e24:	58024400 	.word	0x58024400
 8009e28:	03d09000 	.word	0x03d09000
 8009e2c:	003d0900 	.word	0x003d0900
 8009e30:	08010104 	.word	0x08010104

08009e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e40:	f003 0308 	and.w	r3, r3, #8
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d00a      	beq.n	8009e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	430a      	orrs	r2, r1
 8009e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e62:	f003 0301 	and.w	r3, r3, #1
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00a      	beq.n	8009e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	685b      	ldr	r3, [r3, #4]
 8009e70:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	430a      	orrs	r2, r1
 8009e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e84:	f003 0302 	and.w	r3, r3, #2
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d00a      	beq.n	8009ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	430a      	orrs	r2, r1
 8009ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ea6:	f003 0304 	and.w	r3, r3, #4
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00a      	beq.n	8009ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	430a      	orrs	r2, r1
 8009ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ec8:	f003 0310 	and.w	r3, r3, #16
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d00a      	beq.n	8009ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	689b      	ldr	r3, [r3, #8]
 8009ed6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009eea:	f003 0320 	and.w	r3, r3, #32
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d00a      	beq.n	8009f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	689b      	ldr	r3, [r3, #8]
 8009ef8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d01a      	beq.n	8009f4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	430a      	orrs	r2, r1
 8009f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f2e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009f32:	d10a      	bne.n	8009f4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	430a      	orrs	r2, r1
 8009f48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	685b      	ldr	r3, [r3, #4]
 8009f5c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	430a      	orrs	r2, r1
 8009f6a:	605a      	str	r2, [r3, #4]
  }
}
 8009f6c:	bf00      	nop
 8009f6e:	370c      	adds	r7, #12
 8009f70:	46bd      	mov	sp, r7
 8009f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f76:	4770      	bx	lr

08009f78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b098      	sub	sp, #96	@ 0x60
 8009f7c:	af02      	add	r7, sp, #8
 8009f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2200      	movs	r2, #0
 8009f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009f88:	f7fa fde8 	bl	8004b5c <HAL_GetTick>
 8009f8c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f003 0308 	and.w	r3, r3, #8
 8009f98:	2b08      	cmp	r3, #8
 8009f9a:	d12f      	bne.n	8009ffc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009f9c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009fa0:	9300      	str	r3, [sp, #0]
 8009fa2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 f88e 	bl	800a0cc <UART_WaitOnFlagUntilTimeout>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d022      	beq.n	8009ffc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009fbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009fbe:	e853 3f00 	ldrex	r3, [r3]
 8009fc2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009fca:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009fd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8009fd6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009fd8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009fda:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009fdc:	e841 2300 	strex	r3, r2, [r1]
 8009fe0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009fe2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d1e6      	bne.n	8009fb6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	2220      	movs	r2, #32
 8009fec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009ff8:	2303      	movs	r3, #3
 8009ffa:	e063      	b.n	800a0c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f003 0304 	and.w	r3, r3, #4
 800a006:	2b04      	cmp	r3, #4
 800a008:	d149      	bne.n	800a09e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a00a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a012:	2200      	movs	r2, #0
 800a014:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f000 f857 	bl	800a0cc <UART_WaitOnFlagUntilTimeout>
 800a01e:	4603      	mov	r3, r0
 800a020:	2b00      	cmp	r3, #0
 800a022:	d03c      	beq.n	800a09e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	e853 3f00 	ldrex	r3, [r3]
 800a030:	623b      	str	r3, [r7, #32]
   return(result);
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a038:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a042:	633b      	str	r3, [r7, #48]	@ 0x30
 800a044:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a04a:	e841 2300 	strex	r3, r2, [r1]
 800a04e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a052:	2b00      	cmp	r3, #0
 800a054:	d1e6      	bne.n	800a024 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	3308      	adds	r3, #8
 800a05c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	60fb      	str	r3, [r7, #12]
   return(result);
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	f023 0301 	bic.w	r3, r3, #1
 800a06c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	3308      	adds	r3, #8
 800a074:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a076:	61fa      	str	r2, [r7, #28]
 800a078:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	69b9      	ldr	r1, [r7, #24]
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	617b      	str	r3, [r7, #20]
   return(result);
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e5      	bne.n	800a056 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a09a:	2303      	movs	r3, #3
 800a09c:	e012      	b.n	800a0c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2220      	movs	r2, #32
 800a0aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3758      	adds	r7, #88	@ 0x58
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a0dc:	e04f      	b.n	800a17e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a0de:	69bb      	ldr	r3, [r7, #24]
 800a0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0e4:	d04b      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a0e6:	f7fa fd39 	bl	8004b5c <HAL_GetTick>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	1ad3      	subs	r3, r2, r3
 800a0f0:	69ba      	ldr	r2, [r7, #24]
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d302      	bcc.n	800a0fc <UART_WaitOnFlagUntilTimeout+0x30>
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a0fc:	2303      	movs	r3, #3
 800a0fe:	e04e      	b.n	800a19e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d037      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	2b80      	cmp	r3, #128	@ 0x80
 800a112:	d034      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0xb2>
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b40      	cmp	r3, #64	@ 0x40
 800a118:	d031      	beq.n	800a17e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	69db      	ldr	r3, [r3, #28]
 800a120:	f003 0308 	and.w	r3, r3, #8
 800a124:	2b08      	cmp	r3, #8
 800a126:	d110      	bne.n	800a14a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2208      	movs	r2, #8
 800a12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f000 f839 	bl	800a1a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2208      	movs	r2, #8
 800a13a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e029      	b.n	800a19e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	69db      	ldr	r3, [r3, #28]
 800a150:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a154:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a158:	d111      	bne.n	800a17e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a164:	68f8      	ldr	r0, [r7, #12]
 800a166:	f000 f81f 	bl	800a1a8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2220      	movs	r2, #32
 800a16e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2200      	movs	r2, #0
 800a176:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800a17a:	2303      	movs	r3, #3
 800a17c:	e00f      	b.n	800a19e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	69da      	ldr	r2, [r3, #28]
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	4013      	ands	r3, r2
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	bf0c      	ite	eq
 800a18e:	2301      	moveq	r3, #1
 800a190:	2300      	movne	r3, #0
 800a192:	b2db      	uxtb	r3, r3
 800a194:	461a      	mov	r2, r3
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	429a      	cmp	r2, r3
 800a19a:	d0a0      	beq.n	800a0de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a19c:	2300      	movs	r3, #0
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3710      	adds	r7, #16
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
	...

0800a1a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b095      	sub	sp, #84	@ 0x54
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1b8:	e853 3f00 	ldrex	r3, [r3]
 800a1bc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a1be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a1c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a1ce:	643b      	str	r3, [r7, #64]	@ 0x40
 800a1d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a1d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a1d6:	e841 2300 	strex	r3, r2, [r1]
 800a1da:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a1dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d1e6      	bne.n	800a1b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	3308      	adds	r3, #8
 800a1e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	e853 3f00 	ldrex	r3, [r3]
 800a1f0:	61fb      	str	r3, [r7, #28]
   return(result);
 800a1f2:	69fa      	ldr	r2, [r7, #28]
 800a1f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a270 <UART_EndRxTransfer+0xc8>)
 800a1f6:	4013      	ands	r3, r2
 800a1f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	3308      	adds	r3, #8
 800a200:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a202:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a204:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a206:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a20a:	e841 2300 	strex	r3, r2, [r1]
 800a20e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a212:	2b00      	cmp	r3, #0
 800a214:	d1e5      	bne.n	800a1e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d118      	bne.n	800a250 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	f023 0310 	bic.w	r3, r3, #16
 800a232:	647b      	str	r3, [r7, #68]	@ 0x44
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a23c:	61bb      	str	r3, [r7, #24]
 800a23e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a240:	6979      	ldr	r1, [r7, #20]
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	e841 2300 	strex	r3, r2, [r1]
 800a248:	613b      	str	r3, [r7, #16]
   return(result);
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e6      	bne.n	800a21e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2220      	movs	r2, #32
 800a254:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	2200      	movs	r2, #0
 800a25c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	2200      	movs	r2, #0
 800a262:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800a264:	bf00      	nop
 800a266:	3754      	adds	r7, #84	@ 0x54
 800a268:	46bd      	mov	sp, r7
 800a26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a26e:	4770      	bx	lr
 800a270:	effffffe 	.word	0xeffffffe

0800a274 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a280:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2200      	movs	r2, #0
 800a286:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a28a:	68f8      	ldr	r0, [r7, #12]
 800a28c:	f7ff f854 	bl	8009338 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a290:	bf00      	nop
 800a292:	3710      	adds	r7, #16
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}

0800a298 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b088      	sub	sp, #32
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	e853 3f00 	ldrex	r3, [r3]
 800a2ac:	60bb      	str	r3, [r7, #8]
   return(result);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a2b4:	61fb      	str	r3, [r7, #28]
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	61bb      	str	r3, [r7, #24]
 800a2c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2c2:	6979      	ldr	r1, [r7, #20]
 800a2c4:	69ba      	ldr	r2, [r7, #24]
 800a2c6:	e841 2300 	strex	r3, r2, [r1]
 800a2ca:	613b      	str	r3, [r7, #16]
   return(result);
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d1e6      	bne.n	800a2a0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2220      	movs	r2, #32
 800a2d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f7ff f81f 	bl	8009324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a2e6:	bf00      	nop
 800a2e8:	3720      	adds	r7, #32
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a2ee:	b480      	push	{r7}
 800a2f0:	b083      	sub	sp, #12
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a2f6:	bf00      	nop
 800a2f8:	370c      	adds	r7, #12
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a302:	b480      	push	{r7}
 800a304:	b083      	sub	sp, #12
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a30a:	bf00      	nop
 800a30c:	370c      	adds	r7, #12
 800a30e:	46bd      	mov	sp, r7
 800a310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a314:	4770      	bx	lr

0800a316 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a316:	b480      	push	{r7}
 800a318:	b083      	sub	sp, #12
 800a31a:	af00      	add	r7, sp, #0
 800a31c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d101      	bne.n	800a340 <HAL_UARTEx_DisableFifoMode+0x16>
 800a33c:	2302      	movs	r3, #2
 800a33e:	e027      	b.n	800a390 <HAL_UARTEx_DisableFifoMode+0x66>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2224      	movs	r2, #36	@ 0x24
 800a34c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f022 0201 	bic.w	r2, r2, #1
 800a366:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a36e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68fa      	ldr	r2, [r7, #12]
 800a37c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	2220      	movs	r2, #32
 800a382:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	2200      	movs	r2, #0
 800a38a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a38e:	2300      	movs	r3, #0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3714      	adds	r7, #20
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b084      	sub	sp, #16
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d101      	bne.n	800a3b4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a3b0:	2302      	movs	r3, #2
 800a3b2:	e02d      	b.n	800a410 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2224      	movs	r2, #36	@ 0x24
 800a3c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f022 0201 	bic.w	r2, r2, #1
 800a3da:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	683a      	ldr	r2, [r7, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f000 f84f 	bl	800a494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2220      	movs	r2, #32
 800a402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	2200      	movs	r2, #0
 800a40a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a428:	2b01      	cmp	r3, #1
 800a42a:	d101      	bne.n	800a430 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a42c:	2302      	movs	r3, #2
 800a42e:	e02d      	b.n	800a48c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2201      	movs	r2, #1
 800a434:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2224      	movs	r2, #36	@ 0x24
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	681a      	ldr	r2, [r3, #0]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f022 0201 	bic.w	r2, r2, #1
 800a456:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	683a      	ldr	r2, [r7, #0]
 800a468:	430a      	orrs	r2, r1
 800a46a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 f811 	bl	800a494 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2220      	movs	r2, #32
 800a47e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a494:	b480      	push	{r7}
 800a496:	b085      	sub	sp, #20
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d108      	bne.n	800a4b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2201      	movs	r2, #1
 800a4a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a4b4:	e031      	b.n	800a51a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a4b6:	2310      	movs	r3, #16
 800a4b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a4ba:	2310      	movs	r3, #16
 800a4bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	0e5b      	lsrs	r3, r3, #25
 800a4c6:	b2db      	uxtb	r3, r3
 800a4c8:	f003 0307 	and.w	r3, r3, #7
 800a4cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	0f5b      	lsrs	r3, r3, #29
 800a4d6:	b2db      	uxtb	r3, r3
 800a4d8:	f003 0307 	and.w	r3, r3, #7
 800a4dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	7b3a      	ldrb	r2, [r7, #12]
 800a4e2:	4911      	ldr	r1, [pc, #68]	@ (800a528 <UARTEx_SetNbDataToProcess+0x94>)
 800a4e4:	5c8a      	ldrb	r2, [r1, r2]
 800a4e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a4ea:	7b3a      	ldrb	r2, [r7, #12]
 800a4ec:	490f      	ldr	r1, [pc, #60]	@ (800a52c <UARTEx_SetNbDataToProcess+0x98>)
 800a4ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a4f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a4fc:	7bfb      	ldrb	r3, [r7, #15]
 800a4fe:	7b7a      	ldrb	r2, [r7, #13]
 800a500:	4909      	ldr	r1, [pc, #36]	@ (800a528 <UARTEx_SetNbDataToProcess+0x94>)
 800a502:	5c8a      	ldrb	r2, [r1, r2]
 800a504:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a508:	7b7a      	ldrb	r2, [r7, #13]
 800a50a:	4908      	ldr	r1, [pc, #32]	@ (800a52c <UARTEx_SetNbDataToProcess+0x98>)
 800a50c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a50e:	fb93 f3f2 	sdiv	r3, r3, r2
 800a512:	b29a      	uxth	r2, r3
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a51a:	bf00      	nop
 800a51c:	3714      	adds	r7, #20
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
 800a526:	bf00      	nop
 800a528:	0801011c 	.word	0x0801011c
 800a52c:	08010124 	.word	0x08010124

0800a530 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    const FMC_NORSRAM_InitTypeDef *Init)
{
 800a530:	b480      	push	{r7}
 800a532:	b087      	sub	sp, #28
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a53a:	683b      	ldr	r3, [r7, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	6812      	ldr	r2, [r2, #0]
 800a548:	f023 0101 	bic.w	r1, r3, #1
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a552:	683b      	ldr	r3, [r7, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	2b08      	cmp	r3, #8
 800a558:	d102      	bne.n	800a560 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a55a:	2340      	movs	r3, #64	@ 0x40
 800a55c:	617b      	str	r3, [r7, #20]
 800a55e:	e001      	b.n	800a564 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a560:	2300      	movs	r3, #0
 800a562:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a568:	697b      	ldr	r3, [r7, #20]
 800a56a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a570:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a572:	683b      	ldr	r3, [r7, #0]
 800a574:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a576:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a57c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a582:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a588:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a58a:	683b      	ldr	r3, [r7, #0]
 800a58c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a58e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a590:	683b      	ldr	r3, [r7, #0]
 800a592:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a594:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WaitSignal              | \
 800a59a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a59c:	683b      	ldr	r3, [r7, #0]
 800a59e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->ExtendedMode            | \
 800a5a0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  btcr_reg = (flashaccess                   | \
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a5b4:	683b      	ldr	r3, [r7, #0]
 800a5b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	4313      	orrs	r3, r2
 800a5c6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a5c8:	4b20      	ldr	r3, [pc, #128]	@ (800a64c <FMC_NORSRAM_Init+0x11c>)
 800a5ca:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5d2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5da:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800a5e2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	681a      	ldr	r2, [r3, #0]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	43db      	mvns	r3, r3
 800a5f2:	ea02 0103 	and.w	r1, r2, r3
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	681a      	ldr	r2, [r3, #0]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	4319      	orrs	r1, r3
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a608:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a60c:	d10c      	bne.n	800a628 <FMC_NORSRAM_Init+0xf8>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d008      	beq.n	800a628 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800a61e:	683b      	ldr	r3, [r7, #0]
 800a620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a622:	431a      	orrs	r2, r3
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a628:	683b      	ldr	r3, [r7, #0]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d006      	beq.n	800a63e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681a      	ldr	r2, [r3, #0]
 800a634:	683b      	ldr	r3, [r7, #0]
 800a636:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a638:	431a      	orrs	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800a63e:	2300      	movs	r3, #0
}
 800a640:	4618      	mov	r0, r3
 800a642:	371c      	adds	r7, #28
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	0008fb7f 	.word	0x0008fb7f

0800a650 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a650:	b480      	push	{r7}
 800a652:	b087      	sub	sp, #28
 800a654:	af00      	add	r7, sp, #0
 800a656:	60f8      	str	r0, [r7, #12]
 800a658:	60b9      	str	r1, [r7, #8]
 800a65a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FMC_BTRx_ADDSET_Pos) |
 800a666:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800a668:	68bb      	ldr	r3, [r7, #8]
 800a66a:	689b      	ldr	r3, [r3, #8]
 800a66c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FMC_BTRx_ADDHLD_Pos) |
 800a66e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	68db      	ldr	r3, [r3, #12]
 800a674:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FMC_BTRx_DATAST_Pos) |
 800a676:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	3b01      	subs	r3, #1
 800a67e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FMC_BTRx_BUSTURN_Pos) |
 800a680:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	695b      	ldr	r3, [r3, #20]
 800a686:	3b02      	subs	r3, #2
 800a688:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FMC_BTRx_CLKDIV_Pos) |
 800a68a:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FMC_BTRx_DATLAT_Pos) |
 800a696:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a6a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6aa:	d113      	bne.n	800a6d4 <FMC_NORSRAM_Timing_Init+0x84>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a6b4:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	691b      	ldr	r3, [r3, #16]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	051b      	lsls	r3, r3, #20
 800a6be:	697a      	ldr	r2, [r7, #20]
 800a6c0:	4313      	orrs	r3, r2
 800a6c2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	685b      	ldr	r3, [r3, #4]
 800a6c8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	431a      	orrs	r2, r3
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a6d4:	2300      	movs	r3, #0
}
 800a6d6:	4618      	mov	r0, r3
 800a6d8:	371c      	adds	r7, #28
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e0:	4770      	bx	lr
	...

0800a6e4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   const FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b085      	sub	sp, #20
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	607a      	str	r2, [r7, #4]
 800a6f0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a6f8:	d11d      	bne.n	800a736 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	687a      	ldr	r2, [r7, #4]
 800a6fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a702:	4b13      	ldr	r3, [pc, #76]	@ (800a750 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800a704:	4013      	ands	r3, r2
 800a706:	68ba      	ldr	r2, [r7, #8]
 800a708:	6811      	ldr	r1, [r2, #0]
 800a70a:	68ba      	ldr	r2, [r7, #8]
 800a70c:	6852      	ldr	r2, [r2, #4]
 800a70e:	0112      	lsls	r2, r2, #4
 800a710:	4311      	orrs	r1, r2
 800a712:	68ba      	ldr	r2, [r7, #8]
 800a714:	6892      	ldr	r2, [r2, #8]
 800a716:	0212      	lsls	r2, r2, #8
 800a718:	4311      	orrs	r1, r2
 800a71a:	68ba      	ldr	r2, [r7, #8]
 800a71c:	6992      	ldr	r2, [r2, #24]
 800a71e:	4311      	orrs	r1, r2
 800a720:	68ba      	ldr	r2, [r7, #8]
 800a722:	68d2      	ldr	r2, [r2, #12]
 800a724:	0412      	lsls	r2, r2, #16
 800a726:	430a      	orrs	r2, r1
 800a728:	ea43 0102 	orr.w	r1, r3, r2
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	687a      	ldr	r2, [r7, #4]
 800a730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a734:	e005      	b.n	800a742 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800a73e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3714      	adds	r7, #20
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr
 800a750:	cff00000 	.word	0xcff00000

0800a754 <std>:
 800a754:	2300      	movs	r3, #0
 800a756:	b510      	push	{r4, lr}
 800a758:	4604      	mov	r4, r0
 800a75a:	e9c0 3300 	strd	r3, r3, [r0]
 800a75e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a762:	6083      	str	r3, [r0, #8]
 800a764:	8181      	strh	r1, [r0, #12]
 800a766:	6643      	str	r3, [r0, #100]	@ 0x64
 800a768:	81c2      	strh	r2, [r0, #14]
 800a76a:	6183      	str	r3, [r0, #24]
 800a76c:	4619      	mov	r1, r3
 800a76e:	2208      	movs	r2, #8
 800a770:	305c      	adds	r0, #92	@ 0x5c
 800a772:	f000 f928 	bl	800a9c6 <memset>
 800a776:	4b0d      	ldr	r3, [pc, #52]	@ (800a7ac <std+0x58>)
 800a778:	6263      	str	r3, [r4, #36]	@ 0x24
 800a77a:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b0 <std+0x5c>)
 800a77c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a77e:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b4 <std+0x60>)
 800a780:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a782:	4b0d      	ldr	r3, [pc, #52]	@ (800a7b8 <std+0x64>)
 800a784:	6323      	str	r3, [r4, #48]	@ 0x30
 800a786:	4b0d      	ldr	r3, [pc, #52]	@ (800a7bc <std+0x68>)
 800a788:	6224      	str	r4, [r4, #32]
 800a78a:	429c      	cmp	r4, r3
 800a78c:	d006      	beq.n	800a79c <std+0x48>
 800a78e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a792:	4294      	cmp	r4, r2
 800a794:	d002      	beq.n	800a79c <std+0x48>
 800a796:	33d0      	adds	r3, #208	@ 0xd0
 800a798:	429c      	cmp	r4, r3
 800a79a:	d105      	bne.n	800a7a8 <std+0x54>
 800a79c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a7a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7a4:	f000 b988 	b.w	800aab8 <__retarget_lock_init_recursive>
 800a7a8:	bd10      	pop	{r4, pc}
 800a7aa:	bf00      	nop
 800a7ac:	0800a941 	.word	0x0800a941
 800a7b0:	0800a963 	.word	0x0800a963
 800a7b4:	0800a99b 	.word	0x0800a99b
 800a7b8:	0800a9bf 	.word	0x0800a9bf
 800a7bc:	2400018c 	.word	0x2400018c

0800a7c0 <stdio_exit_handler>:
 800a7c0:	4a02      	ldr	r2, [pc, #8]	@ (800a7cc <stdio_exit_handler+0xc>)
 800a7c2:	4903      	ldr	r1, [pc, #12]	@ (800a7d0 <stdio_exit_handler+0x10>)
 800a7c4:	4803      	ldr	r0, [pc, #12]	@ (800a7d4 <stdio_exit_handler+0x14>)
 800a7c6:	f000 b869 	b.w	800a89c <_fwalk_sglue>
 800a7ca:	bf00      	nop
 800a7cc:	24000018 	.word	0x24000018
 800a7d0:	0800b605 	.word	0x0800b605
 800a7d4:	24000028 	.word	0x24000028

0800a7d8 <cleanup_stdio>:
 800a7d8:	6841      	ldr	r1, [r0, #4]
 800a7da:	4b0c      	ldr	r3, [pc, #48]	@ (800a80c <cleanup_stdio+0x34>)
 800a7dc:	4299      	cmp	r1, r3
 800a7de:	b510      	push	{r4, lr}
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	d001      	beq.n	800a7e8 <cleanup_stdio+0x10>
 800a7e4:	f000 ff0e 	bl	800b604 <_fflush_r>
 800a7e8:	68a1      	ldr	r1, [r4, #8]
 800a7ea:	4b09      	ldr	r3, [pc, #36]	@ (800a810 <cleanup_stdio+0x38>)
 800a7ec:	4299      	cmp	r1, r3
 800a7ee:	d002      	beq.n	800a7f6 <cleanup_stdio+0x1e>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	f000 ff07 	bl	800b604 <_fflush_r>
 800a7f6:	68e1      	ldr	r1, [r4, #12]
 800a7f8:	4b06      	ldr	r3, [pc, #24]	@ (800a814 <cleanup_stdio+0x3c>)
 800a7fa:	4299      	cmp	r1, r3
 800a7fc:	d004      	beq.n	800a808 <cleanup_stdio+0x30>
 800a7fe:	4620      	mov	r0, r4
 800a800:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a804:	f000 befe 	b.w	800b604 <_fflush_r>
 800a808:	bd10      	pop	{r4, pc}
 800a80a:	bf00      	nop
 800a80c:	2400018c 	.word	0x2400018c
 800a810:	240001f4 	.word	0x240001f4
 800a814:	2400025c 	.word	0x2400025c

0800a818 <global_stdio_init.part.0>:
 800a818:	b510      	push	{r4, lr}
 800a81a:	4b0b      	ldr	r3, [pc, #44]	@ (800a848 <global_stdio_init.part.0+0x30>)
 800a81c:	4c0b      	ldr	r4, [pc, #44]	@ (800a84c <global_stdio_init.part.0+0x34>)
 800a81e:	4a0c      	ldr	r2, [pc, #48]	@ (800a850 <global_stdio_init.part.0+0x38>)
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	4620      	mov	r0, r4
 800a824:	2200      	movs	r2, #0
 800a826:	2104      	movs	r1, #4
 800a828:	f7ff ff94 	bl	800a754 <std>
 800a82c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a830:	2201      	movs	r2, #1
 800a832:	2109      	movs	r1, #9
 800a834:	f7ff ff8e 	bl	800a754 <std>
 800a838:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a83c:	2202      	movs	r2, #2
 800a83e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a842:	2112      	movs	r1, #18
 800a844:	f7ff bf86 	b.w	800a754 <std>
 800a848:	240002c4 	.word	0x240002c4
 800a84c:	2400018c 	.word	0x2400018c
 800a850:	0800a7c1 	.word	0x0800a7c1

0800a854 <__sfp_lock_acquire>:
 800a854:	4801      	ldr	r0, [pc, #4]	@ (800a85c <__sfp_lock_acquire+0x8>)
 800a856:	f000 b930 	b.w	800aaba <__retarget_lock_acquire_recursive>
 800a85a:	bf00      	nop
 800a85c:	240002cd 	.word	0x240002cd

0800a860 <__sfp_lock_release>:
 800a860:	4801      	ldr	r0, [pc, #4]	@ (800a868 <__sfp_lock_release+0x8>)
 800a862:	f000 b92b 	b.w	800aabc <__retarget_lock_release_recursive>
 800a866:	bf00      	nop
 800a868:	240002cd 	.word	0x240002cd

0800a86c <__sinit>:
 800a86c:	b510      	push	{r4, lr}
 800a86e:	4604      	mov	r4, r0
 800a870:	f7ff fff0 	bl	800a854 <__sfp_lock_acquire>
 800a874:	6a23      	ldr	r3, [r4, #32]
 800a876:	b11b      	cbz	r3, 800a880 <__sinit+0x14>
 800a878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a87c:	f7ff bff0 	b.w	800a860 <__sfp_lock_release>
 800a880:	4b04      	ldr	r3, [pc, #16]	@ (800a894 <__sinit+0x28>)
 800a882:	6223      	str	r3, [r4, #32]
 800a884:	4b04      	ldr	r3, [pc, #16]	@ (800a898 <__sinit+0x2c>)
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1f5      	bne.n	800a878 <__sinit+0xc>
 800a88c:	f7ff ffc4 	bl	800a818 <global_stdio_init.part.0>
 800a890:	e7f2      	b.n	800a878 <__sinit+0xc>
 800a892:	bf00      	nop
 800a894:	0800a7d9 	.word	0x0800a7d9
 800a898:	240002c4 	.word	0x240002c4

0800a89c <_fwalk_sglue>:
 800a89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a8a0:	4607      	mov	r7, r0
 800a8a2:	4688      	mov	r8, r1
 800a8a4:	4614      	mov	r4, r2
 800a8a6:	2600      	movs	r6, #0
 800a8a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8ac:	f1b9 0901 	subs.w	r9, r9, #1
 800a8b0:	d505      	bpl.n	800a8be <_fwalk_sglue+0x22>
 800a8b2:	6824      	ldr	r4, [r4, #0]
 800a8b4:	2c00      	cmp	r4, #0
 800a8b6:	d1f7      	bne.n	800a8a8 <_fwalk_sglue+0xc>
 800a8b8:	4630      	mov	r0, r6
 800a8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8be:	89ab      	ldrh	r3, [r5, #12]
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d907      	bls.n	800a8d4 <_fwalk_sglue+0x38>
 800a8c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8c8:	3301      	adds	r3, #1
 800a8ca:	d003      	beq.n	800a8d4 <_fwalk_sglue+0x38>
 800a8cc:	4629      	mov	r1, r5
 800a8ce:	4638      	mov	r0, r7
 800a8d0:	47c0      	blx	r8
 800a8d2:	4306      	orrs	r6, r0
 800a8d4:	3568      	adds	r5, #104	@ 0x68
 800a8d6:	e7e9      	b.n	800a8ac <_fwalk_sglue+0x10>

0800a8d8 <iprintf>:
 800a8d8:	b40f      	push	{r0, r1, r2, r3}
 800a8da:	b507      	push	{r0, r1, r2, lr}
 800a8dc:	4906      	ldr	r1, [pc, #24]	@ (800a8f8 <iprintf+0x20>)
 800a8de:	ab04      	add	r3, sp, #16
 800a8e0:	6808      	ldr	r0, [r1, #0]
 800a8e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8e6:	6881      	ldr	r1, [r0, #8]
 800a8e8:	9301      	str	r3, [sp, #4]
 800a8ea:	f000 fb63 	bl	800afb4 <_vfiprintf_r>
 800a8ee:	b003      	add	sp, #12
 800a8f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f4:	b004      	add	sp, #16
 800a8f6:	4770      	bx	lr
 800a8f8:	24000024 	.word	0x24000024

0800a8fc <siprintf>:
 800a8fc:	b40e      	push	{r1, r2, r3}
 800a8fe:	b510      	push	{r4, lr}
 800a900:	b09d      	sub	sp, #116	@ 0x74
 800a902:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a904:	9002      	str	r0, [sp, #8]
 800a906:	9006      	str	r0, [sp, #24]
 800a908:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a90c:	480a      	ldr	r0, [pc, #40]	@ (800a938 <siprintf+0x3c>)
 800a90e:	9107      	str	r1, [sp, #28]
 800a910:	9104      	str	r1, [sp, #16]
 800a912:	490a      	ldr	r1, [pc, #40]	@ (800a93c <siprintf+0x40>)
 800a914:	f853 2b04 	ldr.w	r2, [r3], #4
 800a918:	9105      	str	r1, [sp, #20]
 800a91a:	2400      	movs	r4, #0
 800a91c:	a902      	add	r1, sp, #8
 800a91e:	6800      	ldr	r0, [r0, #0]
 800a920:	9301      	str	r3, [sp, #4]
 800a922:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a924:	f000 fa20 	bl	800ad68 <_svfiprintf_r>
 800a928:	9b02      	ldr	r3, [sp, #8]
 800a92a:	701c      	strb	r4, [r3, #0]
 800a92c:	b01d      	add	sp, #116	@ 0x74
 800a92e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a932:	b003      	add	sp, #12
 800a934:	4770      	bx	lr
 800a936:	bf00      	nop
 800a938:	24000024 	.word	0x24000024
 800a93c:	ffff0208 	.word	0xffff0208

0800a940 <__sread>:
 800a940:	b510      	push	{r4, lr}
 800a942:	460c      	mov	r4, r1
 800a944:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a948:	f000 f868 	bl	800aa1c <_read_r>
 800a94c:	2800      	cmp	r0, #0
 800a94e:	bfab      	itete	ge
 800a950:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a952:	89a3      	ldrhlt	r3, [r4, #12]
 800a954:	181b      	addge	r3, r3, r0
 800a956:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a95a:	bfac      	ite	ge
 800a95c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a95e:	81a3      	strhlt	r3, [r4, #12]
 800a960:	bd10      	pop	{r4, pc}

0800a962 <__swrite>:
 800a962:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a966:	461f      	mov	r7, r3
 800a968:	898b      	ldrh	r3, [r1, #12]
 800a96a:	05db      	lsls	r3, r3, #23
 800a96c:	4605      	mov	r5, r0
 800a96e:	460c      	mov	r4, r1
 800a970:	4616      	mov	r6, r2
 800a972:	d505      	bpl.n	800a980 <__swrite+0x1e>
 800a974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a978:	2302      	movs	r3, #2
 800a97a:	2200      	movs	r2, #0
 800a97c:	f000 f83c 	bl	800a9f8 <_lseek_r>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a986:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	4632      	mov	r2, r6
 800a98e:	463b      	mov	r3, r7
 800a990:	4628      	mov	r0, r5
 800a992:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a996:	f000 b853 	b.w	800aa40 <_write_r>

0800a99a <__sseek>:
 800a99a:	b510      	push	{r4, lr}
 800a99c:	460c      	mov	r4, r1
 800a99e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9a2:	f000 f829 	bl	800a9f8 <_lseek_r>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	bf15      	itete	ne
 800a9ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a9ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a9b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a9b6:	81a3      	strheq	r3, [r4, #12]
 800a9b8:	bf18      	it	ne
 800a9ba:	81a3      	strhne	r3, [r4, #12]
 800a9bc:	bd10      	pop	{r4, pc}

0800a9be <__sclose>:
 800a9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c2:	f000 b809 	b.w	800a9d8 <_close_r>

0800a9c6 <memset>:
 800a9c6:	4402      	add	r2, r0
 800a9c8:	4603      	mov	r3, r0
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d100      	bne.n	800a9d0 <memset+0xa>
 800a9ce:	4770      	bx	lr
 800a9d0:	f803 1b01 	strb.w	r1, [r3], #1
 800a9d4:	e7f9      	b.n	800a9ca <memset+0x4>
	...

0800a9d8 <_close_r>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	4d06      	ldr	r5, [pc, #24]	@ (800a9f4 <_close_r+0x1c>)
 800a9dc:	2300      	movs	r3, #0
 800a9de:	4604      	mov	r4, r0
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	602b      	str	r3, [r5, #0]
 800a9e4:	f7f9 fe15 	bl	8004612 <_close>
 800a9e8:	1c43      	adds	r3, r0, #1
 800a9ea:	d102      	bne.n	800a9f2 <_close_r+0x1a>
 800a9ec:	682b      	ldr	r3, [r5, #0]
 800a9ee:	b103      	cbz	r3, 800a9f2 <_close_r+0x1a>
 800a9f0:	6023      	str	r3, [r4, #0]
 800a9f2:	bd38      	pop	{r3, r4, r5, pc}
 800a9f4:	240002c8 	.word	0x240002c8

0800a9f8 <_lseek_r>:
 800a9f8:	b538      	push	{r3, r4, r5, lr}
 800a9fa:	4d07      	ldr	r5, [pc, #28]	@ (800aa18 <_lseek_r+0x20>)
 800a9fc:	4604      	mov	r4, r0
 800a9fe:	4608      	mov	r0, r1
 800aa00:	4611      	mov	r1, r2
 800aa02:	2200      	movs	r2, #0
 800aa04:	602a      	str	r2, [r5, #0]
 800aa06:	461a      	mov	r2, r3
 800aa08:	f7f9 fe2a 	bl	8004660 <_lseek>
 800aa0c:	1c43      	adds	r3, r0, #1
 800aa0e:	d102      	bne.n	800aa16 <_lseek_r+0x1e>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	b103      	cbz	r3, 800aa16 <_lseek_r+0x1e>
 800aa14:	6023      	str	r3, [r4, #0]
 800aa16:	bd38      	pop	{r3, r4, r5, pc}
 800aa18:	240002c8 	.word	0x240002c8

0800aa1c <_read_r>:
 800aa1c:	b538      	push	{r3, r4, r5, lr}
 800aa1e:	4d07      	ldr	r5, [pc, #28]	@ (800aa3c <_read_r+0x20>)
 800aa20:	4604      	mov	r4, r0
 800aa22:	4608      	mov	r0, r1
 800aa24:	4611      	mov	r1, r2
 800aa26:	2200      	movs	r2, #0
 800aa28:	602a      	str	r2, [r5, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	f7f9 fdb8 	bl	80045a0 <_read>
 800aa30:	1c43      	adds	r3, r0, #1
 800aa32:	d102      	bne.n	800aa3a <_read_r+0x1e>
 800aa34:	682b      	ldr	r3, [r5, #0]
 800aa36:	b103      	cbz	r3, 800aa3a <_read_r+0x1e>
 800aa38:	6023      	str	r3, [r4, #0]
 800aa3a:	bd38      	pop	{r3, r4, r5, pc}
 800aa3c:	240002c8 	.word	0x240002c8

0800aa40 <_write_r>:
 800aa40:	b538      	push	{r3, r4, r5, lr}
 800aa42:	4d07      	ldr	r5, [pc, #28]	@ (800aa60 <_write_r+0x20>)
 800aa44:	4604      	mov	r4, r0
 800aa46:	4608      	mov	r0, r1
 800aa48:	4611      	mov	r1, r2
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	602a      	str	r2, [r5, #0]
 800aa4e:	461a      	mov	r2, r3
 800aa50:	f7f9 fdc3 	bl	80045da <_write>
 800aa54:	1c43      	adds	r3, r0, #1
 800aa56:	d102      	bne.n	800aa5e <_write_r+0x1e>
 800aa58:	682b      	ldr	r3, [r5, #0]
 800aa5a:	b103      	cbz	r3, 800aa5e <_write_r+0x1e>
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	bd38      	pop	{r3, r4, r5, pc}
 800aa60:	240002c8 	.word	0x240002c8

0800aa64 <__errno>:
 800aa64:	4b01      	ldr	r3, [pc, #4]	@ (800aa6c <__errno+0x8>)
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop
 800aa6c:	24000024 	.word	0x24000024

0800aa70 <__libc_init_array>:
 800aa70:	b570      	push	{r4, r5, r6, lr}
 800aa72:	4d0d      	ldr	r5, [pc, #52]	@ (800aaa8 <__libc_init_array+0x38>)
 800aa74:	4c0d      	ldr	r4, [pc, #52]	@ (800aaac <__libc_init_array+0x3c>)
 800aa76:	1b64      	subs	r4, r4, r5
 800aa78:	10a4      	asrs	r4, r4, #2
 800aa7a:	2600      	movs	r6, #0
 800aa7c:	42a6      	cmp	r6, r4
 800aa7e:	d109      	bne.n	800aa94 <__libc_init_array+0x24>
 800aa80:	4d0b      	ldr	r5, [pc, #44]	@ (800aab0 <__libc_init_array+0x40>)
 800aa82:	4c0c      	ldr	r4, [pc, #48]	@ (800aab4 <__libc_init_array+0x44>)
 800aa84:	f000 ff6c 	bl	800b960 <_init>
 800aa88:	1b64      	subs	r4, r4, r5
 800aa8a:	10a4      	asrs	r4, r4, #2
 800aa8c:	2600      	movs	r6, #0
 800aa8e:	42a6      	cmp	r6, r4
 800aa90:	d105      	bne.n	800aa9e <__libc_init_array+0x2e>
 800aa92:	bd70      	pop	{r4, r5, r6, pc}
 800aa94:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa98:	4798      	blx	r3
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7ee      	b.n	800aa7c <__libc_init_array+0xc>
 800aa9e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aaa2:	4798      	blx	r3
 800aaa4:	3601      	adds	r6, #1
 800aaa6:	e7f2      	b.n	800aa8e <__libc_init_array+0x1e>
 800aaa8:	08010168 	.word	0x08010168
 800aaac:	08010168 	.word	0x08010168
 800aab0:	08010168 	.word	0x08010168
 800aab4:	0801016c 	.word	0x0801016c

0800aab8 <__retarget_lock_init_recursive>:
 800aab8:	4770      	bx	lr

0800aaba <__retarget_lock_acquire_recursive>:
 800aaba:	4770      	bx	lr

0800aabc <__retarget_lock_release_recursive>:
 800aabc:	4770      	bx	lr
	...

0800aac0 <_free_r>:
 800aac0:	b538      	push	{r3, r4, r5, lr}
 800aac2:	4605      	mov	r5, r0
 800aac4:	2900      	cmp	r1, #0
 800aac6:	d041      	beq.n	800ab4c <_free_r+0x8c>
 800aac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aacc:	1f0c      	subs	r4, r1, #4
 800aace:	2b00      	cmp	r3, #0
 800aad0:	bfb8      	it	lt
 800aad2:	18e4      	addlt	r4, r4, r3
 800aad4:	f000 f8e0 	bl	800ac98 <__malloc_lock>
 800aad8:	4a1d      	ldr	r2, [pc, #116]	@ (800ab50 <_free_r+0x90>)
 800aada:	6813      	ldr	r3, [r2, #0]
 800aadc:	b933      	cbnz	r3, 800aaec <_free_r+0x2c>
 800aade:	6063      	str	r3, [r4, #4]
 800aae0:	6014      	str	r4, [r2, #0]
 800aae2:	4628      	mov	r0, r5
 800aae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aae8:	f000 b8dc 	b.w	800aca4 <__malloc_unlock>
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	d908      	bls.n	800ab02 <_free_r+0x42>
 800aaf0:	6820      	ldr	r0, [r4, #0]
 800aaf2:	1821      	adds	r1, r4, r0
 800aaf4:	428b      	cmp	r3, r1
 800aaf6:	bf01      	itttt	eq
 800aaf8:	6819      	ldreq	r1, [r3, #0]
 800aafa:	685b      	ldreq	r3, [r3, #4]
 800aafc:	1809      	addeq	r1, r1, r0
 800aafe:	6021      	streq	r1, [r4, #0]
 800ab00:	e7ed      	b.n	800aade <_free_r+0x1e>
 800ab02:	461a      	mov	r2, r3
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	b10b      	cbz	r3, 800ab0c <_free_r+0x4c>
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	d9fa      	bls.n	800ab02 <_free_r+0x42>
 800ab0c:	6811      	ldr	r1, [r2, #0]
 800ab0e:	1850      	adds	r0, r2, r1
 800ab10:	42a0      	cmp	r0, r4
 800ab12:	d10b      	bne.n	800ab2c <_free_r+0x6c>
 800ab14:	6820      	ldr	r0, [r4, #0]
 800ab16:	4401      	add	r1, r0
 800ab18:	1850      	adds	r0, r2, r1
 800ab1a:	4283      	cmp	r3, r0
 800ab1c:	6011      	str	r1, [r2, #0]
 800ab1e:	d1e0      	bne.n	800aae2 <_free_r+0x22>
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	685b      	ldr	r3, [r3, #4]
 800ab24:	6053      	str	r3, [r2, #4]
 800ab26:	4408      	add	r0, r1
 800ab28:	6010      	str	r0, [r2, #0]
 800ab2a:	e7da      	b.n	800aae2 <_free_r+0x22>
 800ab2c:	d902      	bls.n	800ab34 <_free_r+0x74>
 800ab2e:	230c      	movs	r3, #12
 800ab30:	602b      	str	r3, [r5, #0]
 800ab32:	e7d6      	b.n	800aae2 <_free_r+0x22>
 800ab34:	6820      	ldr	r0, [r4, #0]
 800ab36:	1821      	adds	r1, r4, r0
 800ab38:	428b      	cmp	r3, r1
 800ab3a:	bf04      	itt	eq
 800ab3c:	6819      	ldreq	r1, [r3, #0]
 800ab3e:	685b      	ldreq	r3, [r3, #4]
 800ab40:	6063      	str	r3, [r4, #4]
 800ab42:	bf04      	itt	eq
 800ab44:	1809      	addeq	r1, r1, r0
 800ab46:	6021      	streq	r1, [r4, #0]
 800ab48:	6054      	str	r4, [r2, #4]
 800ab4a:	e7ca      	b.n	800aae2 <_free_r+0x22>
 800ab4c:	bd38      	pop	{r3, r4, r5, pc}
 800ab4e:	bf00      	nop
 800ab50:	240002d4 	.word	0x240002d4

0800ab54 <sbrk_aligned>:
 800ab54:	b570      	push	{r4, r5, r6, lr}
 800ab56:	4e0f      	ldr	r6, [pc, #60]	@ (800ab94 <sbrk_aligned+0x40>)
 800ab58:	460c      	mov	r4, r1
 800ab5a:	6831      	ldr	r1, [r6, #0]
 800ab5c:	4605      	mov	r5, r0
 800ab5e:	b911      	cbnz	r1, 800ab66 <sbrk_aligned+0x12>
 800ab60:	f000 fe26 	bl	800b7b0 <_sbrk_r>
 800ab64:	6030      	str	r0, [r6, #0]
 800ab66:	4621      	mov	r1, r4
 800ab68:	4628      	mov	r0, r5
 800ab6a:	f000 fe21 	bl	800b7b0 <_sbrk_r>
 800ab6e:	1c43      	adds	r3, r0, #1
 800ab70:	d103      	bne.n	800ab7a <sbrk_aligned+0x26>
 800ab72:	f04f 34ff 	mov.w	r4, #4294967295
 800ab76:	4620      	mov	r0, r4
 800ab78:	bd70      	pop	{r4, r5, r6, pc}
 800ab7a:	1cc4      	adds	r4, r0, #3
 800ab7c:	f024 0403 	bic.w	r4, r4, #3
 800ab80:	42a0      	cmp	r0, r4
 800ab82:	d0f8      	beq.n	800ab76 <sbrk_aligned+0x22>
 800ab84:	1a21      	subs	r1, r4, r0
 800ab86:	4628      	mov	r0, r5
 800ab88:	f000 fe12 	bl	800b7b0 <_sbrk_r>
 800ab8c:	3001      	adds	r0, #1
 800ab8e:	d1f2      	bne.n	800ab76 <sbrk_aligned+0x22>
 800ab90:	e7ef      	b.n	800ab72 <sbrk_aligned+0x1e>
 800ab92:	bf00      	nop
 800ab94:	240002d0 	.word	0x240002d0

0800ab98 <_malloc_r>:
 800ab98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab9c:	1ccd      	adds	r5, r1, #3
 800ab9e:	f025 0503 	bic.w	r5, r5, #3
 800aba2:	3508      	adds	r5, #8
 800aba4:	2d0c      	cmp	r5, #12
 800aba6:	bf38      	it	cc
 800aba8:	250c      	movcc	r5, #12
 800abaa:	2d00      	cmp	r5, #0
 800abac:	4606      	mov	r6, r0
 800abae:	db01      	blt.n	800abb4 <_malloc_r+0x1c>
 800abb0:	42a9      	cmp	r1, r5
 800abb2:	d904      	bls.n	800abbe <_malloc_r+0x26>
 800abb4:	230c      	movs	r3, #12
 800abb6:	6033      	str	r3, [r6, #0]
 800abb8:	2000      	movs	r0, #0
 800abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abbe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ac94 <_malloc_r+0xfc>
 800abc2:	f000 f869 	bl	800ac98 <__malloc_lock>
 800abc6:	f8d8 3000 	ldr.w	r3, [r8]
 800abca:	461c      	mov	r4, r3
 800abcc:	bb44      	cbnz	r4, 800ac20 <_malloc_r+0x88>
 800abce:	4629      	mov	r1, r5
 800abd0:	4630      	mov	r0, r6
 800abd2:	f7ff ffbf 	bl	800ab54 <sbrk_aligned>
 800abd6:	1c43      	adds	r3, r0, #1
 800abd8:	4604      	mov	r4, r0
 800abda:	d158      	bne.n	800ac8e <_malloc_r+0xf6>
 800abdc:	f8d8 4000 	ldr.w	r4, [r8]
 800abe0:	4627      	mov	r7, r4
 800abe2:	2f00      	cmp	r7, #0
 800abe4:	d143      	bne.n	800ac6e <_malloc_r+0xd6>
 800abe6:	2c00      	cmp	r4, #0
 800abe8:	d04b      	beq.n	800ac82 <_malloc_r+0xea>
 800abea:	6823      	ldr	r3, [r4, #0]
 800abec:	4639      	mov	r1, r7
 800abee:	4630      	mov	r0, r6
 800abf0:	eb04 0903 	add.w	r9, r4, r3
 800abf4:	f000 fddc 	bl	800b7b0 <_sbrk_r>
 800abf8:	4581      	cmp	r9, r0
 800abfa:	d142      	bne.n	800ac82 <_malloc_r+0xea>
 800abfc:	6821      	ldr	r1, [r4, #0]
 800abfe:	1a6d      	subs	r5, r5, r1
 800ac00:	4629      	mov	r1, r5
 800ac02:	4630      	mov	r0, r6
 800ac04:	f7ff ffa6 	bl	800ab54 <sbrk_aligned>
 800ac08:	3001      	adds	r0, #1
 800ac0a:	d03a      	beq.n	800ac82 <_malloc_r+0xea>
 800ac0c:	6823      	ldr	r3, [r4, #0]
 800ac0e:	442b      	add	r3, r5
 800ac10:	6023      	str	r3, [r4, #0]
 800ac12:	f8d8 3000 	ldr.w	r3, [r8]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	bb62      	cbnz	r2, 800ac74 <_malloc_r+0xdc>
 800ac1a:	f8c8 7000 	str.w	r7, [r8]
 800ac1e:	e00f      	b.n	800ac40 <_malloc_r+0xa8>
 800ac20:	6822      	ldr	r2, [r4, #0]
 800ac22:	1b52      	subs	r2, r2, r5
 800ac24:	d420      	bmi.n	800ac68 <_malloc_r+0xd0>
 800ac26:	2a0b      	cmp	r2, #11
 800ac28:	d917      	bls.n	800ac5a <_malloc_r+0xc2>
 800ac2a:	1961      	adds	r1, r4, r5
 800ac2c:	42a3      	cmp	r3, r4
 800ac2e:	6025      	str	r5, [r4, #0]
 800ac30:	bf18      	it	ne
 800ac32:	6059      	strne	r1, [r3, #4]
 800ac34:	6863      	ldr	r3, [r4, #4]
 800ac36:	bf08      	it	eq
 800ac38:	f8c8 1000 	streq.w	r1, [r8]
 800ac3c:	5162      	str	r2, [r4, r5]
 800ac3e:	604b      	str	r3, [r1, #4]
 800ac40:	4630      	mov	r0, r6
 800ac42:	f000 f82f 	bl	800aca4 <__malloc_unlock>
 800ac46:	f104 000b 	add.w	r0, r4, #11
 800ac4a:	1d23      	adds	r3, r4, #4
 800ac4c:	f020 0007 	bic.w	r0, r0, #7
 800ac50:	1ac2      	subs	r2, r0, r3
 800ac52:	bf1c      	itt	ne
 800ac54:	1a1b      	subne	r3, r3, r0
 800ac56:	50a3      	strne	r3, [r4, r2]
 800ac58:	e7af      	b.n	800abba <_malloc_r+0x22>
 800ac5a:	6862      	ldr	r2, [r4, #4]
 800ac5c:	42a3      	cmp	r3, r4
 800ac5e:	bf0c      	ite	eq
 800ac60:	f8c8 2000 	streq.w	r2, [r8]
 800ac64:	605a      	strne	r2, [r3, #4]
 800ac66:	e7eb      	b.n	800ac40 <_malloc_r+0xa8>
 800ac68:	4623      	mov	r3, r4
 800ac6a:	6864      	ldr	r4, [r4, #4]
 800ac6c:	e7ae      	b.n	800abcc <_malloc_r+0x34>
 800ac6e:	463c      	mov	r4, r7
 800ac70:	687f      	ldr	r7, [r7, #4]
 800ac72:	e7b6      	b.n	800abe2 <_malloc_r+0x4a>
 800ac74:	461a      	mov	r2, r3
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	d1fb      	bne.n	800ac74 <_malloc_r+0xdc>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6053      	str	r3, [r2, #4]
 800ac80:	e7de      	b.n	800ac40 <_malloc_r+0xa8>
 800ac82:	230c      	movs	r3, #12
 800ac84:	6033      	str	r3, [r6, #0]
 800ac86:	4630      	mov	r0, r6
 800ac88:	f000 f80c 	bl	800aca4 <__malloc_unlock>
 800ac8c:	e794      	b.n	800abb8 <_malloc_r+0x20>
 800ac8e:	6005      	str	r5, [r0, #0]
 800ac90:	e7d6      	b.n	800ac40 <_malloc_r+0xa8>
 800ac92:	bf00      	nop
 800ac94:	240002d4 	.word	0x240002d4

0800ac98 <__malloc_lock>:
 800ac98:	4801      	ldr	r0, [pc, #4]	@ (800aca0 <__malloc_lock+0x8>)
 800ac9a:	f7ff bf0e 	b.w	800aaba <__retarget_lock_acquire_recursive>
 800ac9e:	bf00      	nop
 800aca0:	240002cc 	.word	0x240002cc

0800aca4 <__malloc_unlock>:
 800aca4:	4801      	ldr	r0, [pc, #4]	@ (800acac <__malloc_unlock+0x8>)
 800aca6:	f7ff bf09 	b.w	800aabc <__retarget_lock_release_recursive>
 800acaa:	bf00      	nop
 800acac:	240002cc 	.word	0x240002cc

0800acb0 <__ssputs_r>:
 800acb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acb4:	688e      	ldr	r6, [r1, #8]
 800acb6:	461f      	mov	r7, r3
 800acb8:	42be      	cmp	r6, r7
 800acba:	680b      	ldr	r3, [r1, #0]
 800acbc:	4682      	mov	sl, r0
 800acbe:	460c      	mov	r4, r1
 800acc0:	4690      	mov	r8, r2
 800acc2:	d82d      	bhi.n	800ad20 <__ssputs_r+0x70>
 800acc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800acc8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800accc:	d026      	beq.n	800ad1c <__ssputs_r+0x6c>
 800acce:	6965      	ldr	r5, [r4, #20]
 800acd0:	6909      	ldr	r1, [r1, #16]
 800acd2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acd6:	eba3 0901 	sub.w	r9, r3, r1
 800acda:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acde:	1c7b      	adds	r3, r7, #1
 800ace0:	444b      	add	r3, r9
 800ace2:	106d      	asrs	r5, r5, #1
 800ace4:	429d      	cmp	r5, r3
 800ace6:	bf38      	it	cc
 800ace8:	461d      	movcc	r5, r3
 800acea:	0553      	lsls	r3, r2, #21
 800acec:	d527      	bpl.n	800ad3e <__ssputs_r+0x8e>
 800acee:	4629      	mov	r1, r5
 800acf0:	f7ff ff52 	bl	800ab98 <_malloc_r>
 800acf4:	4606      	mov	r6, r0
 800acf6:	b360      	cbz	r0, 800ad52 <__ssputs_r+0xa2>
 800acf8:	6921      	ldr	r1, [r4, #16]
 800acfa:	464a      	mov	r2, r9
 800acfc:	f000 fd68 	bl	800b7d0 <memcpy>
 800ad00:	89a3      	ldrh	r3, [r4, #12]
 800ad02:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ad06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad0a:	81a3      	strh	r3, [r4, #12]
 800ad0c:	6126      	str	r6, [r4, #16]
 800ad0e:	6165      	str	r5, [r4, #20]
 800ad10:	444e      	add	r6, r9
 800ad12:	eba5 0509 	sub.w	r5, r5, r9
 800ad16:	6026      	str	r6, [r4, #0]
 800ad18:	60a5      	str	r5, [r4, #8]
 800ad1a:	463e      	mov	r6, r7
 800ad1c:	42be      	cmp	r6, r7
 800ad1e:	d900      	bls.n	800ad22 <__ssputs_r+0x72>
 800ad20:	463e      	mov	r6, r7
 800ad22:	6820      	ldr	r0, [r4, #0]
 800ad24:	4632      	mov	r2, r6
 800ad26:	4641      	mov	r1, r8
 800ad28:	f000 fd28 	bl	800b77c <memmove>
 800ad2c:	68a3      	ldr	r3, [r4, #8]
 800ad2e:	1b9b      	subs	r3, r3, r6
 800ad30:	60a3      	str	r3, [r4, #8]
 800ad32:	6823      	ldr	r3, [r4, #0]
 800ad34:	4433      	add	r3, r6
 800ad36:	6023      	str	r3, [r4, #0]
 800ad38:	2000      	movs	r0, #0
 800ad3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad3e:	462a      	mov	r2, r5
 800ad40:	f000 fd54 	bl	800b7ec <_realloc_r>
 800ad44:	4606      	mov	r6, r0
 800ad46:	2800      	cmp	r0, #0
 800ad48:	d1e0      	bne.n	800ad0c <__ssputs_r+0x5c>
 800ad4a:	6921      	ldr	r1, [r4, #16]
 800ad4c:	4650      	mov	r0, sl
 800ad4e:	f7ff feb7 	bl	800aac0 <_free_r>
 800ad52:	230c      	movs	r3, #12
 800ad54:	f8ca 3000 	str.w	r3, [sl]
 800ad58:	89a3      	ldrh	r3, [r4, #12]
 800ad5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad5e:	81a3      	strh	r3, [r4, #12]
 800ad60:	f04f 30ff 	mov.w	r0, #4294967295
 800ad64:	e7e9      	b.n	800ad3a <__ssputs_r+0x8a>
	...

0800ad68 <_svfiprintf_r>:
 800ad68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6c:	4698      	mov	r8, r3
 800ad6e:	898b      	ldrh	r3, [r1, #12]
 800ad70:	061b      	lsls	r3, r3, #24
 800ad72:	b09d      	sub	sp, #116	@ 0x74
 800ad74:	4607      	mov	r7, r0
 800ad76:	460d      	mov	r5, r1
 800ad78:	4614      	mov	r4, r2
 800ad7a:	d510      	bpl.n	800ad9e <_svfiprintf_r+0x36>
 800ad7c:	690b      	ldr	r3, [r1, #16]
 800ad7e:	b973      	cbnz	r3, 800ad9e <_svfiprintf_r+0x36>
 800ad80:	2140      	movs	r1, #64	@ 0x40
 800ad82:	f7ff ff09 	bl	800ab98 <_malloc_r>
 800ad86:	6028      	str	r0, [r5, #0]
 800ad88:	6128      	str	r0, [r5, #16]
 800ad8a:	b930      	cbnz	r0, 800ad9a <_svfiprintf_r+0x32>
 800ad8c:	230c      	movs	r3, #12
 800ad8e:	603b      	str	r3, [r7, #0]
 800ad90:	f04f 30ff 	mov.w	r0, #4294967295
 800ad94:	b01d      	add	sp, #116	@ 0x74
 800ad96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad9a:	2340      	movs	r3, #64	@ 0x40
 800ad9c:	616b      	str	r3, [r5, #20]
 800ad9e:	2300      	movs	r3, #0
 800ada0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ada2:	2320      	movs	r3, #32
 800ada4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ada8:	f8cd 800c 	str.w	r8, [sp, #12]
 800adac:	2330      	movs	r3, #48	@ 0x30
 800adae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800af4c <_svfiprintf_r+0x1e4>
 800adb2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800adb6:	f04f 0901 	mov.w	r9, #1
 800adba:	4623      	mov	r3, r4
 800adbc:	469a      	mov	sl, r3
 800adbe:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adc2:	b10a      	cbz	r2, 800adc8 <_svfiprintf_r+0x60>
 800adc4:	2a25      	cmp	r2, #37	@ 0x25
 800adc6:	d1f9      	bne.n	800adbc <_svfiprintf_r+0x54>
 800adc8:	ebba 0b04 	subs.w	fp, sl, r4
 800adcc:	d00b      	beq.n	800ade6 <_svfiprintf_r+0x7e>
 800adce:	465b      	mov	r3, fp
 800add0:	4622      	mov	r2, r4
 800add2:	4629      	mov	r1, r5
 800add4:	4638      	mov	r0, r7
 800add6:	f7ff ff6b 	bl	800acb0 <__ssputs_r>
 800adda:	3001      	adds	r0, #1
 800addc:	f000 80a7 	beq.w	800af2e <_svfiprintf_r+0x1c6>
 800ade0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ade2:	445a      	add	r2, fp
 800ade4:	9209      	str	r2, [sp, #36]	@ 0x24
 800ade6:	f89a 3000 	ldrb.w	r3, [sl]
 800adea:	2b00      	cmp	r3, #0
 800adec:	f000 809f 	beq.w	800af2e <_svfiprintf_r+0x1c6>
 800adf0:	2300      	movs	r3, #0
 800adf2:	f04f 32ff 	mov.w	r2, #4294967295
 800adf6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adfa:	f10a 0a01 	add.w	sl, sl, #1
 800adfe:	9304      	str	r3, [sp, #16]
 800ae00:	9307      	str	r3, [sp, #28]
 800ae02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ae06:	931a      	str	r3, [sp, #104]	@ 0x68
 800ae08:	4654      	mov	r4, sl
 800ae0a:	2205      	movs	r2, #5
 800ae0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae10:	484e      	ldr	r0, [pc, #312]	@ (800af4c <_svfiprintf_r+0x1e4>)
 800ae12:	f7f5 fa65 	bl	80002e0 <memchr>
 800ae16:	9a04      	ldr	r2, [sp, #16]
 800ae18:	b9d8      	cbnz	r0, 800ae52 <_svfiprintf_r+0xea>
 800ae1a:	06d0      	lsls	r0, r2, #27
 800ae1c:	bf44      	itt	mi
 800ae1e:	2320      	movmi	r3, #32
 800ae20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae24:	0711      	lsls	r1, r2, #28
 800ae26:	bf44      	itt	mi
 800ae28:	232b      	movmi	r3, #43	@ 0x2b
 800ae2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ae2e:	f89a 3000 	ldrb.w	r3, [sl]
 800ae32:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae34:	d015      	beq.n	800ae62 <_svfiprintf_r+0xfa>
 800ae36:	9a07      	ldr	r2, [sp, #28]
 800ae38:	4654      	mov	r4, sl
 800ae3a:	2000      	movs	r0, #0
 800ae3c:	f04f 0c0a 	mov.w	ip, #10
 800ae40:	4621      	mov	r1, r4
 800ae42:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae46:	3b30      	subs	r3, #48	@ 0x30
 800ae48:	2b09      	cmp	r3, #9
 800ae4a:	d94b      	bls.n	800aee4 <_svfiprintf_r+0x17c>
 800ae4c:	b1b0      	cbz	r0, 800ae7c <_svfiprintf_r+0x114>
 800ae4e:	9207      	str	r2, [sp, #28]
 800ae50:	e014      	b.n	800ae7c <_svfiprintf_r+0x114>
 800ae52:	eba0 0308 	sub.w	r3, r0, r8
 800ae56:	fa09 f303 	lsl.w	r3, r9, r3
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	9304      	str	r3, [sp, #16]
 800ae5e:	46a2      	mov	sl, r4
 800ae60:	e7d2      	b.n	800ae08 <_svfiprintf_r+0xa0>
 800ae62:	9b03      	ldr	r3, [sp, #12]
 800ae64:	1d19      	adds	r1, r3, #4
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	9103      	str	r1, [sp, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	bfbb      	ittet	lt
 800ae6e:	425b      	neglt	r3, r3
 800ae70:	f042 0202 	orrlt.w	r2, r2, #2
 800ae74:	9307      	strge	r3, [sp, #28]
 800ae76:	9307      	strlt	r3, [sp, #28]
 800ae78:	bfb8      	it	lt
 800ae7a:	9204      	strlt	r2, [sp, #16]
 800ae7c:	7823      	ldrb	r3, [r4, #0]
 800ae7e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ae80:	d10a      	bne.n	800ae98 <_svfiprintf_r+0x130>
 800ae82:	7863      	ldrb	r3, [r4, #1]
 800ae84:	2b2a      	cmp	r3, #42	@ 0x2a
 800ae86:	d132      	bne.n	800aeee <_svfiprintf_r+0x186>
 800ae88:	9b03      	ldr	r3, [sp, #12]
 800ae8a:	1d1a      	adds	r2, r3, #4
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	9203      	str	r2, [sp, #12]
 800ae90:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ae94:	3402      	adds	r4, #2
 800ae96:	9305      	str	r3, [sp, #20]
 800ae98:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800af5c <_svfiprintf_r+0x1f4>
 800ae9c:	7821      	ldrb	r1, [r4, #0]
 800ae9e:	2203      	movs	r2, #3
 800aea0:	4650      	mov	r0, sl
 800aea2:	f7f5 fa1d 	bl	80002e0 <memchr>
 800aea6:	b138      	cbz	r0, 800aeb8 <_svfiprintf_r+0x150>
 800aea8:	9b04      	ldr	r3, [sp, #16]
 800aeaa:	eba0 000a 	sub.w	r0, r0, sl
 800aeae:	2240      	movs	r2, #64	@ 0x40
 800aeb0:	4082      	lsls	r2, r0
 800aeb2:	4313      	orrs	r3, r2
 800aeb4:	3401      	adds	r4, #1
 800aeb6:	9304      	str	r3, [sp, #16]
 800aeb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aebc:	4824      	ldr	r0, [pc, #144]	@ (800af50 <_svfiprintf_r+0x1e8>)
 800aebe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aec2:	2206      	movs	r2, #6
 800aec4:	f7f5 fa0c 	bl	80002e0 <memchr>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	d036      	beq.n	800af3a <_svfiprintf_r+0x1d2>
 800aecc:	4b21      	ldr	r3, [pc, #132]	@ (800af54 <_svfiprintf_r+0x1ec>)
 800aece:	bb1b      	cbnz	r3, 800af18 <_svfiprintf_r+0x1b0>
 800aed0:	9b03      	ldr	r3, [sp, #12]
 800aed2:	3307      	adds	r3, #7
 800aed4:	f023 0307 	bic.w	r3, r3, #7
 800aed8:	3308      	adds	r3, #8
 800aeda:	9303      	str	r3, [sp, #12]
 800aedc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aede:	4433      	add	r3, r6
 800aee0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aee2:	e76a      	b.n	800adba <_svfiprintf_r+0x52>
 800aee4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aee8:	460c      	mov	r4, r1
 800aeea:	2001      	movs	r0, #1
 800aeec:	e7a8      	b.n	800ae40 <_svfiprintf_r+0xd8>
 800aeee:	2300      	movs	r3, #0
 800aef0:	3401      	adds	r4, #1
 800aef2:	9305      	str	r3, [sp, #20]
 800aef4:	4619      	mov	r1, r3
 800aef6:	f04f 0c0a 	mov.w	ip, #10
 800aefa:	4620      	mov	r0, r4
 800aefc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af00:	3a30      	subs	r2, #48	@ 0x30
 800af02:	2a09      	cmp	r2, #9
 800af04:	d903      	bls.n	800af0e <_svfiprintf_r+0x1a6>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d0c6      	beq.n	800ae98 <_svfiprintf_r+0x130>
 800af0a:	9105      	str	r1, [sp, #20]
 800af0c:	e7c4      	b.n	800ae98 <_svfiprintf_r+0x130>
 800af0e:	fb0c 2101 	mla	r1, ip, r1, r2
 800af12:	4604      	mov	r4, r0
 800af14:	2301      	movs	r3, #1
 800af16:	e7f0      	b.n	800aefa <_svfiprintf_r+0x192>
 800af18:	ab03      	add	r3, sp, #12
 800af1a:	9300      	str	r3, [sp, #0]
 800af1c:	462a      	mov	r2, r5
 800af1e:	4b0e      	ldr	r3, [pc, #56]	@ (800af58 <_svfiprintf_r+0x1f0>)
 800af20:	a904      	add	r1, sp, #16
 800af22:	4638      	mov	r0, r7
 800af24:	f3af 8000 	nop.w
 800af28:	1c42      	adds	r2, r0, #1
 800af2a:	4606      	mov	r6, r0
 800af2c:	d1d6      	bne.n	800aedc <_svfiprintf_r+0x174>
 800af2e:	89ab      	ldrh	r3, [r5, #12]
 800af30:	065b      	lsls	r3, r3, #25
 800af32:	f53f af2d 	bmi.w	800ad90 <_svfiprintf_r+0x28>
 800af36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800af38:	e72c      	b.n	800ad94 <_svfiprintf_r+0x2c>
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	462a      	mov	r2, r5
 800af40:	4b05      	ldr	r3, [pc, #20]	@ (800af58 <_svfiprintf_r+0x1f0>)
 800af42:	a904      	add	r1, sp, #16
 800af44:	4638      	mov	r0, r7
 800af46:	f000 f9bb 	bl	800b2c0 <_printf_i>
 800af4a:	e7ed      	b.n	800af28 <_svfiprintf_r+0x1c0>
 800af4c:	0801012c 	.word	0x0801012c
 800af50:	08010136 	.word	0x08010136
 800af54:	00000000 	.word	0x00000000
 800af58:	0800acb1 	.word	0x0800acb1
 800af5c:	08010132 	.word	0x08010132

0800af60 <__sfputc_r>:
 800af60:	6893      	ldr	r3, [r2, #8]
 800af62:	3b01      	subs	r3, #1
 800af64:	2b00      	cmp	r3, #0
 800af66:	b410      	push	{r4}
 800af68:	6093      	str	r3, [r2, #8]
 800af6a:	da08      	bge.n	800af7e <__sfputc_r+0x1e>
 800af6c:	6994      	ldr	r4, [r2, #24]
 800af6e:	42a3      	cmp	r3, r4
 800af70:	db01      	blt.n	800af76 <__sfputc_r+0x16>
 800af72:	290a      	cmp	r1, #10
 800af74:	d103      	bne.n	800af7e <__sfputc_r+0x1e>
 800af76:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af7a:	f000 bb6b 	b.w	800b654 <__swbuf_r>
 800af7e:	6813      	ldr	r3, [r2, #0]
 800af80:	1c58      	adds	r0, r3, #1
 800af82:	6010      	str	r0, [r2, #0]
 800af84:	7019      	strb	r1, [r3, #0]
 800af86:	4608      	mov	r0, r1
 800af88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af8c:	4770      	bx	lr

0800af8e <__sfputs_r>:
 800af8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af90:	4606      	mov	r6, r0
 800af92:	460f      	mov	r7, r1
 800af94:	4614      	mov	r4, r2
 800af96:	18d5      	adds	r5, r2, r3
 800af98:	42ac      	cmp	r4, r5
 800af9a:	d101      	bne.n	800afa0 <__sfputs_r+0x12>
 800af9c:	2000      	movs	r0, #0
 800af9e:	e007      	b.n	800afb0 <__sfputs_r+0x22>
 800afa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afa4:	463a      	mov	r2, r7
 800afa6:	4630      	mov	r0, r6
 800afa8:	f7ff ffda 	bl	800af60 <__sfputc_r>
 800afac:	1c43      	adds	r3, r0, #1
 800afae:	d1f3      	bne.n	800af98 <__sfputs_r+0xa>
 800afb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afb4 <_vfiprintf_r>:
 800afb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb8:	460d      	mov	r5, r1
 800afba:	b09d      	sub	sp, #116	@ 0x74
 800afbc:	4614      	mov	r4, r2
 800afbe:	4698      	mov	r8, r3
 800afc0:	4606      	mov	r6, r0
 800afc2:	b118      	cbz	r0, 800afcc <_vfiprintf_r+0x18>
 800afc4:	6a03      	ldr	r3, [r0, #32]
 800afc6:	b90b      	cbnz	r3, 800afcc <_vfiprintf_r+0x18>
 800afc8:	f7ff fc50 	bl	800a86c <__sinit>
 800afcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800afce:	07d9      	lsls	r1, r3, #31
 800afd0:	d405      	bmi.n	800afde <_vfiprintf_r+0x2a>
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	059a      	lsls	r2, r3, #22
 800afd6:	d402      	bmi.n	800afde <_vfiprintf_r+0x2a>
 800afd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800afda:	f7ff fd6e 	bl	800aaba <__retarget_lock_acquire_recursive>
 800afde:	89ab      	ldrh	r3, [r5, #12]
 800afe0:	071b      	lsls	r3, r3, #28
 800afe2:	d501      	bpl.n	800afe8 <_vfiprintf_r+0x34>
 800afe4:	692b      	ldr	r3, [r5, #16]
 800afe6:	b99b      	cbnz	r3, 800b010 <_vfiprintf_r+0x5c>
 800afe8:	4629      	mov	r1, r5
 800afea:	4630      	mov	r0, r6
 800afec:	f000 fb70 	bl	800b6d0 <__swsetup_r>
 800aff0:	b170      	cbz	r0, 800b010 <_vfiprintf_r+0x5c>
 800aff2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aff4:	07dc      	lsls	r4, r3, #31
 800aff6:	d504      	bpl.n	800b002 <_vfiprintf_r+0x4e>
 800aff8:	f04f 30ff 	mov.w	r0, #4294967295
 800affc:	b01d      	add	sp, #116	@ 0x74
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b002:	89ab      	ldrh	r3, [r5, #12]
 800b004:	0598      	lsls	r0, r3, #22
 800b006:	d4f7      	bmi.n	800aff8 <_vfiprintf_r+0x44>
 800b008:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b00a:	f7ff fd57 	bl	800aabc <__retarget_lock_release_recursive>
 800b00e:	e7f3      	b.n	800aff8 <_vfiprintf_r+0x44>
 800b010:	2300      	movs	r3, #0
 800b012:	9309      	str	r3, [sp, #36]	@ 0x24
 800b014:	2320      	movs	r3, #32
 800b016:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b01a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b01e:	2330      	movs	r3, #48	@ 0x30
 800b020:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b1d0 <_vfiprintf_r+0x21c>
 800b024:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b028:	f04f 0901 	mov.w	r9, #1
 800b02c:	4623      	mov	r3, r4
 800b02e:	469a      	mov	sl, r3
 800b030:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b034:	b10a      	cbz	r2, 800b03a <_vfiprintf_r+0x86>
 800b036:	2a25      	cmp	r2, #37	@ 0x25
 800b038:	d1f9      	bne.n	800b02e <_vfiprintf_r+0x7a>
 800b03a:	ebba 0b04 	subs.w	fp, sl, r4
 800b03e:	d00b      	beq.n	800b058 <_vfiprintf_r+0xa4>
 800b040:	465b      	mov	r3, fp
 800b042:	4622      	mov	r2, r4
 800b044:	4629      	mov	r1, r5
 800b046:	4630      	mov	r0, r6
 800b048:	f7ff ffa1 	bl	800af8e <__sfputs_r>
 800b04c:	3001      	adds	r0, #1
 800b04e:	f000 80a7 	beq.w	800b1a0 <_vfiprintf_r+0x1ec>
 800b052:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b054:	445a      	add	r2, fp
 800b056:	9209      	str	r2, [sp, #36]	@ 0x24
 800b058:	f89a 3000 	ldrb.w	r3, [sl]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 809f 	beq.w	800b1a0 <_vfiprintf_r+0x1ec>
 800b062:	2300      	movs	r3, #0
 800b064:	f04f 32ff 	mov.w	r2, #4294967295
 800b068:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b06c:	f10a 0a01 	add.w	sl, sl, #1
 800b070:	9304      	str	r3, [sp, #16]
 800b072:	9307      	str	r3, [sp, #28]
 800b074:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b078:	931a      	str	r3, [sp, #104]	@ 0x68
 800b07a:	4654      	mov	r4, sl
 800b07c:	2205      	movs	r2, #5
 800b07e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b082:	4853      	ldr	r0, [pc, #332]	@ (800b1d0 <_vfiprintf_r+0x21c>)
 800b084:	f7f5 f92c 	bl	80002e0 <memchr>
 800b088:	9a04      	ldr	r2, [sp, #16]
 800b08a:	b9d8      	cbnz	r0, 800b0c4 <_vfiprintf_r+0x110>
 800b08c:	06d1      	lsls	r1, r2, #27
 800b08e:	bf44      	itt	mi
 800b090:	2320      	movmi	r3, #32
 800b092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b096:	0713      	lsls	r3, r2, #28
 800b098:	bf44      	itt	mi
 800b09a:	232b      	movmi	r3, #43	@ 0x2b
 800b09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b0a0:	f89a 3000 	ldrb.w	r3, [sl]
 800b0a4:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0a6:	d015      	beq.n	800b0d4 <_vfiprintf_r+0x120>
 800b0a8:	9a07      	ldr	r2, [sp, #28]
 800b0aa:	4654      	mov	r4, sl
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	f04f 0c0a 	mov.w	ip, #10
 800b0b2:	4621      	mov	r1, r4
 800b0b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0b8:	3b30      	subs	r3, #48	@ 0x30
 800b0ba:	2b09      	cmp	r3, #9
 800b0bc:	d94b      	bls.n	800b156 <_vfiprintf_r+0x1a2>
 800b0be:	b1b0      	cbz	r0, 800b0ee <_vfiprintf_r+0x13a>
 800b0c0:	9207      	str	r2, [sp, #28]
 800b0c2:	e014      	b.n	800b0ee <_vfiprintf_r+0x13a>
 800b0c4:	eba0 0308 	sub.w	r3, r0, r8
 800b0c8:	fa09 f303 	lsl.w	r3, r9, r3
 800b0cc:	4313      	orrs	r3, r2
 800b0ce:	9304      	str	r3, [sp, #16]
 800b0d0:	46a2      	mov	sl, r4
 800b0d2:	e7d2      	b.n	800b07a <_vfiprintf_r+0xc6>
 800b0d4:	9b03      	ldr	r3, [sp, #12]
 800b0d6:	1d19      	adds	r1, r3, #4
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	9103      	str	r1, [sp, #12]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	bfbb      	ittet	lt
 800b0e0:	425b      	neglt	r3, r3
 800b0e2:	f042 0202 	orrlt.w	r2, r2, #2
 800b0e6:	9307      	strge	r3, [sp, #28]
 800b0e8:	9307      	strlt	r3, [sp, #28]
 800b0ea:	bfb8      	it	lt
 800b0ec:	9204      	strlt	r2, [sp, #16]
 800b0ee:	7823      	ldrb	r3, [r4, #0]
 800b0f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b0f2:	d10a      	bne.n	800b10a <_vfiprintf_r+0x156>
 800b0f4:	7863      	ldrb	r3, [r4, #1]
 800b0f6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b0f8:	d132      	bne.n	800b160 <_vfiprintf_r+0x1ac>
 800b0fa:	9b03      	ldr	r3, [sp, #12]
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	9203      	str	r2, [sp, #12]
 800b102:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b106:	3402      	adds	r4, #2
 800b108:	9305      	str	r3, [sp, #20]
 800b10a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b1e0 <_vfiprintf_r+0x22c>
 800b10e:	7821      	ldrb	r1, [r4, #0]
 800b110:	2203      	movs	r2, #3
 800b112:	4650      	mov	r0, sl
 800b114:	f7f5 f8e4 	bl	80002e0 <memchr>
 800b118:	b138      	cbz	r0, 800b12a <_vfiprintf_r+0x176>
 800b11a:	9b04      	ldr	r3, [sp, #16]
 800b11c:	eba0 000a 	sub.w	r0, r0, sl
 800b120:	2240      	movs	r2, #64	@ 0x40
 800b122:	4082      	lsls	r2, r0
 800b124:	4313      	orrs	r3, r2
 800b126:	3401      	adds	r4, #1
 800b128:	9304      	str	r3, [sp, #16]
 800b12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b12e:	4829      	ldr	r0, [pc, #164]	@ (800b1d4 <_vfiprintf_r+0x220>)
 800b130:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b134:	2206      	movs	r2, #6
 800b136:	f7f5 f8d3 	bl	80002e0 <memchr>
 800b13a:	2800      	cmp	r0, #0
 800b13c:	d03f      	beq.n	800b1be <_vfiprintf_r+0x20a>
 800b13e:	4b26      	ldr	r3, [pc, #152]	@ (800b1d8 <_vfiprintf_r+0x224>)
 800b140:	bb1b      	cbnz	r3, 800b18a <_vfiprintf_r+0x1d6>
 800b142:	9b03      	ldr	r3, [sp, #12]
 800b144:	3307      	adds	r3, #7
 800b146:	f023 0307 	bic.w	r3, r3, #7
 800b14a:	3308      	adds	r3, #8
 800b14c:	9303      	str	r3, [sp, #12]
 800b14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b150:	443b      	add	r3, r7
 800b152:	9309      	str	r3, [sp, #36]	@ 0x24
 800b154:	e76a      	b.n	800b02c <_vfiprintf_r+0x78>
 800b156:	fb0c 3202 	mla	r2, ip, r2, r3
 800b15a:	460c      	mov	r4, r1
 800b15c:	2001      	movs	r0, #1
 800b15e:	e7a8      	b.n	800b0b2 <_vfiprintf_r+0xfe>
 800b160:	2300      	movs	r3, #0
 800b162:	3401      	adds	r4, #1
 800b164:	9305      	str	r3, [sp, #20]
 800b166:	4619      	mov	r1, r3
 800b168:	f04f 0c0a 	mov.w	ip, #10
 800b16c:	4620      	mov	r0, r4
 800b16e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b172:	3a30      	subs	r2, #48	@ 0x30
 800b174:	2a09      	cmp	r2, #9
 800b176:	d903      	bls.n	800b180 <_vfiprintf_r+0x1cc>
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0c6      	beq.n	800b10a <_vfiprintf_r+0x156>
 800b17c:	9105      	str	r1, [sp, #20]
 800b17e:	e7c4      	b.n	800b10a <_vfiprintf_r+0x156>
 800b180:	fb0c 2101 	mla	r1, ip, r1, r2
 800b184:	4604      	mov	r4, r0
 800b186:	2301      	movs	r3, #1
 800b188:	e7f0      	b.n	800b16c <_vfiprintf_r+0x1b8>
 800b18a:	ab03      	add	r3, sp, #12
 800b18c:	9300      	str	r3, [sp, #0]
 800b18e:	462a      	mov	r2, r5
 800b190:	4b12      	ldr	r3, [pc, #72]	@ (800b1dc <_vfiprintf_r+0x228>)
 800b192:	a904      	add	r1, sp, #16
 800b194:	4630      	mov	r0, r6
 800b196:	f3af 8000 	nop.w
 800b19a:	4607      	mov	r7, r0
 800b19c:	1c78      	adds	r0, r7, #1
 800b19e:	d1d6      	bne.n	800b14e <_vfiprintf_r+0x19a>
 800b1a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b1a2:	07d9      	lsls	r1, r3, #31
 800b1a4:	d405      	bmi.n	800b1b2 <_vfiprintf_r+0x1fe>
 800b1a6:	89ab      	ldrh	r3, [r5, #12]
 800b1a8:	059a      	lsls	r2, r3, #22
 800b1aa:	d402      	bmi.n	800b1b2 <_vfiprintf_r+0x1fe>
 800b1ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1ae:	f7ff fc85 	bl	800aabc <__retarget_lock_release_recursive>
 800b1b2:	89ab      	ldrh	r3, [r5, #12]
 800b1b4:	065b      	lsls	r3, r3, #25
 800b1b6:	f53f af1f 	bmi.w	800aff8 <_vfiprintf_r+0x44>
 800b1ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b1bc:	e71e      	b.n	800affc <_vfiprintf_r+0x48>
 800b1be:	ab03      	add	r3, sp, #12
 800b1c0:	9300      	str	r3, [sp, #0]
 800b1c2:	462a      	mov	r2, r5
 800b1c4:	4b05      	ldr	r3, [pc, #20]	@ (800b1dc <_vfiprintf_r+0x228>)
 800b1c6:	a904      	add	r1, sp, #16
 800b1c8:	4630      	mov	r0, r6
 800b1ca:	f000 f879 	bl	800b2c0 <_printf_i>
 800b1ce:	e7e4      	b.n	800b19a <_vfiprintf_r+0x1e6>
 800b1d0:	0801012c 	.word	0x0801012c
 800b1d4:	08010136 	.word	0x08010136
 800b1d8:	00000000 	.word	0x00000000
 800b1dc:	0800af8f 	.word	0x0800af8f
 800b1e0:	08010132 	.word	0x08010132

0800b1e4 <_printf_common>:
 800b1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1e8:	4616      	mov	r6, r2
 800b1ea:	4698      	mov	r8, r3
 800b1ec:	688a      	ldr	r2, [r1, #8]
 800b1ee:	690b      	ldr	r3, [r1, #16]
 800b1f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	bfb8      	it	lt
 800b1f8:	4613      	movlt	r3, r2
 800b1fa:	6033      	str	r3, [r6, #0]
 800b1fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b200:	4607      	mov	r7, r0
 800b202:	460c      	mov	r4, r1
 800b204:	b10a      	cbz	r2, 800b20a <_printf_common+0x26>
 800b206:	3301      	adds	r3, #1
 800b208:	6033      	str	r3, [r6, #0]
 800b20a:	6823      	ldr	r3, [r4, #0]
 800b20c:	0699      	lsls	r1, r3, #26
 800b20e:	bf42      	ittt	mi
 800b210:	6833      	ldrmi	r3, [r6, #0]
 800b212:	3302      	addmi	r3, #2
 800b214:	6033      	strmi	r3, [r6, #0]
 800b216:	6825      	ldr	r5, [r4, #0]
 800b218:	f015 0506 	ands.w	r5, r5, #6
 800b21c:	d106      	bne.n	800b22c <_printf_common+0x48>
 800b21e:	f104 0a19 	add.w	sl, r4, #25
 800b222:	68e3      	ldr	r3, [r4, #12]
 800b224:	6832      	ldr	r2, [r6, #0]
 800b226:	1a9b      	subs	r3, r3, r2
 800b228:	42ab      	cmp	r3, r5
 800b22a:	dc26      	bgt.n	800b27a <_printf_common+0x96>
 800b22c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b230:	6822      	ldr	r2, [r4, #0]
 800b232:	3b00      	subs	r3, #0
 800b234:	bf18      	it	ne
 800b236:	2301      	movne	r3, #1
 800b238:	0692      	lsls	r2, r2, #26
 800b23a:	d42b      	bmi.n	800b294 <_printf_common+0xb0>
 800b23c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b240:	4641      	mov	r1, r8
 800b242:	4638      	mov	r0, r7
 800b244:	47c8      	blx	r9
 800b246:	3001      	adds	r0, #1
 800b248:	d01e      	beq.n	800b288 <_printf_common+0xa4>
 800b24a:	6823      	ldr	r3, [r4, #0]
 800b24c:	6922      	ldr	r2, [r4, #16]
 800b24e:	f003 0306 	and.w	r3, r3, #6
 800b252:	2b04      	cmp	r3, #4
 800b254:	bf02      	ittt	eq
 800b256:	68e5      	ldreq	r5, [r4, #12]
 800b258:	6833      	ldreq	r3, [r6, #0]
 800b25a:	1aed      	subeq	r5, r5, r3
 800b25c:	68a3      	ldr	r3, [r4, #8]
 800b25e:	bf0c      	ite	eq
 800b260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b264:	2500      	movne	r5, #0
 800b266:	4293      	cmp	r3, r2
 800b268:	bfc4      	itt	gt
 800b26a:	1a9b      	subgt	r3, r3, r2
 800b26c:	18ed      	addgt	r5, r5, r3
 800b26e:	2600      	movs	r6, #0
 800b270:	341a      	adds	r4, #26
 800b272:	42b5      	cmp	r5, r6
 800b274:	d11a      	bne.n	800b2ac <_printf_common+0xc8>
 800b276:	2000      	movs	r0, #0
 800b278:	e008      	b.n	800b28c <_printf_common+0xa8>
 800b27a:	2301      	movs	r3, #1
 800b27c:	4652      	mov	r2, sl
 800b27e:	4641      	mov	r1, r8
 800b280:	4638      	mov	r0, r7
 800b282:	47c8      	blx	r9
 800b284:	3001      	adds	r0, #1
 800b286:	d103      	bne.n	800b290 <_printf_common+0xac>
 800b288:	f04f 30ff 	mov.w	r0, #4294967295
 800b28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b290:	3501      	adds	r5, #1
 800b292:	e7c6      	b.n	800b222 <_printf_common+0x3e>
 800b294:	18e1      	adds	r1, r4, r3
 800b296:	1c5a      	adds	r2, r3, #1
 800b298:	2030      	movs	r0, #48	@ 0x30
 800b29a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b29e:	4422      	add	r2, r4
 800b2a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2a8:	3302      	adds	r3, #2
 800b2aa:	e7c7      	b.n	800b23c <_printf_common+0x58>
 800b2ac:	2301      	movs	r3, #1
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	4641      	mov	r1, r8
 800b2b2:	4638      	mov	r0, r7
 800b2b4:	47c8      	blx	r9
 800b2b6:	3001      	adds	r0, #1
 800b2b8:	d0e6      	beq.n	800b288 <_printf_common+0xa4>
 800b2ba:	3601      	adds	r6, #1
 800b2bc:	e7d9      	b.n	800b272 <_printf_common+0x8e>
	...

0800b2c0 <_printf_i>:
 800b2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b2c4:	7e0f      	ldrb	r7, [r1, #24]
 800b2c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b2c8:	2f78      	cmp	r7, #120	@ 0x78
 800b2ca:	4691      	mov	r9, r2
 800b2cc:	4680      	mov	r8, r0
 800b2ce:	460c      	mov	r4, r1
 800b2d0:	469a      	mov	sl, r3
 800b2d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b2d6:	d807      	bhi.n	800b2e8 <_printf_i+0x28>
 800b2d8:	2f62      	cmp	r7, #98	@ 0x62
 800b2da:	d80a      	bhi.n	800b2f2 <_printf_i+0x32>
 800b2dc:	2f00      	cmp	r7, #0
 800b2de:	f000 80d1 	beq.w	800b484 <_printf_i+0x1c4>
 800b2e2:	2f58      	cmp	r7, #88	@ 0x58
 800b2e4:	f000 80b8 	beq.w	800b458 <_printf_i+0x198>
 800b2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b2ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b2f0:	e03a      	b.n	800b368 <_printf_i+0xa8>
 800b2f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b2f6:	2b15      	cmp	r3, #21
 800b2f8:	d8f6      	bhi.n	800b2e8 <_printf_i+0x28>
 800b2fa:	a101      	add	r1, pc, #4	@ (adr r1, 800b300 <_printf_i+0x40>)
 800b2fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b300:	0800b359 	.word	0x0800b359
 800b304:	0800b36d 	.word	0x0800b36d
 800b308:	0800b2e9 	.word	0x0800b2e9
 800b30c:	0800b2e9 	.word	0x0800b2e9
 800b310:	0800b2e9 	.word	0x0800b2e9
 800b314:	0800b2e9 	.word	0x0800b2e9
 800b318:	0800b36d 	.word	0x0800b36d
 800b31c:	0800b2e9 	.word	0x0800b2e9
 800b320:	0800b2e9 	.word	0x0800b2e9
 800b324:	0800b2e9 	.word	0x0800b2e9
 800b328:	0800b2e9 	.word	0x0800b2e9
 800b32c:	0800b46b 	.word	0x0800b46b
 800b330:	0800b397 	.word	0x0800b397
 800b334:	0800b425 	.word	0x0800b425
 800b338:	0800b2e9 	.word	0x0800b2e9
 800b33c:	0800b2e9 	.word	0x0800b2e9
 800b340:	0800b48d 	.word	0x0800b48d
 800b344:	0800b2e9 	.word	0x0800b2e9
 800b348:	0800b397 	.word	0x0800b397
 800b34c:	0800b2e9 	.word	0x0800b2e9
 800b350:	0800b2e9 	.word	0x0800b2e9
 800b354:	0800b42d 	.word	0x0800b42d
 800b358:	6833      	ldr	r3, [r6, #0]
 800b35a:	1d1a      	adds	r2, r3, #4
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	6032      	str	r2, [r6, #0]
 800b360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b368:	2301      	movs	r3, #1
 800b36a:	e09c      	b.n	800b4a6 <_printf_i+0x1e6>
 800b36c:	6833      	ldr	r3, [r6, #0]
 800b36e:	6820      	ldr	r0, [r4, #0]
 800b370:	1d19      	adds	r1, r3, #4
 800b372:	6031      	str	r1, [r6, #0]
 800b374:	0606      	lsls	r6, r0, #24
 800b376:	d501      	bpl.n	800b37c <_printf_i+0xbc>
 800b378:	681d      	ldr	r5, [r3, #0]
 800b37a:	e003      	b.n	800b384 <_printf_i+0xc4>
 800b37c:	0645      	lsls	r5, r0, #25
 800b37e:	d5fb      	bpl.n	800b378 <_printf_i+0xb8>
 800b380:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b384:	2d00      	cmp	r5, #0
 800b386:	da03      	bge.n	800b390 <_printf_i+0xd0>
 800b388:	232d      	movs	r3, #45	@ 0x2d
 800b38a:	426d      	negs	r5, r5
 800b38c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b390:	4858      	ldr	r0, [pc, #352]	@ (800b4f4 <_printf_i+0x234>)
 800b392:	230a      	movs	r3, #10
 800b394:	e011      	b.n	800b3ba <_printf_i+0xfa>
 800b396:	6821      	ldr	r1, [r4, #0]
 800b398:	6833      	ldr	r3, [r6, #0]
 800b39a:	0608      	lsls	r0, r1, #24
 800b39c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3a0:	d402      	bmi.n	800b3a8 <_printf_i+0xe8>
 800b3a2:	0649      	lsls	r1, r1, #25
 800b3a4:	bf48      	it	mi
 800b3a6:	b2ad      	uxthmi	r5, r5
 800b3a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3aa:	4852      	ldr	r0, [pc, #328]	@ (800b4f4 <_printf_i+0x234>)
 800b3ac:	6033      	str	r3, [r6, #0]
 800b3ae:	bf14      	ite	ne
 800b3b0:	230a      	movne	r3, #10
 800b3b2:	2308      	moveq	r3, #8
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b3ba:	6866      	ldr	r6, [r4, #4]
 800b3bc:	60a6      	str	r6, [r4, #8]
 800b3be:	2e00      	cmp	r6, #0
 800b3c0:	db05      	blt.n	800b3ce <_printf_i+0x10e>
 800b3c2:	6821      	ldr	r1, [r4, #0]
 800b3c4:	432e      	orrs	r6, r5
 800b3c6:	f021 0104 	bic.w	r1, r1, #4
 800b3ca:	6021      	str	r1, [r4, #0]
 800b3cc:	d04b      	beq.n	800b466 <_printf_i+0x1a6>
 800b3ce:	4616      	mov	r6, r2
 800b3d0:	fbb5 f1f3 	udiv	r1, r5, r3
 800b3d4:	fb03 5711 	mls	r7, r3, r1, r5
 800b3d8:	5dc7      	ldrb	r7, [r0, r7]
 800b3da:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b3de:	462f      	mov	r7, r5
 800b3e0:	42bb      	cmp	r3, r7
 800b3e2:	460d      	mov	r5, r1
 800b3e4:	d9f4      	bls.n	800b3d0 <_printf_i+0x110>
 800b3e6:	2b08      	cmp	r3, #8
 800b3e8:	d10b      	bne.n	800b402 <_printf_i+0x142>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	07df      	lsls	r7, r3, #31
 800b3ee:	d508      	bpl.n	800b402 <_printf_i+0x142>
 800b3f0:	6923      	ldr	r3, [r4, #16]
 800b3f2:	6861      	ldr	r1, [r4, #4]
 800b3f4:	4299      	cmp	r1, r3
 800b3f6:	bfde      	ittt	le
 800b3f8:	2330      	movle	r3, #48	@ 0x30
 800b3fa:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b3fe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b402:	1b92      	subs	r2, r2, r6
 800b404:	6122      	str	r2, [r4, #16]
 800b406:	f8cd a000 	str.w	sl, [sp]
 800b40a:	464b      	mov	r3, r9
 800b40c:	aa03      	add	r2, sp, #12
 800b40e:	4621      	mov	r1, r4
 800b410:	4640      	mov	r0, r8
 800b412:	f7ff fee7 	bl	800b1e4 <_printf_common>
 800b416:	3001      	adds	r0, #1
 800b418:	d14a      	bne.n	800b4b0 <_printf_i+0x1f0>
 800b41a:	f04f 30ff 	mov.w	r0, #4294967295
 800b41e:	b004      	add	sp, #16
 800b420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	f043 0320 	orr.w	r3, r3, #32
 800b42a:	6023      	str	r3, [r4, #0]
 800b42c:	4832      	ldr	r0, [pc, #200]	@ (800b4f8 <_printf_i+0x238>)
 800b42e:	2778      	movs	r7, #120	@ 0x78
 800b430:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	6831      	ldr	r1, [r6, #0]
 800b438:	061f      	lsls	r7, r3, #24
 800b43a:	f851 5b04 	ldr.w	r5, [r1], #4
 800b43e:	d402      	bmi.n	800b446 <_printf_i+0x186>
 800b440:	065f      	lsls	r7, r3, #25
 800b442:	bf48      	it	mi
 800b444:	b2ad      	uxthmi	r5, r5
 800b446:	6031      	str	r1, [r6, #0]
 800b448:	07d9      	lsls	r1, r3, #31
 800b44a:	bf44      	itt	mi
 800b44c:	f043 0320 	orrmi.w	r3, r3, #32
 800b450:	6023      	strmi	r3, [r4, #0]
 800b452:	b11d      	cbz	r5, 800b45c <_printf_i+0x19c>
 800b454:	2310      	movs	r3, #16
 800b456:	e7ad      	b.n	800b3b4 <_printf_i+0xf4>
 800b458:	4826      	ldr	r0, [pc, #152]	@ (800b4f4 <_printf_i+0x234>)
 800b45a:	e7e9      	b.n	800b430 <_printf_i+0x170>
 800b45c:	6823      	ldr	r3, [r4, #0]
 800b45e:	f023 0320 	bic.w	r3, r3, #32
 800b462:	6023      	str	r3, [r4, #0]
 800b464:	e7f6      	b.n	800b454 <_printf_i+0x194>
 800b466:	4616      	mov	r6, r2
 800b468:	e7bd      	b.n	800b3e6 <_printf_i+0x126>
 800b46a:	6833      	ldr	r3, [r6, #0]
 800b46c:	6825      	ldr	r5, [r4, #0]
 800b46e:	6961      	ldr	r1, [r4, #20]
 800b470:	1d18      	adds	r0, r3, #4
 800b472:	6030      	str	r0, [r6, #0]
 800b474:	062e      	lsls	r6, r5, #24
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	d501      	bpl.n	800b47e <_printf_i+0x1be>
 800b47a:	6019      	str	r1, [r3, #0]
 800b47c:	e002      	b.n	800b484 <_printf_i+0x1c4>
 800b47e:	0668      	lsls	r0, r5, #25
 800b480:	d5fb      	bpl.n	800b47a <_printf_i+0x1ba>
 800b482:	8019      	strh	r1, [r3, #0]
 800b484:	2300      	movs	r3, #0
 800b486:	6123      	str	r3, [r4, #16]
 800b488:	4616      	mov	r6, r2
 800b48a:	e7bc      	b.n	800b406 <_printf_i+0x146>
 800b48c:	6833      	ldr	r3, [r6, #0]
 800b48e:	1d1a      	adds	r2, r3, #4
 800b490:	6032      	str	r2, [r6, #0]
 800b492:	681e      	ldr	r6, [r3, #0]
 800b494:	6862      	ldr	r2, [r4, #4]
 800b496:	2100      	movs	r1, #0
 800b498:	4630      	mov	r0, r6
 800b49a:	f7f4 ff21 	bl	80002e0 <memchr>
 800b49e:	b108      	cbz	r0, 800b4a4 <_printf_i+0x1e4>
 800b4a0:	1b80      	subs	r0, r0, r6
 800b4a2:	6060      	str	r0, [r4, #4]
 800b4a4:	6863      	ldr	r3, [r4, #4]
 800b4a6:	6123      	str	r3, [r4, #16]
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4ae:	e7aa      	b.n	800b406 <_printf_i+0x146>
 800b4b0:	6923      	ldr	r3, [r4, #16]
 800b4b2:	4632      	mov	r2, r6
 800b4b4:	4649      	mov	r1, r9
 800b4b6:	4640      	mov	r0, r8
 800b4b8:	47d0      	blx	sl
 800b4ba:	3001      	adds	r0, #1
 800b4bc:	d0ad      	beq.n	800b41a <_printf_i+0x15a>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	079b      	lsls	r3, r3, #30
 800b4c2:	d413      	bmi.n	800b4ec <_printf_i+0x22c>
 800b4c4:	68e0      	ldr	r0, [r4, #12]
 800b4c6:	9b03      	ldr	r3, [sp, #12]
 800b4c8:	4298      	cmp	r0, r3
 800b4ca:	bfb8      	it	lt
 800b4cc:	4618      	movlt	r0, r3
 800b4ce:	e7a6      	b.n	800b41e <_printf_i+0x15e>
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	4632      	mov	r2, r6
 800b4d4:	4649      	mov	r1, r9
 800b4d6:	4640      	mov	r0, r8
 800b4d8:	47d0      	blx	sl
 800b4da:	3001      	adds	r0, #1
 800b4dc:	d09d      	beq.n	800b41a <_printf_i+0x15a>
 800b4de:	3501      	adds	r5, #1
 800b4e0:	68e3      	ldr	r3, [r4, #12]
 800b4e2:	9903      	ldr	r1, [sp, #12]
 800b4e4:	1a5b      	subs	r3, r3, r1
 800b4e6:	42ab      	cmp	r3, r5
 800b4e8:	dcf2      	bgt.n	800b4d0 <_printf_i+0x210>
 800b4ea:	e7eb      	b.n	800b4c4 <_printf_i+0x204>
 800b4ec:	2500      	movs	r5, #0
 800b4ee:	f104 0619 	add.w	r6, r4, #25
 800b4f2:	e7f5      	b.n	800b4e0 <_printf_i+0x220>
 800b4f4:	0801013d 	.word	0x0801013d
 800b4f8:	0801014e 	.word	0x0801014e

0800b4fc <__sflush_r>:
 800b4fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b504:	0716      	lsls	r6, r2, #28
 800b506:	4605      	mov	r5, r0
 800b508:	460c      	mov	r4, r1
 800b50a:	d454      	bmi.n	800b5b6 <__sflush_r+0xba>
 800b50c:	684b      	ldr	r3, [r1, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	dc02      	bgt.n	800b518 <__sflush_r+0x1c>
 800b512:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b514:	2b00      	cmp	r3, #0
 800b516:	dd48      	ble.n	800b5aa <__sflush_r+0xae>
 800b518:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b51a:	2e00      	cmp	r6, #0
 800b51c:	d045      	beq.n	800b5aa <__sflush_r+0xae>
 800b51e:	2300      	movs	r3, #0
 800b520:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b524:	682f      	ldr	r7, [r5, #0]
 800b526:	6a21      	ldr	r1, [r4, #32]
 800b528:	602b      	str	r3, [r5, #0]
 800b52a:	d030      	beq.n	800b58e <__sflush_r+0x92>
 800b52c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b52e:	89a3      	ldrh	r3, [r4, #12]
 800b530:	0759      	lsls	r1, r3, #29
 800b532:	d505      	bpl.n	800b540 <__sflush_r+0x44>
 800b534:	6863      	ldr	r3, [r4, #4]
 800b536:	1ad2      	subs	r2, r2, r3
 800b538:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b53a:	b10b      	cbz	r3, 800b540 <__sflush_r+0x44>
 800b53c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b53e:	1ad2      	subs	r2, r2, r3
 800b540:	2300      	movs	r3, #0
 800b542:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b544:	6a21      	ldr	r1, [r4, #32]
 800b546:	4628      	mov	r0, r5
 800b548:	47b0      	blx	r6
 800b54a:	1c43      	adds	r3, r0, #1
 800b54c:	89a3      	ldrh	r3, [r4, #12]
 800b54e:	d106      	bne.n	800b55e <__sflush_r+0x62>
 800b550:	6829      	ldr	r1, [r5, #0]
 800b552:	291d      	cmp	r1, #29
 800b554:	d82b      	bhi.n	800b5ae <__sflush_r+0xb2>
 800b556:	4a2a      	ldr	r2, [pc, #168]	@ (800b600 <__sflush_r+0x104>)
 800b558:	40ca      	lsrs	r2, r1
 800b55a:	07d6      	lsls	r6, r2, #31
 800b55c:	d527      	bpl.n	800b5ae <__sflush_r+0xb2>
 800b55e:	2200      	movs	r2, #0
 800b560:	6062      	str	r2, [r4, #4]
 800b562:	04d9      	lsls	r1, r3, #19
 800b564:	6922      	ldr	r2, [r4, #16]
 800b566:	6022      	str	r2, [r4, #0]
 800b568:	d504      	bpl.n	800b574 <__sflush_r+0x78>
 800b56a:	1c42      	adds	r2, r0, #1
 800b56c:	d101      	bne.n	800b572 <__sflush_r+0x76>
 800b56e:	682b      	ldr	r3, [r5, #0]
 800b570:	b903      	cbnz	r3, 800b574 <__sflush_r+0x78>
 800b572:	6560      	str	r0, [r4, #84]	@ 0x54
 800b574:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b576:	602f      	str	r7, [r5, #0]
 800b578:	b1b9      	cbz	r1, 800b5aa <__sflush_r+0xae>
 800b57a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b57e:	4299      	cmp	r1, r3
 800b580:	d002      	beq.n	800b588 <__sflush_r+0x8c>
 800b582:	4628      	mov	r0, r5
 800b584:	f7ff fa9c 	bl	800aac0 <_free_r>
 800b588:	2300      	movs	r3, #0
 800b58a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b58c:	e00d      	b.n	800b5aa <__sflush_r+0xae>
 800b58e:	2301      	movs	r3, #1
 800b590:	4628      	mov	r0, r5
 800b592:	47b0      	blx	r6
 800b594:	4602      	mov	r2, r0
 800b596:	1c50      	adds	r0, r2, #1
 800b598:	d1c9      	bne.n	800b52e <__sflush_r+0x32>
 800b59a:	682b      	ldr	r3, [r5, #0]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d0c6      	beq.n	800b52e <__sflush_r+0x32>
 800b5a0:	2b1d      	cmp	r3, #29
 800b5a2:	d001      	beq.n	800b5a8 <__sflush_r+0xac>
 800b5a4:	2b16      	cmp	r3, #22
 800b5a6:	d11e      	bne.n	800b5e6 <__sflush_r+0xea>
 800b5a8:	602f      	str	r7, [r5, #0]
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	e022      	b.n	800b5f4 <__sflush_r+0xf8>
 800b5ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5b2:	b21b      	sxth	r3, r3
 800b5b4:	e01b      	b.n	800b5ee <__sflush_r+0xf2>
 800b5b6:	690f      	ldr	r7, [r1, #16]
 800b5b8:	2f00      	cmp	r7, #0
 800b5ba:	d0f6      	beq.n	800b5aa <__sflush_r+0xae>
 800b5bc:	0793      	lsls	r3, r2, #30
 800b5be:	680e      	ldr	r6, [r1, #0]
 800b5c0:	bf08      	it	eq
 800b5c2:	694b      	ldreq	r3, [r1, #20]
 800b5c4:	600f      	str	r7, [r1, #0]
 800b5c6:	bf18      	it	ne
 800b5c8:	2300      	movne	r3, #0
 800b5ca:	eba6 0807 	sub.w	r8, r6, r7
 800b5ce:	608b      	str	r3, [r1, #8]
 800b5d0:	f1b8 0f00 	cmp.w	r8, #0
 800b5d4:	dde9      	ble.n	800b5aa <__sflush_r+0xae>
 800b5d6:	6a21      	ldr	r1, [r4, #32]
 800b5d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b5da:	4643      	mov	r3, r8
 800b5dc:	463a      	mov	r2, r7
 800b5de:	4628      	mov	r0, r5
 800b5e0:	47b0      	blx	r6
 800b5e2:	2800      	cmp	r0, #0
 800b5e4:	dc08      	bgt.n	800b5f8 <__sflush_r+0xfc>
 800b5e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b5ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b5ee:	81a3      	strh	r3, [r4, #12]
 800b5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5f8:	4407      	add	r7, r0
 800b5fa:	eba8 0800 	sub.w	r8, r8, r0
 800b5fe:	e7e7      	b.n	800b5d0 <__sflush_r+0xd4>
 800b600:	20400001 	.word	0x20400001

0800b604 <_fflush_r>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	690b      	ldr	r3, [r1, #16]
 800b608:	4605      	mov	r5, r0
 800b60a:	460c      	mov	r4, r1
 800b60c:	b913      	cbnz	r3, 800b614 <_fflush_r+0x10>
 800b60e:	2500      	movs	r5, #0
 800b610:	4628      	mov	r0, r5
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	b118      	cbz	r0, 800b61e <_fflush_r+0x1a>
 800b616:	6a03      	ldr	r3, [r0, #32]
 800b618:	b90b      	cbnz	r3, 800b61e <_fflush_r+0x1a>
 800b61a:	f7ff f927 	bl	800a86c <__sinit>
 800b61e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0f3      	beq.n	800b60e <_fflush_r+0xa>
 800b626:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b628:	07d0      	lsls	r0, r2, #31
 800b62a:	d404      	bmi.n	800b636 <_fflush_r+0x32>
 800b62c:	0599      	lsls	r1, r3, #22
 800b62e:	d402      	bmi.n	800b636 <_fflush_r+0x32>
 800b630:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b632:	f7ff fa42 	bl	800aaba <__retarget_lock_acquire_recursive>
 800b636:	4628      	mov	r0, r5
 800b638:	4621      	mov	r1, r4
 800b63a:	f7ff ff5f 	bl	800b4fc <__sflush_r>
 800b63e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b640:	07da      	lsls	r2, r3, #31
 800b642:	4605      	mov	r5, r0
 800b644:	d4e4      	bmi.n	800b610 <_fflush_r+0xc>
 800b646:	89a3      	ldrh	r3, [r4, #12]
 800b648:	059b      	lsls	r3, r3, #22
 800b64a:	d4e1      	bmi.n	800b610 <_fflush_r+0xc>
 800b64c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b64e:	f7ff fa35 	bl	800aabc <__retarget_lock_release_recursive>
 800b652:	e7dd      	b.n	800b610 <_fflush_r+0xc>

0800b654 <__swbuf_r>:
 800b654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b656:	460e      	mov	r6, r1
 800b658:	4614      	mov	r4, r2
 800b65a:	4605      	mov	r5, r0
 800b65c:	b118      	cbz	r0, 800b666 <__swbuf_r+0x12>
 800b65e:	6a03      	ldr	r3, [r0, #32]
 800b660:	b90b      	cbnz	r3, 800b666 <__swbuf_r+0x12>
 800b662:	f7ff f903 	bl	800a86c <__sinit>
 800b666:	69a3      	ldr	r3, [r4, #24]
 800b668:	60a3      	str	r3, [r4, #8]
 800b66a:	89a3      	ldrh	r3, [r4, #12]
 800b66c:	071a      	lsls	r2, r3, #28
 800b66e:	d501      	bpl.n	800b674 <__swbuf_r+0x20>
 800b670:	6923      	ldr	r3, [r4, #16]
 800b672:	b943      	cbnz	r3, 800b686 <__swbuf_r+0x32>
 800b674:	4621      	mov	r1, r4
 800b676:	4628      	mov	r0, r5
 800b678:	f000 f82a 	bl	800b6d0 <__swsetup_r>
 800b67c:	b118      	cbz	r0, 800b686 <__swbuf_r+0x32>
 800b67e:	f04f 37ff 	mov.w	r7, #4294967295
 800b682:	4638      	mov	r0, r7
 800b684:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	6922      	ldr	r2, [r4, #16]
 800b68a:	1a98      	subs	r0, r3, r2
 800b68c:	6963      	ldr	r3, [r4, #20]
 800b68e:	b2f6      	uxtb	r6, r6
 800b690:	4283      	cmp	r3, r0
 800b692:	4637      	mov	r7, r6
 800b694:	dc05      	bgt.n	800b6a2 <__swbuf_r+0x4e>
 800b696:	4621      	mov	r1, r4
 800b698:	4628      	mov	r0, r5
 800b69a:	f7ff ffb3 	bl	800b604 <_fflush_r>
 800b69e:	2800      	cmp	r0, #0
 800b6a0:	d1ed      	bne.n	800b67e <__swbuf_r+0x2a>
 800b6a2:	68a3      	ldr	r3, [r4, #8]
 800b6a4:	3b01      	subs	r3, #1
 800b6a6:	60a3      	str	r3, [r4, #8]
 800b6a8:	6823      	ldr	r3, [r4, #0]
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	6022      	str	r2, [r4, #0]
 800b6ae:	701e      	strb	r6, [r3, #0]
 800b6b0:	6962      	ldr	r2, [r4, #20]
 800b6b2:	1c43      	adds	r3, r0, #1
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d004      	beq.n	800b6c2 <__swbuf_r+0x6e>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	07db      	lsls	r3, r3, #31
 800b6bc:	d5e1      	bpl.n	800b682 <__swbuf_r+0x2e>
 800b6be:	2e0a      	cmp	r6, #10
 800b6c0:	d1df      	bne.n	800b682 <__swbuf_r+0x2e>
 800b6c2:	4621      	mov	r1, r4
 800b6c4:	4628      	mov	r0, r5
 800b6c6:	f7ff ff9d 	bl	800b604 <_fflush_r>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0d9      	beq.n	800b682 <__swbuf_r+0x2e>
 800b6ce:	e7d6      	b.n	800b67e <__swbuf_r+0x2a>

0800b6d0 <__swsetup_r>:
 800b6d0:	b538      	push	{r3, r4, r5, lr}
 800b6d2:	4b29      	ldr	r3, [pc, #164]	@ (800b778 <__swsetup_r+0xa8>)
 800b6d4:	4605      	mov	r5, r0
 800b6d6:	6818      	ldr	r0, [r3, #0]
 800b6d8:	460c      	mov	r4, r1
 800b6da:	b118      	cbz	r0, 800b6e4 <__swsetup_r+0x14>
 800b6dc:	6a03      	ldr	r3, [r0, #32]
 800b6de:	b90b      	cbnz	r3, 800b6e4 <__swsetup_r+0x14>
 800b6e0:	f7ff f8c4 	bl	800a86c <__sinit>
 800b6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6e8:	0719      	lsls	r1, r3, #28
 800b6ea:	d422      	bmi.n	800b732 <__swsetup_r+0x62>
 800b6ec:	06da      	lsls	r2, r3, #27
 800b6ee:	d407      	bmi.n	800b700 <__swsetup_r+0x30>
 800b6f0:	2209      	movs	r2, #9
 800b6f2:	602a      	str	r2, [r5, #0]
 800b6f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6f8:	81a3      	strh	r3, [r4, #12]
 800b6fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b6fe:	e033      	b.n	800b768 <__swsetup_r+0x98>
 800b700:	0758      	lsls	r0, r3, #29
 800b702:	d512      	bpl.n	800b72a <__swsetup_r+0x5a>
 800b704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b706:	b141      	cbz	r1, 800b71a <__swsetup_r+0x4a>
 800b708:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b70c:	4299      	cmp	r1, r3
 800b70e:	d002      	beq.n	800b716 <__swsetup_r+0x46>
 800b710:	4628      	mov	r0, r5
 800b712:	f7ff f9d5 	bl	800aac0 <_free_r>
 800b716:	2300      	movs	r3, #0
 800b718:	6363      	str	r3, [r4, #52]	@ 0x34
 800b71a:	89a3      	ldrh	r3, [r4, #12]
 800b71c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b720:	81a3      	strh	r3, [r4, #12]
 800b722:	2300      	movs	r3, #0
 800b724:	6063      	str	r3, [r4, #4]
 800b726:	6923      	ldr	r3, [r4, #16]
 800b728:	6023      	str	r3, [r4, #0]
 800b72a:	89a3      	ldrh	r3, [r4, #12]
 800b72c:	f043 0308 	orr.w	r3, r3, #8
 800b730:	81a3      	strh	r3, [r4, #12]
 800b732:	6923      	ldr	r3, [r4, #16]
 800b734:	b94b      	cbnz	r3, 800b74a <__swsetup_r+0x7a>
 800b736:	89a3      	ldrh	r3, [r4, #12]
 800b738:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b740:	d003      	beq.n	800b74a <__swsetup_r+0x7a>
 800b742:	4621      	mov	r1, r4
 800b744:	4628      	mov	r0, r5
 800b746:	f000 f8a5 	bl	800b894 <__smakebuf_r>
 800b74a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b74e:	f013 0201 	ands.w	r2, r3, #1
 800b752:	d00a      	beq.n	800b76a <__swsetup_r+0x9a>
 800b754:	2200      	movs	r2, #0
 800b756:	60a2      	str	r2, [r4, #8]
 800b758:	6962      	ldr	r2, [r4, #20]
 800b75a:	4252      	negs	r2, r2
 800b75c:	61a2      	str	r2, [r4, #24]
 800b75e:	6922      	ldr	r2, [r4, #16]
 800b760:	b942      	cbnz	r2, 800b774 <__swsetup_r+0xa4>
 800b762:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b766:	d1c5      	bne.n	800b6f4 <__swsetup_r+0x24>
 800b768:	bd38      	pop	{r3, r4, r5, pc}
 800b76a:	0799      	lsls	r1, r3, #30
 800b76c:	bf58      	it	pl
 800b76e:	6962      	ldrpl	r2, [r4, #20]
 800b770:	60a2      	str	r2, [r4, #8]
 800b772:	e7f4      	b.n	800b75e <__swsetup_r+0x8e>
 800b774:	2000      	movs	r0, #0
 800b776:	e7f7      	b.n	800b768 <__swsetup_r+0x98>
 800b778:	24000024 	.word	0x24000024

0800b77c <memmove>:
 800b77c:	4288      	cmp	r0, r1
 800b77e:	b510      	push	{r4, lr}
 800b780:	eb01 0402 	add.w	r4, r1, r2
 800b784:	d902      	bls.n	800b78c <memmove+0x10>
 800b786:	4284      	cmp	r4, r0
 800b788:	4623      	mov	r3, r4
 800b78a:	d807      	bhi.n	800b79c <memmove+0x20>
 800b78c:	1e43      	subs	r3, r0, #1
 800b78e:	42a1      	cmp	r1, r4
 800b790:	d008      	beq.n	800b7a4 <memmove+0x28>
 800b792:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b796:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b79a:	e7f8      	b.n	800b78e <memmove+0x12>
 800b79c:	4402      	add	r2, r0
 800b79e:	4601      	mov	r1, r0
 800b7a0:	428a      	cmp	r2, r1
 800b7a2:	d100      	bne.n	800b7a6 <memmove+0x2a>
 800b7a4:	bd10      	pop	{r4, pc}
 800b7a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b7aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b7ae:	e7f7      	b.n	800b7a0 <memmove+0x24>

0800b7b0 <_sbrk_r>:
 800b7b0:	b538      	push	{r3, r4, r5, lr}
 800b7b2:	4d06      	ldr	r5, [pc, #24]	@ (800b7cc <_sbrk_r+0x1c>)
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	4604      	mov	r4, r0
 800b7b8:	4608      	mov	r0, r1
 800b7ba:	602b      	str	r3, [r5, #0]
 800b7bc:	f7f8 ff5e 	bl	800467c <_sbrk>
 800b7c0:	1c43      	adds	r3, r0, #1
 800b7c2:	d102      	bne.n	800b7ca <_sbrk_r+0x1a>
 800b7c4:	682b      	ldr	r3, [r5, #0]
 800b7c6:	b103      	cbz	r3, 800b7ca <_sbrk_r+0x1a>
 800b7c8:	6023      	str	r3, [r4, #0]
 800b7ca:	bd38      	pop	{r3, r4, r5, pc}
 800b7cc:	240002c8 	.word	0x240002c8

0800b7d0 <memcpy>:
 800b7d0:	440a      	add	r2, r1
 800b7d2:	4291      	cmp	r1, r2
 800b7d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b7d8:	d100      	bne.n	800b7dc <memcpy+0xc>
 800b7da:	4770      	bx	lr
 800b7dc:	b510      	push	{r4, lr}
 800b7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b7e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b7e6:	4291      	cmp	r1, r2
 800b7e8:	d1f9      	bne.n	800b7de <memcpy+0xe>
 800b7ea:	bd10      	pop	{r4, pc}

0800b7ec <_realloc_r>:
 800b7ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	4614      	mov	r4, r2
 800b7f4:	460d      	mov	r5, r1
 800b7f6:	b921      	cbnz	r1, 800b802 <_realloc_r+0x16>
 800b7f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7fc:	4611      	mov	r1, r2
 800b7fe:	f7ff b9cb 	b.w	800ab98 <_malloc_r>
 800b802:	b92a      	cbnz	r2, 800b810 <_realloc_r+0x24>
 800b804:	f7ff f95c 	bl	800aac0 <_free_r>
 800b808:	4625      	mov	r5, r4
 800b80a:	4628      	mov	r0, r5
 800b80c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b810:	f000 f89e 	bl	800b950 <_malloc_usable_size_r>
 800b814:	4284      	cmp	r4, r0
 800b816:	4606      	mov	r6, r0
 800b818:	d802      	bhi.n	800b820 <_realloc_r+0x34>
 800b81a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b81e:	d8f4      	bhi.n	800b80a <_realloc_r+0x1e>
 800b820:	4621      	mov	r1, r4
 800b822:	4638      	mov	r0, r7
 800b824:	f7ff f9b8 	bl	800ab98 <_malloc_r>
 800b828:	4680      	mov	r8, r0
 800b82a:	b908      	cbnz	r0, 800b830 <_realloc_r+0x44>
 800b82c:	4645      	mov	r5, r8
 800b82e:	e7ec      	b.n	800b80a <_realloc_r+0x1e>
 800b830:	42b4      	cmp	r4, r6
 800b832:	4622      	mov	r2, r4
 800b834:	4629      	mov	r1, r5
 800b836:	bf28      	it	cs
 800b838:	4632      	movcs	r2, r6
 800b83a:	f7ff ffc9 	bl	800b7d0 <memcpy>
 800b83e:	4629      	mov	r1, r5
 800b840:	4638      	mov	r0, r7
 800b842:	f7ff f93d 	bl	800aac0 <_free_r>
 800b846:	e7f1      	b.n	800b82c <_realloc_r+0x40>

0800b848 <__swhatbuf_r>:
 800b848:	b570      	push	{r4, r5, r6, lr}
 800b84a:	460c      	mov	r4, r1
 800b84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b850:	2900      	cmp	r1, #0
 800b852:	b096      	sub	sp, #88	@ 0x58
 800b854:	4615      	mov	r5, r2
 800b856:	461e      	mov	r6, r3
 800b858:	da0d      	bge.n	800b876 <__swhatbuf_r+0x2e>
 800b85a:	89a3      	ldrh	r3, [r4, #12]
 800b85c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b860:	f04f 0100 	mov.w	r1, #0
 800b864:	bf14      	ite	ne
 800b866:	2340      	movne	r3, #64	@ 0x40
 800b868:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b86c:	2000      	movs	r0, #0
 800b86e:	6031      	str	r1, [r6, #0]
 800b870:	602b      	str	r3, [r5, #0]
 800b872:	b016      	add	sp, #88	@ 0x58
 800b874:	bd70      	pop	{r4, r5, r6, pc}
 800b876:	466a      	mov	r2, sp
 800b878:	f000 f848 	bl	800b90c <_fstat_r>
 800b87c:	2800      	cmp	r0, #0
 800b87e:	dbec      	blt.n	800b85a <__swhatbuf_r+0x12>
 800b880:	9901      	ldr	r1, [sp, #4]
 800b882:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b886:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b88a:	4259      	negs	r1, r3
 800b88c:	4159      	adcs	r1, r3
 800b88e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b892:	e7eb      	b.n	800b86c <__swhatbuf_r+0x24>

0800b894 <__smakebuf_r>:
 800b894:	898b      	ldrh	r3, [r1, #12]
 800b896:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b898:	079d      	lsls	r5, r3, #30
 800b89a:	4606      	mov	r6, r0
 800b89c:	460c      	mov	r4, r1
 800b89e:	d507      	bpl.n	800b8b0 <__smakebuf_r+0x1c>
 800b8a0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b8a4:	6023      	str	r3, [r4, #0]
 800b8a6:	6123      	str	r3, [r4, #16]
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	6163      	str	r3, [r4, #20]
 800b8ac:	b003      	add	sp, #12
 800b8ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b0:	ab01      	add	r3, sp, #4
 800b8b2:	466a      	mov	r2, sp
 800b8b4:	f7ff ffc8 	bl	800b848 <__swhatbuf_r>
 800b8b8:	9f00      	ldr	r7, [sp, #0]
 800b8ba:	4605      	mov	r5, r0
 800b8bc:	4639      	mov	r1, r7
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f7ff f96a 	bl	800ab98 <_malloc_r>
 800b8c4:	b948      	cbnz	r0, 800b8da <__smakebuf_r+0x46>
 800b8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ca:	059a      	lsls	r2, r3, #22
 800b8cc:	d4ee      	bmi.n	800b8ac <__smakebuf_r+0x18>
 800b8ce:	f023 0303 	bic.w	r3, r3, #3
 800b8d2:	f043 0302 	orr.w	r3, r3, #2
 800b8d6:	81a3      	strh	r3, [r4, #12]
 800b8d8:	e7e2      	b.n	800b8a0 <__smakebuf_r+0xc>
 800b8da:	89a3      	ldrh	r3, [r4, #12]
 800b8dc:	6020      	str	r0, [r4, #0]
 800b8de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b8e2:	81a3      	strh	r3, [r4, #12]
 800b8e4:	9b01      	ldr	r3, [sp, #4]
 800b8e6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b8ea:	b15b      	cbz	r3, 800b904 <__smakebuf_r+0x70>
 800b8ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8f0:	4630      	mov	r0, r6
 800b8f2:	f000 f81d 	bl	800b930 <_isatty_r>
 800b8f6:	b128      	cbz	r0, 800b904 <__smakebuf_r+0x70>
 800b8f8:	89a3      	ldrh	r3, [r4, #12]
 800b8fa:	f023 0303 	bic.w	r3, r3, #3
 800b8fe:	f043 0301 	orr.w	r3, r3, #1
 800b902:	81a3      	strh	r3, [r4, #12]
 800b904:	89a3      	ldrh	r3, [r4, #12]
 800b906:	431d      	orrs	r5, r3
 800b908:	81a5      	strh	r5, [r4, #12]
 800b90a:	e7cf      	b.n	800b8ac <__smakebuf_r+0x18>

0800b90c <_fstat_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	@ (800b92c <_fstat_r+0x20>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f7f8 fe86 	bl	800462a <_fstat>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d102      	bne.n	800b928 <_fstat_r+0x1c>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b103      	cbz	r3, 800b928 <_fstat_r+0x1c>
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	240002c8 	.word	0x240002c8

0800b930 <_isatty_r>:
 800b930:	b538      	push	{r3, r4, r5, lr}
 800b932:	4d06      	ldr	r5, [pc, #24]	@ (800b94c <_isatty_r+0x1c>)
 800b934:	2300      	movs	r3, #0
 800b936:	4604      	mov	r4, r0
 800b938:	4608      	mov	r0, r1
 800b93a:	602b      	str	r3, [r5, #0]
 800b93c:	f7f8 fe85 	bl	800464a <_isatty>
 800b940:	1c43      	adds	r3, r0, #1
 800b942:	d102      	bne.n	800b94a <_isatty_r+0x1a>
 800b944:	682b      	ldr	r3, [r5, #0]
 800b946:	b103      	cbz	r3, 800b94a <_isatty_r+0x1a>
 800b948:	6023      	str	r3, [r4, #0]
 800b94a:	bd38      	pop	{r3, r4, r5, pc}
 800b94c:	240002c8 	.word	0x240002c8

0800b950 <_malloc_usable_size_r>:
 800b950:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b954:	1f18      	subs	r0, r3, #4
 800b956:	2b00      	cmp	r3, #0
 800b958:	bfbc      	itt	lt
 800b95a:	580b      	ldrlt	r3, [r1, r0]
 800b95c:	18c0      	addlt	r0, r0, r3
 800b95e:	4770      	bx	lr

0800b960 <_init>:
 800b960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b962:	bf00      	nop
 800b964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b966:	bc08      	pop	{r3}
 800b968:	469e      	mov	lr, r3
 800b96a:	4770      	bx	lr

0800b96c <_fini>:
 800b96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b96e:	bf00      	nop
 800b970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b972:	bc08      	pop	{r3}
 800b974:	469e      	mov	lr, r3
 800b976:	4770      	bx	lr
