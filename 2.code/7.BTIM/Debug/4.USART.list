
4.USART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ac  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007644  08007644  00008644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800767c  0800767c  0000867c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007684  08007684  00008684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007688  08007688  00008688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  0800768c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000fc  24000010  0800769c  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400010c  0800769c  0000910c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011c37  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000266c  00000000  00000000  0001ac75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b70  00000000  00000000  0001d2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ba  00000000  00000000  0001de58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000371ec  00000000  00000000  0001e712  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00015055  00000000  00000000  000558fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001595b6  00000000  00000000  0006a953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c3f09  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d50  00000000  00000000  001c3f4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001c6c9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800762c 	.word	0x0800762c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800762c 	.word	0x0800762c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fd1a 	bl	8002074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fb5d 	bl	8001d14 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fb30 	bl	8001d14 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fb24 	bl	8001d14 <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fc9e 	bl	8002074 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fc99 	bl	8002074 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fadb 	bl	8001d14 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 facd 	bl	8001d14 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 fa44 	bl	8000c2c <MX_USART1_UART_Init>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}

080007a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007ae:	f000 f8bd 	bl	800092c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f000 fb25 	bl	8000e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f83f 	bl	8000838 <SystemClock_Config>

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  //MX_USART1_UART_Init();
  /* USER CODE BEGIN 2 */
  bsp_init();
 80007ba:	f7ff ffe9 	bl	8000790 <bsp_init>
  // 初始化缓冲区指针
  rx_buffer.head = 0;
 80007be:	4b1b      	ldr	r3, [pc, #108]	@ (800082c <main+0x84>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
  rx_buffer.tail = 0;
 80007c6:	4b19      	ldr	r3, [pc, #100]	@ (800082c <main+0x84>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
  // 启动接收中断
  HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 80007ce:	2201      	movs	r2, #1
 80007d0:	4917      	ldr	r1, [pc, #92]	@ (8000830 <main+0x88>)
 80007d2:	4818      	ldr	r0, [pc, #96]	@ (8000834 <main+0x8c>)
 80007d4:	f004 fb92 	bl	8004efc <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(rx_buffer.head != rx_buffer.tail) // 检查缓冲区是否有数据
 80007d8:	4b14      	ldr	r3, [pc, #80]	@ (800082c <main+0x84>)
 80007da:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4b12      	ldr	r3, [pc, #72]	@ (800082c <main+0x84>)
 80007e2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	429a      	cmp	r2, r3
 80007ea:	d0f5      	beq.n	80007d8 <main+0x30>
	  {
	      // 从缓冲区读取数据
	      uint8_t tx_byte = rx_buffer.data[rx_buffer.tail];
 80007ec:	4b0f      	ldr	r3, [pc, #60]	@ (800082c <main+0x84>)
 80007ee:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0d      	ldr	r3, [pc, #52]	@ (800082c <main+0x84>)
 80007f8:	5c9b      	ldrb	r3, [r3, r2]
 80007fa:	71fb      	strb	r3, [r7, #7]
	      rx_buffer.tail = (rx_buffer.tail + 1) % BUFFER_SIZE;
 80007fc:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <main+0x84>)
 80007fe:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000802:	b29b      	uxth	r3, r3
 8000804:	3301      	adds	r3, #1
 8000806:	425a      	negs	r2, r3
 8000808:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800080c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000810:	bf58      	it	pl
 8000812:	4253      	negpl	r3, r2
 8000814:	b29a      	uxth	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	@ (800082c <main+0x84>)
 8000818:	f8a3 2042 	strh.w	r2, [r3, #66]	@ 0x42
	      // 发送数据
	      HAL_UART_Transmit(&huart1, &tx_byte, 1, HAL_MAX_DELAY);
 800081c:	1df9      	adds	r1, r7, #7
 800081e:	f04f 33ff 	mov.w	r3, #4294967295
 8000822:	2201      	movs	r2, #1
 8000824:	4803      	ldr	r0, [pc, #12]	@ (8000834 <main+0x8c>)
 8000826:	f004 fadb 	bl	8004de0 <HAL_UART_Transmit>
	  if(rx_buffer.head != rx_buffer.tail) // 检查缓冲区是否有数据
 800082a:	e7d5      	b.n	80007d8 <main+0x30>
 800082c:	2400002c 	.word	0x2400002c
 8000830:	24000070 	.word	0x24000070
 8000834:	24000074 	.word	0x24000074

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	@ 0x70
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	224c      	movs	r2, #76	@ 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fec4 	bl	80075d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 febe 	bl	80075d4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000858:	2002      	movs	r0, #2
 800085a:	f001 fc25 	bl	80020a8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b30      	ldr	r3, [pc, #192]	@ (8000924 <SystemClock_Config+0xec>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a2f      	ldr	r2, [pc, #188]	@ (8000924 <SystemClock_Config+0xec>)
 8000868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b2d      	ldr	r3, [pc, #180]	@ (8000924 <SystemClock_Config+0xec>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <SystemClock_Config+0xf0>)
 800087a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087c:	4a2a      	ldr	r2, [pc, #168]	@ (8000928 <SystemClock_Config+0xf0>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <SystemClock_Config+0xf0>)
 8000886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b24      	ldr	r3, [pc, #144]	@ (8000924 <SystemClock_Config+0xec>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008b6:	23f0      	movs	r3, #240	@ 0xf0
 80008b8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008c6:	2308      	movs	r3, #8
 80008c8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ca:	2300      	movs	r3, #0
 80008cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d6:	4618      	mov	r0, r3
 80008d8:	f001 fc20 	bl	800211c <HAL_RCC_OscConfig>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80008e2:	f000 f84f 	bl	8000984 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e6:	233f      	movs	r3, #63	@ 0x3f
 80008e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ea:	2303      	movs	r3, #3
 80008ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008f2:	2308      	movs	r3, #8
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008f6:	2340      	movs	r3, #64	@ 0x40
 80008f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000902:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2104      	movs	r1, #4
 800090c:	4618      	mov	r0, r3
 800090e:	f002 f85f 	bl	80029d0 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000918:	f000 f834 	bl	8000984 <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3770      	adds	r7, #112	@ 0x70
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	58024800 	.word	0x58024800
 8000928:	58000400 	.word	0x58000400

0800092c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000932:	463b      	mov	r3, r7
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800093e:	f000 fc0d 	bl	800115c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000942:	2301      	movs	r3, #1
 8000944:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000946:	2300      	movs	r3, #0
 8000948:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800094a:	2300      	movs	r3, #0
 800094c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800094e:	231f      	movs	r3, #31
 8000950:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000952:	2387      	movs	r3, #135	@ 0x87
 8000954:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000956:	2300      	movs	r3, #0
 8000958:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800095a:	2300      	movs	r3, #0
 800095c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800095e:	2301      	movs	r3, #1
 8000960:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000962:	2301      	movs	r3, #1
 8000964:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000966:	2300      	movs	r3, #0
 8000968:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800096e:	463b      	mov	r3, r7
 8000970:	4618      	mov	r0, r3
 8000972:	f000 fc2b 	bl	80011cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000976:	2004      	movs	r0, #4
 8000978:	f000 fc08 	bl	800118c <HAL_MPU_Enable>

}
 800097c:	bf00      	nop
 800097e:	3710      	adds	r7, #16
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000988:	b672      	cpsid	i
}
 800098a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <Error_Handler+0x8>

08000990 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000996:	4b0a      	ldr	r3, [pc, #40]	@ (80009c0 <HAL_MspInit+0x30>)
 8000998:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800099c:	4a08      	ldr	r2, [pc, #32]	@ (80009c0 <HAL_MspInit+0x30>)
 800099e:	f043 0302 	orr.w	r3, r3, #2
 80009a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009a6:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <HAL_MspInit+0x30>)
 80009a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009ac:	f003 0302 	and.w	r3, r3, #2
 80009b0:	607b      	str	r3, [r7, #4]
 80009b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b4:	bf00      	nop
 80009b6:	370c      	adds	r7, #12
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	58024400 	.word	0x58024400

080009c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <NMI_Handler+0x4>

080009cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <HardFault_Handler+0x4>

080009d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <MemManage_Handler+0x4>

080009dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr

080009fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fa:	b480      	push	{r7}
 80009fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr

08000a08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 fa63 	bl	8000ee4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a34:	4802      	ldr	r0, [pc, #8]	@ (8000a40 <USART1_IRQHandler+0x10>)
 8000a36:	f004 faad 	bl	8004f94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	24000074 	.word	0x24000074

08000a44 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */
#if USE_UART_RX_IT
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b084      	sub	sp, #16
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	4a16      	ldr	r2, [pc, #88]	@ (8000aac <HAL_UART_RxCpltCallback+0x68>)
 8000a52:	4293      	cmp	r3, r2
 8000a54:	d125      	bne.n	8000aa2 <HAL_UART_RxCpltCallback+0x5e>
  {
    // 计算下一个写入位置
    uint16_t next_head = (rx_buffer.head + 1) % BUFFER_SIZE;
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a58:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a5c:	b29b      	uxth	r3, r3
 8000a5e:	3301      	adds	r3, #1
 8000a60:	425a      	negs	r2, r3
 8000a62:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a66:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a6a:	bf58      	it	pl
 8000a6c:	4253      	negpl	r3, r2
 8000a6e:	81fb      	strh	r3, [r7, #14]

    // 仅当缓冲区未满时存储数据
    if (next_head != rx_buffer.tail)
 8000a70:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a72:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	89fa      	ldrh	r2, [r7, #14]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d00c      	beq.n	8000a98 <HAL_UART_RxCpltCallback+0x54>
    {
      rx_buffer.data[rx_buffer.head] = received_byte;
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x70>)
 8000a8a:	7819      	ldrb	r1, [r3, #0]
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a8e:	5499      	strb	r1, [r3, r2]
      rx_buffer.head = next_head;
 8000a90:	4a07      	ldr	r2, [pc, #28]	@ (8000ab0 <HAL_UART_RxCpltCallback+0x6c>)
 8000a92:	89fb      	ldrh	r3, [r7, #14]
 8000a94:	f8a2 3040 	strh.w	r3, [r2, #64]	@ 0x40
    }

    // 重新启用接收中断
    HAL_UART_Receive_IT(&huart1, &received_byte, 1);
 8000a98:	2201      	movs	r2, #1
 8000a9a:	4906      	ldr	r1, [pc, #24]	@ (8000ab4 <HAL_UART_RxCpltCallback+0x70>)
 8000a9c:	4806      	ldr	r0, [pc, #24]	@ (8000ab8 <HAL_UART_RxCpltCallback+0x74>)
 8000a9e:	f004 fa2d 	bl	8004efc <HAL_UART_Receive_IT>
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40011000 	.word	0x40011000
 8000ab0:	2400002c 	.word	0x2400002c
 8000ab4:	24000070 	.word	0x24000070
 8000ab8:	24000074 	.word	0x24000074

08000abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b43      	ldr	r3, [pc, #268]	@ (8000bd0 <SystemInit+0x114>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ac6:	4a42      	ldr	r2, [pc, #264]	@ (8000bd0 <SystemInit+0x114>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ad0:	4b40      	ldr	r3, [pc, #256]	@ (8000bd4 <SystemInit+0x118>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 030f 	and.w	r3, r3, #15
 8000ad8:	2b06      	cmp	r3, #6
 8000ada:	d807      	bhi.n	8000aec <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000adc:	4b3d      	ldr	r3, [pc, #244]	@ (8000bd4 <SystemInit+0x118>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f023 030f 	bic.w	r3, r3, #15
 8000ae4:	4a3b      	ldr	r2, [pc, #236]	@ (8000bd4 <SystemInit+0x118>)
 8000ae6:	f043 0307 	orr.w	r3, r3, #7
 8000aea:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aec:	4b3a      	ldr	r3, [pc, #232]	@ (8000bd8 <SystemInit+0x11c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a39      	ldr	r2, [pc, #228]	@ (8000bd8 <SystemInit+0x11c>)
 8000af2:	f043 0301 	orr.w	r3, r3, #1
 8000af6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000af8:	4b37      	ldr	r3, [pc, #220]	@ (8000bd8 <SystemInit+0x11c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000afe:	4b36      	ldr	r3, [pc, #216]	@ (8000bd8 <SystemInit+0x11c>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	4935      	ldr	r1, [pc, #212]	@ (8000bd8 <SystemInit+0x11c>)
 8000b04:	4b35      	ldr	r3, [pc, #212]	@ (8000bdc <SystemInit+0x120>)
 8000b06:	4013      	ands	r3, r2
 8000b08:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b0a:	4b32      	ldr	r3, [pc, #200]	@ (8000bd4 <SystemInit+0x118>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f003 0308 	and.w	r3, r3, #8
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d007      	beq.n	8000b26 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b16:	4b2f      	ldr	r3, [pc, #188]	@ (8000bd4 <SystemInit+0x118>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f023 030f 	bic.w	r3, r3, #15
 8000b1e:	4a2d      	ldr	r2, [pc, #180]	@ (8000bd4 <SystemInit+0x118>)
 8000b20:	f043 0307 	orr.w	r3, r3, #7
 8000b24:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	@ (8000bd8 <SystemInit+0x11c>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000bd8 <SystemInit+0x11c>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b32:	4b29      	ldr	r3, [pc, #164]	@ (8000bd8 <SystemInit+0x11c>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <SystemInit+0x11c>)
 8000b3a:	4a29      	ldr	r2, [pc, #164]	@ (8000be0 <SystemInit+0x124>)
 8000b3c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b3e:	4b26      	ldr	r3, [pc, #152]	@ (8000bd8 <SystemInit+0x11c>)
 8000b40:	4a28      	ldr	r2, [pc, #160]	@ (8000be4 <SystemInit+0x128>)
 8000b42:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000b44:	4b24      	ldr	r3, [pc, #144]	@ (8000bd8 <SystemInit+0x11c>)
 8000b46:	4a28      	ldr	r2, [pc, #160]	@ (8000be8 <SystemInit+0x12c>)
 8000b48:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b4a:	4b23      	ldr	r3, [pc, #140]	@ (8000bd8 <SystemInit+0x11c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b50:	4b21      	ldr	r3, [pc, #132]	@ (8000bd8 <SystemInit+0x11c>)
 8000b52:	4a25      	ldr	r2, [pc, #148]	@ (8000be8 <SystemInit+0x12c>)
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b56:	4b20      	ldr	r3, [pc, #128]	@ (8000bd8 <SystemInit+0x11c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000bd8 <SystemInit+0x11c>)
 8000b5e:	4a22      	ldr	r2, [pc, #136]	@ (8000be8 <SystemInit+0x12c>)
 8000b60:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b62:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd8 <SystemInit+0x11c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b68:	4b1b      	ldr	r3, [pc, #108]	@ (8000bd8 <SystemInit+0x11c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a1a      	ldr	r2, [pc, #104]	@ (8000bd8 <SystemInit+0x11c>)
 8000b6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b72:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b74:	4b18      	ldr	r3, [pc, #96]	@ (8000bd8 <SystemInit+0x11c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <SystemInit+0x130>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bf0 <SystemInit+0x134>)
 8000b80:	4013      	ands	r3, r2
 8000b82:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b86:	d202      	bcs.n	8000b8e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b88:	4b1a      	ldr	r3, [pc, #104]	@ (8000bf4 <SystemInit+0x138>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b8e:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <SystemInit+0x11c>)
 8000b90:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b94:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d113      	bne.n	8000bc4 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <SystemInit+0x11c>)
 8000b9e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ba2:	4a0d      	ldr	r2, [pc, #52]	@ (8000bd8 <SystemInit+0x11c>)
 8000ba4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ba8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <SystemInit+0x13c>)
 8000bae:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000bb2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	@ (8000bd8 <SystemInit+0x11c>)
 8000bb6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000bba:	4a07      	ldr	r2, [pc, #28]	@ (8000bd8 <SystemInit+0x11c>)
 8000bbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000bc0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	52002000 	.word	0x52002000
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	eaf6ed7f 	.word	0xeaf6ed7f
 8000be0:	02020200 	.word	0x02020200
 8000be4:	01ff0000 	.word	0x01ff0000
 8000be8:	01010280 	.word	0x01010280
 8000bec:	5c001000 	.word	0x5c001000
 8000bf0:	ffff0000 	.word	0xffff0000
 8000bf4:	51008108 	.word	0x51008108
 8000bf8:	52004000 	.word	0x52004000

08000bfc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000c00:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <ExitRun0Mode+0x2c>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <ExitRun0Mode+0x2c>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000c0c:	bf00      	nop
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <ExitRun0Mode+0x2c>)
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f9      	beq.n	8000c0e <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000c1a:	bf00      	nop
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	58024800 	.word	0x58024800

08000c2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c30:	4b22      	ldr	r3, [pc, #136]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c32:	4a23      	ldr	r2, [pc, #140]	@ (8000cc0 <MX_USART1_UART_Init+0x94>)
 8000c34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c36:	4b21      	ldr	r3, [pc, #132]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c38:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c3e:	4b1f      	ldr	r3, [pc, #124]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c44:	4b1d      	ldr	r3, [pc, #116]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c50:	4b1a      	ldr	r3, [pc, #104]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c52:	220c      	movs	r2, #12
 8000c54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c56:	4b19      	ldr	r3, [pc, #100]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c5c:	4b17      	ldr	r3, [pc, #92]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c62:	4b16      	ldr	r3, [pc, #88]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c68:	4b14      	ldr	r3, [pc, #80]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c6e:	4b13      	ldr	r3, [pc, #76]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c74:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c76:	f004 f863 	bl	8004d40 <HAL_UART_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c80:	f7ff fe80 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c84:	2100      	movs	r1, #0
 8000c86:	480d      	ldr	r0, [pc, #52]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c88:	f006 fbd9 	bl	800743e <HAL_UARTEx_SetTxFifoThreshold>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c92:	f7ff fe77 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c96:	2100      	movs	r1, #0
 8000c98:	4808      	ldr	r0, [pc, #32]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000c9a:	f006 fc0e 	bl	80074ba <HAL_UARTEx_SetRxFifoThreshold>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ca4:	f7ff fe6e 	bl	8000984 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ca8:	4804      	ldr	r0, [pc, #16]	@ (8000cbc <MX_USART1_UART_Init+0x90>)
 8000caa:	f006 fb8f 	bl	80073cc <HAL_UARTEx_DisableFifoMode>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000cb4:	f7ff fe66 	bl	8000984 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cb8:	bf00      	nop
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	24000074 	.word	0x24000074
 8000cc0:	40011000 	.word	0x40011000

08000cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ccc:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
 8000cd4:	605a      	str	r2, [r3, #4]
 8000cd6:	609a      	str	r2, [r3, #8]
 8000cd8:	60da      	str	r2, [r3, #12]
 8000cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cdc:	f107 0310 	add.w	r3, r7, #16
 8000ce0:	22c0      	movs	r2, #192	@ 0xc0
 8000ce2:	2100      	movs	r1, #0
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f006 fc75 	bl	80075d4 <memset>
  if(uartHandle->Instance==USART1)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a2b      	ldr	r2, [pc, #172]	@ (8000d9c <HAL_UART_MspInit+0xd8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d14e      	bne.n	8000d92 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf4:	f04f 0201 	mov.w	r2, #1
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d06:	f107 0310 	add.w	r3, r7, #16
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f002 f9ec 	bl	80030e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d16:	f7ff fe35 	bl	8000984 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	4b21      	ldr	r3, [pc, #132]	@ (8000da0 <HAL_UART_MspInit+0xdc>)
 8000d1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d20:	4a1f      	ldr	r2, [pc, #124]	@ (8000da0 <HAL_UART_MspInit+0xdc>)
 8000d22:	f043 0310 	orr.w	r3, r3, #16
 8000d26:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000d2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000da0 <HAL_UART_MspInit+0xdc>)
 8000d2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d38:	4b19      	ldr	r3, [pc, #100]	@ (8000da0 <HAL_UART_MspInit+0xdc>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	4a18      	ldr	r2, [pc, #96]	@ (8000da0 <HAL_UART_MspInit+0xdc>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d48:	4b15      	ldr	r3, [pc, #84]	@ (8000da0 <HAL_UART_MspInit+0xdc>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4e:	f003 0301 	and.w	r3, r3, #1
 8000d52:	60bb      	str	r3, [r7, #8]
 8000d54:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d6a:	2302      	movs	r3, #2
 8000d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d70:	2307      	movs	r3, #7
 8000d72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4809      	ldr	r0, [pc, #36]	@ (8000da4 <HAL_UART_MspInit+0xe0>)
 8000d7e:	f000 ffc9 	bl	8001d14 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2025      	movs	r0, #37	@ 0x25
 8000d88:	f000 f9b3 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d8c:	2025      	movs	r0, #37	@ 0x25
 8000d8e:	f000 f9ca 	bl	8001126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d92:	bf00      	nop
 8000d94:	37e8      	adds	r7, #232	@ 0xe8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40011000 	.word	0x40011000
 8000da0:	58024400 	.word	0x58024400
 8000da4:	58020000 	.word	0x58020000

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000da8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000de4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000dac:	f7ff ff26 	bl	8000bfc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000db0:	f7ff fe84 	bl	8000abc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db4:	480c      	ldr	r0, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db6:	490d      	ldr	r1, [pc, #52]	@ (8000dec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db8:	4a0d      	ldr	r2, [pc, #52]	@ (8000df0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dbc:	e002      	b.n	8000dc4 <LoopCopyDataInit>

08000dbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dc2:	3304      	adds	r3, #4

08000dc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc8:	d3f9      	bcc.n	8000dbe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dcc:	4c0a      	ldr	r4, [pc, #40]	@ (8000df8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd0:	e001      	b.n	8000dd6 <LoopFillZerobss>

08000dd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd4:	3204      	adds	r2, #4

08000dd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd8:	d3fb      	bcc.n	8000dd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dda:	f006 fc03 	bl	80075e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dde:	f7ff fce3 	bl	80007a8 <main>
  bx  lr
 8000de2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000de4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000de8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000dec:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000df0:	0800768c 	.word	0x0800768c
  ldr r2, =_sbss
 8000df4:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000df8:	2400010c 	.word	0x2400010c

08000dfc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000dfc:	e7fe      	b.n	8000dfc <ADC3_IRQHandler>
	...

08000e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e06:	2003      	movs	r0, #3
 8000e08:	f000 f968 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000e0c:	f001 ff96 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8000e10:	4602      	mov	r2, r0
 8000e12:	4b15      	ldr	r3, [pc, #84]	@ (8000e68 <HAL_Init+0x68>)
 8000e14:	699b      	ldr	r3, [r3, #24]
 8000e16:	0a1b      	lsrs	r3, r3, #8
 8000e18:	f003 030f 	and.w	r3, r3, #15
 8000e1c:	4913      	ldr	r1, [pc, #76]	@ (8000e6c <HAL_Init+0x6c>)
 8000e1e:	5ccb      	ldrb	r3, [r1, r3]
 8000e20:	f003 031f 	and.w	r3, r3, #31
 8000e24:	fa22 f303 	lsr.w	r3, r2, r3
 8000e28:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e68 <HAL_Init+0x68>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	f003 030f 	and.w	r3, r3, #15
 8000e32:	4a0e      	ldr	r2, [pc, #56]	@ (8000e6c <HAL_Init+0x6c>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	f003 031f 	and.w	r3, r3, #31
 8000e3a:	687a      	ldr	r2, [r7, #4]
 8000e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e40:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_Init+0x70>)
 8000e42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <HAL_Init+0x74>)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4a:	200f      	movs	r0, #15
 8000e4c:	f000 f814 	bl	8000e78 <HAL_InitTick>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e002      	b.n	8000e60 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000e5a:	f7ff fd99 	bl	8000990 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	58024400 	.word	0x58024400
 8000e6c:	08007644 	.word	0x08007644
 8000e70:	24000004 	.word	0x24000004
 8000e74:	24000000 	.word	0x24000000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000e80:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <HAL_InitTick+0x60>)
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d101      	bne.n	8000e8c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	e021      	b.n	8000ed0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <HAL_InitTick+0x64>)
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	4b11      	ldr	r3, [pc, #68]	@ (8000ed8 <HAL_InitTick+0x60>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	4619      	mov	r1, r3
 8000e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f000 f94d 	bl	8001142 <HAL_SYSTICK_Config>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e00e      	b.n	8000ed0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d80a      	bhi.n	8000ece <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec0:	f000 f917 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	@ (8000ee0 <HAL_InitTick+0x68>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	e000      	b.n	8000ed0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	2400000c 	.word	0x2400000c
 8000edc:	24000000 	.word	0x24000000
 8000ee0:	24000008 	.word	0x24000008

08000ee4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_IncTick+0x20>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	461a      	mov	r2, r3
 8000eee:	4b06      	ldr	r3, [pc, #24]	@ (8000f08 <HAL_IncTick+0x24>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4413      	add	r3, r2
 8000ef4:	4a04      	ldr	r2, [pc, #16]	@ (8000f08 <HAL_IncTick+0x24>)
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	2400000c 	.word	0x2400000c
 8000f08:	24000108 	.word	0x24000108

08000f0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <HAL_GetTick+0x14>)
 8000f12:	681b      	ldr	r3, [r3, #0]
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	24000108 	.word	0x24000108

08000f24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000f28:	4b03      	ldr	r3, [pc, #12]	@ (8000f38 <HAL_GetREVID+0x14>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	0c1b      	lsrs	r3, r3, #16
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	5c001000 	.word	0x5c001000

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f64:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	4313      	orrs	r3, r2
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x40>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00
 8000f80:	05fa0000 	.word	0x05fa0000

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff40 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff90 	bl	8001030 <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5f 	bl	8000fdc <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff33 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa4 	bl	8001098 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001160:	f3bf 8f5f 	dmb	sy
}
 8001164:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <HAL_MPU_Disable+0x28>)
 8001168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800116a:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <HAL_MPU_Disable+0x28>)
 800116c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001170:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <HAL_MPU_Disable+0x2c>)
 8001174:	2200      	movs	r2, #0
 8001176:	605a      	str	r2, [r3, #4]
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000ed00 	.word	0xe000ed00
 8001188:	e000ed90 	.word	0xe000ed90

0800118c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001194:	4a0b      	ldr	r2, [pc, #44]	@ (80011c4 <HAL_MPU_Enable+0x38>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800119e:	4b0a      	ldr	r3, [pc, #40]	@ (80011c8 <HAL_MPU_Enable+0x3c>)
 80011a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011a2:	4a09      	ldr	r2, [pc, #36]	@ (80011c8 <HAL_MPU_Enable+0x3c>)
 80011a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011a8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80011aa:	f3bf 8f4f 	dsb	sy
}
 80011ae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b0:	f3bf 8f6f 	isb	sy
}
 80011b4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed90 	.word	0xe000ed90
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	785a      	ldrb	r2, [r3, #1]
 80011d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001248 <HAL_MPU_ConfigRegion+0x7c>)
 80011da:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80011dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001248 <HAL_MPU_ConfigRegion+0x7c>)
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	4a19      	ldr	r2, [pc, #100]	@ (8001248 <HAL_MPU_ConfigRegion+0x7c>)
 80011e2:	f023 0301 	bic.w	r3, r3, #1
 80011e6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80011e8:	4a17      	ldr	r2, [pc, #92]	@ (8001248 <HAL_MPU_ConfigRegion+0x7c>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	7b1b      	ldrb	r3, [r3, #12]
 80011f4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	7adb      	ldrb	r3, [r3, #11]
 80011fa:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80011fc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7a9b      	ldrb	r3, [r3, #10]
 8001202:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001204:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	7b5b      	ldrb	r3, [r3, #13]
 800120a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800120c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	7b9b      	ldrb	r3, [r3, #14]
 8001212:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001214:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	7bdb      	ldrb	r3, [r3, #15]
 800121a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800121c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	7a5b      	ldrb	r3, [r3, #9]
 8001222:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001224:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	7a1b      	ldrb	r3, [r3, #8]
 800122a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800122c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800122e:	687a      	ldr	r2, [r7, #4]
 8001230:	7812      	ldrb	r2, [r2, #0]
 8001232:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001236:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001238:	6113      	str	r3, [r2, #16]
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed90 	.word	0xe000ed90

0800124c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff fe5a 	bl	8000f0c <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e2dc      	b.n	800181e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b02      	cmp	r3, #2
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e2cd      	b.n	800181e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a76      	ldr	r2, [pc, #472]	@ (8001460 <HAL_DMA_Abort+0x214>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d04a      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a74      	ldr	r2, [pc, #464]	@ (8001464 <HAL_DMA_Abort+0x218>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d045      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a73      	ldr	r2, [pc, #460]	@ (8001468 <HAL_DMA_Abort+0x21c>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d040      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a71      	ldr	r2, [pc, #452]	@ (800146c <HAL_DMA_Abort+0x220>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d03b      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a70      	ldr	r2, [pc, #448]	@ (8001470 <HAL_DMA_Abort+0x224>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d036      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a6e      	ldr	r2, [pc, #440]	@ (8001474 <HAL_DMA_Abort+0x228>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d031      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a6d      	ldr	r2, [pc, #436]	@ (8001478 <HAL_DMA_Abort+0x22c>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d02c      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a6b      	ldr	r2, [pc, #428]	@ (800147c <HAL_DMA_Abort+0x230>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d027      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a6a      	ldr	r2, [pc, #424]	@ (8001480 <HAL_DMA_Abort+0x234>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d022      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	@ (8001484 <HAL_DMA_Abort+0x238>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d01d      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a67      	ldr	r2, [pc, #412]	@ (8001488 <HAL_DMA_Abort+0x23c>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d018      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a65      	ldr	r2, [pc, #404]	@ (800148c <HAL_DMA_Abort+0x240>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a64      	ldr	r2, [pc, #400]	@ (8001490 <HAL_DMA_Abort+0x244>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d00e      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a62      	ldr	r2, [pc, #392]	@ (8001494 <HAL_DMA_Abort+0x248>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d009      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a61      	ldr	r2, [pc, #388]	@ (8001498 <HAL_DMA_Abort+0x24c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d004      	beq.n	8001322 <HAL_DMA_Abort+0xd6>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a5f      	ldr	r2, [pc, #380]	@ (800149c <HAL_DMA_Abort+0x250>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d101      	bne.n	8001326 <HAL_DMA_Abort+0xda>
 8001322:	2301      	movs	r3, #1
 8001324:	e000      	b.n	8001328 <HAL_DMA_Abort+0xdc>
 8001326:	2300      	movs	r3, #0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d013      	beq.n	8001354 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 021e 	bic.w	r2, r2, #30
 800133a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	695a      	ldr	r2, [r3, #20]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800134a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e00a      	b.n	800136a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f022 020e 	bic.w	r2, r2, #14
 8001362:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a3c      	ldr	r2, [pc, #240]	@ (8001460 <HAL_DMA_Abort+0x214>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d072      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a3a      	ldr	r2, [pc, #232]	@ (8001464 <HAL_DMA_Abort+0x218>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d06d      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a39      	ldr	r2, [pc, #228]	@ (8001468 <HAL_DMA_Abort+0x21c>)
 8001384:	4293      	cmp	r3, r2
 8001386:	d068      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a37      	ldr	r2, [pc, #220]	@ (800146c <HAL_DMA_Abort+0x220>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d063      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a36      	ldr	r2, [pc, #216]	@ (8001470 <HAL_DMA_Abort+0x224>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d05e      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a34      	ldr	r2, [pc, #208]	@ (8001474 <HAL_DMA_Abort+0x228>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d059      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a33      	ldr	r2, [pc, #204]	@ (8001478 <HAL_DMA_Abort+0x22c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d054      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a31      	ldr	r2, [pc, #196]	@ (800147c <HAL_DMA_Abort+0x230>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d04f      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a30      	ldr	r2, [pc, #192]	@ (8001480 <HAL_DMA_Abort+0x234>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d04a      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a2e      	ldr	r2, [pc, #184]	@ (8001484 <HAL_DMA_Abort+0x238>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d045      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001488 <HAL_DMA_Abort+0x23c>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d040      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a2b      	ldr	r2, [pc, #172]	@ (800148c <HAL_DMA_Abort+0x240>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d03b      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001490 <HAL_DMA_Abort+0x244>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d036      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a28      	ldr	r2, [pc, #160]	@ (8001494 <HAL_DMA_Abort+0x248>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d031      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a27      	ldr	r2, [pc, #156]	@ (8001498 <HAL_DMA_Abort+0x24c>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d02c      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a25      	ldr	r2, [pc, #148]	@ (800149c <HAL_DMA_Abort+0x250>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d027      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4a24      	ldr	r2, [pc, #144]	@ (80014a0 <HAL_DMA_Abort+0x254>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d022      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a22      	ldr	r2, [pc, #136]	@ (80014a4 <HAL_DMA_Abort+0x258>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01d      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a21      	ldr	r2, [pc, #132]	@ (80014a8 <HAL_DMA_Abort+0x25c>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d018      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ac <HAL_DMA_Abort+0x260>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a1e      	ldr	r2, [pc, #120]	@ (80014b0 <HAL_DMA_Abort+0x264>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d00e      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a1c      	ldr	r2, [pc, #112]	@ (80014b4 <HAL_DMA_Abort+0x268>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d009      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a1b      	ldr	r2, [pc, #108]	@ (80014b8 <HAL_DMA_Abort+0x26c>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d004      	beq.n	800145a <HAL_DMA_Abort+0x20e>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a19      	ldr	r2, [pc, #100]	@ (80014bc <HAL_DMA_Abort+0x270>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d132      	bne.n	80014c0 <HAL_DMA_Abort+0x274>
 800145a:	2301      	movs	r3, #1
 800145c:	e031      	b.n	80014c2 <HAL_DMA_Abort+0x276>
 800145e:	bf00      	nop
 8001460:	40020010 	.word	0x40020010
 8001464:	40020028 	.word	0x40020028
 8001468:	40020040 	.word	0x40020040
 800146c:	40020058 	.word	0x40020058
 8001470:	40020070 	.word	0x40020070
 8001474:	40020088 	.word	0x40020088
 8001478:	400200a0 	.word	0x400200a0
 800147c:	400200b8 	.word	0x400200b8
 8001480:	40020410 	.word	0x40020410
 8001484:	40020428 	.word	0x40020428
 8001488:	40020440 	.word	0x40020440
 800148c:	40020458 	.word	0x40020458
 8001490:	40020470 	.word	0x40020470
 8001494:	40020488 	.word	0x40020488
 8001498:	400204a0 	.word	0x400204a0
 800149c:	400204b8 	.word	0x400204b8
 80014a0:	58025408 	.word	0x58025408
 80014a4:	5802541c 	.word	0x5802541c
 80014a8:	58025430 	.word	0x58025430
 80014ac:	58025444 	.word	0x58025444
 80014b0:	58025458 	.word	0x58025458
 80014b4:	5802546c 	.word	0x5802546c
 80014b8:	58025480 	.word	0x58025480
 80014bc:	58025494 	.word	0x58025494
 80014c0:	2300      	movs	r3, #0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80014d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a6d      	ldr	r2, [pc, #436]	@ (8001690 <HAL_DMA_Abort+0x444>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d04a      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a6b      	ldr	r2, [pc, #428]	@ (8001694 <HAL_DMA_Abort+0x448>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d045      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6a      	ldr	r2, [pc, #424]	@ (8001698 <HAL_DMA_Abort+0x44c>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d040      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a68      	ldr	r2, [pc, #416]	@ (800169c <HAL_DMA_Abort+0x450>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d03b      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a67      	ldr	r2, [pc, #412]	@ (80016a0 <HAL_DMA_Abort+0x454>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d036      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a65      	ldr	r2, [pc, #404]	@ (80016a4 <HAL_DMA_Abort+0x458>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d031      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a64      	ldr	r2, [pc, #400]	@ (80016a8 <HAL_DMA_Abort+0x45c>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d02c      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a62      	ldr	r2, [pc, #392]	@ (80016ac <HAL_DMA_Abort+0x460>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d027      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a61      	ldr	r2, [pc, #388]	@ (80016b0 <HAL_DMA_Abort+0x464>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d022      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a5f      	ldr	r2, [pc, #380]	@ (80016b4 <HAL_DMA_Abort+0x468>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d01d      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a5e      	ldr	r2, [pc, #376]	@ (80016b8 <HAL_DMA_Abort+0x46c>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d018      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a5c      	ldr	r2, [pc, #368]	@ (80016bc <HAL_DMA_Abort+0x470>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d013      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a5b      	ldr	r2, [pc, #364]	@ (80016c0 <HAL_DMA_Abort+0x474>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d00e      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a59      	ldr	r2, [pc, #356]	@ (80016c4 <HAL_DMA_Abort+0x478>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d009      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a58      	ldr	r2, [pc, #352]	@ (80016c8 <HAL_DMA_Abort+0x47c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d004      	beq.n	8001576 <HAL_DMA_Abort+0x32a>
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a56      	ldr	r2, [pc, #344]	@ (80016cc <HAL_DMA_Abort+0x480>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d108      	bne.n	8001588 <HAL_DMA_Abort+0x33c>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f022 0201 	bic.w	r2, r2, #1
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	e007      	b.n	8001598 <HAL_DMA_Abort+0x34c>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f022 0201 	bic.w	r2, r2, #1
 8001596:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001598:	e013      	b.n	80015c2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800159a:	f7ff fcb7 	bl	8000f0c <HAL_GetTick>
 800159e:	4602      	mov	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b05      	cmp	r3, #5
 80015a6:	d90c      	bls.n	80015c2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2220      	movs	r2, #32
 80015ac:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2203      	movs	r2, #3
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e12d      	b.n	800181e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1e5      	bne.n	800159a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a2f      	ldr	r2, [pc, #188]	@ (8001690 <HAL_DMA_Abort+0x444>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d04a      	beq.n	800166e <HAL_DMA_Abort+0x422>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a2d      	ldr	r2, [pc, #180]	@ (8001694 <HAL_DMA_Abort+0x448>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d045      	beq.n	800166e <HAL_DMA_Abort+0x422>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a2c      	ldr	r2, [pc, #176]	@ (8001698 <HAL_DMA_Abort+0x44c>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d040      	beq.n	800166e <HAL_DMA_Abort+0x422>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a2a      	ldr	r2, [pc, #168]	@ (800169c <HAL_DMA_Abort+0x450>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d03b      	beq.n	800166e <HAL_DMA_Abort+0x422>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a29      	ldr	r2, [pc, #164]	@ (80016a0 <HAL_DMA_Abort+0x454>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d036      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a27      	ldr	r2, [pc, #156]	@ (80016a4 <HAL_DMA_Abort+0x458>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d031      	beq.n	800166e <HAL_DMA_Abort+0x422>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a26      	ldr	r2, [pc, #152]	@ (80016a8 <HAL_DMA_Abort+0x45c>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d02c      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a24      	ldr	r2, [pc, #144]	@ (80016ac <HAL_DMA_Abort+0x460>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d027      	beq.n	800166e <HAL_DMA_Abort+0x422>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a23      	ldr	r2, [pc, #140]	@ (80016b0 <HAL_DMA_Abort+0x464>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d022      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a21      	ldr	r2, [pc, #132]	@ (80016b4 <HAL_DMA_Abort+0x468>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d01d      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a20      	ldr	r2, [pc, #128]	@ (80016b8 <HAL_DMA_Abort+0x46c>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d018      	beq.n	800166e <HAL_DMA_Abort+0x422>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1e      	ldr	r2, [pc, #120]	@ (80016bc <HAL_DMA_Abort+0x470>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a1d      	ldr	r2, [pc, #116]	@ (80016c0 <HAL_DMA_Abort+0x474>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d00e      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a1b      	ldr	r2, [pc, #108]	@ (80016c4 <HAL_DMA_Abort+0x478>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d009      	beq.n	800166e <HAL_DMA_Abort+0x422>
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a1a      	ldr	r2, [pc, #104]	@ (80016c8 <HAL_DMA_Abort+0x47c>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d004      	beq.n	800166e <HAL_DMA_Abort+0x422>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a18      	ldr	r2, [pc, #96]	@ (80016cc <HAL_DMA_Abort+0x480>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Abort+0x426>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_DMA_Abort+0x428>
 8001672:	2300      	movs	r3, #0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d02b      	beq.n	80016d0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800167c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001682:	f003 031f 	and.w	r3, r3, #31
 8001686:	223f      	movs	r2, #63	@ 0x3f
 8001688:	409a      	lsls	r2, r3
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	e02a      	b.n	80016e6 <HAL_DMA_Abort+0x49a>
 8001690:	40020010 	.word	0x40020010
 8001694:	40020028 	.word	0x40020028
 8001698:	40020040 	.word	0x40020040
 800169c:	40020058 	.word	0x40020058
 80016a0:	40020070 	.word	0x40020070
 80016a4:	40020088 	.word	0x40020088
 80016a8:	400200a0 	.word	0x400200a0
 80016ac:	400200b8 	.word	0x400200b8
 80016b0:	40020410 	.word	0x40020410
 80016b4:	40020428 	.word	0x40020428
 80016b8:	40020440 	.word	0x40020440
 80016bc:	40020458 	.word	0x40020458
 80016c0:	40020470 	.word	0x40020470
 80016c4:	40020488 	.word	0x40020488
 80016c8:	400204a0 	.word	0x400204a0
 80016cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016da:	f003 031f 	and.w	r3, r3, #31
 80016de:	2201      	movs	r2, #1
 80016e0:	409a      	lsls	r2, r3
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a4f      	ldr	r2, [pc, #316]	@ (8001828 <HAL_DMA_Abort+0x5dc>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d072      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a4d      	ldr	r2, [pc, #308]	@ (800182c <HAL_DMA_Abort+0x5e0>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d06d      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a4c      	ldr	r2, [pc, #304]	@ (8001830 <HAL_DMA_Abort+0x5e4>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d068      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a4a      	ldr	r2, [pc, #296]	@ (8001834 <HAL_DMA_Abort+0x5e8>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d063      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a49      	ldr	r2, [pc, #292]	@ (8001838 <HAL_DMA_Abort+0x5ec>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d05e      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a47      	ldr	r2, [pc, #284]	@ (800183c <HAL_DMA_Abort+0x5f0>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d059      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a46      	ldr	r2, [pc, #280]	@ (8001840 <HAL_DMA_Abort+0x5f4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d054      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a44      	ldr	r2, [pc, #272]	@ (8001844 <HAL_DMA_Abort+0x5f8>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d04f      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a43      	ldr	r2, [pc, #268]	@ (8001848 <HAL_DMA_Abort+0x5fc>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d04a      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a41      	ldr	r2, [pc, #260]	@ (800184c <HAL_DMA_Abort+0x600>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d045      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a40      	ldr	r2, [pc, #256]	@ (8001850 <HAL_DMA_Abort+0x604>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d040      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a3e      	ldr	r2, [pc, #248]	@ (8001854 <HAL_DMA_Abort+0x608>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d03b      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a3d      	ldr	r2, [pc, #244]	@ (8001858 <HAL_DMA_Abort+0x60c>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d036      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a3b      	ldr	r2, [pc, #236]	@ (800185c <HAL_DMA_Abort+0x610>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d031      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a3a      	ldr	r2, [pc, #232]	@ (8001860 <HAL_DMA_Abort+0x614>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d02c      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a38      	ldr	r2, [pc, #224]	@ (8001864 <HAL_DMA_Abort+0x618>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d027      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a37      	ldr	r2, [pc, #220]	@ (8001868 <HAL_DMA_Abort+0x61c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d022      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a35      	ldr	r2, [pc, #212]	@ (800186c <HAL_DMA_Abort+0x620>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d01d      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a34      	ldr	r2, [pc, #208]	@ (8001870 <HAL_DMA_Abort+0x624>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d018      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a32      	ldr	r2, [pc, #200]	@ (8001874 <HAL_DMA_Abort+0x628>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d013      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a31      	ldr	r2, [pc, #196]	@ (8001878 <HAL_DMA_Abort+0x62c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d00e      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a2f      	ldr	r2, [pc, #188]	@ (800187c <HAL_DMA_Abort+0x630>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d009      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4a2e      	ldr	r2, [pc, #184]	@ (8001880 <HAL_DMA_Abort+0x634>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d004      	beq.n	80017d6 <HAL_DMA_Abort+0x58a>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a2c      	ldr	r2, [pc, #176]	@ (8001884 <HAL_DMA_Abort+0x638>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d101      	bne.n	80017da <HAL_DMA_Abort+0x58e>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_DMA_Abort+0x590>
 80017da:	2300      	movs	r3, #0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d015      	beq.n	800180c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80017e8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d00c      	beq.n	800180c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80017fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001800:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800180a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40020010 	.word	0x40020010
 800182c:	40020028 	.word	0x40020028
 8001830:	40020040 	.word	0x40020040
 8001834:	40020058 	.word	0x40020058
 8001838:	40020070 	.word	0x40020070
 800183c:	40020088 	.word	0x40020088
 8001840:	400200a0 	.word	0x400200a0
 8001844:	400200b8 	.word	0x400200b8
 8001848:	40020410 	.word	0x40020410
 800184c:	40020428 	.word	0x40020428
 8001850:	40020440 	.word	0x40020440
 8001854:	40020458 	.word	0x40020458
 8001858:	40020470 	.word	0x40020470
 800185c:	40020488 	.word	0x40020488
 8001860:	400204a0 	.word	0x400204a0
 8001864:	400204b8 	.word	0x400204b8
 8001868:	58025408 	.word	0x58025408
 800186c:	5802541c 	.word	0x5802541c
 8001870:	58025430 	.word	0x58025430
 8001874:	58025444 	.word	0x58025444
 8001878:	58025458 	.word	0x58025458
 800187c:	5802546c 	.word	0x5802546c
 8001880:	58025480 	.word	0x58025480
 8001884:	58025494 	.word	0x58025494

08001888 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e237      	b.n	8001d0a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d004      	beq.n	80018b0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2280      	movs	r2, #128	@ 0x80
 80018aa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e22c      	b.n	8001d0a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a5c      	ldr	r2, [pc, #368]	@ (8001a28 <HAL_DMA_Abort_IT+0x1a0>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d04a      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a5b      	ldr	r2, [pc, #364]	@ (8001a2c <HAL_DMA_Abort_IT+0x1a4>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d045      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a59      	ldr	r2, [pc, #356]	@ (8001a30 <HAL_DMA_Abort_IT+0x1a8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d040      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a58      	ldr	r2, [pc, #352]	@ (8001a34 <HAL_DMA_Abort_IT+0x1ac>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d03b      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a56      	ldr	r2, [pc, #344]	@ (8001a38 <HAL_DMA_Abort_IT+0x1b0>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d036      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a55      	ldr	r2, [pc, #340]	@ (8001a3c <HAL_DMA_Abort_IT+0x1b4>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d031      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a53      	ldr	r2, [pc, #332]	@ (8001a40 <HAL_DMA_Abort_IT+0x1b8>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d02c      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a52      	ldr	r2, [pc, #328]	@ (8001a44 <HAL_DMA_Abort_IT+0x1bc>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d027      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a50      	ldr	r2, [pc, #320]	@ (8001a48 <HAL_DMA_Abort_IT+0x1c0>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d022      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a4f      	ldr	r2, [pc, #316]	@ (8001a4c <HAL_DMA_Abort_IT+0x1c4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d01d      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a4d      	ldr	r2, [pc, #308]	@ (8001a50 <HAL_DMA_Abort_IT+0x1c8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d018      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a4c      	ldr	r2, [pc, #304]	@ (8001a54 <HAL_DMA_Abort_IT+0x1cc>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a4a      	ldr	r2, [pc, #296]	@ (8001a58 <HAL_DMA_Abort_IT+0x1d0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d00e      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a49      	ldr	r2, [pc, #292]	@ (8001a5c <HAL_DMA_Abort_IT+0x1d4>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d009      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a47      	ldr	r2, [pc, #284]	@ (8001a60 <HAL_DMA_Abort_IT+0x1d8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d004      	beq.n	8001950 <HAL_DMA_Abort_IT+0xc8>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a46      	ldr	r2, [pc, #280]	@ (8001a64 <HAL_DMA_Abort_IT+0x1dc>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d101      	bne.n	8001954 <HAL_DMA_Abort_IT+0xcc>
 8001950:	2301      	movs	r3, #1
 8001952:	e000      	b.n	8001956 <HAL_DMA_Abort_IT+0xce>
 8001954:	2300      	movs	r3, #0
 8001956:	2b00      	cmp	r3, #0
 8001958:	f000 8086 	beq.w	8001a68 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2204      	movs	r2, #4
 8001960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a2f      	ldr	r2, [pc, #188]	@ (8001a28 <HAL_DMA_Abort_IT+0x1a0>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d04a      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a2e      	ldr	r2, [pc, #184]	@ (8001a2c <HAL_DMA_Abort_IT+0x1a4>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d045      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a2c      	ldr	r2, [pc, #176]	@ (8001a30 <HAL_DMA_Abort_IT+0x1a8>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d040      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a2b      	ldr	r2, [pc, #172]	@ (8001a34 <HAL_DMA_Abort_IT+0x1ac>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d03b      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a29      	ldr	r2, [pc, #164]	@ (8001a38 <HAL_DMA_Abort_IT+0x1b0>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d036      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a28      	ldr	r2, [pc, #160]	@ (8001a3c <HAL_DMA_Abort_IT+0x1b4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d031      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a26      	ldr	r2, [pc, #152]	@ (8001a40 <HAL_DMA_Abort_IT+0x1b8>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d02c      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a25      	ldr	r2, [pc, #148]	@ (8001a44 <HAL_DMA_Abort_IT+0x1bc>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d027      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a23      	ldr	r2, [pc, #140]	@ (8001a48 <HAL_DMA_Abort_IT+0x1c0>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d022      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a22      	ldr	r2, [pc, #136]	@ (8001a4c <HAL_DMA_Abort_IT+0x1c4>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d01d      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a20      	ldr	r2, [pc, #128]	@ (8001a50 <HAL_DMA_Abort_IT+0x1c8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001a54 <HAL_DMA_Abort_IT+0x1cc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a58 <HAL_DMA_Abort_IT+0x1d0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00e      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1c      	ldr	r2, [pc, #112]	@ (8001a5c <HAL_DMA_Abort_IT+0x1d4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d009      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a1a      	ldr	r2, [pc, #104]	@ (8001a60 <HAL_DMA_Abort_IT+0x1d8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_DMA_Abort_IT+0x17c>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a19      	ldr	r2, [pc, #100]	@ (8001a64 <HAL_DMA_Abort_IT+0x1dc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d108      	bne.n	8001a16 <HAL_DMA_Abort_IT+0x18e>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e178      	b.n	8001d08 <HAL_DMA_Abort_IT+0x480>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0201 	bic.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	e16f      	b.n	8001d08 <HAL_DMA_Abort_IT+0x480>
 8001a28:	40020010 	.word	0x40020010
 8001a2c:	40020028 	.word	0x40020028
 8001a30:	40020040 	.word	0x40020040
 8001a34:	40020058 	.word	0x40020058
 8001a38:	40020070 	.word	0x40020070
 8001a3c:	40020088 	.word	0x40020088
 8001a40:	400200a0 	.word	0x400200a0
 8001a44:	400200b8 	.word	0x400200b8
 8001a48:	40020410 	.word	0x40020410
 8001a4c:	40020428 	.word	0x40020428
 8001a50:	40020440 	.word	0x40020440
 8001a54:	40020458 	.word	0x40020458
 8001a58:	40020470 	.word	0x40020470
 8001a5c:	40020488 	.word	0x40020488
 8001a60:	400204a0 	.word	0x400204a0
 8001a64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 020e 	bic.w	r2, r2, #14
 8001a76:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a6c      	ldr	r2, [pc, #432]	@ (8001c30 <HAL_DMA_Abort_IT+0x3a8>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d04a      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a6b      	ldr	r2, [pc, #428]	@ (8001c34 <HAL_DMA_Abort_IT+0x3ac>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d045      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a69      	ldr	r2, [pc, #420]	@ (8001c38 <HAL_DMA_Abort_IT+0x3b0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d040      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a68      	ldr	r2, [pc, #416]	@ (8001c3c <HAL_DMA_Abort_IT+0x3b4>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d03b      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a66      	ldr	r2, [pc, #408]	@ (8001c40 <HAL_DMA_Abort_IT+0x3b8>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d036      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a65      	ldr	r2, [pc, #404]	@ (8001c44 <HAL_DMA_Abort_IT+0x3bc>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d031      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a63      	ldr	r2, [pc, #396]	@ (8001c48 <HAL_DMA_Abort_IT+0x3c0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d02c      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a62      	ldr	r2, [pc, #392]	@ (8001c4c <HAL_DMA_Abort_IT+0x3c4>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d027      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a60      	ldr	r2, [pc, #384]	@ (8001c50 <HAL_DMA_Abort_IT+0x3c8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d022      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a5f      	ldr	r2, [pc, #380]	@ (8001c54 <HAL_DMA_Abort_IT+0x3cc>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d01d      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a5d      	ldr	r2, [pc, #372]	@ (8001c58 <HAL_DMA_Abort_IT+0x3d0>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d018      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5c      	ldr	r2, [pc, #368]	@ (8001c5c <HAL_DMA_Abort_IT+0x3d4>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d013      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a5a      	ldr	r2, [pc, #360]	@ (8001c60 <HAL_DMA_Abort_IT+0x3d8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00e      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a59      	ldr	r2, [pc, #356]	@ (8001c64 <HAL_DMA_Abort_IT+0x3dc>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d009      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a57      	ldr	r2, [pc, #348]	@ (8001c68 <HAL_DMA_Abort_IT+0x3e0>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d004      	beq.n	8001b18 <HAL_DMA_Abort_IT+0x290>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a56      	ldr	r2, [pc, #344]	@ (8001c6c <HAL_DMA_Abort_IT+0x3e4>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d108      	bne.n	8001b2a <HAL_DMA_Abort_IT+0x2a2>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f022 0201 	bic.w	r2, r2, #1
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	e007      	b.n	8001b3a <HAL_DMA_Abort_IT+0x2b2>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f022 0201 	bic.w	r2, r2, #1
 8001b38:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c30 <HAL_DMA_Abort_IT+0x3a8>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d072      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a3a      	ldr	r2, [pc, #232]	@ (8001c34 <HAL_DMA_Abort_IT+0x3ac>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d06d      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a39      	ldr	r2, [pc, #228]	@ (8001c38 <HAL_DMA_Abort_IT+0x3b0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d068      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a37      	ldr	r2, [pc, #220]	@ (8001c3c <HAL_DMA_Abort_IT+0x3b4>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d063      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a36      	ldr	r2, [pc, #216]	@ (8001c40 <HAL_DMA_Abort_IT+0x3b8>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d05e      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a34      	ldr	r2, [pc, #208]	@ (8001c44 <HAL_DMA_Abort_IT+0x3bc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d059      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a33      	ldr	r2, [pc, #204]	@ (8001c48 <HAL_DMA_Abort_IT+0x3c0>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d054      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a31      	ldr	r2, [pc, #196]	@ (8001c4c <HAL_DMA_Abort_IT+0x3c4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d04f      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a30      	ldr	r2, [pc, #192]	@ (8001c50 <HAL_DMA_Abort_IT+0x3c8>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d04a      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a2e      	ldr	r2, [pc, #184]	@ (8001c54 <HAL_DMA_Abort_IT+0x3cc>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d045      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a2d      	ldr	r2, [pc, #180]	@ (8001c58 <HAL_DMA_Abort_IT+0x3d0>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d040      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <HAL_DMA_Abort_IT+0x3d4>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d03b      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2a      	ldr	r2, [pc, #168]	@ (8001c60 <HAL_DMA_Abort_IT+0x3d8>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d036      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a28      	ldr	r2, [pc, #160]	@ (8001c64 <HAL_DMA_Abort_IT+0x3dc>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d031      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a27      	ldr	r2, [pc, #156]	@ (8001c68 <HAL_DMA_Abort_IT+0x3e0>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d02c      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a25      	ldr	r2, [pc, #148]	@ (8001c6c <HAL_DMA_Abort_IT+0x3e4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d027      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a24      	ldr	r2, [pc, #144]	@ (8001c70 <HAL_DMA_Abort_IT+0x3e8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d022      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <HAL_DMA_Abort_IT+0x3ec>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01d      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a21      	ldr	r2, [pc, #132]	@ (8001c78 <HAL_DMA_Abort_IT+0x3f0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d018      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8001c7c <HAL_DMA_Abort_IT+0x3f4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d013      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <HAL_DMA_Abort_IT+0x3f8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d00e      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a1c      	ldr	r2, [pc, #112]	@ (8001c84 <HAL_DMA_Abort_IT+0x3fc>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d009      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a1b      	ldr	r2, [pc, #108]	@ (8001c88 <HAL_DMA_Abort_IT+0x400>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d004      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x3a2>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a19      	ldr	r2, [pc, #100]	@ (8001c8c <HAL_DMA_Abort_IT+0x404>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d132      	bne.n	8001c90 <HAL_DMA_Abort_IT+0x408>
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e031      	b.n	8001c92 <HAL_DMA_Abort_IT+0x40a>
 8001c2e:	bf00      	nop
 8001c30:	40020010 	.word	0x40020010
 8001c34:	40020028 	.word	0x40020028
 8001c38:	40020040 	.word	0x40020040
 8001c3c:	40020058 	.word	0x40020058
 8001c40:	40020070 	.word	0x40020070
 8001c44:	40020088 	.word	0x40020088
 8001c48:	400200a0 	.word	0x400200a0
 8001c4c:	400200b8 	.word	0x400200b8
 8001c50:	40020410 	.word	0x40020410
 8001c54:	40020428 	.word	0x40020428
 8001c58:	40020440 	.word	0x40020440
 8001c5c:	40020458 	.word	0x40020458
 8001c60:	40020470 	.word	0x40020470
 8001c64:	40020488 	.word	0x40020488
 8001c68:	400204a0 	.word	0x400204a0
 8001c6c:	400204b8 	.word	0x400204b8
 8001c70:	58025408 	.word	0x58025408
 8001c74:	5802541c 	.word	0x5802541c
 8001c78:	58025430 	.word	0x58025430
 8001c7c:	58025444 	.word	0x58025444
 8001c80:	58025458 	.word	0x58025458
 8001c84:	5802546c 	.word	0x5802546c
 8001c88:	58025480 	.word	0x58025480
 8001c8c:	58025494 	.word	0x58025494
 8001c90:	2300      	movs	r3, #0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d028      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ca0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ca4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001caa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cb0:	f003 031f 	and.w	r3, r3, #31
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001cc4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d00c      	beq.n	8001ce8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cdc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ce6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b089      	sub	sp, #36	@ 0x24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001d22:	4b89      	ldr	r3, [pc, #548]	@ (8001f48 <HAL_GPIO_Init+0x234>)
 8001d24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001d26:	e194      	b.n	8002052 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	fa01 f303 	lsl.w	r3, r1, r3
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 8186 	beq.w	800204c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d005      	beq.n	8001d58 <HAL_GPIO_Init+0x44>
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d130      	bne.n	8001dba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	2203      	movs	r2, #3
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	43db      	mvns	r3, r3
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68da      	ldr	r2, [r3, #12]
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d8e:	2201      	movs	r2, #1
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43db      	mvns	r3, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	091b      	lsrs	r3, r3, #4
 8001da4:	f003 0201 	and.w	r2, r3, #1
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69ba      	ldr	r2, [r7, #24]
 8001db8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	2b03      	cmp	r3, #3
 8001dc4:	d017      	beq.n	8001df6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	2203      	movs	r2, #3
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	689a      	ldr	r2, [r3, #8]
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	69ba      	ldr	r2, [r7, #24]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d123      	bne.n	8001e4a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	220f      	movs	r2, #15
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4013      	ands	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	691a      	ldr	r2, [r3, #16]
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	f003 0307 	and.w	r3, r3, #7
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	fa02 f303 	lsl.w	r3, r2, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	08da      	lsrs	r2, r3, #3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3208      	adds	r2, #8
 8001e44:	69b9      	ldr	r1, [r7, #24]
 8001e46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	2203      	movs	r2, #3
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43db      	mvns	r3, r3
 8001e5c:	69ba      	ldr	r2, [r7, #24]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 0203 	and.w	r2, r3, #3
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	69ba      	ldr	r2, [r7, #24]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 80e0 	beq.w	800204c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001f4c <HAL_GPIO_Init+0x238>)
 8001e8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001e92:	4a2e      	ldr	r2, [pc, #184]	@ (8001f4c <HAL_GPIO_Init+0x238>)
 8001e94:	f043 0302 	orr.w	r3, r3, #2
 8001e98:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001e9c:	4b2b      	ldr	r3, [pc, #172]	@ (8001f4c <HAL_GPIO_Init+0x238>)
 8001e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001eaa:	4a29      	ldr	r2, [pc, #164]	@ (8001f50 <HAL_GPIO_Init+0x23c>)
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	089b      	lsrs	r3, r3, #2
 8001eb0:	3302      	adds	r3, #2
 8001eb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	009b      	lsls	r3, r3, #2
 8001ec0:	220f      	movs	r2, #15
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	4013      	ands	r3, r2
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	4a20      	ldr	r2, [pc, #128]	@ (8001f54 <HAL_GPIO_Init+0x240>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d052      	beq.n	8001f7c <HAL_GPIO_Init+0x268>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8001f58 <HAL_GPIO_Init+0x244>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d031      	beq.n	8001f42 <HAL_GPIO_Init+0x22e>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4a1e      	ldr	r2, [pc, #120]	@ (8001f5c <HAL_GPIO_Init+0x248>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d02b      	beq.n	8001f3e <HAL_GPIO_Init+0x22a>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	@ (8001f60 <HAL_GPIO_Init+0x24c>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d025      	beq.n	8001f3a <HAL_GPIO_Init+0x226>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f64 <HAL_GPIO_Init+0x250>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d01f      	beq.n	8001f36 <HAL_GPIO_Init+0x222>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_GPIO_Init+0x254>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d019      	beq.n	8001f32 <HAL_GPIO_Init+0x21e>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4a1a      	ldr	r2, [pc, #104]	@ (8001f6c <HAL_GPIO_Init+0x258>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_GPIO_Init+0x21a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	4a19      	ldr	r2, [pc, #100]	@ (8001f70 <HAL_GPIO_Init+0x25c>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00d      	beq.n	8001f2a <HAL_GPIO_Init+0x216>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a18      	ldr	r2, [pc, #96]	@ (8001f74 <HAL_GPIO_Init+0x260>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d007      	beq.n	8001f26 <HAL_GPIO_Init+0x212>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	4a17      	ldr	r2, [pc, #92]	@ (8001f78 <HAL_GPIO_Init+0x264>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d101      	bne.n	8001f22 <HAL_GPIO_Init+0x20e>
 8001f1e:	2309      	movs	r3, #9
 8001f20:	e02d      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f22:	230a      	movs	r3, #10
 8001f24:	e02b      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f26:	2308      	movs	r3, #8
 8001f28:	e029      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f2a:	2307      	movs	r3, #7
 8001f2c:	e027      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f2e:	2306      	movs	r3, #6
 8001f30:	e025      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f32:	2305      	movs	r3, #5
 8001f34:	e023      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f36:	2304      	movs	r3, #4
 8001f38:	e021      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e01f      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f3e:	2302      	movs	r3, #2
 8001f40:	e01d      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f42:	2301      	movs	r3, #1
 8001f44:	e01b      	b.n	8001f7e <HAL_GPIO_Init+0x26a>
 8001f46:	bf00      	nop
 8001f48:	58000080 	.word	0x58000080
 8001f4c:	58024400 	.word	0x58024400
 8001f50:	58000400 	.word	0x58000400
 8001f54:	58020000 	.word	0x58020000
 8001f58:	58020400 	.word	0x58020400
 8001f5c:	58020800 	.word	0x58020800
 8001f60:	58020c00 	.word	0x58020c00
 8001f64:	58021000 	.word	0x58021000
 8001f68:	58021400 	.word	0x58021400
 8001f6c:	58021800 	.word	0x58021800
 8001f70:	58021c00 	.word	0x58021c00
 8001f74:	58022000 	.word	0x58022000
 8001f78:	58022400 	.word	0x58022400
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	69fa      	ldr	r2, [r7, #28]
 8001f80:	f002 0203 	and.w	r2, r2, #3
 8001f84:	0092      	lsls	r2, r2, #2
 8001f86:	4093      	lsls	r3, r2
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f8e:	4938      	ldr	r1, [pc, #224]	@ (8002070 <HAL_GPIO_Init+0x35c>)
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	089b      	lsrs	r3, r3, #2
 8001f94:	3302      	adds	r3, #2
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	4013      	ands	r3, r2
 8001fac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001fc2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001fca:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d003      	beq.n	8001ff0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4313      	orrs	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ff0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d003      	beq.n	800201c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	3301      	adds	r3, #1
 8002050:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa22 f303 	lsr.w	r3, r2, r3
 800205c:	2b00      	cmp	r3, #0
 800205e:	f47f ae63 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	3724      	adds	r7, #36	@ 0x24
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr
 8002070:	58000400 	.word	0x58000400

08002074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
 8002080:	4613      	mov	r3, r2
 8002082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002084:	787b      	ldrb	r3, [r7, #1]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d003      	beq.n	8002092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800208a:	887a      	ldrh	r2, [r7, #2]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002090:	e003      	b.n	800209a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002092:	887b      	ldrh	r3, [r7, #2]
 8002094:	041a      	lsls	r2, r3, #16
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	619a      	str	r2, [r3, #24]
}
 800209a:	bf00      	nop
 800209c:	370c      	adds	r7, #12
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80020b0:	4b19      	ldr	r3, [pc, #100]	@ (8002118 <HAL_PWREx_ConfigSupply+0x70>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	f003 0304 	and.w	r3, r3, #4
 80020b8:	2b04      	cmp	r3, #4
 80020ba:	d00a      	beq.n	80020d2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80020bc:	4b16      	ldr	r3, [pc, #88]	@ (8002118 <HAL_PWREx_ConfigSupply+0x70>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0307 	and.w	r3, r3, #7
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d001      	beq.n	80020ce <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e01f      	b.n	800210e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e01d      	b.n	800210e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80020d2:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <HAL_PWREx_ConfigSupply+0x70>)
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f023 0207 	bic.w	r2, r3, #7
 80020da:	490f      	ldr	r1, [pc, #60]	@ (8002118 <HAL_PWREx_ConfigSupply+0x70>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4313      	orrs	r3, r2
 80020e0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80020e2:	f7fe ff13 	bl	8000f0c <HAL_GetTick>
 80020e6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020e8:	e009      	b.n	80020fe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80020ea:	f7fe ff0f 	bl	8000f0c <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80020f8:	d901      	bls.n	80020fe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e007      	b.n	800210e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80020fe:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <HAL_PWREx_ConfigSupply+0x70>)
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800210a:	d1ee      	bne.n	80020ea <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	58024800 	.word	0x58024800

0800211c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	@ 0x30
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d102      	bne.n	8002130 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800212a:	2301      	movs	r3, #1
 800212c:	f000 bc48 	b.w	80029c0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0301 	and.w	r3, r3, #1
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 8088 	beq.w	800224e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800213e:	4b99      	ldr	r3, [pc, #612]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002148:	4b96      	ldr	r3, [pc, #600]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800214a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800214c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800214e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002150:	2b10      	cmp	r3, #16
 8002152:	d007      	beq.n	8002164 <HAL_RCC_OscConfig+0x48>
 8002154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002156:	2b18      	cmp	r3, #24
 8002158:	d111      	bne.n	800217e <HAL_RCC_OscConfig+0x62>
 800215a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	2b02      	cmp	r3, #2
 8002162:	d10c      	bne.n	800217e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002164:	4b8f      	ldr	r3, [pc, #572]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d06d      	beq.n	800224c <HAL_RCC_OscConfig+0x130>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d169      	bne.n	800224c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	f000 bc21 	b.w	80029c0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002186:	d106      	bne.n	8002196 <HAL_RCC_OscConfig+0x7a>
 8002188:	4b86      	ldr	r3, [pc, #536]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a85      	ldr	r2, [pc, #532]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800218e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	e02e      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d10c      	bne.n	80021b8 <HAL_RCC_OscConfig+0x9c>
 800219e:	4b81      	ldr	r3, [pc, #516]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a80      	ldr	r2, [pc, #512]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021a8:	6013      	str	r3, [r2, #0]
 80021aa:	4b7e      	ldr	r3, [pc, #504]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7d      	ldr	r2, [pc, #500]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021b0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	e01d      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021c0:	d10c      	bne.n	80021dc <HAL_RCC_OscConfig+0xc0>
 80021c2:	4b78      	ldr	r3, [pc, #480]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a77      	ldr	r2, [pc, #476]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b75      	ldr	r3, [pc, #468]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a74      	ldr	r2, [pc, #464]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	e00b      	b.n	80021f4 <HAL_RCC_OscConfig+0xd8>
 80021dc:	4b71      	ldr	r3, [pc, #452]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a70      	ldr	r2, [pc, #448]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	4b6e      	ldr	r3, [pc, #440]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6d      	ldr	r2, [pc, #436]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80021ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d013      	beq.n	8002224 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7fe fe86 	bl	8000f0c <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002204:	f7fe fe82 	bl	8000f0c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	@ 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e3d4      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002216:	4b63      	ldr	r3, [pc, #396]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0xe8>
 8002222:	e014      	b.n	800224e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002224:	f7fe fe72 	bl	8000f0c <HAL_GetTick>
 8002228:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800222c:	f7fe fe6e 	bl	8000f0c <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b64      	cmp	r3, #100	@ 0x64
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e3c0      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800223e:	4b59      	ldr	r3, [pc, #356]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x110>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800224c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80ca 	beq.w	80023f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800225c:	4b51      	ldr	r3, [pc, #324]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002264:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002266:	4b4f      	ldr	r3, [pc, #316]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002268:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800226a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800226c:	6a3b      	ldr	r3, [r7, #32]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d007      	beq.n	8002282 <HAL_RCC_OscConfig+0x166>
 8002272:	6a3b      	ldr	r3, [r7, #32]
 8002274:	2b18      	cmp	r3, #24
 8002276:	d156      	bne.n	8002326 <HAL_RCC_OscConfig+0x20a>
 8002278:	69fb      	ldr	r3, [r7, #28]
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d151      	bne.n	8002326 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002282:	4b48      	ldr	r3, [pc, #288]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0304 	and.w	r3, r3, #4
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_RCC_OscConfig+0x17e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e392      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800229a:	4b42      	ldr	r3, [pc, #264]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f023 0219 	bic.w	r2, r3, #25
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	493f      	ldr	r1, [pc, #252]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fe2e 	bl	8000f0c <HAL_GetTick>
 80022b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe fe2a 	bl	8000f0c <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e37c      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022c6:	4b37      	ldr	r3, [pc, #220]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d0f0      	beq.n	80022b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022d2:	f7fe fe27 	bl	8000f24 <HAL_GetREVID>
 80022d6:	4603      	mov	r3, r0
 80022d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80022dc:	4293      	cmp	r3, r2
 80022de:	d817      	bhi.n	8002310 <HAL_RCC_OscConfig+0x1f4>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	2b40      	cmp	r3, #64	@ 0x40
 80022e6:	d108      	bne.n	80022fa <HAL_RCC_OscConfig+0x1de>
 80022e8:	4b2e      	ldr	r3, [pc, #184]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80022f0:	4a2c      	ldr	r2, [pc, #176]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80022f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f8:	e07a      	b.n	80023f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022fa:	4b2a      	ldr	r3, [pc, #168]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	031b      	lsls	r3, r3, #12
 8002308:	4926      	ldr	r1, [pc, #152]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800230a:	4313      	orrs	r3, r2
 800230c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800230e:	e06f      	b.n	80023f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	061b      	lsls	r3, r3, #24
 800231e:	4921      	ldr	r1, [pc, #132]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002320:	4313      	orrs	r3, r2
 8002322:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002324:	e064      	b.n	80023f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d047      	beq.n	80023be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800232e:	4b1d      	ldr	r3, [pc, #116]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f023 0219 	bic.w	r2, r3, #25
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	491a      	ldr	r1, [pc, #104]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fde4 	bl	8000f0c <HAL_GetTick>
 8002344:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002348:	f7fe fde0 	bl	8000f0c <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e332      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800235a:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f0      	beq.n	8002348 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002366:	f7fe fddd 	bl	8000f24 <HAL_GetREVID>
 800236a:	4603      	mov	r3, r0
 800236c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002370:	4293      	cmp	r3, r2
 8002372:	d819      	bhi.n	80023a8 <HAL_RCC_OscConfig+0x28c>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	2b40      	cmp	r3, #64	@ 0x40
 800237a:	d108      	bne.n	800238e <HAL_RCC_OscConfig+0x272>
 800237c:	4b09      	ldr	r3, [pc, #36]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002384:	4a07      	ldr	r2, [pc, #28]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002386:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800238a:	6053      	str	r3, [r2, #4]
 800238c:	e030      	b.n	80023f0 <HAL_RCC_OscConfig+0x2d4>
 800238e:	4b05      	ldr	r3, [pc, #20]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691b      	ldr	r3, [r3, #16]
 800239a:	031b      	lsls	r3, r3, #12
 800239c:	4901      	ldr	r1, [pc, #4]	@ (80023a4 <HAL_RCC_OscConfig+0x288>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
 80023a2:	e025      	b.n	80023f0 <HAL_RCC_OscConfig+0x2d4>
 80023a4:	58024400 	.word	0x58024400
 80023a8:	4b9a      	ldr	r3, [pc, #616]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	691b      	ldr	r3, [r3, #16]
 80023b4:	061b      	lsls	r3, r3, #24
 80023b6:	4997      	ldr	r1, [pc, #604]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	604b      	str	r3, [r1, #4]
 80023bc:	e018      	b.n	80023f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023be:	4b95      	ldr	r3, [pc, #596]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a94      	ldr	r2, [pc, #592]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023c4:	f023 0301 	bic.w	r3, r3, #1
 80023c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ca:	f7fe fd9f 	bl	8000f0c <HAL_GetTick>
 80023ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023d2:	f7fe fd9b 	bl	8000f0c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e2ed      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1f0      	bne.n	80023d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0310 	and.w	r3, r3, #16
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 80a9 	beq.w	8002550 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023fe:	4b85      	ldr	r3, [pc, #532]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002400:	691b      	ldr	r3, [r3, #16]
 8002402:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002406:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002408:	4b82      	ldr	r3, [pc, #520]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800240a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800240c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d007      	beq.n	8002424 <HAL_RCC_OscConfig+0x308>
 8002414:	69bb      	ldr	r3, [r7, #24]
 8002416:	2b18      	cmp	r3, #24
 8002418:	d13a      	bne.n	8002490 <HAL_RCC_OscConfig+0x374>
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	2b01      	cmp	r3, #1
 8002422:	d135      	bne.n	8002490 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002424:	4b7b      	ldr	r3, [pc, #492]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800242c:	2b00      	cmp	r3, #0
 800242e:	d005      	beq.n	800243c <HAL_RCC_OscConfig+0x320>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	69db      	ldr	r3, [r3, #28]
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	d001      	beq.n	800243c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e2c1      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800243c:	f7fe fd72 	bl	8000f24 <HAL_GetREVID>
 8002440:	4603      	mov	r3, r0
 8002442:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002446:	4293      	cmp	r3, r2
 8002448:	d817      	bhi.n	800247a <HAL_RCC_OscConfig+0x35e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	2b20      	cmp	r3, #32
 8002450:	d108      	bne.n	8002464 <HAL_RCC_OscConfig+0x348>
 8002452:	4b70      	ldr	r3, [pc, #448]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800245a:	4a6e      	ldr	r2, [pc, #440]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800245c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002460:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002462:	e075      	b.n	8002550 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002464:	4b6b      	ldr	r3, [pc, #428]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	069b      	lsls	r3, r3, #26
 8002472:	4968      	ldr	r1, [pc, #416]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002478:	e06a      	b.n	8002550 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800247a:	4b66      	ldr	r3, [pc, #408]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	061b      	lsls	r3, r3, #24
 8002488:	4962      	ldr	r1, [pc, #392]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800248e:	e05f      	b.n	8002550 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	69db      	ldr	r3, [r3, #28]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d042      	beq.n	800251e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002498:	4b5e      	ldr	r3, [pc, #376]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a5d      	ldr	r2, [pc, #372]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800249e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80024a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7fe fd32 	bl	8000f0c <HAL_GetTick>
 80024a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80024ac:	f7fe fd2e 	bl	8000f0c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e280      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80024be:	4b55      	ldr	r3, [pc, #340]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d0f0      	beq.n	80024ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80024ca:	f7fe fd2b 	bl	8000f24 <HAL_GetREVID>
 80024ce:	4603      	mov	r3, r0
 80024d0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d817      	bhi.n	8002508 <HAL_RCC_OscConfig+0x3ec>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
 80024dc:	2b20      	cmp	r3, #32
 80024de:	d108      	bne.n	80024f2 <HAL_RCC_OscConfig+0x3d6>
 80024e0:	4b4c      	ldr	r3, [pc, #304]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80024e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80024ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80024ee:	6053      	str	r3, [r2, #4]
 80024f0:	e02e      	b.n	8002550 <HAL_RCC_OscConfig+0x434>
 80024f2:	4b48      	ldr	r3, [pc, #288]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	069b      	lsls	r3, r3, #26
 8002500:	4944      	ldr	r1, [pc, #272]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
 8002506:	e023      	b.n	8002550 <HAL_RCC_OscConfig+0x434>
 8002508:	4b42      	ldr	r3, [pc, #264]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	493f      	ldr	r1, [pc, #252]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002518:	4313      	orrs	r3, r2
 800251a:	60cb      	str	r3, [r1, #12]
 800251c:	e018      	b.n	8002550 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800251e:	4b3d      	ldr	r3, [pc, #244]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a3c      	ldr	r2, [pc, #240]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002524:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002528:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252a:	f7fe fcef 	bl	8000f0c <HAL_GetTick>
 800252e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002532:	f7fe fceb 	bl	8000f0c <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b02      	cmp	r3, #2
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e23d      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002544:	4b33      	ldr	r3, [pc, #204]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f0      	bne.n	8002532 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d036      	beq.n	80025ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d019      	beq.n	8002598 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002564:	4b2b      	ldr	r3, [pc, #172]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002568:	4a2a      	ldr	r2, [pc, #168]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800256a:	f043 0301 	orr.w	r3, r3, #1
 800256e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002570:	f7fe fccc 	bl	8000f0c <HAL_GetTick>
 8002574:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002576:	e008      	b.n	800258a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002578:	f7fe fcc8 	bl	8000f0c <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e21a      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800258a:	4b22      	ldr	r3, [pc, #136]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800258c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x45c>
 8002596:	e018      	b.n	80025ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b1e      	ldr	r3, [pc, #120]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800259c:	4a1d      	ldr	r2, [pc, #116]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a4:	f7fe fcb2 	bl	8000f0c <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025ac:	f7fe fcae 	bl	8000f0c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e200      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025be:	4b15      	ldr	r3, [pc, #84]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c2:	f003 0302 	and.w	r3, r3, #2
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d039      	beq.n	800264a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d01c      	beq.n	8002618 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 80025e4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80025ea:	f7fe fc8f 	bl	8000f0c <HAL_GetTick>
 80025ee:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025f2:	f7fe fc8b 	bl	8000f0c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1dd      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002604:	4b03      	ldr	r3, [pc, #12]	@ (8002614 <HAL_RCC_OscConfig+0x4f8>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x4d6>
 8002610:	e01b      	b.n	800264a <HAL_RCC_OscConfig+0x52e>
 8002612:	bf00      	nop
 8002614:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002618:	4b9b      	ldr	r3, [pc, #620]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a9a      	ldr	r2, [pc, #616]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800261e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002622:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002624:	f7fe fc72 	bl	8000f0c <HAL_GetTick>
 8002628:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800262c:	f7fe fc6e 	bl	8000f0c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b02      	cmp	r3, #2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1c0      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800263e:	4b92      	ldr	r3, [pc, #584]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0304 	and.w	r3, r3, #4
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 8081 	beq.w	800275a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002658:	4b8c      	ldr	r3, [pc, #560]	@ (800288c <HAL_RCC_OscConfig+0x770>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a8b      	ldr	r2, [pc, #556]	@ (800288c <HAL_RCC_OscConfig+0x770>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002664:	f7fe fc52 	bl	8000f0c <HAL_GetTick>
 8002668:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7fe fc4e 	bl	8000f0c <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b64      	cmp	r3, #100	@ 0x64
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1a0      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800267e:	4b83      	ldr	r3, [pc, #524]	@ (800288c <HAL_RCC_OscConfig+0x770>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d106      	bne.n	80026a0 <HAL_RCC_OscConfig+0x584>
 8002692:	4b7d      	ldr	r3, [pc, #500]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002694:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002696:	4a7c      	ldr	r2, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6713      	str	r3, [r2, #112]	@ 0x70
 800269e:	e02d      	b.n	80026fc <HAL_RCC_OscConfig+0x5e0>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x5a6>
 80026a8:	4b77      	ldr	r3, [pc, #476]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	4a76      	ldr	r2, [pc, #472]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80026b4:	4b74      	ldr	r3, [pc, #464]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	4a73      	ldr	r2, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026ba:	f023 0304 	bic.w	r3, r3, #4
 80026be:	6713      	str	r3, [r2, #112]	@ 0x70
 80026c0:	e01c      	b.n	80026fc <HAL_RCC_OscConfig+0x5e0>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	2b05      	cmp	r3, #5
 80026c8:	d10c      	bne.n	80026e4 <HAL_RCC_OscConfig+0x5c8>
 80026ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026d0:	f043 0304 	orr.w	r3, r3, #4
 80026d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026da:	4a6b      	ldr	r2, [pc, #428]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026dc:	f043 0301 	orr.w	r3, r3, #1
 80026e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e2:	e00b      	b.n	80026fc <HAL_RCC_OscConfig+0x5e0>
 80026e4:	4b68      	ldr	r3, [pc, #416]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026e8:	4a67      	ldr	r2, [pc, #412]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026ea:	f023 0301 	bic.w	r3, r3, #1
 80026ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f0:	4b65      	ldr	r3, [pc, #404]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026f4:	4a64      	ldr	r2, [pc, #400]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80026f6:	f023 0304 	bic.w	r3, r3, #4
 80026fa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d015      	beq.n	8002730 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002704:	f7fe fc02 	bl	8000f0c <HAL_GetTick>
 8002708:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800270a:	e00a      	b.n	8002722 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270c:	f7fe fbfe 	bl	8000f0c <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	f241 3288 	movw	r2, #5000	@ 0x1388
 800271a:	4293      	cmp	r3, r2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e14e      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002722:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0ee      	beq.n	800270c <HAL_RCC_OscConfig+0x5f0>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002730:	f7fe fbec 	bl	8000f0c <HAL_GetTick>
 8002734:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002736:	e00a      	b.n	800274e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002738:	f7fe fbe8 	bl	8000f0c <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002746:	4293      	cmp	r3, r2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e138      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800274e:	4b4e      	ldr	r3, [pc, #312]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1ee      	bne.n	8002738 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 812d 	beq.w	80029be <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002764:	4b48      	ldr	r3, [pc, #288]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002766:	691b      	ldr	r3, [r3, #16]
 8002768:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800276c:	2b18      	cmp	r3, #24
 800276e:	f000 80bd 	beq.w	80028ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002776:	2b02      	cmp	r3, #2
 8002778:	f040 809e 	bne.w	80028b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b42      	ldr	r3, [pc, #264]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a41      	ldr	r2, [pc, #260]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002782:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002786:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002788:	f7fe fbc0 	bl	8000f0c <HAL_GetTick>
 800278c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800278e:	e008      	b.n	80027a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002790:	f7fe fbbc 	bl	8000f0c <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	2b02      	cmp	r3, #2
 800279c:	d901      	bls.n	80027a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800279e:	2303      	movs	r3, #3
 80027a0:	e10e      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027a2:	4b39      	ldr	r3, [pc, #228]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f0      	bne.n	8002790 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027ae:	4b36      	ldr	r3, [pc, #216]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80027b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80027b2:	4b37      	ldr	r3, [pc, #220]	@ (8002890 <HAL_RCC_OscConfig+0x774>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80027be:	0112      	lsls	r2, r2, #4
 80027c0:	430a      	orrs	r2, r1
 80027c2:	4931      	ldr	r1, [pc, #196]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	628b      	str	r3, [r1, #40]	@ 0x28
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027cc:	3b01      	subs	r3, #1
 80027ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027d6:	3b01      	subs	r3, #1
 80027d8:	025b      	lsls	r3, r3, #9
 80027da:	b29b      	uxth	r3, r3
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e2:	3b01      	subs	r3, #1
 80027e4:	041b      	lsls	r3, r3, #16
 80027e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f0:	3b01      	subs	r3, #1
 80027f2:	061b      	lsls	r3, r3, #24
 80027f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80027f8:	4923      	ldr	r1, [pc, #140]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80027fe:	4b22      	ldr	r3, [pc, #136]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002802:	4a21      	ldr	r2, [pc, #132]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002804:	f023 0301 	bic.w	r3, r3, #1
 8002808:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800280a:	4b1f      	ldr	r3, [pc, #124]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800280c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800280e:	4b21      	ldr	r3, [pc, #132]	@ (8002894 <HAL_RCC_OscConfig+0x778>)
 8002810:	4013      	ands	r3, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002816:	00d2      	lsls	r2, r2, #3
 8002818:	491b      	ldr	r1, [pc, #108]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800281a:	4313      	orrs	r3, r2
 800281c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800281e:	4b1a      	ldr	r3, [pc, #104]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002822:	f023 020c 	bic.w	r2, r3, #12
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	4917      	ldr	r1, [pc, #92]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800282c:	4313      	orrs	r3, r2
 800282e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002830:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002834:	f023 0202 	bic.w	r2, r3, #2
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800283c:	4912      	ldr	r1, [pc, #72]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800283e:	4313      	orrs	r3, r2
 8002840:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002842:	4b11      	ldr	r3, [pc, #68]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002846:	4a10      	ldr	r2, [pc, #64]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002848:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800284c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284e:	4b0e      	ldr	r3, [pc, #56]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002850:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002852:	4a0d      	ldr	r2, [pc, #52]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002854:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002858:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002860:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002864:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002866:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002868:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800286a:	4a07      	ldr	r2, [pc, #28]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002872:	4b05      	ldr	r3, [pc, #20]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a04      	ldr	r2, [pc, #16]	@ (8002888 <HAL_RCC_OscConfig+0x76c>)
 8002878:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800287c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800287e:	f7fe fb45 	bl	8000f0c <HAL_GetTick>
 8002882:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002884:	e011      	b.n	80028aa <HAL_RCC_OscConfig+0x78e>
 8002886:	bf00      	nop
 8002888:	58024400 	.word	0x58024400
 800288c:	58024800 	.word	0x58024800
 8002890:	fffffc0c 	.word	0xfffffc0c
 8002894:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002898:	f7fe fb38 	bl	8000f0c <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e08a      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80028aa:	4b47      	ldr	r3, [pc, #284]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0x77c>
 80028b6:	e082      	b.n	80029be <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b8:	4b43      	ldr	r3, [pc, #268]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a42      	ldr	r2, [pc, #264]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80028be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80028c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7fe fb22 	bl	8000f0c <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fb1e 	bl	8000f0c <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e070      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028de:	4b3a      	ldr	r3, [pc, #232]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x7b0>
 80028ea:	e068      	b.n	80029be <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80028ec:	4b36      	ldr	r3, [pc, #216]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80028f2:	4b35      	ldr	r3, [pc, #212]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d031      	beq.n	8002964 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	f003 0203 	and.w	r2, r3, #3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d12a      	bne.n	8002964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d122      	bne.n	8002964 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002928:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d11a      	bne.n	8002964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	0a5b      	lsrs	r3, r3, #9
 8002932:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800293a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d111      	bne.n	8002964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	0c1b      	lsrs	r3, r3, #16
 8002944:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d108      	bne.n	8002964 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	0e1b      	lsrs	r3, r3, #24
 8002956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800295e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d001      	beq.n	8002968 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e02b      	b.n	80029c0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002968:	4b17      	ldr	r3, [pc, #92]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 800296a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800296c:	08db      	lsrs	r3, r3, #3
 800296e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002972:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	429a      	cmp	r2, r3
 800297c:	d01f      	beq.n	80029be <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 8002980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002982:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 8002984:	f023 0301 	bic.w	r3, r3, #1
 8002988:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800298a:	f7fe fabf 	bl	8000f0c <HAL_GetTick>
 800298e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002990:	bf00      	nop
 8002992:	f7fe fabb 	bl	8000f0c <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299a:	4293      	cmp	r3, r2
 800299c:	d0f9      	beq.n	8002992 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800299e:	4b0a      	ldr	r3, [pc, #40]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80029a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80029a2:	4b0a      	ldr	r3, [pc, #40]	@ (80029cc <HAL_RCC_OscConfig+0x8b0>)
 80029a4:	4013      	ands	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80029aa:	00d2      	lsls	r2, r2, #3
 80029ac:	4906      	ldr	r1, [pc, #24]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80029b2:	4b05      	ldr	r3, [pc, #20]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	4a04      	ldr	r2, [pc, #16]	@ (80029c8 <HAL_RCC_OscConfig+0x8ac>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3730      	adds	r7, #48	@ 0x30
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	58024400 	.word	0x58024400
 80029cc:	ffff0007 	.word	0xffff0007

080029d0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d101      	bne.n	80029e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e19c      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e4:	4b8a      	ldr	r3, [pc, #552]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d910      	bls.n	8002a14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b87      	ldr	r3, [pc, #540]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f023 020f 	bic.w	r2, r3, #15
 80029fa:	4985      	ldr	r1, [pc, #532]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a02:	4b83      	ldr	r3, [pc, #524]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 030f 	and.w	r3, r3, #15
 8002a0a:	683a      	ldr	r2, [r7, #0]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d001      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e184      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d010      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691a      	ldr	r2, [r3, #16]
 8002a24:	4b7b      	ldr	r3, [pc, #492]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a26:	699b      	ldr	r3, [r3, #24]
 8002a28:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d908      	bls.n	8002a42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002a30:	4b78      	ldr	r3, [pc, #480]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	4975      	ldr	r1, [pc, #468]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d010      	beq.n	8002a70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	695a      	ldr	r2, [r3, #20]
 8002a52:	4b70      	ldr	r3, [pc, #448]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d908      	bls.n	8002a70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	695b      	ldr	r3, [r3, #20]
 8002a6a:	496a      	ldr	r1, [pc, #424]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0310 	and.w	r3, r3, #16
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d010      	beq.n	8002a9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	4b64      	ldr	r3, [pc, #400]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a82:	69db      	ldr	r3, [r3, #28]
 8002a84:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d908      	bls.n	8002a9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002a8c:	4b61      	ldr	r3, [pc, #388]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a8e:	69db      	ldr	r3, [r3, #28]
 8002a90:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	495e      	ldr	r1, [pc, #376]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0320 	and.w	r3, r3, #32
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d010      	beq.n	8002acc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	69da      	ldr	r2, [r3, #28]
 8002aae:	4b59      	ldr	r3, [pc, #356]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d908      	bls.n	8002acc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002aba:	4b56      	ldr	r3, [pc, #344]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
 8002ac6:	4953      	ldr	r1, [pc, #332]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d010      	beq.n	8002afa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b4d      	ldr	r3, [pc, #308]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 030f 	and.w	r3, r3, #15
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d908      	bls.n	8002afa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b4a      	ldr	r3, [pc, #296]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	f023 020f 	bic.w	r2, r3, #15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	4947      	ldr	r1, [pc, #284]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d055      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002b06:	4b43      	ldr	r3, [pc, #268]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4940      	ldr	r1, [pc, #256]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d107      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002b20:	4b3c      	ldr	r3, [pc, #240]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d121      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0f6      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b38:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d115      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0ea      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002b50:	4b30      	ldr	r3, [pc, #192]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d109      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0de      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002b60:	4b2c      	ldr	r3, [pc, #176]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0d6      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b70:	4b28      	ldr	r3, [pc, #160]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	f023 0207 	bic.w	r2, r3, #7
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4925      	ldr	r1, [pc, #148]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b82:	f7fe f9c3 	bl	8000f0c <HAL_GetTick>
 8002b86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b88:	e00a      	b.n	8002ba0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b8a:	f7fe f9bf 	bl	8000f0c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d901      	bls.n	8002ba0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e0be      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	429a      	cmp	r2, r3
 8002bb0:	d1eb      	bne.n	8002b8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0302 	and.w	r3, r3, #2
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d010      	beq.n	8002be0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	68da      	ldr	r2, [r3, #12]
 8002bc2:	4b14      	ldr	r3, [pc, #80]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d208      	bcs.n	8002be0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bce:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f023 020f 	bic.w	r2, r3, #15
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	490e      	ldr	r1, [pc, #56]	@ (8002c14 <HAL_RCC_ClockConfig+0x244>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be0:	4b0b      	ldr	r3, [pc, #44]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d214      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 020f 	bic.w	r2, r3, #15
 8002bf6:	4906      	ldr	r1, [pc, #24]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <HAL_RCC_ClockConfig+0x240>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 030f 	and.w	r3, r3, #15
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d005      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e086      	b.n	8002d1e <HAL_RCC_ClockConfig+0x34e>
 8002c10:	52002000 	.word	0x52002000
 8002c14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d010      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	691a      	ldr	r2, [r3, #16]
 8002c28:	4b3f      	ldr	r3, [pc, #252]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d208      	bcs.n	8002c46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c34:	4b3c      	ldr	r3, [pc, #240]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c36:	699b      	ldr	r3, [r3, #24]
 8002c38:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	4939      	ldr	r1, [pc, #228]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d010      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695a      	ldr	r2, [r3, #20]
 8002c56:	4b34      	ldr	r3, [pc, #208]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c58:	69db      	ldr	r3, [r3, #28]
 8002c5a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d208      	bcs.n	8002c74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002c62:	4b31      	ldr	r3, [pc, #196]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	695b      	ldr	r3, [r3, #20]
 8002c6e:	492e      	ldr	r1, [pc, #184]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d010      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699a      	ldr	r2, [r3, #24]
 8002c84:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c86:	69db      	ldr	r3, [r3, #28]
 8002c88:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d208      	bcs.n	8002ca2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002c90:	4b25      	ldr	r3, [pc, #148]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	4922      	ldr	r1, [pc, #136]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d010      	beq.n	8002cd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69da      	ldr	r2, [r3, #28]
 8002cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d208      	bcs.n	8002cd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4917      	ldr	r1, [pc, #92]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cd0:	f000 f834 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 030f 	and.w	r3, r3, #15
 8002ce0:	4912      	ldr	r1, [pc, #72]	@ (8002d2c <HAL_RCC_ClockConfig+0x35c>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002cee:	4b0e      	ldr	r3, [pc, #56]	@ (8002d28 <HAL_RCC_ClockConfig+0x358>)
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	f003 030f 	and.w	r3, r3, #15
 8002cf6:	4a0d      	ldr	r2, [pc, #52]	@ (8002d2c <HAL_RCC_ClockConfig+0x35c>)
 8002cf8:	5cd3      	ldrb	r3, [r2, r3]
 8002cfa:	f003 031f 	and.w	r3, r3, #31
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a0a      	ldr	r2, [pc, #40]	@ (8002d30 <HAL_RCC_ClockConfig+0x360>)
 8002d06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d08:	4a0a      	ldr	r2, [pc, #40]	@ (8002d34 <HAL_RCC_ClockConfig+0x364>)
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d38 <HAL_RCC_ClockConfig+0x368>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fe f8b0 	bl	8000e78 <HAL_InitTick>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3718      	adds	r7, #24
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	58024400 	.word	0x58024400
 8002d2c:	08007644 	.word	0x08007644
 8002d30:	24000004 	.word	0x24000004
 8002d34:	24000000 	.word	0x24000000
 8002d38:	24000008 	.word	0x24000008

08002d3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b089      	sub	sp, #36	@ 0x24
 8002d40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d42:	4bb3      	ldr	r3, [pc, #716]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d44:	691b      	ldr	r3, [r3, #16]
 8002d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d4a:	2b18      	cmp	r3, #24
 8002d4c:	f200 8155 	bhi.w	8002ffa <HAL_RCC_GetSysClockFreq+0x2be>
 8002d50:	a201      	add	r2, pc, #4	@ (adr r2, 8002d58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002dbd 	.word	0x08002dbd
 8002d5c:	08002ffb 	.word	0x08002ffb
 8002d60:	08002ffb 	.word	0x08002ffb
 8002d64:	08002ffb 	.word	0x08002ffb
 8002d68:	08002ffb 	.word	0x08002ffb
 8002d6c:	08002ffb 	.word	0x08002ffb
 8002d70:	08002ffb 	.word	0x08002ffb
 8002d74:	08002ffb 	.word	0x08002ffb
 8002d78:	08002de3 	.word	0x08002de3
 8002d7c:	08002ffb 	.word	0x08002ffb
 8002d80:	08002ffb 	.word	0x08002ffb
 8002d84:	08002ffb 	.word	0x08002ffb
 8002d88:	08002ffb 	.word	0x08002ffb
 8002d8c:	08002ffb 	.word	0x08002ffb
 8002d90:	08002ffb 	.word	0x08002ffb
 8002d94:	08002ffb 	.word	0x08002ffb
 8002d98:	08002de9 	.word	0x08002de9
 8002d9c:	08002ffb 	.word	0x08002ffb
 8002da0:	08002ffb 	.word	0x08002ffb
 8002da4:	08002ffb 	.word	0x08002ffb
 8002da8:	08002ffb 	.word	0x08002ffb
 8002dac:	08002ffb 	.word	0x08002ffb
 8002db0:	08002ffb 	.word	0x08002ffb
 8002db4:	08002ffb 	.word	0x08002ffb
 8002db8:	08002def 	.word	0x08002def
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002dbc:	4b94      	ldr	r3, [pc, #592]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d009      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002dc8:	4b91      	ldr	r3, [pc, #580]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	08db      	lsrs	r3, r3, #3
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	4a90      	ldr	r2, [pc, #576]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dd4:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002dda:	e111      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ddc:	4b8d      	ldr	r3, [pc, #564]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002dde:	61bb      	str	r3, [r7, #24]
      break;
 8002de0:	e10e      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002de2:	4b8d      	ldr	r3, [pc, #564]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002de4:	61bb      	str	r3, [r7, #24]
      break;
 8002de6:	e10b      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002de8:	4b8c      	ldr	r3, [pc, #560]	@ (800301c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002dea:	61bb      	str	r3, [r7, #24]
      break;
 8002dec:	e108      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dee:	4b88      	ldr	r3, [pc, #544]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002df8:	4b85      	ldr	r3, [pc, #532]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dfc:	091b      	lsrs	r3, r3, #4
 8002dfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002e04:	4b82      	ldr	r3, [pc, #520]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e08:	f003 0301 	and.w	r3, r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002e0e:	4b80      	ldr	r3, [pc, #512]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e12:	08db      	lsrs	r3, r3, #3
 8002e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	ee07 3a90 	vmov	s15, r3
 8002e22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 80e1 	beq.w	8002ff4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	f000 8083 	beq.w	8002f40 <HAL_RCC_GetSysClockFreq+0x204>
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	f200 80a1 	bhi.w	8002f84 <HAL_RCC_GetSysClockFreq+0x248>
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d003      	beq.n	8002e50 <HAL_RCC_GetSysClockFreq+0x114>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d056      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002e4e:	e099      	b.n	8002f84 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e50:	4b6f      	ldr	r3, [pc, #444]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d02d      	beq.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e5c:	4b6c      	ldr	r3, [pc, #432]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	4a6b      	ldr	r2, [pc, #428]	@ (8003014 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	ee07 3a90 	vmov	s15, r3
 8002e74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	ee07 3a90 	vmov	s15, r3
 8002e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e86:	4b62      	ldr	r3, [pc, #392]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002eb6:	e087      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	ee07 3a90 	vmov	s15, r3
 8002ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ec2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003024 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ec6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eca:	4b51      	ldr	r3, [pc, #324]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ece:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ed2:	ee07 3a90 	vmov	s15, r3
 8002ed6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ede:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ee2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ee6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ef2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ef6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002efa:	e065      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	ee07 3a90 	vmov	s15, r3
 8002f02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f06:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f0e:	4b40      	ldr	r3, [pc, #256]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f16:	ee07 3a90 	vmov	s15, r3
 8002f1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f1e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f22:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f3a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f3e:	e043      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	ee07 3a90 	vmov	s15, r3
 8002f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f4a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800302c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002f4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f52:	4b2f      	ldr	r3, [pc, #188]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f5a:	ee07 3a90 	vmov	s15, r3
 8002f5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f62:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f66:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f7e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002f82:	e021      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	ee07 3a90 	vmov	s15, r3
 8002f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f8e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003028 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002f92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f96:	4b1e      	ldr	r3, [pc, #120]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fa6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002faa:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003020 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002fc6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002fc8:	4b11      	ldr	r3, [pc, #68]	@ (8003010 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fcc:	0a5b      	lsrs	r3, r3, #9
 8002fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	ee07 3a90 	vmov	s15, r3
 8002fdc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fe0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fec:	ee17 3a90 	vmov	r3, s15
 8002ff0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ff2:	e005      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	61bb      	str	r3, [r7, #24]
      break;
 8002ff8:	e002      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ffa:	4b07      	ldr	r3, [pc, #28]	@ (8003018 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ffc:	61bb      	str	r3, [r7, #24]
      break;
 8002ffe:	bf00      	nop
  }

  return sysclockfreq;
 8003000:	69bb      	ldr	r3, [r7, #24]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3724      	adds	r7, #36	@ 0x24
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr
 800300e:	bf00      	nop
 8003010:	58024400 	.word	0x58024400
 8003014:	03d09000 	.word	0x03d09000
 8003018:	003d0900 	.word	0x003d0900
 800301c:	007a1200 	.word	0x007a1200
 8003020:	46000000 	.word	0x46000000
 8003024:	4c742400 	.word	0x4c742400
 8003028:	4a742400 	.word	0x4a742400
 800302c:	4af42400 	.word	0x4af42400

08003030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003036:	f7ff fe81 	bl	8002d3c <HAL_RCC_GetSysClockFreq>
 800303a:	4602      	mov	r2, r0
 800303c:	4b10      	ldr	r3, [pc, #64]	@ (8003080 <HAL_RCC_GetHCLKFreq+0x50>)
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	0a1b      	lsrs	r3, r3, #8
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	490f      	ldr	r1, [pc, #60]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x54>)
 8003048:	5ccb      	ldrb	r3, [r1, r3]
 800304a:	f003 031f 	and.w	r3, r3, #31
 800304e:	fa22 f303 	lsr.w	r3, r2, r3
 8003052:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003054:	4b0a      	ldr	r3, [pc, #40]	@ (8003080 <HAL_RCC_GetHCLKFreq+0x50>)
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	4a09      	ldr	r2, [pc, #36]	@ (8003084 <HAL_RCC_GetHCLKFreq+0x54>)
 800305e:	5cd3      	ldrb	r3, [r2, r3]
 8003060:	f003 031f 	and.w	r3, r3, #31
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	fa22 f303 	lsr.w	r3, r2, r3
 800306a:	4a07      	ldr	r2, [pc, #28]	@ (8003088 <HAL_RCC_GetHCLKFreq+0x58>)
 800306c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800306e:	4a07      	ldr	r2, [pc, #28]	@ (800308c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <HAL_RCC_GetHCLKFreq+0x58>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	58024400 	.word	0x58024400
 8003084:	08007644 	.word	0x08007644
 8003088:	24000004 	.word	0x24000004
 800308c:	24000000 	.word	0x24000000

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003094:	f7ff ffcc 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8003098:	4602      	mov	r2, r0
 800309a:	4b06      	ldr	r3, [pc, #24]	@ (80030b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800309c:	69db      	ldr	r3, [r3, #28]
 800309e:	091b      	lsrs	r3, r3, #4
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	4904      	ldr	r1, [pc, #16]	@ (80030b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030a6:	5ccb      	ldrb	r3, [r1, r3]
 80030a8:	f003 031f 	and.w	r3, r3, #31
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	58024400 	.word	0x58024400
 80030b8:	08007644 	.word	0x08007644

080030bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80030c0:	f7ff ffb6 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b06      	ldr	r3, [pc, #24]	@ (80030e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	4904      	ldr	r1, [pc, #16]	@ (80030e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80030dc:	4618      	mov	r0, r3
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	58024400 	.word	0x58024400
 80030e4:	08007644 	.word	0x08007644

080030e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80030e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030ec:	b0ca      	sub	sp, #296	@ 0x128
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003100:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003108:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800310c:	2500      	movs	r5, #0
 800310e:	ea54 0305 	orrs.w	r3, r4, r5
 8003112:	d049      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003114:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003118:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800311a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800311e:	d02f      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003120:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003124:	d828      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800312a:	d01a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800312c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003130:	d822      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003132:	2b00      	cmp	r3, #0
 8003134:	d003      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003136:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800313a:	d007      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800313c:	e01c      	b.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800313e:	4bb8      	ldr	r3, [pc, #736]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003142:	4ab7      	ldr	r2, [pc, #732]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003144:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003148:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800314a:	e01a      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800314c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003150:	3308      	adds	r3, #8
 8003152:	2102      	movs	r1, #2
 8003154:	4618      	mov	r0, r3
 8003156:	f001 fc8f 	bl	8004a78 <RCCEx_PLL2_Config>
 800315a:	4603      	mov	r3, r0
 800315c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003160:	e00f      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003166:	3328      	adds	r3, #40	@ 0x28
 8003168:	2102      	movs	r1, #2
 800316a:	4618      	mov	r0, r3
 800316c:	f001 fd36 	bl	8004bdc <RCCEx_PLL3_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003176:	e004      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800317e:	e000      	b.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003180:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003182:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10a      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800318a:	4ba5      	ldr	r3, [pc, #660]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800318c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800318e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003192:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003196:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003198:	4aa1      	ldr	r2, [pc, #644]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800319a:	430b      	orrs	r3, r1
 800319c:	6513      	str	r3, [r2, #80]	@ 0x50
 800319e:	e003      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031a0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031a4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80031b4:	f04f 0900 	mov.w	r9, #0
 80031b8:	ea58 0309 	orrs.w	r3, r8, r9
 80031bc:	d047      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80031be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d82a      	bhi.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80031c8:	a201      	add	r2, pc, #4	@ (adr r2, 80031d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80031ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ce:	bf00      	nop
 80031d0:	080031e5 	.word	0x080031e5
 80031d4:	080031f3 	.word	0x080031f3
 80031d8:	08003209 	.word	0x08003209
 80031dc:	08003227 	.word	0x08003227
 80031e0:	08003227 	.word	0x08003227
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031e4:	4b8e      	ldr	r3, [pc, #568]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e8:	4a8d      	ldr	r2, [pc, #564]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80031f0:	e01a      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031f6:	3308      	adds	r3, #8
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f001 fc3c 	bl	8004a78 <RCCEx_PLL2_Config>
 8003200:	4603      	mov	r3, r0
 8003202:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003206:	e00f      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800320c:	3328      	adds	r3, #40	@ 0x28
 800320e:	2100      	movs	r1, #0
 8003210:	4618      	mov	r0, r3
 8003212:	f001 fce3 	bl	8004bdc <RCCEx_PLL3_Config>
 8003216:	4603      	mov	r3, r0
 8003218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800321c:	e004      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003224:	e000      	b.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003226:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003230:	4b7b      	ldr	r3, [pc, #492]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003232:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003234:	f023 0107 	bic.w	r1, r3, #7
 8003238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800323c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323e:	4a78      	ldr	r2, [pc, #480]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003240:	430b      	orrs	r3, r1
 8003242:	6513      	str	r3, [r2, #80]	@ 0x50
 8003244:	e003      	b.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003246:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800324a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800324e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003256:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800325a:	f04f 0b00 	mov.w	fp, #0
 800325e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003262:	d04c      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326e:	d030      	beq.n	80032d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003270:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003274:	d829      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003276:	2bc0      	cmp	r3, #192	@ 0xc0
 8003278:	d02d      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800327a:	2bc0      	cmp	r3, #192	@ 0xc0
 800327c:	d825      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800327e:	2b80      	cmp	r3, #128	@ 0x80
 8003280:	d018      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003282:	2b80      	cmp	r3, #128	@ 0x80
 8003284:	d821      	bhi.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800328a:	2b40      	cmp	r3, #64	@ 0x40
 800328c:	d007      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800328e:	e01c      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003290:	4b63      	ldr	r3, [pc, #396]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	4a62      	ldr	r2, [pc, #392]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003296:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800329a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800329c:	e01c      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032a2:	3308      	adds	r3, #8
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 fbe6 	bl	8004a78 <RCCEx_PLL2_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032b2:	e011      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80032b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032b8:	3328      	adds	r3, #40	@ 0x28
 80032ba:	2100      	movs	r1, #0
 80032bc:	4618      	mov	r0, r3
 80032be:	f001 fc8d 	bl	8004bdc <RCCEx_PLL3_Config>
 80032c2:	4603      	mov	r3, r0
 80032c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80032c8:	e006      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032d0:	e002      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032d2:	bf00      	nop
 80032d4:	e000      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80032d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10a      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80032e0:	4b4f      	ldr	r3, [pc, #316]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80032e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032ee:	4a4c      	ldr	r2, [pc, #304]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032f0:	430b      	orrs	r3, r1
 80032f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80032f4:	e003      	b.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800330a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800330e:	2300      	movs	r3, #0
 8003310:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003314:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003318:	460b      	mov	r3, r1
 800331a:	4313      	orrs	r3, r2
 800331c:	d053      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800331e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003322:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003326:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800332a:	d035      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800332c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003330:	d82e      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003332:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003336:	d031      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003338:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800333c:	d828      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800333e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003342:	d01a      	beq.n	800337a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003344:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003348:	d822      	bhi.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800334e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003352:	d007      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003354:	e01c      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003356:	4b32      	ldr	r3, [pc, #200]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800335a:	4a31      	ldr	r2, [pc, #196]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800335c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003360:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003362:	e01c      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003368:	3308      	adds	r3, #8
 800336a:	2100      	movs	r1, #0
 800336c:	4618      	mov	r0, r3
 800336e:	f001 fb83 	bl	8004a78 <RCCEx_PLL2_Config>
 8003372:	4603      	mov	r3, r0
 8003374:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003378:	e011      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800337a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337e:	3328      	adds	r3, #40	@ 0x28
 8003380:	2100      	movs	r1, #0
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fc2a 	bl	8004bdc <RCCEx_PLL3_Config>
 8003388:	4603      	mov	r3, r0
 800338a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800338e:	e006      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003396:	e002      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003398:	bf00      	nop
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10b      	bne.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80033a6:	4b1e      	ldr	r3, [pc, #120]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033aa:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80033b6:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033b8:	430b      	orrs	r3, r1
 80033ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80033bc:	e003      	b.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80033c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ce:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80033d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80033d6:	2300      	movs	r3, #0
 80033d8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80033dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80033e0:	460b      	mov	r3, r1
 80033e2:	4313      	orrs	r3, r2
 80033e4:	d056      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80033ee:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033f2:	d038      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80033f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80033f8:	d831      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80033fa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80033fe:	d034      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003400:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003404:	d82b      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003406:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800340a:	d01d      	beq.n	8003448 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800340c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003410:	d825      	bhi.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003412:	2b00      	cmp	r3, #0
 8003414:	d006      	beq.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003416:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800341a:	d00a      	beq.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800341c:	e01f      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800341e:	bf00      	nop
 8003420:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003424:	4ba2      	ldr	r3, [pc, #648]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003428:	4aa1      	ldr	r2, [pc, #644]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800342a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800342e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003430:	e01c      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003436:	3308      	adds	r3, #8
 8003438:	2100      	movs	r1, #0
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fb1c 	bl	8004a78 <RCCEx_PLL2_Config>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003446:	e011      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003448:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344c:	3328      	adds	r3, #40	@ 0x28
 800344e:	2100      	movs	r1, #0
 8003450:	4618      	mov	r0, r3
 8003452:	f001 fbc3 	bl	8004bdc <RCCEx_PLL3_Config>
 8003456:	4603      	mov	r3, r0
 8003458:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800345c:	e006      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003464:	e002      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003466:	bf00      	nop
 8003468:	e000      	b.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800346a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800346c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003470:	2b00      	cmp	r3, #0
 8003472:	d10b      	bne.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003474:	4b8e      	ldr	r3, [pc, #568]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003478:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800347c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003480:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003484:	4a8a      	ldr	r2, [pc, #552]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003486:	430b      	orrs	r3, r1
 8003488:	6593      	str	r3, [r2, #88]	@ 0x58
 800348a:	e003      	b.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800348c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80034a0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80034a4:	2300      	movs	r3, #0
 80034a6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80034aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80034ae:	460b      	mov	r3, r1
 80034b0:	4313      	orrs	r3, r2
 80034b2:	d03a      	beq.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80034ba:	2b30      	cmp	r3, #48	@ 0x30
 80034bc:	d01f      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80034be:	2b30      	cmp	r3, #48	@ 0x30
 80034c0:	d819      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034c2:	2b20      	cmp	r3, #32
 80034c4:	d00c      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d815      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d019      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80034ce:	2b10      	cmp	r3, #16
 80034d0:	d111      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034d2:	4b77      	ldr	r3, [pc, #476]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d6:	4a76      	ldr	r2, [pc, #472]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034de:	e011      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034e4:	3308      	adds	r3, #8
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f001 fac5 	bl	8004a78 <RCCEx_PLL2_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80034f4:	e006      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034fc:	e002      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80034fe:	bf00      	nop
 8003500:	e000      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003502:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003504:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800350c:	4b68      	ldr	r3, [pc, #416]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800350e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003510:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003514:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800351a:	4a65      	ldr	r2, [pc, #404]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800351c:	430b      	orrs	r3, r1
 800351e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003520:	e003      	b.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003526:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800352a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800352e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003532:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003536:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800353a:	2300      	movs	r3, #0
 800353c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003540:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003544:	460b      	mov	r3, r1
 8003546:	4313      	orrs	r3, r2
 8003548:	d051      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003550:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003554:	d035      	beq.n	80035c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800355a:	d82e      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800355c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003560:	d031      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003562:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003566:	d828      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800356c:	d01a      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800356e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003572:	d822      	bhi.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003578:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800357c:	d007      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800357e:	e01c      	b.n	80035ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003580:	4b4b      	ldr	r3, [pc, #300]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003584:	4a4a      	ldr	r2, [pc, #296]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003586:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800358a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800358c:	e01c      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	3308      	adds	r3, #8
 8003594:	2100      	movs	r1, #0
 8003596:	4618      	mov	r0, r3
 8003598:	f001 fa6e 	bl	8004a78 <RCCEx_PLL2_Config>
 800359c:	4603      	mov	r3, r0
 800359e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035a2:	e011      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	3328      	adds	r3, #40	@ 0x28
 80035aa:	2100      	movs	r1, #0
 80035ac:	4618      	mov	r0, r3
 80035ae:	f001 fb15 	bl	8004bdc <RCCEx_PLL3_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80035b8:	e006      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035c0:	e002      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035c2:	bf00      	nop
 80035c4:	e000      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80035c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10a      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80035d0:	4b37      	ldr	r3, [pc, #220]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80035d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035de:	4a34      	ldr	r2, [pc, #208]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035e0:	430b      	orrs	r3, r1
 80035e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80035e4:	e003      	b.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80035fa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80035fe:	2300      	movs	r3, #0
 8003600:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003604:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003608:	460b      	mov	r3, r1
 800360a:	4313      	orrs	r3, r2
 800360c:	d056      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003612:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003614:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003618:	d033      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800361a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361e:	d82c      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003620:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003624:	d02f      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800362a:	d826      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800362c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003630:	d02b      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003632:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003636:	d820      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003638:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800363c:	d012      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800363e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003642:	d81a      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003644:	2b00      	cmp	r3, #0
 8003646:	d022      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800364c:	d115      	bne.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800364e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003652:	3308      	adds	r3, #8
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fa0e 	bl	8004a78 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003662:	e015      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003668:	3328      	adds	r3, #40	@ 0x28
 800366a:	2101      	movs	r1, #1
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fab5 	bl	8004bdc <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003678:	e00a      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003680:	e006      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003682:	bf00      	nop
 8003684:	e004      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003686:	bf00      	nop
 8003688:	e002      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800368a:	bf00      	nop
 800368c:	e000      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800368e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003690:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003694:	2b00      	cmp	r3, #0
 8003696:	d10d      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800369a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800369c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80036a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80036a6:	4a02      	ldr	r2, [pc, #8]	@ (80036b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6513      	str	r3, [r2, #80]	@ 0x50
 80036ac:	e006      	b.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80036ae:	bf00      	nop
 80036b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80036bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80036c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80036cc:	2300      	movs	r3, #0
 80036ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80036d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80036d6:	460b      	mov	r3, r1
 80036d8:	4313      	orrs	r3, r2
 80036da:	d055      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80036dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80036e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036e8:	d033      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80036ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80036ee:	d82c      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036f4:	d02f      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036fa:	d826      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80036fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003700:	d02b      	beq.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003702:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003706:	d820      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003708:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800370c:	d012      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800370e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003712:	d81a      	bhi.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003714:	2b00      	cmp	r3, #0
 8003716:	d022      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003718:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800371c:	d115      	bne.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800371e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003722:	3308      	adds	r3, #8
 8003724:	2101      	movs	r1, #1
 8003726:	4618      	mov	r0, r3
 8003728:	f001 f9a6 	bl	8004a78 <RCCEx_PLL2_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003732:	e015      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003738:	3328      	adds	r3, #40	@ 0x28
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f001 fa4d 	bl	8004bdc <RCCEx_PLL3_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003748:	e00a      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003750:	e006      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003752:	bf00      	nop
 8003754:	e004      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003756:	bf00      	nop
 8003758:	e002      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800375a:	bf00      	nop
 800375c:	e000      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800375e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003760:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003764:	2b00      	cmp	r3, #0
 8003766:	d10b      	bne.n	8003780 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003768:	4ba3      	ldr	r3, [pc, #652]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800376a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003770:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003774:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003778:	4a9f      	ldr	r2, [pc, #636]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377a:	430b      	orrs	r3, r1
 800377c:	6593      	str	r3, [r2, #88]	@ 0x58
 800377e:	e003      	b.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003790:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003798:	2300      	movs	r3, #0
 800379a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800379e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80037a2:	460b      	mov	r3, r1
 80037a4:	4313      	orrs	r3, r2
 80037a6:	d037      	beq.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b2:	d00e      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80037b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80037b8:	d816      	bhi.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d018      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80037be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037c2:	d111      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037c4:	4b8c      	ldr	r3, [pc, #560]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037c8:	4a8b      	ldr	r2, [pc, #556]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037d0:	e00f      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	3308      	adds	r3, #8
 80037d8:	2101      	movs	r1, #1
 80037da:	4618      	mov	r0, r3
 80037dc:	f001 f94c 	bl	8004a78 <RCCEx_PLL2_Config>
 80037e0:	4603      	mov	r3, r0
 80037e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80037e6:	e004      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037ee:	e000      	b.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80037f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10a      	bne.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80037fa:	4b7f      	ldr	r3, [pc, #508]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fe:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003808:	4a7b      	ldr	r2, [pc, #492]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800380a:	430b      	orrs	r3, r1
 800380c:	6513      	str	r3, [r2, #80]	@ 0x50
 800380e:	e003      	b.n	8003818 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003810:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003814:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003818:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800381c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003820:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003824:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800382e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003832:	460b      	mov	r3, r1
 8003834:	4313      	orrs	r3, r2
 8003836:	d039      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800383e:	2b03      	cmp	r3, #3
 8003840:	d81c      	bhi.n	800387c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003842:	a201      	add	r2, pc, #4	@ (adr r2, 8003848 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003848:	08003885 	.word	0x08003885
 800384c:	08003859 	.word	0x08003859
 8003850:	08003867 	.word	0x08003867
 8003854:	08003885 	.word	0x08003885
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003858:	4b67      	ldr	r3, [pc, #412]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800385c:	4a66      	ldr	r2, [pc, #408]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003862:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003864:	e00f      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003866:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386a:	3308      	adds	r3, #8
 800386c:	2102      	movs	r1, #2
 800386e:	4618      	mov	r0, r3
 8003870:	f001 f902 	bl	8004a78 <RCCEx_PLL2_Config>
 8003874:	4603      	mov	r3, r0
 8003876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800387a:	e004      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003882:	e000      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003884:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003886:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388a:	2b00      	cmp	r3, #0
 800388c:	d10a      	bne.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800388e:	4b5a      	ldr	r3, [pc, #360]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003892:	f023 0103 	bic.w	r1, r3, #3
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800389c:	4a56      	ldr	r2, [pc, #344]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389e:	430b      	orrs	r3, r1
 80038a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80038a2:	e003      	b.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80038ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80038b8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80038c6:	460b      	mov	r3, r1
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f000 809f 	beq.w	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038ce:	4b4b      	ldr	r3, [pc, #300]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a4a      	ldr	r2, [pc, #296]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038da:	f7fd fb17 	bl	8000f0c <HAL_GetTick>
 80038de:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038e2:	e00b      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038e4:	f7fd fb12 	bl	8000f0c <HAL_GetTick>
 80038e8:	4602      	mov	r2, r0
 80038ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b64      	cmp	r3, #100	@ 0x64
 80038f2:	d903      	bls.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038fa:	e005      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038fc:	4b3f      	ldr	r3, [pc, #252]	@ (80039fc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ed      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390c:	2b00      	cmp	r3, #0
 800390e:	d179      	bne.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003910:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003912:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003914:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003918:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800391c:	4053      	eors	r3, r2
 800391e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003922:	2b00      	cmp	r3, #0
 8003924:	d015      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003926:	4b34      	ldr	r3, [pc, #208]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800392a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800392e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003932:	4b31      	ldr	r3, [pc, #196]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	4a30      	ldr	r2, [pc, #192]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800393c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800393e:	4b2e      	ldr	r3, [pc, #184]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003942:	4a2d      	ldr	r2, [pc, #180]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003944:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003948:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800394a:	4a2b      	ldr	r2, [pc, #172]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800394c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003950:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003956:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800395a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800395e:	d118      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003960:	f7fd fad4 	bl	8000f0c <HAL_GetTick>
 8003964:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003968:	e00d      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fd facf 	bl	8000f0c <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003974:	1ad2      	subs	r2, r2, r3
 8003976:	f241 3388 	movw	r3, #5000	@ 0x1388
 800397a:	429a      	cmp	r2, r3
 800397c:	d903      	bls.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003984:	e005      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003986:	4b1c      	ldr	r3, [pc, #112]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	f003 0302 	and.w	r3, r3, #2
 800398e:	2b00      	cmp	r3, #0
 8003990:	d0eb      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003996:	2b00      	cmp	r3, #0
 8003998:	d129      	bne.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800399e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80039aa:	d10e      	bne.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80039ac:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039ae:	691b      	ldr	r3, [r3, #16]
 80039b0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80039b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039b8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039bc:	091a      	lsrs	r2, r3, #4
 80039be:	4b10      	ldr	r3, [pc, #64]	@ (8003a00 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	4a0d      	ldr	r2, [pc, #52]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6113      	str	r3, [r2, #16]
 80039c8:	e005      	b.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039cc:	691b      	ldr	r3, [r3, #16]
 80039ce:	4a0a      	ldr	r2, [pc, #40]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80039d4:	6113      	str	r3, [r2, #16]
 80039d6:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80039e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e6:	4a04      	ldr	r2, [pc, #16]	@ (80039f8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ec:	e00e      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80039f6:	e009      	b.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x924>
 80039f8:	58024400 	.word	0x58024400
 80039fc:	58024800 	.word	0x58024800
 8003a00:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a14:	f002 0301 	and.w	r3, r2, #1
 8003a18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003a22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003a26:	460b      	mov	r3, r1
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	f000 8089 	beq.w	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a32:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a34:	2b28      	cmp	r3, #40	@ 0x28
 8003a36:	d86b      	bhi.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003a38:	a201      	add	r2, pc, #4	@ (adr r2, 8003a40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003b19 	.word	0x08003b19
 8003a44:	08003b11 	.word	0x08003b11
 8003a48:	08003b11 	.word	0x08003b11
 8003a4c:	08003b11 	.word	0x08003b11
 8003a50:	08003b11 	.word	0x08003b11
 8003a54:	08003b11 	.word	0x08003b11
 8003a58:	08003b11 	.word	0x08003b11
 8003a5c:	08003b11 	.word	0x08003b11
 8003a60:	08003ae5 	.word	0x08003ae5
 8003a64:	08003b11 	.word	0x08003b11
 8003a68:	08003b11 	.word	0x08003b11
 8003a6c:	08003b11 	.word	0x08003b11
 8003a70:	08003b11 	.word	0x08003b11
 8003a74:	08003b11 	.word	0x08003b11
 8003a78:	08003b11 	.word	0x08003b11
 8003a7c:	08003b11 	.word	0x08003b11
 8003a80:	08003afb 	.word	0x08003afb
 8003a84:	08003b11 	.word	0x08003b11
 8003a88:	08003b11 	.word	0x08003b11
 8003a8c:	08003b11 	.word	0x08003b11
 8003a90:	08003b11 	.word	0x08003b11
 8003a94:	08003b11 	.word	0x08003b11
 8003a98:	08003b11 	.word	0x08003b11
 8003a9c:	08003b11 	.word	0x08003b11
 8003aa0:	08003b19 	.word	0x08003b19
 8003aa4:	08003b11 	.word	0x08003b11
 8003aa8:	08003b11 	.word	0x08003b11
 8003aac:	08003b11 	.word	0x08003b11
 8003ab0:	08003b11 	.word	0x08003b11
 8003ab4:	08003b11 	.word	0x08003b11
 8003ab8:	08003b11 	.word	0x08003b11
 8003abc:	08003b11 	.word	0x08003b11
 8003ac0:	08003b19 	.word	0x08003b19
 8003ac4:	08003b11 	.word	0x08003b11
 8003ac8:	08003b11 	.word	0x08003b11
 8003acc:	08003b11 	.word	0x08003b11
 8003ad0:	08003b11 	.word	0x08003b11
 8003ad4:	08003b11 	.word	0x08003b11
 8003ad8:	08003b11 	.word	0x08003b11
 8003adc:	08003b11 	.word	0x08003b11
 8003ae0:	08003b19 	.word	0x08003b19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae8:	3308      	adds	r3, #8
 8003aea:	2101      	movs	r1, #1
 8003aec:	4618      	mov	r0, r3
 8003aee:	f000 ffc3 	bl	8004a78 <RCCEx_PLL2_Config>
 8003af2:	4603      	mov	r3, r0
 8003af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003af8:	e00f      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afe:	3328      	adds	r3, #40	@ 0x28
 8003b00:	2101      	movs	r1, #1
 8003b02:	4618      	mov	r0, r3
 8003b04:	f001 f86a 	bl	8004bdc <RCCEx_PLL3_Config>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003b0e:	e004      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b16:	e000      	b.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003b18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10a      	bne.n	8003b38 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003b22:	4bbf      	ldr	r3, [pc, #764]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b26:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003b30:	4abb      	ldr	r2, [pc, #748]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b32:	430b      	orrs	r3, r1
 8003b34:	6553      	str	r3, [r2, #84]	@ 0x54
 8003b36:	e003      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b48:	f002 0302 	and.w	r3, r2, #2
 8003b4c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003b56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003b5a:	460b      	mov	r3, r1
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	d041      	beq.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d824      	bhi.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b70 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b70:	08003bbd 	.word	0x08003bbd
 8003b74:	08003b89 	.word	0x08003b89
 8003b78:	08003b9f 	.word	0x08003b9f
 8003b7c:	08003bbd 	.word	0x08003bbd
 8003b80:	08003bbd 	.word	0x08003bbd
 8003b84:	08003bbd 	.word	0x08003bbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b8c:	3308      	adds	r3, #8
 8003b8e:	2101      	movs	r1, #1
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 ff71 	bl	8004a78 <RCCEx_PLL2_Config>
 8003b96:	4603      	mov	r3, r0
 8003b98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003b9c:	e00f      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	3328      	adds	r3, #40	@ 0x28
 8003ba4:	2101      	movs	r1, #1
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f001 f818 	bl	8004bdc <RCCEx_PLL3_Config>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003bb2:	e004      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bba:	e000      	b.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003bbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bbe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d10a      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003bc6:	4b96      	ldr	r3, [pc, #600]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bca:	f023 0107 	bic.w	r1, r3, #7
 8003bce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003bd4:	4a92      	ldr	r2, [pc, #584]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003bd6:	430b      	orrs	r3, r1
 8003bd8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bdc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f002 0304 	and.w	r3, r2, #4
 8003bf0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003bfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003bfe:	460b      	mov	r3, r1
 8003c00:	4313      	orrs	r3, r2
 8003c02:	d044      	beq.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003c04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c0c:	2b05      	cmp	r3, #5
 8003c0e:	d825      	bhi.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003c10:	a201      	add	r2, pc, #4	@ (adr r2, 8003c18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c16:	bf00      	nop
 8003c18:	08003c65 	.word	0x08003c65
 8003c1c:	08003c31 	.word	0x08003c31
 8003c20:	08003c47 	.word	0x08003c47
 8003c24:	08003c65 	.word	0x08003c65
 8003c28:	08003c65 	.word	0x08003c65
 8003c2c:	08003c65 	.word	0x08003c65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c34:	3308      	adds	r3, #8
 8003c36:	2101      	movs	r1, #1
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 ff1d 	bl	8004a78 <RCCEx_PLL2_Config>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c44:	e00f      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c4a:	3328      	adds	r3, #40	@ 0x28
 8003c4c:	2101      	movs	r1, #1
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f000 ffc4 	bl	8004bdc <RCCEx_PLL3_Config>
 8003c54:	4603      	mov	r3, r0
 8003c56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003c5a:	e004      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c62:	e000      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003c64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d10b      	bne.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c6e:	4b6c      	ldr	r3, [pc, #432]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c72:	f023 0107 	bic.w	r1, r3, #7
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c7e:	4a68      	ldr	r2, [pc, #416]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c84:	e003      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c8a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003c8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f002 0320 	and.w	r3, r2, #32
 8003c9a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ca4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d055      	beq.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003cb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cba:	d033      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003cbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003cc0:	d82c      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cc6:	d02f      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ccc:	d826      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cd2:	d02b      	beq.n	8003d2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003cd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003cd8:	d820      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003cda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cde:	d012      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003ce0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ce4:	d81a      	bhi.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d022      	beq.n	8003d30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003cea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003cee:	d115      	bne.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf4:	3308      	adds	r3, #8
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	f000 febd 	bl	8004a78 <RCCEx_PLL2_Config>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d04:	e015      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0a:	3328      	adds	r3, #40	@ 0x28
 8003d0c:	2102      	movs	r1, #2
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f000 ff64 	bl	8004bdc <RCCEx_PLL3_Config>
 8003d14:	4603      	mov	r3, r0
 8003d16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003d1a:	e00a      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d22:	e006      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d24:	bf00      	nop
 8003d26:	e004      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d28:	bf00      	nop
 8003d2a:	e002      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d2c:	bf00      	nop
 8003d2e:	e000      	b.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d10b      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d3a:	4b39      	ldr	r3, [pc, #228]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003d4a:	4a35      	ldr	r2, [pc, #212]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d50:	e003      	b.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d62:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003d66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003d70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4313      	orrs	r3, r2
 8003d78:	d058      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003d82:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d86:	d033      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003d88:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003d8c:	d82c      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d92:	d02f      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003d94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d98:	d826      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003d9a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003d9e:	d02b      	beq.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003da0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003da4:	d820      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003da6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003daa:	d012      	beq.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003dac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003db0:	d81a      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d022      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003dba:	d115      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	2100      	movs	r1, #0
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f000 fe57 	bl	8004a78 <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003dd0:	e015      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd6:	3328      	adds	r3, #40	@ 0x28
 8003dd8:	2102      	movs	r1, #2
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f000 fefe 	bl	8004bdc <RCCEx_PLL3_Config>
 8003de0:	4603      	mov	r3, r0
 8003de2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003de6:	e00a      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003dee:	e006      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003df0:	bf00      	nop
 8003df2:	e004      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003df4:	bf00      	nop
 8003df6:	e002      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003df8:	bf00      	nop
 8003dfa:	e000      	b.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10e      	bne.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003e06:	4b06      	ldr	r3, [pc, #24]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e0a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003e16:	4a02      	ldr	r2, [pc, #8]	@ (8003e20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e18:	430b      	orrs	r3, r1
 8003e1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e1c:	e006      	b.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003e1e:	bf00      	nop
 8003e20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e28:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003e38:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003e42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003e46:	460b      	mov	r3, r1
 8003e48:	4313      	orrs	r3, r2
 8003e4a:	d055      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003e54:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e58:	d033      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003e5a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003e5e:	d82c      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e64:	d02f      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003e66:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e6a:	d826      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e6c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e70:	d02b      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003e72:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003e76:	d820      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e78:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e7c:	d012      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003e7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e82:	d81a      	bhi.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d022      	beq.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003e88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8c:	d115      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003e8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e92:	3308      	adds	r3, #8
 8003e94:	2100      	movs	r1, #0
 8003e96:	4618      	mov	r0, r3
 8003e98:	f000 fdee 	bl	8004a78 <RCCEx_PLL2_Config>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ea2:	e015      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea8:	3328      	adds	r3, #40	@ 0x28
 8003eaa:	2102      	movs	r1, #2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fe95 	bl	8004bdc <RCCEx_PLL3_Config>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003eb8:	e00a      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ec0:	e006      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ec2:	bf00      	nop
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ec6:	bf00      	nop
 8003ec8:	e002      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003eca:	bf00      	nop
 8003ecc:	e000      	b.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ece:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ed0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d10b      	bne.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ed8:	4ba1      	ldr	r3, [pc, #644]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003edc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003ee8:	4a9d      	ldr	r2, [pc, #628]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003eea:	430b      	orrs	r3, r1
 8003eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eee:	e003      	b.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ef0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ef4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f002 0308 	and.w	r3, r2, #8
 8003f04:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f0e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003f12:	460b      	mov	r3, r1
 8003f14:	4313      	orrs	r3, r2
 8003f16:	d01e      	beq.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f24:	d10c      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2a:	3328      	adds	r3, #40	@ 0x28
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fe54 	bl	8004bdc <RCCEx_PLL3_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003f40:	4b87      	ldr	r3, [pc, #540]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f44:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003f50:	4a83      	ldr	r2, [pc, #524]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f52:	430b      	orrs	r3, r1
 8003f54:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f5e:	f002 0310 	and.w	r3, r2, #16
 8003f62:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003f66:	2300      	movs	r3, #0
 8003f68:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003f6c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003f70:	460b      	mov	r3, r1
 8003f72:	4313      	orrs	r3, r2
 8003f74:	d01e      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f82:	d10c      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f88:	3328      	adds	r3, #40	@ 0x28
 8003f8a:	2102      	movs	r1, #2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fe25 	bl	8004bdc <RCCEx_PLL3_Config>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f9e:	4b70      	ldr	r3, [pc, #448]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fae:	4a6c      	ldr	r2, [pc, #432]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003fc0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003fca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	d03e      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003fd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003fdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fe0:	d022      	beq.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003fe6:	d81b      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d003      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ff0:	d00b      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003ff2:	e015      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f000 fd3b 	bl	8004a78 <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004008:	e00f      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400e:	3328      	adds	r3, #40	@ 0x28
 8004010:	2102      	movs	r1, #2
 8004012:	4618      	mov	r0, r3
 8004014:	f000 fde2 	bl	8004bdc <RCCEx_PLL3_Config>
 8004018:	4603      	mov	r3, r0
 800401a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800401e:	e004      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004026:	e000      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004028:	bf00      	nop
    }

    if (ret == HAL_OK)
 800402a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004032:	4b4b      	ldr	r3, [pc, #300]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004036:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800403a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800403e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004042:	4a47      	ldr	r2, [pc, #284]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004044:	430b      	orrs	r3, r1
 8004046:	6593      	str	r3, [r2, #88]	@ 0x58
 8004048:	e003      	b.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800405e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004060:	2300      	movs	r3, #0
 8004062:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004064:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004068:	460b      	mov	r3, r1
 800406a:	4313      	orrs	r3, r2
 800406c:	d03b      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800406e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004076:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800407a:	d01f      	beq.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800407c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004080:	d818      	bhi.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004082:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004086:	d003      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004088:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800408c:	d007      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800408e:	e011      	b.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004090:	4b33      	ldr	r3, [pc, #204]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	4a32      	ldr	r2, [pc, #200]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004096:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800409a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800409c:	e00f      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800409e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040a2:	3328      	adds	r3, #40	@ 0x28
 80040a4:	2101      	movs	r1, #1
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fd98 	bl	8004bdc <RCCEx_PLL3_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80040b2:	e004      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80040ba:	e000      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80040bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040c6:	4b26      	ldr	r3, [pc, #152]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040ca:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80040ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040d6:	4a22      	ldr	r2, [pc, #136]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040d8:	430b      	orrs	r3, r1
 80040da:	6553      	str	r3, [r2, #84]	@ 0x54
 80040dc:	e003      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80040e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ee:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80040f2:	673b      	str	r3, [r7, #112]	@ 0x70
 80040f4:	2300      	movs	r3, #0
 80040f6:	677b      	str	r3, [r7, #116]	@ 0x74
 80040f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80040fc:	460b      	mov	r3, r1
 80040fe:	4313      	orrs	r3, r2
 8004100:	d034      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004102:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004108:	2b00      	cmp	r3, #0
 800410a:	d003      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d007      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004112:	e011      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004114:	4b12      	ldr	r3, [pc, #72]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004118:	4a11      	ldr	r2, [pc, #68]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800411a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800411e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004120:	e00e      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	3308      	adds	r3, #8
 8004128:	2102      	movs	r1, #2
 800412a:	4618      	mov	r0, r3
 800412c:	f000 fca4 	bl	8004a78 <RCCEx_PLL2_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004136:	e003      	b.n	8004140 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800413e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004144:	2b00      	cmp	r3, #0
 8004146:	d10d      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004148:	4b05      	ldr	r3, [pc, #20]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800414a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800414c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004154:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004156:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004158:	430b      	orrs	r3, r1
 800415a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004178:	66bb      	str	r3, [r7, #104]	@ 0x68
 800417a:	2300      	movs	r3, #0
 800417c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800417e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d00c      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	3328      	adds	r3, #40	@ 0x28
 800418e:	2102      	movs	r1, #2
 8004190:	4618      	mov	r0, r3
 8004192:	f000 fd23 	bl	8004bdc <RCCEx_PLL3_Config>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80041ae:	663b      	str	r3, [r7, #96]	@ 0x60
 80041b0:	2300      	movs	r3, #0
 80041b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80041b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80041b8:	460b      	mov	r3, r1
 80041ba:	4313      	orrs	r3, r2
 80041bc:	d038      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80041be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041ca:	d018      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80041cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80041d0:	d811      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041d6:	d014      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80041d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041dc:	d80b      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d011      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80041e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041e6:	d106      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041e8:	4bc3      	ldr	r3, [pc, #780]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ec:	4ac2      	ldr	r2, [pc, #776]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80041f4:	e008      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041fc:	e004      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80041fe:	bf00      	nop
 8004200:	e002      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004206:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004210:	4bb9      	ldr	r3, [pc, #740]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004212:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004214:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004218:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800421c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004220:	4ab5      	ldr	r2, [pc, #724]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004222:	430b      	orrs	r3, r1
 8004224:	6553      	str	r3, [r2, #84]	@ 0x54
 8004226:	e003      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004228:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800422c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800423c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800423e:	2300      	movs	r3, #0
 8004240:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004242:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004246:	460b      	mov	r3, r1
 8004248:	4313      	orrs	r3, r2
 800424a:	d009      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800424c:	4baa      	ldr	r3, [pc, #680]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004250:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004258:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800425a:	4aa7      	ldr	r2, [pc, #668]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800425c:	430b      	orrs	r3, r1
 800425e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004268:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800426c:	653b      	str	r3, [r7, #80]	@ 0x50
 800426e:	2300      	movs	r3, #0
 8004270:	657b      	str	r3, [r7, #84]	@ 0x54
 8004272:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d00a      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800427c:	4b9e      	ldr	r3, [pc, #632]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004288:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800428c:	4a9a      	ldr	r2, [pc, #616]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800428e:	430b      	orrs	r3, r1
 8004290:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800429e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a0:	2300      	movs	r3, #0
 80042a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80042a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80042a8:	460b      	mov	r3, r1
 80042aa:	4313      	orrs	r3, r2
 80042ac:	d009      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80042ae:	4b92      	ldr	r3, [pc, #584]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80042bc:	4a8e      	ldr	r2, [pc, #568]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042be:	430b      	orrs	r3, r1
 80042c0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80042ce:	643b      	str	r3, [r7, #64]	@ 0x40
 80042d0:	2300      	movs	r3, #0
 80042d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80042d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d00e      	beq.n	80042fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80042de:	4b86      	ldr	r3, [pc, #536]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	4a85      	ldr	r2, [pc, #532]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042e4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80042e8:	6113      	str	r3, [r2, #16]
 80042ea:	4b83      	ldr	r3, [pc, #524]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ec:	6919      	ldr	r1, [r3, #16]
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80042f6:	4a80      	ldr	r2, [pc, #512]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80042fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004304:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004308:	63bb      	str	r3, [r7, #56]	@ 0x38
 800430a:	2300      	movs	r3, #0
 800430c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800430e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004312:	460b      	mov	r3, r1
 8004314:	4313      	orrs	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004318:	4b77      	ldr	r3, [pc, #476]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800431a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800431c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004324:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004326:	4a74      	ldr	r2, [pc, #464]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004328:	430b      	orrs	r3, r1
 800432a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800432c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004334:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004338:	633b      	str	r3, [r7, #48]	@ 0x30
 800433a:	2300      	movs	r3, #0
 800433c:	637b      	str	r3, [r7, #52]	@ 0x34
 800433e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004342:	460b      	mov	r3, r1
 8004344:	4313      	orrs	r3, r2
 8004346:	d00a      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004348:	4b6b      	ldr	r3, [pc, #428]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004354:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004358:	4a67      	ldr	r2, [pc, #412]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800435a:	430b      	orrs	r3, r1
 800435c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004366:	2100      	movs	r1, #0
 8004368:	62b9      	str	r1, [r7, #40]	@ 0x28
 800436a:	f003 0301 	and.w	r3, r3, #1
 800436e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004370:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8004374:	460b      	mov	r3, r1
 8004376:	4313      	orrs	r3, r2
 8004378:	d011      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	3308      	adds	r3, #8
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fb78 	bl	8004a78 <RCCEx_PLL2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800438e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004392:	2b00      	cmp	r3, #0
 8004394:	d003      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004396:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800439a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	2100      	movs	r1, #0
 80043a8:	6239      	str	r1, [r7, #32]
 80043aa:	f003 0302 	and.w	r3, r3, #2
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80043b4:	460b      	mov	r3, r1
 80043b6:	4313      	orrs	r3, r2
 80043b8:	d011      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043be:	3308      	adds	r3, #8
 80043c0:	2101      	movs	r1, #1
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 fb58 	bl	8004a78 <RCCEx_PLL2_Config>
 80043c8:	4603      	mov	r3, r0
 80043ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80043ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e6:	2100      	movs	r1, #0
 80043e8:	61b9      	str	r1, [r7, #24]
 80043ea:	f003 0304 	and.w	r3, r3, #4
 80043ee:	61fb      	str	r3, [r7, #28]
 80043f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80043f4:	460b      	mov	r3, r1
 80043f6:	4313      	orrs	r3, r2
 80043f8:	d011      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043fe:	3308      	adds	r3, #8
 8004400:	2102      	movs	r1, #2
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb38 	bl	8004a78 <RCCEx_PLL2_Config>
 8004408:	4603      	mov	r3, r0
 800440a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800440e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004412:	2b00      	cmp	r3, #0
 8004414:	d003      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800441a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800441e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	2100      	movs	r1, #0
 8004428:	6139      	str	r1, [r7, #16]
 800442a:	f003 0308 	and.w	r3, r3, #8
 800442e:	617b      	str	r3, [r7, #20]
 8004430:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004434:	460b      	mov	r3, r1
 8004436:	4313      	orrs	r3, r2
 8004438:	d011      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800443a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800443e:	3328      	adds	r3, #40	@ 0x28
 8004440:	2100      	movs	r1, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f000 fbca 	bl	8004bdc <RCCEx_PLL3_Config>
 8004448:	4603      	mov	r3, r0
 800444a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800444e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004452:	2b00      	cmp	r3, #0
 8004454:	d003      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004456:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800445a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	2100      	movs	r1, #0
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d011      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800447e:	3328      	adds	r3, #40	@ 0x28
 8004480:	2101      	movs	r1, #1
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fbaa 	bl	8004bdc <RCCEx_PLL3_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800449a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	2100      	movs	r1, #0
 80044a8:	6039      	str	r1, [r7, #0]
 80044aa:	f003 0320 	and.w	r3, r3, #32
 80044ae:	607b      	str	r3, [r7, #4]
 80044b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044be:	3328      	adds	r3, #40	@ 0x28
 80044c0:	2102      	movs	r1, #2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fb8a 	bl	8004bdc <RCCEx_PLL3_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80044de:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	e000      	b.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80044f2:	46bd      	mov	sp, r7
 80044f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044f8:	58024400 	.word	0x58024400

080044fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004500:	f7fe fd96 	bl	8003030 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	091b      	lsrs	r3, r3, #4
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4904      	ldr	r1, [pc, #16]	@ (8004524 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	58024400 	.word	0x58024400
 8004524:	08007644 	.word	0x08007644

08004528 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004528:	b480      	push	{r7}
 800452a:	b089      	sub	sp, #36	@ 0x24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004530:	4ba1      	ldr	r3, [pc, #644]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004532:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004534:	f003 0303 	and.w	r3, r3, #3
 8004538:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800453a:	4b9f      	ldr	r3, [pc, #636]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800453c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800453e:	0b1b      	lsrs	r3, r3, #12
 8004540:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004544:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004546:	4b9c      	ldr	r3, [pc, #624]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	f003 0301 	and.w	r3, r3, #1
 8004550:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004552:	4b99      	ldr	r3, [pc, #612]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004556:	08db      	lsrs	r3, r3, #3
 8004558:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	fb02 f303 	mul.w	r3, r2, r3
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8111 	beq.w	8004798 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	2b02      	cmp	r3, #2
 800457a:	f000 8083 	beq.w	8004684 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b02      	cmp	r3, #2
 8004582:	f200 80a1 	bhi.w	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004586:	69bb      	ldr	r3, [r7, #24]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d003      	beq.n	8004594 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d056      	beq.n	8004640 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004592:	e099      	b.n	80046c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004594:	4b88      	ldr	r3, [pc, #544]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d02d      	beq.n	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80045a0:	4b85      	ldr	r3, [pc, #532]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	08db      	lsrs	r3, r3, #3
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	4a84      	ldr	r2, [pc, #528]	@ (80047bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80045ac:	fa22 f303 	lsr.w	r3, r2, r3
 80045b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	ee07 3a90 	vmov	s15, r3
 80045b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b7b      	ldr	r3, [pc, #492]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a03 	vldr	s12, [r7, #12]
 80045de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80045fa:	e087      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004606:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80047c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800460a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800460e:	4b6a      	ldr	r3, [pc, #424]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004612:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004616:	ee07 3a90 	vmov	s15, r3
 800461a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800461e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004622:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004626:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800462e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004632:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800463e:	e065      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800464a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800464e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004652:	4b59      	ldr	r3, [pc, #356]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004654:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800465a:	ee07 3a90 	vmov	s15, r3
 800465e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004662:	ed97 6a03 	vldr	s12, [r7, #12]
 8004666:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800466a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800466e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800467a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800467e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004682:	e043      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800468e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80047cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004696:	4b48      	ldr	r3, [pc, #288]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800469e:	ee07 3a90 	vmov	s15, r3
 80046a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80046aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80046c6:	e021      	b.n	800470c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80046d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046da:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046e2:	ee07 3a90 	vmov	s15, r3
 80046e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80046ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80047c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80046fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004706:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800470a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800470c:	4b2a      	ldr	r3, [pc, #168]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004710:	0a5b      	lsrs	r3, r3, #9
 8004712:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004722:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004726:	edd7 6a07 	vldr	s13, [r7, #28]
 800472a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004732:	ee17 2a90 	vmov	r2, s15
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800473a:	4b1f      	ldr	r3, [pc, #124]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800473c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800473e:	0c1b      	lsrs	r3, r3, #16
 8004740:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004744:	ee07 3a90 	vmov	s15, r3
 8004748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004750:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004754:	edd7 6a07 	vldr	s13, [r7, #28]
 8004758:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800475c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004760:	ee17 2a90 	vmov	r2, s15
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004768:	4b13      	ldr	r3, [pc, #76]	@ (80047b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800476c:	0e1b      	lsrs	r3, r3, #24
 800476e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004772:	ee07 3a90 	vmov	s15, r3
 8004776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800477a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800477e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004782:	edd7 6a07 	vldr	s13, [r7, #28]
 8004786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800478a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800478e:	ee17 2a90 	vmov	r2, s15
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004796:	e008      	b.n	80047aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	609a      	str	r2, [r3, #8]
}
 80047aa:	bf00      	nop
 80047ac:	3724      	adds	r7, #36	@ 0x24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	58024400 	.word	0x58024400
 80047bc:	03d09000 	.word	0x03d09000
 80047c0:	46000000 	.word	0x46000000
 80047c4:	4c742400 	.word	0x4c742400
 80047c8:	4a742400 	.word	0x4a742400
 80047cc:	4af42400 	.word	0x4af42400

080047d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b089      	sub	sp, #36	@ 0x24
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047d8:	4ba1      	ldr	r3, [pc, #644]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047dc:	f003 0303 	and.w	r3, r3, #3
 80047e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80047e2:	4b9f      	ldr	r3, [pc, #636]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047e6:	0d1b      	lsrs	r3, r3, #20
 80047e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80047ee:	4b9c      	ldr	r3, [pc, #624]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f2:	0a1b      	lsrs	r3, r3, #8
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80047fa:	4b99      	ldr	r3, [pc, #612]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fe:	08db      	lsrs	r3, r3, #3
 8004800:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	2b00      	cmp	r3, #0
 800481a:	f000 8111 	beq.w	8004a40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	2b02      	cmp	r3, #2
 8004822:	f000 8083 	beq.w	800492c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	2b02      	cmp	r3, #2
 800482a:	f200 80a1 	bhi.w	8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d056      	beq.n	80048e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800483a:	e099      	b.n	8004970 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800483c:	4b88      	ldr	r3, [pc, #544]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0320 	and.w	r3, r3, #32
 8004844:	2b00      	cmp	r3, #0
 8004846:	d02d      	beq.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004848:	4b85      	ldr	r3, [pc, #532]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	08db      	lsrs	r3, r3, #3
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	4a84      	ldr	r2, [pc, #528]	@ (8004a64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
 8004858:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800485a:	68bb      	ldr	r3, [r7, #8]
 800485c:	ee07 3a90 	vmov	s15, r3
 8004860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b7b      	ldr	r3, [pc, #492]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80048a2:	e087      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80048b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b6:	4b6a      	ldr	r3, [pc, #424]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048be:	ee07 3a90 	vmov	s15, r3
 80048c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e6:	e065      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048fa:	4b59      	ldr	r3, [pc, #356]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800490a:	ed97 6a03 	vldr	s12, [r7, #12]
 800490e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800491a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800491e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004922:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800492a:	e043      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800492c:	697b      	ldr	r3, [r7, #20]
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004936:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800493a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800493e:	4b48      	ldr	r3, [pc, #288]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004942:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004946:	ee07 3a90 	vmov	s15, r3
 800494a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800494e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004952:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800495a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800495e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004962:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004966:	ee67 7a27 	vmul.f32	s15, s14, s15
 800496a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800496e:	e021      	b.n	80049b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	ee07 3a90 	vmov	s15, r3
 8004976:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800497a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800497e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004982:	4b37      	ldr	r3, [pc, #220]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800498a:	ee07 3a90 	vmov	s15, r3
 800498e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004992:	ed97 6a03 	vldr	s12, [r7, #12]
 8004996:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800499a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800499e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80049b4:	4b2a      	ldr	r3, [pc, #168]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80049e2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a08:	ee17 2a90 	vmov	r2, s15
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004a10:	4b13      	ldr	r3, [pc, #76]	@ (8004a60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a14:	0e1b      	lsrs	r3, r3, #24
 8004a16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1a:	ee07 3a90 	vmov	s15, r3
 8004a1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a36:	ee17 2a90 	vmov	r2, s15
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004a3e:	e008      	b.n	8004a52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
}
 8004a52:	bf00      	nop
 8004a54:	3724      	adds	r7, #36	@ 0x24
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	58024400 	.word	0x58024400
 8004a64:	03d09000 	.word	0x03d09000
 8004a68:	46000000 	.word	0x46000000
 8004a6c:	4c742400 	.word	0x4c742400
 8004a70:	4a742400 	.word	0x4a742400
 8004a74:	4af42400 	.word	0x4af42400

08004a78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b084      	sub	sp, #16
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004a86:	4b53      	ldr	r3, [pc, #332]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b03      	cmp	r3, #3
 8004a90:	d101      	bne.n	8004a96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e099      	b.n	8004bca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004a96:	4b4f      	ldr	r3, [pc, #316]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a4e      	ldr	r2, [pc, #312]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa2:	f7fc fa33 	bl	8000f0c <HAL_GetTick>
 8004aa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004aa8:	e008      	b.n	8004abc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004aaa:	f7fc fa2f 	bl	8000f0c <HAL_GetTick>
 8004aae:	4602      	mov	r2, r0
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	2b02      	cmp	r3, #2
 8004ab6:	d901      	bls.n	8004abc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ab8:	2303      	movs	r3, #3
 8004aba:	e086      	b.n	8004bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004abc:	4b45      	ldr	r3, [pc, #276]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1f0      	bne.n	8004aaa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ac8:	4b42      	ldr	r3, [pc, #264]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004acc:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	031b      	lsls	r3, r3, #12
 8004ad6:	493f      	ldr	r1, [pc, #252]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	628b      	str	r3, [r1, #40]	@ 0x28
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	3b01      	subs	r3, #1
 8004aec:	025b      	lsls	r3, r3, #9
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	431a      	orrs	r2, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	3b01      	subs	r3, #1
 8004af8:	041b      	lsls	r3, r3, #16
 8004afa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004afe:	431a      	orrs	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	061b      	lsls	r3, r3, #24
 8004b08:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004b0c:	4931      	ldr	r1, [pc, #196]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004b12:	4b30      	ldr	r3, [pc, #192]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	492d      	ldr	r1, [pc, #180]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004b24:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b28:	f023 0220 	bic.w	r2, r3, #32
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	4928      	ldr	r1, [pc, #160]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004b36:	4b27      	ldr	r3, [pc, #156]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3a:	4a26      	ldr	r2, [pc, #152]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b3c:	f023 0310 	bic.w	r3, r3, #16
 8004b40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b44:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004b46:	4b24      	ldr	r3, [pc, #144]	@ (8004bd8 <RCCEx_PLL2_Config+0x160>)
 8004b48:	4013      	ands	r3, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	69d2      	ldr	r2, [r2, #28]
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	4920      	ldr	r1, [pc, #128]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004b56:	4b1f      	ldr	r3, [pc, #124]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b5c:	f043 0310 	orr.w	r3, r3, #16
 8004b60:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004b68:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b6c:	4a19      	ldr	r2, [pc, #100]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004b72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b74:	e00f      	b.n	8004b96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b01      	cmp	r3, #1
 8004b7a:	d106      	bne.n	8004b8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004b7c:	4b15      	ldr	r3, [pc, #84]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b80:	4a14      	ldr	r2, [pc, #80]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004b88:	e005      	b.n	8004b96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004b8a:	4b12      	ldr	r3, [pc, #72]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8e:	4a11      	ldr	r2, [pc, #68]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004b94:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004b96:	4b0f      	ldr	r3, [pc, #60]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba2:	f7fc f9b3 	bl	8000f0c <HAL_GetTick>
 8004ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ba8:	e008      	b.n	8004bbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004baa:	f7fc f9af 	bl	8000f0c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e006      	b.n	8004bca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004bbc:	4b05      	ldr	r3, [pc, #20]	@ (8004bd4 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d0f0      	beq.n	8004baa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	ffff0007 	.word	0xffff0007

08004bdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b084      	sub	sp, #16
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004be6:	2300      	movs	r3, #0
 8004be8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004bea:	4b53      	ldr	r3, [pc, #332]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bee:	f003 0303 	and.w	r3, r3, #3
 8004bf2:	2b03      	cmp	r3, #3
 8004bf4:	d101      	bne.n	8004bfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e099      	b.n	8004d2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004bfa:	4b4f      	ldr	r3, [pc, #316]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c00:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c06:	f7fc f981 	bl	8000f0c <HAL_GetTick>
 8004c0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c0c:	e008      	b.n	8004c20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c0e:	f7fc f97d 	bl	8000f0c <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d901      	bls.n	8004c20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c1c:	2303      	movs	r3, #3
 8004c1e:	e086      	b.n	8004d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004c20:	4b45      	ldr	r3, [pc, #276]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1f0      	bne.n	8004c0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004c2c:	4b42      	ldr	r3, [pc, #264]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c30:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	051b      	lsls	r3, r3, #20
 8004c3a:	493f      	ldr	r1, [pc, #252]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	3b01      	subs	r3, #1
 8004c46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	025b      	lsls	r3, r3, #9
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	3b01      	subs	r3, #1
 8004c5c:	041b      	lsls	r3, r3, #16
 8004c5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	061b      	lsls	r3, r3, #24
 8004c6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004c70:	4931      	ldr	r1, [pc, #196]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c72:	4313      	orrs	r3, r2
 8004c74:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004c76:	4b30      	ldr	r3, [pc, #192]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c7a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	492d      	ldr	r1, [pc, #180]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004c88:	4b2b      	ldr	r3, [pc, #172]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	4928      	ldr	r1, [pc, #160]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004c9a:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9e:	4a26      	ldr	r2, [pc, #152]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ca6:	4b24      	ldr	r3, [pc, #144]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ca8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004caa:	4b24      	ldr	r3, [pc, #144]	@ (8004d3c <RCCEx_PLL3_Config+0x160>)
 8004cac:	4013      	ands	r3, r2
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	69d2      	ldr	r2, [r2, #28]
 8004cb2:	00d2      	lsls	r2, r2, #3
 8004cb4:	4920      	ldr	r1, [pc, #128]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004cba:	4b1f      	ldr	r3, [pc, #124]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbe:	4a1e      	ldr	r2, [pc, #120]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ccc:	4b1a      	ldr	r3, [pc, #104]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cd0:	4a19      	ldr	r2, [pc, #100]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cd2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cd8:	e00f      	b.n	8004cfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ce0:	4b15      	ldr	r3, [pc, #84]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	4a14      	ldr	r2, [pc, #80]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004ce6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004cea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004cec:	e005      	b.n	8004cfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004cee:	4b12      	ldr	r3, [pc, #72]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf2:	4a11      	ldr	r2, [pc, #68]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004cfa:	4b0f      	ldr	r3, [pc, #60]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a0e      	ldr	r2, [pc, #56]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d06:	f7fc f901 	bl	8000f0c <HAL_GetTick>
 8004d0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d0c:	e008      	b.n	8004d20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d0e:	f7fc f8fd 	bl	8000f0c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e006      	b.n	8004d2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004d20:	4b05      	ldr	r3, [pc, #20]	@ (8004d38 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0f0      	beq.n	8004d0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop
 8004d38:	58024400 	.word	0x58024400
 8004d3c:	ffff0007 	.word	0xffff0007

08004d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e042      	b.n	8004dd8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f7fb ffad 	bl	8000cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2224      	movs	r2, #36	@ 0x24
 8004d6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f022 0201 	bic.w	r2, r2, #1
 8004d80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d002      	beq.n	8004d90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f001 fa60 	bl	8006250 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fcf5 	bl	8005780 <UART_SetConfig>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d101      	bne.n	8004da0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e01b      	b.n	8004dd8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004dae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004dbe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f042 0201 	orr.w	r2, r2, #1
 8004dce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004dd0:	6878      	ldr	r0, [r7, #4]
 8004dd2:	f001 fadf 	bl	8006394 <UART_CheckIdleState>
 8004dd6:	4603      	mov	r3, r0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3708      	adds	r7, #8
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b08a      	sub	sp, #40	@ 0x28
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df6:	2b20      	cmp	r3, #32
 8004df8:	d17b      	bne.n	8004ef2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d002      	beq.n	8004e06 <HAL_UART_Transmit+0x26>
 8004e00:	88fb      	ldrh	r3, [r7, #6]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e074      	b.n	8004ef4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2221      	movs	r2, #33	@ 0x21
 8004e16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e1a:	f7fc f877 	bl	8000f0c <HAL_GetTick>
 8004e1e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	88fa      	ldrh	r2, [r7, #6]
 8004e24:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	88fa      	ldrh	r2, [r7, #6]
 8004e2c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e38:	d108      	bne.n	8004e4c <HAL_UART_Transmit+0x6c>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d104      	bne.n	8004e4c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	e003      	b.n	8004e54 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004e54:	e030      	b.n	8004eb8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	9300      	str	r3, [sp, #0]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	2180      	movs	r1, #128	@ 0x80
 8004e60:	68f8      	ldr	r0, [r7, #12]
 8004e62:	f001 fb41 	bl	80064e8 <UART_WaitOnFlagUntilTimeout>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d005      	beq.n	8004e78 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e03d      	b.n	8004ef4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	881b      	ldrh	r3, [r3, #0]
 8004e82:	461a      	mov	r2, r3
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e8c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004e8e:	69bb      	ldr	r3, [r7, #24]
 8004e90:	3302      	adds	r3, #2
 8004e92:	61bb      	str	r3, [r7, #24]
 8004e94:	e007      	b.n	8004ea6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	781a      	ldrb	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004ea0:	69fb      	ldr	r3, [r7, #28]
 8004ea2:	3301      	adds	r3, #1
 8004ea4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d1c8      	bne.n	8004e56 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	2140      	movs	r1, #64	@ 0x40
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f001 fb0a 	bl	80064e8 <UART_WaitOnFlagUntilTimeout>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e006      	b.n	8004ef4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2220      	movs	r2, #32
 8004eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	e000      	b.n	8004ef4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004ef2:	2302      	movs	r3, #2
  }
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3720      	adds	r7, #32
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	@ 0x28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f10:	2b20      	cmp	r3, #32
 8004f12:	d137      	bne.n	8004f84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d002      	beq.n	8004f20 <HAL_UART_Receive_IT+0x24>
 8004f1a:	88fb      	ldrh	r3, [r7, #6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e030      	b.n	8004f86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a18      	ldr	r2, [pc, #96]	@ (8004f90 <HAL_UART_Receive_IT+0x94>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01f      	beq.n	8004f74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d018      	beq.n	8004f74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	613b      	str	r3, [r7, #16]
   return(result);
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f56:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	69f9      	ldr	r1, [r7, #28]
 8004f66:	6a3a      	ldr	r2, [r7, #32]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e6      	bne.n	8004f42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004f74:	88fb      	ldrh	r3, [r7, #6]
 8004f76:	461a      	mov	r2, r3
 8004f78:	68b9      	ldr	r1, [r7, #8]
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f001 fb22 	bl	80065c4 <UART_Start_Receive_IT>
 8004f80:	4603      	mov	r3, r0
 8004f82:	e000      	b.n	8004f86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004f84:	2302      	movs	r3, #2
  }
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3728      	adds	r7, #40	@ 0x28
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	58000c00 	.word	0x58000c00

08004f94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b0ba      	sub	sp, #232	@ 0xe8
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	69db      	ldr	r3, [r3, #28]
 8004fa2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004fba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004fbe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004fc2:	4013      	ands	r3, r2
 8004fc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004fc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d11b      	bne.n	8005008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fd4:	f003 0320 	and.w	r3, r3, #32
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d015      	beq.n	8005008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fe0:	f003 0320 	and.w	r3, r3, #32
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d105      	bne.n	8004ff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004fe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 8393 	beq.w	8005724 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	4798      	blx	r3
      }
      return;
 8005006:	e38d      	b.n	8005724 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800500c:	2b00      	cmp	r3, #0
 800500e:	f000 8123 	beq.w	8005258 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005016:	4b8d      	ldr	r3, [pc, #564]	@ (800524c <HAL_UART_IRQHandler+0x2b8>)
 8005018:	4013      	ands	r3, r2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800501e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005022:	4b8b      	ldr	r3, [pc, #556]	@ (8005250 <HAL_UART_IRQHandler+0x2bc>)
 8005024:	4013      	ands	r3, r2
 8005026:	2b00      	cmp	r3, #0
 8005028:	f000 8116 	beq.w	8005258 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800502c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005030:	f003 0301 	and.w	r3, r3, #1
 8005034:	2b00      	cmp	r3, #0
 8005036:	d011      	beq.n	800505c <HAL_UART_IRQHandler+0xc8>
 8005038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00b      	beq.n	800505c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2201      	movs	r2, #1
 800504a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005052:	f043 0201 	orr.w	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800505c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005060:	f003 0302 	and.w	r3, r3, #2
 8005064:	2b00      	cmp	r3, #0
 8005066:	d011      	beq.n	800508c <HAL_UART_IRQHandler+0xf8>
 8005068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00b      	beq.n	800508c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2202      	movs	r2, #2
 800507a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005082:	f043 0204 	orr.w	r2, r3, #4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800508c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d011      	beq.n	80050bc <HAL_UART_IRQHandler+0x128>
 8005098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00b      	beq.n	80050bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2204      	movs	r2, #4
 80050aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050b2:	f043 0202 	orr.w	r2, r3, #2
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80050bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d017      	beq.n	80050f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d105      	bne.n	80050e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80050d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80050d8:	4b5c      	ldr	r3, [pc, #368]	@ (800524c <HAL_UART_IRQHandler+0x2b8>)
 80050da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d00b      	beq.n	80050f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2208      	movs	r2, #8
 80050e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80050ee:	f043 0208 	orr.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80050f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005100:	2b00      	cmp	r3, #0
 8005102:	d012      	beq.n	800512a <HAL_UART_IRQHandler+0x196>
 8005104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005108:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00c      	beq.n	800512a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005120:	f043 0220 	orr.w	r2, r3, #32
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 82f9 	beq.w	8005728 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d013      	beq.n	800516a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005146:	f003 0320 	and.w	r3, r3, #32
 800514a:	2b00      	cmp	r3, #0
 800514c:	d105      	bne.n	800515a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800514e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d007      	beq.n	800516a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800515e:	2b00      	cmp	r3, #0
 8005160:	d003      	beq.n	800516a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005170:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800517e:	2b40      	cmp	r3, #64	@ 0x40
 8005180:	d005      	beq.n	800518e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005186:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800518a:	2b00      	cmp	r3, #0
 800518c:	d054      	beq.n	8005238 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f001 fb3a 	bl	8006808 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800519e:	2b40      	cmp	r3, #64	@ 0x40
 80051a0:	d146      	bne.n	8005230 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	3308      	adds	r3, #8
 80051a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80051b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80051bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80051c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	3308      	adds	r3, #8
 80051ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80051ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80051d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80051da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80051e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d1d9      	bne.n	80051a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d017      	beq.n	8005228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fe:	4a15      	ldr	r2, [pc, #84]	@ (8005254 <HAL_UART_IRQHandler+0x2c0>)
 8005200:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005208:	4618      	mov	r0, r3
 800520a:	f7fc fb3d 	bl	8001888 <HAL_DMA_Abort_IT>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d019      	beq.n	8005248 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800521a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005222:	4610      	mov	r0, r2
 8005224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005226:	e00f      	b.n	8005248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa93 	bl	8005754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800522e:	e00b      	b.n	8005248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fa8f 	bl	8005754 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005236:	e007      	b.n	8005248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f000 fa8b 	bl	8005754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005246:	e26f      	b.n	8005728 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005248:	bf00      	nop
    return;
 800524a:	e26d      	b.n	8005728 <HAL_UART_IRQHandler+0x794>
 800524c:	10000001 	.word	0x10000001
 8005250:	04000120 	.word	0x04000120
 8005254:	080068d5 	.word	0x080068d5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 8203 	bne.w	8005668 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005266:	f003 0310 	and.w	r3, r3, #16
 800526a:	2b00      	cmp	r3, #0
 800526c:	f000 81fc 	beq.w	8005668 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005274:	f003 0310 	and.w	r3, r3, #16
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 81f5 	beq.w	8005668 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	2210      	movs	r2, #16
 8005284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005290:	2b40      	cmp	r3, #64	@ 0x40
 8005292:	f040 816d 	bne.w	8005570 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4aa4      	ldr	r2, [pc, #656]	@ (8005530 <HAL_UART_IRQHandler+0x59c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d068      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4aa1      	ldr	r2, [pc, #644]	@ (8005534 <HAL_UART_IRQHandler+0x5a0>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d061      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a9f      	ldr	r2, [pc, #636]	@ (8005538 <HAL_UART_IRQHandler+0x5a4>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d05a      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4a9c      	ldr	r2, [pc, #624]	@ (800553c <HAL_UART_IRQHandler+0x5a8>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d053      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a9a      	ldr	r2, [pc, #616]	@ (8005540 <HAL_UART_IRQHandler+0x5ac>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d04c      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a97      	ldr	r2, [pc, #604]	@ (8005544 <HAL_UART_IRQHandler+0x5b0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d045      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a95      	ldr	r2, [pc, #596]	@ (8005548 <HAL_UART_IRQHandler+0x5b4>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d03e      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a92      	ldr	r2, [pc, #584]	@ (800554c <HAL_UART_IRQHandler+0x5b8>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d037      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a90      	ldr	r2, [pc, #576]	@ (8005550 <HAL_UART_IRQHandler+0x5bc>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d030      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a8d      	ldr	r2, [pc, #564]	@ (8005554 <HAL_UART_IRQHandler+0x5c0>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d029      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a8b      	ldr	r2, [pc, #556]	@ (8005558 <HAL_UART_IRQHandler+0x5c4>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d022      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a88      	ldr	r2, [pc, #544]	@ (800555c <HAL_UART_IRQHandler+0x5c8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01b      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a86      	ldr	r2, [pc, #536]	@ (8005560 <HAL_UART_IRQHandler+0x5cc>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d014      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a83      	ldr	r2, [pc, #524]	@ (8005564 <HAL_UART_IRQHandler+0x5d0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00d      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a81      	ldr	r2, [pc, #516]	@ (8005568 <HAL_UART_IRQHandler+0x5d4>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d006      	beq.n	8005376 <HAL_UART_IRQHandler+0x3e2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a7e      	ldr	r2, [pc, #504]	@ (800556c <HAL_UART_IRQHandler+0x5d8>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d106      	bne.n	8005384 <HAL_UART_IRQHandler+0x3f0>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	b29b      	uxth	r3, r3
 8005382:	e005      	b.n	8005390 <HAL_UART_IRQHandler+0x3fc>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	b29b      	uxth	r3, r3
 8005390:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005398:	2b00      	cmp	r3, #0
 800539a:	f000 80ad 	beq.w	80054f8 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80053a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053a8:	429a      	cmp	r2, r3
 80053aa:	f080 80a5 	bcs.w	80054f8 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053be:	69db      	ldr	r3, [r3, #28]
 80053c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c4:	f000 8087 	beq.w	80054d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	461a      	mov	r2, r3
 80053ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80053f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80053f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800540a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1da      	bne.n	80053c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3308      	adds	r3, #8
 8005418:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3308      	adds	r3, #8
 8005432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005436:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800543a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800543e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e1      	bne.n	8005412 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3308      	adds	r3, #8
 8005454:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800545e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3308      	adds	r3, #8
 800546e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005472:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005474:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005478:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e3      	bne.n	800544e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549c:	e853 3f00 	ldrex	r3, [r3]
 80054a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a4:	f023 0310 	bic.w	r3, r3, #16
 80054a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	461a      	mov	r2, r3
 80054b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80054b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e4      	bne.n	8005494 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fb febb 	bl	800124c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f000 f939 	bl	8005768 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80054f6:	e119      	b.n	800572c <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80054fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005502:	429a      	cmp	r2, r3
 8005504:	f040 8112 	bne.w	800572c <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800550e:	69db      	ldr	r3, [r3, #28]
 8005510:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005514:	f040 810a 	bne.w	800572c <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f91e 	bl	8005768 <HAL_UARTEx_RxEventCallback>
      return;
 800552c:	e0fe      	b.n	800572c <HAL_UART_IRQHandler+0x798>
 800552e:	bf00      	nop
 8005530:	40020010 	.word	0x40020010
 8005534:	40020028 	.word	0x40020028
 8005538:	40020040 	.word	0x40020040
 800553c:	40020058 	.word	0x40020058
 8005540:	40020070 	.word	0x40020070
 8005544:	40020088 	.word	0x40020088
 8005548:	400200a0 	.word	0x400200a0
 800554c:	400200b8 	.word	0x400200b8
 8005550:	40020410 	.word	0x40020410
 8005554:	40020428 	.word	0x40020428
 8005558:	40020440 	.word	0x40020440
 800555c:	40020458 	.word	0x40020458
 8005560:	40020470 	.word	0x40020470
 8005564:	40020488 	.word	0x40020488
 8005568:	400204a0 	.word	0x400204a0
 800556c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800557c:	b29b      	uxth	r3, r3
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800558a:	b29b      	uxth	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	f000 80cf 	beq.w	8005730 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005592:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 80ca 	beq.w	8005730 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	e853 3f00 	ldrex	r3, [r3]
 80055a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80055aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80055be:	647b      	str	r3, [r7, #68]	@ 0x44
 80055c0:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e4      	bne.n	800559c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	3308      	adds	r3, #8
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	e853 3f00 	ldrex	r3, [r3]
 80055e0:	623b      	str	r3, [r7, #32]
   return(result);
 80055e2:	6a3a      	ldr	r2, [r7, #32]
 80055e4:	4b55      	ldr	r3, [pc, #340]	@ (800573c <HAL_UART_IRQHandler+0x7a8>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	3308      	adds	r3, #8
 80055f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80055f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055fe:	e841 2300 	strex	r3, r2, [r1]
 8005602:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1e3      	bne.n	80055d2 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2220      	movs	r2, #32
 800560e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	e853 3f00 	ldrex	r3, [r3]
 800562a:	60fb      	str	r3, [r7, #12]
   return(result);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f023 0310 	bic.w	r3, r3, #16
 8005632:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	461a      	mov	r2, r3
 800563c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005640:	61fb      	str	r3, [r7, #28]
 8005642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005644:	69b9      	ldr	r1, [r7, #24]
 8005646:	69fa      	ldr	r2, [r7, #28]
 8005648:	e841 2300 	strex	r3, r2, [r1]
 800564c:	617b      	str	r3, [r7, #20]
   return(result);
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1e4      	bne.n	800561e <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800565a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f000 f881 	bl	8005768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005666:	e063      	b.n	8005730 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800566c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00e      	beq.n	8005692 <HAL_UART_IRQHandler+0x6fe>
 8005674:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005678:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d008      	beq.n	8005692 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005688:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f001 fe80 	bl	8007390 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005690:	e051      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005696:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569a:	2b00      	cmp	r3, #0
 800569c:	d014      	beq.n	80056c8 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800569e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d105      	bne.n	80056b6 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80056aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80056ae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d008      	beq.n	80056c8 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d03a      	beq.n	8005734 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	4798      	blx	r3
    }
    return;
 80056c6:	e035      	b.n	8005734 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80056c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_UART_IRQHandler+0x754>
 80056d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d003      	beq.n	80056e8 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f001 f909 	bl	80068f8 <UART_EndTransmit_IT>
    return;
 80056e6:	e026      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80056e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80056ec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_UART_IRQHandler+0x774>
 80056f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80056f8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d003      	beq.n	8005708 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f001 fe59 	bl	80073b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005706:	e016      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800570c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005710:	2b00      	cmp	r3, #0
 8005712:	d010      	beq.n	8005736 <HAL_UART_IRQHandler+0x7a2>
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005718:	2b00      	cmp	r3, #0
 800571a:	da0c      	bge.n	8005736 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f001 fe41 	bl	80073a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005722:	e008      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005724:	bf00      	nop
 8005726:	e006      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005728:	bf00      	nop
 800572a:	e004      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
      return;
 800572c:	bf00      	nop
 800572e:	e002      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
      return;
 8005730:	bf00      	nop
 8005732:	e000      	b.n	8005736 <HAL_UART_IRQHandler+0x7a2>
    return;
 8005734:	bf00      	nop
  }
}
 8005736:	37e8      	adds	r7, #232	@ 0xe8
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}
 800573c:	effffffe 	.word	0xeffffffe

08005740 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005740:	b480      	push	{r7}
 8005742:	b083      	sub	sp, #12
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005748:	bf00      	nop
 800574a:	370c      	adds	r7, #12
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005780:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005784:	b092      	sub	sp, #72	@ 0x48
 8005786:	af00      	add	r7, sp, #0
 8005788:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800578a:	2300      	movs	r3, #0
 800578c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	431a      	orrs	r2, r3
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	431a      	orrs	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	4bbe      	ldr	r3, [pc, #760]	@ (8005aa8 <UART_SetConfig+0x328>)
 80057b0:	4013      	ands	r3, r2
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	6812      	ldr	r2, [r2, #0]
 80057b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057b8:	430b      	orrs	r3, r1
 80057ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	430a      	orrs	r2, r1
 80057d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4ab3      	ldr	r2, [pc, #716]	@ (8005aac <UART_SetConfig+0x32c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d004      	beq.n	80057ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	6a1b      	ldr	r3, [r3, #32]
 80057e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e8:	4313      	orrs	r3, r2
 80057ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	689a      	ldr	r2, [r3, #8]
 80057f2:	4baf      	ldr	r3, [pc, #700]	@ (8005ab0 <UART_SetConfig+0x330>)
 80057f4:	4013      	ands	r3, r2
 80057f6:	697a      	ldr	r2, [r7, #20]
 80057f8:	6812      	ldr	r2, [r2, #0]
 80057fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80057fc:	430b      	orrs	r3, r1
 80057fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005806:	f023 010f 	bic.w	r1, r3, #15
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	430a      	orrs	r2, r1
 8005814:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4aa6      	ldr	r2, [pc, #664]	@ (8005ab4 <UART_SetConfig+0x334>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d177      	bne.n	8005910 <UART_SetConfig+0x190>
 8005820:	4ba5      	ldr	r3, [pc, #660]	@ (8005ab8 <UART_SetConfig+0x338>)
 8005822:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005824:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005828:	2b28      	cmp	r3, #40	@ 0x28
 800582a:	d86d      	bhi.n	8005908 <UART_SetConfig+0x188>
 800582c:	a201      	add	r2, pc, #4	@ (adr r2, 8005834 <UART_SetConfig+0xb4>)
 800582e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005832:	bf00      	nop
 8005834:	080058d9 	.word	0x080058d9
 8005838:	08005909 	.word	0x08005909
 800583c:	08005909 	.word	0x08005909
 8005840:	08005909 	.word	0x08005909
 8005844:	08005909 	.word	0x08005909
 8005848:	08005909 	.word	0x08005909
 800584c:	08005909 	.word	0x08005909
 8005850:	08005909 	.word	0x08005909
 8005854:	080058e1 	.word	0x080058e1
 8005858:	08005909 	.word	0x08005909
 800585c:	08005909 	.word	0x08005909
 8005860:	08005909 	.word	0x08005909
 8005864:	08005909 	.word	0x08005909
 8005868:	08005909 	.word	0x08005909
 800586c:	08005909 	.word	0x08005909
 8005870:	08005909 	.word	0x08005909
 8005874:	080058e9 	.word	0x080058e9
 8005878:	08005909 	.word	0x08005909
 800587c:	08005909 	.word	0x08005909
 8005880:	08005909 	.word	0x08005909
 8005884:	08005909 	.word	0x08005909
 8005888:	08005909 	.word	0x08005909
 800588c:	08005909 	.word	0x08005909
 8005890:	08005909 	.word	0x08005909
 8005894:	080058f1 	.word	0x080058f1
 8005898:	08005909 	.word	0x08005909
 800589c:	08005909 	.word	0x08005909
 80058a0:	08005909 	.word	0x08005909
 80058a4:	08005909 	.word	0x08005909
 80058a8:	08005909 	.word	0x08005909
 80058ac:	08005909 	.word	0x08005909
 80058b0:	08005909 	.word	0x08005909
 80058b4:	080058f9 	.word	0x080058f9
 80058b8:	08005909 	.word	0x08005909
 80058bc:	08005909 	.word	0x08005909
 80058c0:	08005909 	.word	0x08005909
 80058c4:	08005909 	.word	0x08005909
 80058c8:	08005909 	.word	0x08005909
 80058cc:	08005909 	.word	0x08005909
 80058d0:	08005909 	.word	0x08005909
 80058d4:	08005901 	.word	0x08005901
 80058d8:	2301      	movs	r3, #1
 80058da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058de:	e222      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80058e0:	2304      	movs	r3, #4
 80058e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058e6:	e21e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80058e8:	2308      	movs	r3, #8
 80058ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ee:	e21a      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80058f0:	2310      	movs	r3, #16
 80058f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058f6:	e216      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80058f8:	2320      	movs	r3, #32
 80058fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058fe:	e212      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005900:	2340      	movs	r3, #64	@ 0x40
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005906:	e20e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005908:	2380      	movs	r3, #128	@ 0x80
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800590e:	e20a      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a69      	ldr	r2, [pc, #420]	@ (8005abc <UART_SetConfig+0x33c>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d130      	bne.n	800597c <UART_SetConfig+0x1fc>
 800591a:	4b67      	ldr	r3, [pc, #412]	@ (8005ab8 <UART_SetConfig+0x338>)
 800591c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800591e:	f003 0307 	and.w	r3, r3, #7
 8005922:	2b05      	cmp	r3, #5
 8005924:	d826      	bhi.n	8005974 <UART_SetConfig+0x1f4>
 8005926:	a201      	add	r2, pc, #4	@ (adr r2, 800592c <UART_SetConfig+0x1ac>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	08005945 	.word	0x08005945
 8005930:	0800594d 	.word	0x0800594d
 8005934:	08005955 	.word	0x08005955
 8005938:	0800595d 	.word	0x0800595d
 800593c:	08005965 	.word	0x08005965
 8005940:	0800596d 	.word	0x0800596d
 8005944:	2300      	movs	r3, #0
 8005946:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800594a:	e1ec      	b.n	8005d26 <UART_SetConfig+0x5a6>
 800594c:	2304      	movs	r3, #4
 800594e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005952:	e1e8      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005954:	2308      	movs	r3, #8
 8005956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800595a:	e1e4      	b.n	8005d26 <UART_SetConfig+0x5a6>
 800595c:	2310      	movs	r3, #16
 800595e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005962:	e1e0      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005964:	2320      	movs	r3, #32
 8005966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800596a:	e1dc      	b.n	8005d26 <UART_SetConfig+0x5a6>
 800596c:	2340      	movs	r3, #64	@ 0x40
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005972:	e1d8      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800597a:	e1d4      	b.n	8005d26 <UART_SetConfig+0x5a6>
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a4f      	ldr	r2, [pc, #316]	@ (8005ac0 <UART_SetConfig+0x340>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d130      	bne.n	80059e8 <UART_SetConfig+0x268>
 8005986:	4b4c      	ldr	r3, [pc, #304]	@ (8005ab8 <UART_SetConfig+0x338>)
 8005988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	2b05      	cmp	r3, #5
 8005990:	d826      	bhi.n	80059e0 <UART_SetConfig+0x260>
 8005992:	a201      	add	r2, pc, #4	@ (adr r2, 8005998 <UART_SetConfig+0x218>)
 8005994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005998:	080059b1 	.word	0x080059b1
 800599c:	080059b9 	.word	0x080059b9
 80059a0:	080059c1 	.word	0x080059c1
 80059a4:	080059c9 	.word	0x080059c9
 80059a8:	080059d1 	.word	0x080059d1
 80059ac:	080059d9 	.word	0x080059d9
 80059b0:	2300      	movs	r3, #0
 80059b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b6:	e1b6      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059b8:	2304      	movs	r3, #4
 80059ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059be:	e1b2      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059c0:	2308      	movs	r3, #8
 80059c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059c6:	e1ae      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059c8:	2310      	movs	r3, #16
 80059ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ce:	e1aa      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059d0:	2320      	movs	r3, #32
 80059d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059d6:	e1a6      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059d8:	2340      	movs	r3, #64	@ 0x40
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059de:	e1a2      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059e0:	2380      	movs	r3, #128	@ 0x80
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059e6:	e19e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a35      	ldr	r2, [pc, #212]	@ (8005ac4 <UART_SetConfig+0x344>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d130      	bne.n	8005a54 <UART_SetConfig+0x2d4>
 80059f2:	4b31      	ldr	r3, [pc, #196]	@ (8005ab8 <UART_SetConfig+0x338>)
 80059f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059f6:	f003 0307 	and.w	r3, r3, #7
 80059fa:	2b05      	cmp	r3, #5
 80059fc:	d826      	bhi.n	8005a4c <UART_SetConfig+0x2cc>
 80059fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005a04 <UART_SetConfig+0x284>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a1d 	.word	0x08005a1d
 8005a08:	08005a25 	.word	0x08005a25
 8005a0c:	08005a2d 	.word	0x08005a2d
 8005a10:	08005a35 	.word	0x08005a35
 8005a14:	08005a3d 	.word	0x08005a3d
 8005a18:	08005a45 	.word	0x08005a45
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a22:	e180      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a24:	2304      	movs	r3, #4
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a2a:	e17c      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a2c:	2308      	movs	r3, #8
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a32:	e178      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a34:	2310      	movs	r3, #16
 8005a36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a3a:	e174      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a3c:	2320      	movs	r3, #32
 8005a3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a42:	e170      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a44:	2340      	movs	r3, #64	@ 0x40
 8005a46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a4a:	e16c      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a4c:	2380      	movs	r3, #128	@ 0x80
 8005a4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a52:	e168      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a1b      	ldr	r2, [pc, #108]	@ (8005ac8 <UART_SetConfig+0x348>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d142      	bne.n	8005ae4 <UART_SetConfig+0x364>
 8005a5e:	4b16      	ldr	r3, [pc, #88]	@ (8005ab8 <UART_SetConfig+0x338>)
 8005a60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a62:	f003 0307 	and.w	r3, r3, #7
 8005a66:	2b05      	cmp	r3, #5
 8005a68:	d838      	bhi.n	8005adc <UART_SetConfig+0x35c>
 8005a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8005a70 <UART_SetConfig+0x2f0>)
 8005a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a70:	08005a89 	.word	0x08005a89
 8005a74:	08005a91 	.word	0x08005a91
 8005a78:	08005a99 	.word	0x08005a99
 8005a7c:	08005aa1 	.word	0x08005aa1
 8005a80:	08005acd 	.word	0x08005acd
 8005a84:	08005ad5 	.word	0x08005ad5
 8005a88:	2300      	movs	r3, #0
 8005a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a8e:	e14a      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a90:	2304      	movs	r3, #4
 8005a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a96:	e146      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005a98:	2308      	movs	r3, #8
 8005a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9e:	e142      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e13e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005aa8:	cfff69f3 	.word	0xcfff69f3
 8005aac:	58000c00 	.word	0x58000c00
 8005ab0:	11fff4ff 	.word	0x11fff4ff
 8005ab4:	40011000 	.word	0x40011000
 8005ab8:	58024400 	.word	0x58024400
 8005abc:	40004400 	.word	0x40004400
 8005ac0:	40004800 	.word	0x40004800
 8005ac4:	40004c00 	.word	0x40004c00
 8005ac8:	40005000 	.word	0x40005000
 8005acc:	2320      	movs	r3, #32
 8005ace:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad2:	e128      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005ad4:	2340      	movs	r3, #64	@ 0x40
 8005ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ada:	e124      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005adc:	2380      	movs	r3, #128	@ 0x80
 8005ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ae2:	e120      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4acb      	ldr	r2, [pc, #812]	@ (8005e18 <UART_SetConfig+0x698>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d176      	bne.n	8005bdc <UART_SetConfig+0x45c>
 8005aee:	4bcb      	ldr	r3, [pc, #812]	@ (8005e1c <UART_SetConfig+0x69c>)
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005af6:	2b28      	cmp	r3, #40	@ 0x28
 8005af8:	d86c      	bhi.n	8005bd4 <UART_SetConfig+0x454>
 8005afa:	a201      	add	r2, pc, #4	@ (adr r2, 8005b00 <UART_SetConfig+0x380>)
 8005afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b00:	08005ba5 	.word	0x08005ba5
 8005b04:	08005bd5 	.word	0x08005bd5
 8005b08:	08005bd5 	.word	0x08005bd5
 8005b0c:	08005bd5 	.word	0x08005bd5
 8005b10:	08005bd5 	.word	0x08005bd5
 8005b14:	08005bd5 	.word	0x08005bd5
 8005b18:	08005bd5 	.word	0x08005bd5
 8005b1c:	08005bd5 	.word	0x08005bd5
 8005b20:	08005bad 	.word	0x08005bad
 8005b24:	08005bd5 	.word	0x08005bd5
 8005b28:	08005bd5 	.word	0x08005bd5
 8005b2c:	08005bd5 	.word	0x08005bd5
 8005b30:	08005bd5 	.word	0x08005bd5
 8005b34:	08005bd5 	.word	0x08005bd5
 8005b38:	08005bd5 	.word	0x08005bd5
 8005b3c:	08005bd5 	.word	0x08005bd5
 8005b40:	08005bb5 	.word	0x08005bb5
 8005b44:	08005bd5 	.word	0x08005bd5
 8005b48:	08005bd5 	.word	0x08005bd5
 8005b4c:	08005bd5 	.word	0x08005bd5
 8005b50:	08005bd5 	.word	0x08005bd5
 8005b54:	08005bd5 	.word	0x08005bd5
 8005b58:	08005bd5 	.word	0x08005bd5
 8005b5c:	08005bd5 	.word	0x08005bd5
 8005b60:	08005bbd 	.word	0x08005bbd
 8005b64:	08005bd5 	.word	0x08005bd5
 8005b68:	08005bd5 	.word	0x08005bd5
 8005b6c:	08005bd5 	.word	0x08005bd5
 8005b70:	08005bd5 	.word	0x08005bd5
 8005b74:	08005bd5 	.word	0x08005bd5
 8005b78:	08005bd5 	.word	0x08005bd5
 8005b7c:	08005bd5 	.word	0x08005bd5
 8005b80:	08005bc5 	.word	0x08005bc5
 8005b84:	08005bd5 	.word	0x08005bd5
 8005b88:	08005bd5 	.word	0x08005bd5
 8005b8c:	08005bd5 	.word	0x08005bd5
 8005b90:	08005bd5 	.word	0x08005bd5
 8005b94:	08005bd5 	.word	0x08005bd5
 8005b98:	08005bd5 	.word	0x08005bd5
 8005b9c:	08005bd5 	.word	0x08005bd5
 8005ba0:	08005bcd 	.word	0x08005bcd
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005baa:	e0bc      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bac:	2304      	movs	r3, #4
 8005bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb2:	e0b8      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bb4:	2308      	movs	r3, #8
 8005bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bba:	e0b4      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc2:	e0b0      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bc4:	2320      	movs	r3, #32
 8005bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bca:	e0ac      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bcc:	2340      	movs	r3, #64	@ 0x40
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd2:	e0a8      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bd4:	2380      	movs	r3, #128	@ 0x80
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bda:	e0a4      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a8f      	ldr	r2, [pc, #572]	@ (8005e20 <UART_SetConfig+0x6a0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d130      	bne.n	8005c48 <UART_SetConfig+0x4c8>
 8005be6:	4b8d      	ldr	r3, [pc, #564]	@ (8005e1c <UART_SetConfig+0x69c>)
 8005be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bea:	f003 0307 	and.w	r3, r3, #7
 8005bee:	2b05      	cmp	r3, #5
 8005bf0:	d826      	bhi.n	8005c40 <UART_SetConfig+0x4c0>
 8005bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf8 <UART_SetConfig+0x478>)
 8005bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf8:	08005c11 	.word	0x08005c11
 8005bfc:	08005c19 	.word	0x08005c19
 8005c00:	08005c21 	.word	0x08005c21
 8005c04:	08005c29 	.word	0x08005c29
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c39 	.word	0x08005c39
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c16:	e086      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c18:	2304      	movs	r3, #4
 8005c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1e:	e082      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c20:	2308      	movs	r3, #8
 8005c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c26:	e07e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2e:	e07a      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c30:	2320      	movs	r3, #32
 8005c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c36:	e076      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c38:	2340      	movs	r3, #64	@ 0x40
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3e:	e072      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c40:	2380      	movs	r3, #128	@ 0x80
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c46:	e06e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a75      	ldr	r2, [pc, #468]	@ (8005e24 <UART_SetConfig+0x6a4>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d130      	bne.n	8005cb4 <UART_SetConfig+0x534>
 8005c52:	4b72      	ldr	r3, [pc, #456]	@ (8005e1c <UART_SetConfig+0x69c>)
 8005c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c56:	f003 0307 	and.w	r3, r3, #7
 8005c5a:	2b05      	cmp	r3, #5
 8005c5c:	d826      	bhi.n	8005cac <UART_SetConfig+0x52c>
 8005c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c64 <UART_SetConfig+0x4e4>)
 8005c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c64:	08005c7d 	.word	0x08005c7d
 8005c68:	08005c85 	.word	0x08005c85
 8005c6c:	08005c8d 	.word	0x08005c8d
 8005c70:	08005c95 	.word	0x08005c95
 8005c74:	08005c9d 	.word	0x08005c9d
 8005c78:	08005ca5 	.word	0x08005ca5
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c82:	e050      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8a:	e04c      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c8c:	2308      	movs	r3, #8
 8005c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c92:	e048      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c94:	2310      	movs	r3, #16
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e044      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005c9c:	2320      	movs	r3, #32
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e040      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005ca4:	2340      	movs	r3, #64	@ 0x40
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e03c      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005cac:	2380      	movs	r3, #128	@ 0x80
 8005cae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cb2:	e038      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a5b      	ldr	r2, [pc, #364]	@ (8005e28 <UART_SetConfig+0x6a8>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d130      	bne.n	8005d20 <UART_SetConfig+0x5a0>
 8005cbe:	4b57      	ldr	r3, [pc, #348]	@ (8005e1c <UART_SetConfig+0x69c>)
 8005cc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	2b05      	cmp	r3, #5
 8005cc8:	d826      	bhi.n	8005d18 <UART_SetConfig+0x598>
 8005cca:	a201      	add	r2, pc, #4	@ (adr r2, 8005cd0 <UART_SetConfig+0x550>)
 8005ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cd0:	08005ce9 	.word	0x08005ce9
 8005cd4:	08005cf1 	.word	0x08005cf1
 8005cd8:	08005cf9 	.word	0x08005cf9
 8005cdc:	08005d01 	.word	0x08005d01
 8005ce0:	08005d09 	.word	0x08005d09
 8005ce4:	08005d11 	.word	0x08005d11
 8005ce8:	2302      	movs	r3, #2
 8005cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cee:	e01a      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005cf0:	2304      	movs	r3, #4
 8005cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf6:	e016      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005cf8:	2308      	movs	r3, #8
 8005cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfe:	e012      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005d00:	2310      	movs	r3, #16
 8005d02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d06:	e00e      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005d08:	2320      	movs	r3, #32
 8005d0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d0e:	e00a      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005d10:	2340      	movs	r3, #64	@ 0x40
 8005d12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d16:	e006      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005d18:	2380      	movs	r3, #128	@ 0x80
 8005d1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d1e:	e002      	b.n	8005d26 <UART_SetConfig+0x5a6>
 8005d20:	2380      	movs	r3, #128	@ 0x80
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005e28 <UART_SetConfig+0x6a8>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	f040 80f8 	bne.w	8005f22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005d36:	2b20      	cmp	r3, #32
 8005d38:	dc46      	bgt.n	8005dc8 <UART_SetConfig+0x648>
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	f2c0 8082 	blt.w	8005e44 <UART_SetConfig+0x6c4>
 8005d40:	3b02      	subs	r3, #2
 8005d42:	2b1e      	cmp	r3, #30
 8005d44:	d87e      	bhi.n	8005e44 <UART_SetConfig+0x6c4>
 8005d46:	a201      	add	r2, pc, #4	@ (adr r2, 8005d4c <UART_SetConfig+0x5cc>)
 8005d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d4c:	08005dcf 	.word	0x08005dcf
 8005d50:	08005e45 	.word	0x08005e45
 8005d54:	08005dd7 	.word	0x08005dd7
 8005d58:	08005e45 	.word	0x08005e45
 8005d5c:	08005e45 	.word	0x08005e45
 8005d60:	08005e45 	.word	0x08005e45
 8005d64:	08005de7 	.word	0x08005de7
 8005d68:	08005e45 	.word	0x08005e45
 8005d6c:	08005e45 	.word	0x08005e45
 8005d70:	08005e45 	.word	0x08005e45
 8005d74:	08005e45 	.word	0x08005e45
 8005d78:	08005e45 	.word	0x08005e45
 8005d7c:	08005e45 	.word	0x08005e45
 8005d80:	08005e45 	.word	0x08005e45
 8005d84:	08005df7 	.word	0x08005df7
 8005d88:	08005e45 	.word	0x08005e45
 8005d8c:	08005e45 	.word	0x08005e45
 8005d90:	08005e45 	.word	0x08005e45
 8005d94:	08005e45 	.word	0x08005e45
 8005d98:	08005e45 	.word	0x08005e45
 8005d9c:	08005e45 	.word	0x08005e45
 8005da0:	08005e45 	.word	0x08005e45
 8005da4:	08005e45 	.word	0x08005e45
 8005da8:	08005e45 	.word	0x08005e45
 8005dac:	08005e45 	.word	0x08005e45
 8005db0:	08005e45 	.word	0x08005e45
 8005db4:	08005e45 	.word	0x08005e45
 8005db8:	08005e45 	.word	0x08005e45
 8005dbc:	08005e45 	.word	0x08005e45
 8005dc0:	08005e45 	.word	0x08005e45
 8005dc4:	08005e37 	.word	0x08005e37
 8005dc8:	2b40      	cmp	r3, #64	@ 0x40
 8005dca:	d037      	beq.n	8005e3c <UART_SetConfig+0x6bc>
 8005dcc:	e03a      	b.n	8005e44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005dce:	f7fe fb95 	bl	80044fc <HAL_RCCEx_GetD3PCLK1Freq>
 8005dd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005dd4:	e03c      	b.n	8005e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005dd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f7fe fba4 	bl	8004528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005de4:	e034      	b.n	8005e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005de6:	f107 0318 	add.w	r3, r7, #24
 8005dea:	4618      	mov	r0, r3
 8005dec:	f7fe fcf0 	bl	80047d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005df4:	e02c      	b.n	8005e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005df6:	4b09      	ldr	r3, [pc, #36]	@ (8005e1c <UART_SetConfig+0x69c>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 0320 	and.w	r3, r3, #32
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d016      	beq.n	8005e30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e02:	4b06      	ldr	r3, [pc, #24]	@ (8005e1c <UART_SetConfig+0x69c>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	08db      	lsrs	r3, r3, #3
 8005e08:	f003 0303 	and.w	r3, r3, #3
 8005e0c:	4a07      	ldr	r2, [pc, #28]	@ (8005e2c <UART_SetConfig+0x6ac>)
 8005e0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005e14:	e01c      	b.n	8005e50 <UART_SetConfig+0x6d0>
 8005e16:	bf00      	nop
 8005e18:	40011400 	.word	0x40011400
 8005e1c:	58024400 	.word	0x58024400
 8005e20:	40007800 	.word	0x40007800
 8005e24:	40007c00 	.word	0x40007c00
 8005e28:	58000c00 	.word	0x58000c00
 8005e2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005e30:	4b9d      	ldr	r3, [pc, #628]	@ (80060a8 <UART_SetConfig+0x928>)
 8005e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e34:	e00c      	b.n	8005e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005e36:	4b9d      	ldr	r3, [pc, #628]	@ (80060ac <UART_SetConfig+0x92c>)
 8005e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e3a:	e009      	b.n	8005e50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e42:	e005      	b.n	8005e50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005e44:	2300      	movs	r3, #0
 8005e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005e4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	f000 81de 	beq.w	8006214 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5c:	4a94      	ldr	r2, [pc, #592]	@ (80060b0 <UART_SetConfig+0x930>)
 8005e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e62:	461a      	mov	r2, r3
 8005e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e66:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e6c:	697b      	ldr	r3, [r7, #20]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	4413      	add	r3, r2
 8005e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d305      	bcc.n	8005e88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005e82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d903      	bls.n	8005e90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005e8e:	e1c1      	b.n	8006214 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e92:	2200      	movs	r2, #0
 8005e94:	60bb      	str	r3, [r7, #8]
 8005e96:	60fa      	str	r2, [r7, #12]
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	4a84      	ldr	r2, [pc, #528]	@ (80060b0 <UART_SetConfig+0x930>)
 8005e9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	603b      	str	r3, [r7, #0]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005eae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005eb2:	f7fa fa11 	bl	80002d8 <__aeabi_uldivmod>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4610      	mov	r0, r2
 8005ebc:	4619      	mov	r1, r3
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	f04f 0300 	mov.w	r3, #0
 8005ec6:	020b      	lsls	r3, r1, #8
 8005ec8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005ecc:	0202      	lsls	r2, r0, #8
 8005ece:	6979      	ldr	r1, [r7, #20]
 8005ed0:	6849      	ldr	r1, [r1, #4]
 8005ed2:	0849      	lsrs	r1, r1, #1
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	460c      	mov	r4, r1
 8005ed8:	4605      	mov	r5, r0
 8005eda:	eb12 0804 	adds.w	r8, r2, r4
 8005ede:	eb43 0905 	adc.w	r9, r3, r5
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	469a      	mov	sl, r3
 8005eea:	4693      	mov	fp, r2
 8005eec:	4652      	mov	r2, sl
 8005eee:	465b      	mov	r3, fp
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa f9f0 	bl	80002d8 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4613      	mov	r3, r2
 8005efe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f06:	d308      	bcc.n	8005f1a <UART_SetConfig+0x79a>
 8005f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f0e:	d204      	bcs.n	8005f1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f16:	60da      	str	r2, [r3, #12]
 8005f18:	e17c      	b.n	8006214 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005f20:	e178      	b.n	8006214 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f2a:	f040 80c5 	bne.w	80060b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005f2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	dc48      	bgt.n	8005fc8 <UART_SetConfig+0x848>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	db7b      	blt.n	8006032 <UART_SetConfig+0x8b2>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	d879      	bhi.n	8006032 <UART_SetConfig+0x8b2>
 8005f3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f44 <UART_SetConfig+0x7c4>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005fcf 	.word	0x08005fcf
 8005f48:	08005fd7 	.word	0x08005fd7
 8005f4c:	08006033 	.word	0x08006033
 8005f50:	08006033 	.word	0x08006033
 8005f54:	08005fdf 	.word	0x08005fdf
 8005f58:	08006033 	.word	0x08006033
 8005f5c:	08006033 	.word	0x08006033
 8005f60:	08006033 	.word	0x08006033
 8005f64:	08005fef 	.word	0x08005fef
 8005f68:	08006033 	.word	0x08006033
 8005f6c:	08006033 	.word	0x08006033
 8005f70:	08006033 	.word	0x08006033
 8005f74:	08006033 	.word	0x08006033
 8005f78:	08006033 	.word	0x08006033
 8005f7c:	08006033 	.word	0x08006033
 8005f80:	08006033 	.word	0x08006033
 8005f84:	08005fff 	.word	0x08005fff
 8005f88:	08006033 	.word	0x08006033
 8005f8c:	08006033 	.word	0x08006033
 8005f90:	08006033 	.word	0x08006033
 8005f94:	08006033 	.word	0x08006033
 8005f98:	08006033 	.word	0x08006033
 8005f9c:	08006033 	.word	0x08006033
 8005fa0:	08006033 	.word	0x08006033
 8005fa4:	08006033 	.word	0x08006033
 8005fa8:	08006033 	.word	0x08006033
 8005fac:	08006033 	.word	0x08006033
 8005fb0:	08006033 	.word	0x08006033
 8005fb4:	08006033 	.word	0x08006033
 8005fb8:	08006033 	.word	0x08006033
 8005fbc:	08006033 	.word	0x08006033
 8005fc0:	08006033 	.word	0x08006033
 8005fc4:	08006025 	.word	0x08006025
 8005fc8:	2b40      	cmp	r3, #64	@ 0x40
 8005fca:	d02e      	beq.n	800602a <UART_SetConfig+0x8aa>
 8005fcc:	e031      	b.n	8006032 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fce:	f7fd f85f 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8005fd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fd4:	e033      	b.n	800603e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd6:	f7fd f871 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8005fda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005fdc:	e02f      	b.n	800603e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fe faa0 	bl	8004528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fec:	e027      	b.n	800603e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fee:	f107 0318 	add.w	r3, r7, #24
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f7fe fbec 	bl	80047d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ffc:	e01f      	b.n	800603e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ffe:	4b2d      	ldr	r3, [pc, #180]	@ (80060b4 <UART_SetConfig+0x934>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d009      	beq.n	800601e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800600a:	4b2a      	ldr	r3, [pc, #168]	@ (80060b4 <UART_SetConfig+0x934>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	08db      	lsrs	r3, r3, #3
 8006010:	f003 0303 	and.w	r3, r3, #3
 8006014:	4a24      	ldr	r2, [pc, #144]	@ (80060a8 <UART_SetConfig+0x928>)
 8006016:	fa22 f303 	lsr.w	r3, r2, r3
 800601a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800601c:	e00f      	b.n	800603e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800601e:	4b22      	ldr	r3, [pc, #136]	@ (80060a8 <UART_SetConfig+0x928>)
 8006020:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006022:	e00c      	b.n	800603e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006024:	4b21      	ldr	r3, [pc, #132]	@ (80060ac <UART_SetConfig+0x92c>)
 8006026:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006028:	e009      	b.n	800603e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800602a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006030:	e005      	b.n	800603e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006032:	2300      	movs	r3, #0
 8006034:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800603c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800603e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80e7 	beq.w	8006214 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800604a:	4a19      	ldr	r2, [pc, #100]	@ (80060b0 <UART_SetConfig+0x930>)
 800604c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006050:	461a      	mov	r2, r3
 8006052:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006054:	fbb3 f3f2 	udiv	r3, r3, r2
 8006058:	005a      	lsls	r2, r3, #1
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	085b      	lsrs	r3, r3, #1
 8006060:	441a      	add	r2, r3
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	fbb2 f3f3 	udiv	r3, r2, r3
 800606a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800606c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606e:	2b0f      	cmp	r3, #15
 8006070:	d916      	bls.n	80060a0 <UART_SetConfig+0x920>
 8006072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006078:	d212      	bcs.n	80060a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	b29b      	uxth	r3, r3
 800607e:	f023 030f 	bic.w	r3, r3, #15
 8006082:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006086:	085b      	lsrs	r3, r3, #1
 8006088:	b29b      	uxth	r3, r3
 800608a:	f003 0307 	and.w	r3, r3, #7
 800608e:	b29a      	uxth	r2, r3
 8006090:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006092:	4313      	orrs	r3, r2
 8006094:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e0b9      	b.n	8006214 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060a6:	e0b5      	b.n	8006214 <UART_SetConfig+0xa94>
 80060a8:	03d09000 	.word	0x03d09000
 80060ac:	003d0900 	.word	0x003d0900
 80060b0:	08007654 	.word	0x08007654
 80060b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80060b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060bc:	2b20      	cmp	r3, #32
 80060be:	dc49      	bgt.n	8006154 <UART_SetConfig+0x9d4>
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	db7c      	blt.n	80061be <UART_SetConfig+0xa3e>
 80060c4:	2b20      	cmp	r3, #32
 80060c6:	d87a      	bhi.n	80061be <UART_SetConfig+0xa3e>
 80060c8:	a201      	add	r2, pc, #4	@ (adr r2, 80060d0 <UART_SetConfig+0x950>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	0800615b 	.word	0x0800615b
 80060d4:	08006163 	.word	0x08006163
 80060d8:	080061bf 	.word	0x080061bf
 80060dc:	080061bf 	.word	0x080061bf
 80060e0:	0800616b 	.word	0x0800616b
 80060e4:	080061bf 	.word	0x080061bf
 80060e8:	080061bf 	.word	0x080061bf
 80060ec:	080061bf 	.word	0x080061bf
 80060f0:	0800617b 	.word	0x0800617b
 80060f4:	080061bf 	.word	0x080061bf
 80060f8:	080061bf 	.word	0x080061bf
 80060fc:	080061bf 	.word	0x080061bf
 8006100:	080061bf 	.word	0x080061bf
 8006104:	080061bf 	.word	0x080061bf
 8006108:	080061bf 	.word	0x080061bf
 800610c:	080061bf 	.word	0x080061bf
 8006110:	0800618b 	.word	0x0800618b
 8006114:	080061bf 	.word	0x080061bf
 8006118:	080061bf 	.word	0x080061bf
 800611c:	080061bf 	.word	0x080061bf
 8006120:	080061bf 	.word	0x080061bf
 8006124:	080061bf 	.word	0x080061bf
 8006128:	080061bf 	.word	0x080061bf
 800612c:	080061bf 	.word	0x080061bf
 8006130:	080061bf 	.word	0x080061bf
 8006134:	080061bf 	.word	0x080061bf
 8006138:	080061bf 	.word	0x080061bf
 800613c:	080061bf 	.word	0x080061bf
 8006140:	080061bf 	.word	0x080061bf
 8006144:	080061bf 	.word	0x080061bf
 8006148:	080061bf 	.word	0x080061bf
 800614c:	080061bf 	.word	0x080061bf
 8006150:	080061b1 	.word	0x080061b1
 8006154:	2b40      	cmp	r3, #64	@ 0x40
 8006156:	d02e      	beq.n	80061b6 <UART_SetConfig+0xa36>
 8006158:	e031      	b.n	80061be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800615a:	f7fc ff99 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 800615e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006160:	e033      	b.n	80061ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006162:	f7fc ffab 	bl	80030bc <HAL_RCC_GetPCLK2Freq>
 8006166:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006168:	e02f      	b.n	80061ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800616a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800616e:	4618      	mov	r0, r3
 8006170:	f7fe f9da 	bl	8004528 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006178:	e027      	b.n	80061ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800617a:	f107 0318 	add.w	r3, r7, #24
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe fb26 	bl	80047d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006188:	e01f      	b.n	80061ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618a:	4b2d      	ldr	r3, [pc, #180]	@ (8006240 <UART_SetConfig+0xac0>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0320 	and.w	r3, r3, #32
 8006192:	2b00      	cmp	r3, #0
 8006194:	d009      	beq.n	80061aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006196:	4b2a      	ldr	r3, [pc, #168]	@ (8006240 <UART_SetConfig+0xac0>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	08db      	lsrs	r3, r3, #3
 800619c:	f003 0303 	and.w	r3, r3, #3
 80061a0:	4a28      	ldr	r2, [pc, #160]	@ (8006244 <UART_SetConfig+0xac4>)
 80061a2:	fa22 f303 	lsr.w	r3, r2, r3
 80061a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061a8:	e00f      	b.n	80061ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80061aa:	4b26      	ldr	r3, [pc, #152]	@ (8006244 <UART_SetConfig+0xac4>)
 80061ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ae:	e00c      	b.n	80061ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061b0:	4b25      	ldr	r3, [pc, #148]	@ (8006248 <UART_SetConfig+0xac8>)
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b4:	e009      	b.n	80061ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061bc:	e005      	b.n	80061ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061c8:	bf00      	nop
    }

    if (pclk != 0U)
 80061ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d021      	beq.n	8006214 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d4:	4a1d      	ldr	r2, [pc, #116]	@ (800624c <UART_SetConfig+0xacc>)
 80061d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061da:	461a      	mov	r2, r3
 80061dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061de:	fbb3 f2f2 	udiv	r2, r3, r2
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	441a      	add	r2, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061f6:	2b0f      	cmp	r3, #15
 80061f8:	d909      	bls.n	800620e <UART_SetConfig+0xa8e>
 80061fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006200:	d205      	bcs.n	800620e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006204:	b29a      	uxth	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60da      	str	r2, [r3, #12]
 800620c:	e002      	b.n	8006214 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2201      	movs	r2, #1
 8006218:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2201      	movs	r2, #1
 8006220:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	2200      	movs	r2, #0
 8006228:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006230:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006234:	4618      	mov	r0, r3
 8006236:	3748      	adds	r7, #72	@ 0x48
 8006238:	46bd      	mov	sp, r7
 800623a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800623e:	bf00      	nop
 8006240:	58024400 	.word	0x58024400
 8006244:	03d09000 	.word	0x03d09000
 8006248:	003d0900 	.word	0x003d0900
 800624c:	08007654 	.word	0x08007654

08006250 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800625c:	f003 0308 	and.w	r3, r3, #8
 8006260:	2b00      	cmp	r3, #0
 8006262:	d00a      	beq.n	800627a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800627e:	f003 0301 	and.w	r3, r3, #1
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00a      	beq.n	800629c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	430a      	orrs	r2, r1
 800629a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	f003 0302 	and.w	r3, r3, #2
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00a      	beq.n	80062be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685b      	ldr	r3, [r3, #4]
 80062ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	430a      	orrs	r2, r1
 80062bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	f003 0304 	and.w	r3, r3, #4
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	430a      	orrs	r2, r1
 80062de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062e4:	f003 0310 	and.w	r3, r3, #16
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00a      	beq.n	8006302 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	430a      	orrs	r2, r1
 8006300:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006306:	f003 0320 	and.w	r3, r3, #32
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00a      	beq.n	8006324 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	430a      	orrs	r2, r1
 8006322:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006328:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800632c:	2b00      	cmp	r3, #0
 800632e:	d01a      	beq.n	8006366 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	430a      	orrs	r2, r1
 8006344:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800634a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800634e:	d10a      	bne.n	8006366 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800636a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	605a      	str	r2, [r3, #4]
  }
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b098      	sub	sp, #96	@ 0x60
 8006398:	af02      	add	r7, sp, #8
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80063a4:	f7fa fdb2 	bl	8000f0c <HAL_GetTick>
 80063a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0308 	and.w	r3, r3, #8
 80063b4:	2b08      	cmp	r3, #8
 80063b6:	d12f      	bne.n	8006418 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c0:	2200      	movs	r2, #0
 80063c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f88e 	bl	80064e8 <UART_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d022      	beq.n	8006418 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063da:	e853 3f00 	ldrex	r3, [r3]
 80063de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	461a      	mov	r2, r3
 80063ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80063f2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063f8:	e841 2300 	strex	r3, r2, [r1]
 80063fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80063fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006400:	2b00      	cmp	r3, #0
 8006402:	d1e6      	bne.n	80063d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2220      	movs	r2, #32
 8006408:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006414:	2303      	movs	r3, #3
 8006416:	e063      	b.n	80064e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0304 	and.w	r3, r3, #4
 8006422:	2b04      	cmp	r3, #4
 8006424:	d149      	bne.n	80064ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006426:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800642e:	2200      	movs	r2, #0
 8006430:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f857 	bl	80064e8 <UART_WaitOnFlagUntilTimeout>
 800643a:	4603      	mov	r3, r0
 800643c:	2b00      	cmp	r3, #0
 800643e:	d03c      	beq.n	80064ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	623b      	str	r3, [r7, #32]
   return(result);
 800644e:	6a3b      	ldr	r3, [r7, #32]
 8006450:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006454:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	461a      	mov	r2, r3
 800645c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800645e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006460:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006462:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006464:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006466:	e841 2300 	strex	r3, r2, [r1]
 800646a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800646c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1e6      	bne.n	8006440 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	60fb      	str	r3, [r7, #12]
   return(result);
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	3308      	adds	r3, #8
 8006490:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006492:	61fa      	str	r2, [r7, #28]
 8006494:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006496:	69b9      	ldr	r1, [r7, #24]
 8006498:	69fa      	ldr	r2, [r7, #28]
 800649a:	e841 2300 	strex	r3, r2, [r1]
 800649e:	617b      	str	r3, [r7, #20]
   return(result);
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d1e5      	bne.n	8006472 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2220      	movs	r2, #32
 80064aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2200      	movs	r2, #0
 80064b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e012      	b.n	80064e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064de:	2300      	movs	r3, #0
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3758      	adds	r7, #88	@ 0x58
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b084      	sub	sp, #16
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	4613      	mov	r3, r2
 80064f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064f8:	e04f      	b.n	800659a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064fa:	69bb      	ldr	r3, [r7, #24]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d04b      	beq.n	800659a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fa fd03 	bl	8000f0c <HAL_GetTick>
 8006506:	4602      	mov	r2, r0
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	69ba      	ldr	r2, [r7, #24]
 800650e:	429a      	cmp	r2, r3
 8006510:	d302      	bcc.n	8006518 <UART_WaitOnFlagUntilTimeout+0x30>
 8006512:	69bb      	ldr	r3, [r7, #24]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d101      	bne.n	800651c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e04e      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 0304 	and.w	r3, r3, #4
 8006526:	2b00      	cmp	r3, #0
 8006528:	d037      	beq.n	800659a <UART_WaitOnFlagUntilTimeout+0xb2>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b80      	cmp	r3, #128	@ 0x80
 800652e:	d034      	beq.n	800659a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2b40      	cmp	r3, #64	@ 0x40
 8006534:	d031      	beq.n	800659a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b08      	cmp	r3, #8
 8006542:	d110      	bne.n	8006566 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2208      	movs	r2, #8
 800654a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f95b 	bl	8006808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	2208      	movs	r2, #8
 8006556:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2200      	movs	r2, #0
 800655e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e029      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69db      	ldr	r3, [r3, #28]
 800656c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006570:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006574:	d111      	bne.n	800659a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800657e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f000 f941 	bl	8006808 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2220      	movs	r2, #32
 800658a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2200      	movs	r2, #0
 8006592:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006596:	2303      	movs	r3, #3
 8006598:	e00f      	b.n	80065ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	4013      	ands	r3, r2
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	bf0c      	ite	eq
 80065aa:	2301      	moveq	r3, #1
 80065ac:	2300      	movne	r3, #0
 80065ae:	b2db      	uxtb	r3, r3
 80065b0:	461a      	mov	r2, r3
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d0a0      	beq.n	80064fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
	...

080065c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b0a3      	sub	sp, #140	@ 0x8c
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	4613      	mov	r3, r2
 80065d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	68ba      	ldr	r2, [r7, #8]
 80065d6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	88fa      	ldrh	r2, [r7, #6]
 80065dc:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	88fa      	ldrh	r2, [r7, #6]
 80065e4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f6:	d10e      	bne.n	8006616 <UART_Start_Receive_IT+0x52>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	691b      	ldr	r3, [r3, #16]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d105      	bne.n	800660c <UART_Start_Receive_IT+0x48>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006606:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800660a:	e02d      	b.n	8006668 <UART_Start_Receive_IT+0xa4>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	22ff      	movs	r2, #255	@ 0xff
 8006610:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006614:	e028      	b.n	8006668 <UART_Start_Receive_IT+0xa4>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10d      	bne.n	800663a <UART_Start_Receive_IT+0x76>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d104      	bne.n	8006630 <UART_Start_Receive_IT+0x6c>
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	22ff      	movs	r2, #255	@ 0xff
 800662a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800662e:	e01b      	b.n	8006668 <UART_Start_Receive_IT+0xa4>
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	227f      	movs	r2, #127	@ 0x7f
 8006634:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006638:	e016      	b.n	8006668 <UART_Start_Receive_IT+0xa4>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006642:	d10d      	bne.n	8006660 <UART_Start_Receive_IT+0x9c>
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	691b      	ldr	r3, [r3, #16]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d104      	bne.n	8006656 <UART_Start_Receive_IT+0x92>
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	227f      	movs	r2, #127	@ 0x7f
 8006650:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006654:	e008      	b.n	8006668 <UART_Start_Receive_IT+0xa4>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	223f      	movs	r2, #63	@ 0x3f
 800665a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800665e:	e003      	b.n	8006668 <UART_Start_Receive_IT+0xa4>
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	2222      	movs	r2, #34	@ 0x22
 8006674:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800668a:	f043 0301 	orr.w	r3, r3, #1
 800668e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	3308      	adds	r3, #8
 8006698:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800669c:	673a      	str	r2, [r7, #112]	@ 0x70
 800669e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80066a2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80066aa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e3      	bne.n	8006678 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80066b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80066b8:	d14f      	bne.n	800675a <UART_Start_Receive_IT+0x196>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d349      	bcc.n	800675a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066ce:	d107      	bne.n	80066e0 <UART_Start_Receive_IT+0x11c>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d103      	bne.n	80066e0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	4a47      	ldr	r2, [pc, #284]	@ (80067f8 <UART_Start_Receive_IT+0x234>)
 80066dc:	675a      	str	r2, [r3, #116]	@ 0x74
 80066de:	e002      	b.n	80066e6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	4a46      	ldr	r2, [pc, #280]	@ (80067fc <UART_Start_Receive_IT+0x238>)
 80066e4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d01a      	beq.n	8006724 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80066fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006702:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	461a      	mov	r2, r3
 800670c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006710:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006712:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006714:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006716:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006718:	e841 2300 	strex	r3, r2, [r1]
 800671c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800671e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1e4      	bne.n	80066ee <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	3308      	adds	r3, #8
 800672a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800672c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800672e:	e853 3f00 	ldrex	r3, [r3]
 8006732:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800673a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3308      	adds	r3, #8
 8006742:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006744:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006746:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006748:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800674a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800674c:	e841 2300 	strex	r3, r2, [r1]
 8006750:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006752:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006754:	2b00      	cmp	r3, #0
 8006756:	d1e5      	bne.n	8006724 <UART_Start_Receive_IT+0x160>
 8006758:	e046      	b.n	80067e8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006762:	d107      	bne.n	8006774 <UART_Start_Receive_IT+0x1b0>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	4a24      	ldr	r2, [pc, #144]	@ (8006800 <UART_Start_Receive_IT+0x23c>)
 8006770:	675a      	str	r2, [r3, #116]	@ 0x74
 8006772:	e002      	b.n	800677a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a23      	ldr	r2, [pc, #140]	@ (8006804 <UART_Start_Receive_IT+0x240>)
 8006778:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d019      	beq.n	80067b6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800678a:	e853 3f00 	ldrex	r3, [r3]
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006792:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006796:	677b      	str	r3, [r7, #116]	@ 0x74
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	461a      	mov	r2, r3
 800679e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80067a2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80067a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80067a8:	e841 2300 	strex	r3, r2, [r1]
 80067ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80067ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d1e6      	bne.n	8006782 <UART_Start_Receive_IT+0x1be>
 80067b4:	e018      	b.n	80067e8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	e853 3f00 	ldrex	r3, [r3]
 80067c2:	613b      	str	r3, [r7, #16]
   return(result);
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	f043 0320 	orr.w	r3, r3, #32
 80067ca:	67bb      	str	r3, [r7, #120]	@ 0x78
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067d4:	623b      	str	r3, [r7, #32]
 80067d6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	69f9      	ldr	r1, [r7, #28]
 80067da:	6a3a      	ldr	r2, [r7, #32]
 80067dc:	e841 2300 	strex	r3, r2, [r1]
 80067e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e6      	bne.n	80067b6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80067e8:	2300      	movs	r3, #0
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	378c      	adds	r7, #140	@ 0x8c
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	08007025 	.word	0x08007025
 80067fc:	08006cc1 	.word	0x08006cc1
 8006800:	08006b09 	.word	0x08006b09
 8006804:	08006951 	.word	0x08006951

08006808 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006808:	b480      	push	{r7}
 800680a:	b095      	sub	sp, #84	@ 0x54
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682e:	643b      	str	r3, [r7, #64]	@ 0x40
 8006830:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006834:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800683c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	6a3b      	ldr	r3, [r7, #32]
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	61fb      	str	r3, [r7, #28]
   return(result);
 8006852:	69fa      	ldr	r2, [r7, #28]
 8006854:	4b1e      	ldr	r3, [pc, #120]	@ (80068d0 <UART_EndRxTransfer+0xc8>)
 8006856:	4013      	ands	r3, r2
 8006858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006862:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006864:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006868:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800687a:	2b01      	cmp	r3, #1
 800687c:	d118      	bne.n	80068b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	e853 3f00 	ldrex	r3, [r3]
 800688a:	60bb      	str	r3, [r7, #8]
   return(result);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	f023 0310 	bic.w	r3, r3, #16
 8006892:	647b      	str	r3, [r7, #68]	@ 0x44
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	461a      	mov	r2, r3
 800689a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689c:	61bb      	str	r3, [r7, #24]
 800689e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a0:	6979      	ldr	r1, [r7, #20]
 80068a2:	69ba      	ldr	r2, [r7, #24]
 80068a4:	e841 2300 	strex	r3, r2, [r1]
 80068a8:	613b      	str	r3, [r7, #16]
   return(result);
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1e6      	bne.n	800687e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2200      	movs	r2, #0
 80068bc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2200      	movs	r2, #0
 80068c2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80068c4:	bf00      	nop
 80068c6:	3754      	adds	r7, #84	@ 0x54
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr
 80068d0:	effffffe 	.word	0xeffffffe

080068d4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2200      	movs	r2, #0
 80068e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f7fe ff32 	bl	8005754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068f0:	bf00      	nop
 80068f2:	3710      	adds	r7, #16
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	e853 3f00 	ldrex	r3, [r3]
 800690c:	60bb      	str	r3, [r7, #8]
   return(result);
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006914:	61fb      	str	r3, [r7, #28]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	461a      	mov	r2, r3
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006922:	6979      	ldr	r1, [r7, #20]
 8006924:	69ba      	ldr	r2, [r7, #24]
 8006926:	e841 2300 	strex	r3, r2, [r1]
 800692a:	613b      	str	r3, [r7, #16]
   return(result);
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1e6      	bne.n	8006900 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2220      	movs	r2, #32
 8006936:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2200      	movs	r2, #0
 800693e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	f7fe fefd 	bl	8005740 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006946:	bf00      	nop
 8006948:	3720      	adds	r7, #32
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
	...

08006950 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	b09c      	sub	sp, #112	@ 0x70
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800695e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006968:	2b22      	cmp	r3, #34	@ 0x22
 800696a:	f040 80be 	bne.w	8006aea <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006974:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006978:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800697c:	b2d9      	uxtb	r1, r3
 800697e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006982:	b2da      	uxtb	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006988:	400a      	ands	r2, r1
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800699e:	b29b      	uxth	r3, r3
 80069a0:	3b01      	subs	r3, #1
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f040 80a1 	bne.w	8006afa <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c0:	e853 3f00 	ldrex	r3, [r3]
 80069c4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80069cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	461a      	mov	r2, r3
 80069d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80069d6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80069d8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069da:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069dc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069de:	e841 2300 	strex	r3, r2, [r1]
 80069e2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d1e6      	bne.n	80069b8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	3308      	adds	r3, #8
 80069f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80069fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069fc:	f023 0301 	bic.w	r3, r3, #1
 8006a00:	667b      	str	r3, [r7, #100]	@ 0x64
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	3308      	adds	r3, #8
 8006a08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006a0a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a0c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a10:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e5      	bne.n	80069ea <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a33      	ldr	r2, [pc, #204]	@ (8006b04 <UART_RxISR_8BIT+0x1b4>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d01f      	beq.n	8006a7c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d018      	beq.n	8006a7c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	623b      	str	r3, [r7, #32]
   return(result);
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006a5e:	663b      	str	r3, [r7, #96]	@ 0x60
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	461a      	mov	r2, r3
 8006a66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a70:	e841 2300 	strex	r3, r2, [r1]
 8006a74:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1e6      	bne.n	8006a4a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d12e      	bne.n	8006ae2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	e853 3f00 	ldrex	r3, [r3]
 8006a96:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f023 0310 	bic.w	r3, r3, #16
 8006a9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006aa8:	61fb      	str	r3, [r7, #28]
 8006aaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aac:	69b9      	ldr	r1, [r7, #24]
 8006aae:	69fa      	ldr	r2, [r7, #28]
 8006ab0:	e841 2300 	strex	r3, r2, [r1]
 8006ab4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1e6      	bne.n	8006a8a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	69db      	ldr	r3, [r3, #28]
 8006ac2:	f003 0310 	and.w	r3, r3, #16
 8006ac6:	2b10      	cmp	r3, #16
 8006ac8:	d103      	bne.n	8006ad2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2210      	movs	r2, #16
 8006ad0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ad8:	4619      	mov	r1, r3
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f7fe fe44 	bl	8005768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ae0:	e00b      	b.n	8006afa <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ae2:	6878      	ldr	r0, [r7, #4]
 8006ae4:	f7f9 ffae 	bl	8000a44 <HAL_UART_RxCpltCallback>
}
 8006ae8:	e007      	b.n	8006afa <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	699a      	ldr	r2, [r3, #24]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	f042 0208 	orr.w	r2, r2, #8
 8006af8:	619a      	str	r2, [r3, #24]
}
 8006afa:	bf00      	nop
 8006afc:	3770      	adds	r7, #112	@ 0x70
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	58000c00 	.word	0x58000c00

08006b08 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b09c      	sub	sp, #112	@ 0x70
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006b16:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006b20:	2b22      	cmp	r3, #34	@ 0x22
 8006b22:	f040 80be 	bne.w	8006ca2 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b34:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b36:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006b3a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006b3e:	4013      	ands	r3, r2
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b44:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b4a:	1c9a      	adds	r2, r3, #2
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	f040 80a1 	bne.w	8006cb2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006b7e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b84:	667b      	str	r3, [r7, #100]	@ 0x64
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006b8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b90:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b92:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006b94:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b96:	e841 2300 	strex	r3, r2, [r1]
 8006b9a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b9c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d1e6      	bne.n	8006b70 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	3308      	adds	r3, #8
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006baa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bac:	e853 3f00 	ldrex	r3, [r3]
 8006bb0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	f023 0301 	bic.w	r3, r3, #1
 8006bb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006bc2:	643a      	str	r2, [r7, #64]	@ 0x40
 8006bc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bc8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bca:	e841 2300 	strex	r3, r2, [r1]
 8006bce:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1e5      	bne.n	8006ba2 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2220      	movs	r2, #32
 8006bda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2200      	movs	r2, #0
 8006be2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a33      	ldr	r2, [pc, #204]	@ (8006cbc <UART_RxISR_16BIT+0x1b4>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d01f      	beq.n	8006c34 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	685b      	ldr	r3, [r3, #4]
 8006bfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d018      	beq.n	8006c34 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	e853 3f00 	ldrex	r3, [r3]
 8006c0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c10:	69fb      	ldr	r3, [r7, #28]
 8006c12:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006c16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c22:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c28:	e841 2300 	strex	r3, r2, [r1]
 8006c2c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1e6      	bne.n	8006c02 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c38:	2b01      	cmp	r3, #1
 8006c3a:	d12e      	bne.n	8006c9a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	e853 3f00 	ldrex	r3, [r3]
 8006c4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	f023 0310 	bic.w	r3, r3, #16
 8006c56:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006c60:	61bb      	str	r3, [r7, #24]
 8006c62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c64:	6979      	ldr	r1, [r7, #20]
 8006c66:	69ba      	ldr	r2, [r7, #24]
 8006c68:	e841 2300 	strex	r3, r2, [r1]
 8006c6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d1e6      	bne.n	8006c42 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69db      	ldr	r3, [r3, #28]
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	2b10      	cmp	r3, #16
 8006c80:	d103      	bne.n	8006c8a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2210      	movs	r2, #16
 8006c88:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006c90:	4619      	mov	r1, r3
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f7fe fd68 	bl	8005768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c98:	e00b      	b.n	8006cb2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7f9 fed2 	bl	8000a44 <HAL_UART_RxCpltCallback>
}
 8006ca0:	e007      	b.n	8006cb2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	699a      	ldr	r2, [r3, #24]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f042 0208 	orr.w	r2, r2, #8
 8006cb0:	619a      	str	r2, [r3, #24]
}
 8006cb2:	bf00      	nop
 8006cb4:	3770      	adds	r7, #112	@ 0x70
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	bf00      	nop
 8006cbc:	58000c00 	.word	0x58000c00

08006cc0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b0ac      	sub	sp, #176	@ 0xb0
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006cce:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	69db      	ldr	r3, [r3, #28]
 8006cd8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cf6:	2b22      	cmp	r3, #34	@ 0x22
 8006cf8:	f040 8181 	bne.w	8006ffe <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006d02:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d06:	e124      	b.n	8006f52 <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d12:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8006d16:	b2d9      	uxtb	r1, r3
 8006d18:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d22:	400a      	ands	r2, r1
 8006d24:	b2d2      	uxtb	r2, r2
 8006d26:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	3b01      	subs	r3, #1
 8006d3c:	b29a      	uxth	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	69db      	ldr	r3, [r3, #28]
 8006d4a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d053      	beq.n	8006e02 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d011      	beq.n	8006d8a <UART_RxISR_8BIT_FIFOEN+0xca>
 8006d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8006d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d00b      	beq.n	8006d8a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2201      	movs	r2, #1
 8006d78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d80:	f043 0201 	orr.w	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d8e:	f003 0302 	and.w	r3, r3, #2
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d011      	beq.n	8006dba <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2202      	movs	r2, #2
 8006da8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006db0:	f043 0204 	orr.w	r2, r3, #4
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006dba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006dbe:	f003 0304 	and.w	r3, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d011      	beq.n	8006dea <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006dc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006dca:	f003 0301 	and.w	r3, r3, #1
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d00b      	beq.n	8006dea <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2204      	movs	r2, #4
 8006dd8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006de0:	f043 0202 	orr.w	r2, r3, #2
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d006      	beq.n	8006e02 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7fe fcad 	bl	8005754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	f040 80a1 	bne.w	8006f52 <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8006e1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e24:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006e32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006e34:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e36:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8006e38:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006e3a:	e841 2300 	strex	r3, r2, [r1]
 8006e3e:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8006e40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1e4      	bne.n	8006e10 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	3308      	adds	r3, #8
 8006e4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e50:	e853 3f00 	ldrex	r3, [r3]
 8006e54:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8006e56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e58:	4b6f      	ldr	r3, [pc, #444]	@ (8007018 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	3308      	adds	r3, #8
 8006e66:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006e6a:	66ba      	str	r2, [r7, #104]	@ 0x68
 8006e6c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6e:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8006e70:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006e72:	e841 2300 	strex	r3, r2, [r1]
 8006e76:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006e78:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d1e3      	bne.n	8006e46 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2220      	movs	r2, #32
 8006e82:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a61      	ldr	r2, [pc, #388]	@ (800701c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d021      	beq.n	8006ee0 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d01a      	beq.n	8006ee0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006eb2:	e853 3f00 	ldrex	r3, [r3]
 8006eb6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006eb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006eba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	461a      	mov	r2, r3
 8006ec8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006ecc:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ece:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ed2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006eda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e4      	bne.n	8006eaa <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d130      	bne.n	8006f4a <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006efe:	f023 0310 	bic.w	r3, r3, #16
 8006f02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	461a      	mov	r2, r3
 8006f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006f10:	643b      	str	r3, [r7, #64]	@ 0x40
 8006f12:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e4      	bne.n	8006eee <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	69db      	ldr	r3, [r3, #28]
 8006f2a:	f003 0310 	and.w	r3, r3, #16
 8006f2e:	2b10      	cmp	r3, #16
 8006f30:	d103      	bne.n	8006f3a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2210      	movs	r2, #16
 8006f38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f40:	4619      	mov	r1, r3
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f7fe fc10 	bl	8005768 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8006f48:	e00e      	b.n	8006f68 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7f9 fd7a 	bl	8000a44 <HAL_UART_RxCpltCallback>
        break;
 8006f50:	e00a      	b.n	8006f68 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f52:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d006      	beq.n	8006f68 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8006f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006f5e:	f003 0320 	and.w	r3, r3, #32
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f47f aed0 	bne.w	8006d08 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f6e:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006f72:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d049      	beq.n	800700e <UART_RxISR_8BIT_FIFOEN+0x34e>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006f80:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d242      	bcs.n	800700e <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	3308      	adds	r3, #8
 8006f8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f90:	6a3b      	ldr	r3, [r7, #32]
 8006f92:	e853 3f00 	ldrex	r3, [r3]
 8006f96:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f9e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	3308      	adds	r3, #8
 8006fa8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006fac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fb2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fb4:	e841 2300 	strex	r3, r2, [r1]
 8006fb8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d1e3      	bne.n	8006f88 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	4a17      	ldr	r2, [pc, #92]	@ (8007020 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8006fc4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f043 0320 	orr.w	r3, r3, #32
 8006fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	461a      	mov	r2, r3
 8006fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006fe8:	61bb      	str	r3, [r7, #24]
 8006fea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6979      	ldr	r1, [r7, #20]
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	e841 2300 	strex	r3, r2, [r1]
 8006ff4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e4      	bne.n	8006fc6 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ffc:	e007      	b.n	800700e <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	699a      	ldr	r2, [r3, #24]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f042 0208 	orr.w	r2, r2, #8
 800700c:	619a      	str	r2, [r3, #24]
}
 800700e:	bf00      	nop
 8007010:	37b0      	adds	r7, #176	@ 0xb0
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	effffffe 	.word	0xeffffffe
 800701c:	58000c00 	.word	0x58000c00
 8007020:	08006951 	.word	0x08006951

08007024 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b0ae      	sub	sp, #184	@ 0xb8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007032:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800705a:	2b22      	cmp	r3, #34	@ 0x22
 800705c:	f040 8185 	bne.w	800736a <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007066:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800706a:	e128      	b.n	80072be <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007072:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800707a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800707e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007082:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007086:	4013      	ands	r3, r2
 8007088:	b29a      	uxth	r2, r3
 800708a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800708e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007094:	1c9a      	adds	r2, r3, #2
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	b29a      	uxth	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	69db      	ldr	r3, [r3, #28]
 80070b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80070b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070ba:	f003 0307 	and.w	r3, r3, #7
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d053      	beq.n	800716a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80070c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <UART_RxISR_16BIT_FIFOEN+0xce>
 80070ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80070d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d00b      	beq.n	80070f2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2201      	movs	r2, #1
 80070e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070e8:	f043 0201 	orr.w	r2, r3, #1
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80070f2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d011      	beq.n	8007122 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80070fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2202      	movs	r2, #2
 8007110:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007118:	f043 0204 	orr.w	r2, r3, #4
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007122:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d011      	beq.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800712e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00b      	beq.n	8007152 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	2204      	movs	r2, #4
 8007140:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007148:	f043 0202 	orr.w	r2, r3, #2
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007158:	2b00      	cmp	r3, #0
 800715a:	d006      	beq.n	800716a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f7fe faf9 	bl	8005754 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007170:	b29b      	uxth	r3, r3
 8007172:	2b00      	cmp	r3, #0
 8007174:	f040 80a3 	bne.w	80072be <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800717e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007180:	e853 3f00 	ldrex	r3, [r3]
 8007184:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007186:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007188:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800718c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	461a      	mov	r2, r3
 8007196:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800719a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800719e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80071a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80071a6:	e841 2300 	strex	r3, r2, [r1]
 80071aa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80071ac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d1e2      	bne.n	8007178 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	3308      	adds	r3, #8
 80071b8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80071bc:	e853 3f00 	ldrex	r3, [r3]
 80071c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80071c2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80071c4:	4b6f      	ldr	r3, [pc, #444]	@ (8007384 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80071c6:	4013      	ands	r3, r2
 80071c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	3308      	adds	r3, #8
 80071d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80071d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80071d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80071dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80071de:	e841 2300 	strex	r3, r2, [r1]
 80071e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80071e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d1e3      	bne.n	80071b2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2220      	movs	r2, #32
 80071ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a61      	ldr	r2, [pc, #388]	@ (8007388 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d021      	beq.n	800724c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d01a      	beq.n	800724c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800721c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800721e:	e853 3f00 	ldrex	r3, [r3]
 8007222:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007224:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007226:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800722a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	461a      	mov	r2, r3
 8007234:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007238:	65bb      	str	r3, [r7, #88]	@ 0x58
 800723a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800723c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800723e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007240:	e841 2300 	strex	r3, r2, [r1]
 8007244:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007246:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1e4      	bne.n	8007216 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007250:	2b01      	cmp	r3, #1
 8007252:	d130      	bne.n	80072b6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2200      	movs	r2, #0
 8007258:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007262:	e853 3f00 	ldrex	r3, [r3]
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800726a:	f023 0310 	bic.w	r3, r3, #16
 800726e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800727c:	647b      	str	r3, [r7, #68]	@ 0x44
 800727e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007280:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007284:	e841 2300 	strex	r3, r2, [r1]
 8007288:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800728a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800728c:	2b00      	cmp	r3, #0
 800728e:	d1e4      	bne.n	800725a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	f003 0310 	and.w	r3, r3, #16
 800729a:	2b10      	cmp	r3, #16
 800729c:	d103      	bne.n	80072a6 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2210      	movs	r2, #16
 80072a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f7fe fa5a 	bl	8005768 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80072b4:	e00e      	b.n	80072d4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7f9 fbc4 	bl	8000a44 <HAL_UART_RxCpltCallback>
        break;
 80072bc:	e00a      	b.n	80072d4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072be:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d006      	beq.n	80072d4 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 80072c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80072ca:	f003 0320 	and.w	r3, r3, #32
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f47f aecc 	bne.w	800706c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80072da:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d049      	beq.n	800737a <UART_RxISR_16BIT_FIFOEN+0x356>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80072ec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80072f0:	429a      	cmp	r2, r3
 80072f2:	d242      	bcs.n	800737a <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	3308      	adds	r3, #8
 80072fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fe:	e853 3f00 	ldrex	r3, [r3]
 8007302:	623b      	str	r3, [r7, #32]
   return(result);
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800730a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	3308      	adds	r3, #8
 8007314:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007318:	633a      	str	r2, [r7, #48]	@ 0x30
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800731c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800731e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007320:	e841 2300 	strex	r3, r2, [r1]
 8007324:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1e3      	bne.n	80072f4 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a17      	ldr	r2, [pc, #92]	@ (800738c <UART_RxISR_16BIT_FIFOEN+0x368>)
 8007330:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	e853 3f00 	ldrex	r3, [r3]
 800733e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	f043 0320 	orr.w	r3, r3, #32
 8007346:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	461a      	mov	r2, r3
 8007350:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007354:	61fb      	str	r3, [r7, #28]
 8007356:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007358:	69b9      	ldr	r1, [r7, #24]
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	e841 2300 	strex	r3, r2, [r1]
 8007360:	617b      	str	r3, [r7, #20]
   return(result);
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d1e4      	bne.n	8007332 <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007368:	e007      	b.n	800737a <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	699a      	ldr	r2, [r3, #24]
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f042 0208 	orr.w	r2, r2, #8
 8007378:	619a      	str	r2, [r3, #24]
}
 800737a:	bf00      	nop
 800737c:	37b8      	adds	r7, #184	@ 0xb8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}
 8007382:	bf00      	nop
 8007384:	effffffe 	.word	0xeffffffe
 8007388:	58000c00 	.word	0x58000c00
 800738c:	08006b09 	.word	0x08006b09

08007390 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073a4:	b480      	push	{r7}
 80073a6:	b083      	sub	sp, #12
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073c0:	bf00      	nop
 80073c2:	370c      	adds	r7, #12
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b085      	sub	sp, #20
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d101      	bne.n	80073e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80073de:	2302      	movs	r3, #2
 80073e0:	e027      	b.n	8007432 <HAL_UARTEx_DisableFifoMode+0x66>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2201      	movs	r2, #1
 80073e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2224      	movs	r2, #36	@ 0x24
 80073ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f022 0201 	bic.w	r2, r2, #1
 8007408:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007410:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2220      	movs	r2, #32
 8007424:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007430:	2300      	movs	r3, #0
}
 8007432:	4618      	mov	r0, r3
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800744e:	2b01      	cmp	r3, #1
 8007450:	d101      	bne.n	8007456 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007452:	2302      	movs	r3, #2
 8007454:	e02d      	b.n	80074b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2201      	movs	r2, #1
 800745a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2224      	movs	r2, #36	@ 0x24
 8007462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	430a      	orrs	r2, r1
 8007490:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 f850 	bl	8007538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2220      	movs	r2, #32
 80074a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80074b0:	2300      	movs	r3, #0
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
 80074c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d101      	bne.n	80074d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80074ce:	2302      	movs	r3, #2
 80074d0:	e02d      	b.n	800752e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2224      	movs	r2, #36	@ 0x24
 80074de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681a      	ldr	r2, [r3, #0]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0201 	bic.w	r2, r2, #1
 80074f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	683a      	ldr	r2, [r7, #0]
 800750a:	430a      	orrs	r2, r1
 800750c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f812 	bl	8007538 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68fa      	ldr	r2, [r7, #12]
 800751a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2220      	movs	r2, #32
 8007520:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800752c:	2300      	movs	r3, #0
}
 800752e:	4618      	mov	r0, r3
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
	...

08007538 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007544:	2b00      	cmp	r3, #0
 8007546:	d108      	bne.n	800755a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2201      	movs	r2, #1
 800754c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2201      	movs	r2, #1
 8007554:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007558:	e031      	b.n	80075be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800755a:	2310      	movs	r3, #16
 800755c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800755e:	2310      	movs	r3, #16
 8007560:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	0e5b      	lsrs	r3, r3, #25
 800756a:	b2db      	uxtb	r3, r3
 800756c:	f003 0307 	and.w	r3, r3, #7
 8007570:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	0f5b      	lsrs	r3, r3, #29
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 0307 	and.w	r3, r3, #7
 8007580:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007582:	7bbb      	ldrb	r3, [r7, #14]
 8007584:	7b3a      	ldrb	r2, [r7, #12]
 8007586:	4911      	ldr	r1, [pc, #68]	@ (80075cc <UARTEx_SetNbDataToProcess+0x94>)
 8007588:	5c8a      	ldrb	r2, [r1, r2]
 800758a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800758e:	7b3a      	ldrb	r2, [r7, #12]
 8007590:	490f      	ldr	r1, [pc, #60]	@ (80075d0 <UARTEx_SetNbDataToProcess+0x98>)
 8007592:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007594:	fb93 f3f2 	sdiv	r3, r3, r2
 8007598:	b29a      	uxth	r2, r3
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	7b7a      	ldrb	r2, [r7, #13]
 80075a4:	4909      	ldr	r1, [pc, #36]	@ (80075cc <UARTEx_SetNbDataToProcess+0x94>)
 80075a6:	5c8a      	ldrb	r2, [r1, r2]
 80075a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075ac:	7b7a      	ldrb	r2, [r7, #13]
 80075ae:	4908      	ldr	r1, [pc, #32]	@ (80075d0 <UARTEx_SetNbDataToProcess+0x98>)
 80075b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80075be:	bf00      	nop
 80075c0:	3714      	adds	r7, #20
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr
 80075ca:	bf00      	nop
 80075cc:	0800766c 	.word	0x0800766c
 80075d0:	08007674 	.word	0x08007674

080075d4 <memset>:
 80075d4:	4402      	add	r2, r0
 80075d6:	4603      	mov	r3, r0
 80075d8:	4293      	cmp	r3, r2
 80075da:	d100      	bne.n	80075de <memset+0xa>
 80075dc:	4770      	bx	lr
 80075de:	f803 1b01 	strb.w	r1, [r3], #1
 80075e2:	e7f9      	b.n	80075d8 <memset+0x4>

080075e4 <__libc_init_array>:
 80075e4:	b570      	push	{r4, r5, r6, lr}
 80075e6:	4d0d      	ldr	r5, [pc, #52]	@ (800761c <__libc_init_array+0x38>)
 80075e8:	4c0d      	ldr	r4, [pc, #52]	@ (8007620 <__libc_init_array+0x3c>)
 80075ea:	1b64      	subs	r4, r4, r5
 80075ec:	10a4      	asrs	r4, r4, #2
 80075ee:	2600      	movs	r6, #0
 80075f0:	42a6      	cmp	r6, r4
 80075f2:	d109      	bne.n	8007608 <__libc_init_array+0x24>
 80075f4:	4d0b      	ldr	r5, [pc, #44]	@ (8007624 <__libc_init_array+0x40>)
 80075f6:	4c0c      	ldr	r4, [pc, #48]	@ (8007628 <__libc_init_array+0x44>)
 80075f8:	f000 f818 	bl	800762c <_init>
 80075fc:	1b64      	subs	r4, r4, r5
 80075fe:	10a4      	asrs	r4, r4, #2
 8007600:	2600      	movs	r6, #0
 8007602:	42a6      	cmp	r6, r4
 8007604:	d105      	bne.n	8007612 <__libc_init_array+0x2e>
 8007606:	bd70      	pop	{r4, r5, r6, pc}
 8007608:	f855 3b04 	ldr.w	r3, [r5], #4
 800760c:	4798      	blx	r3
 800760e:	3601      	adds	r6, #1
 8007610:	e7ee      	b.n	80075f0 <__libc_init_array+0xc>
 8007612:	f855 3b04 	ldr.w	r3, [r5], #4
 8007616:	4798      	blx	r3
 8007618:	3601      	adds	r6, #1
 800761a:	e7f2      	b.n	8007602 <__libc_init_array+0x1e>
 800761c:	08007684 	.word	0x08007684
 8007620:	08007684 	.word	0x08007684
 8007624:	08007684 	.word	0x08007684
 8007628:	08007688 	.word	0x08007688

0800762c <_init>:
 800762c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800762e:	bf00      	nop
 8007630:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007632:	bc08      	pop	{r3}
 8007634:	469e      	mov	lr, r3
 8007636:	4770      	bx	lr

08007638 <_fini>:
 8007638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763a:	bf00      	nop
 800763c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763e:	bc08      	pop	{r3}
 8007640:	469e      	mov	lr, r3
 8007642:	4770      	bx	lr
