
5.IWDG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071d8  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08007470  08007470  00008470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080074bc  080074bc  000084bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080074c4  080074c4  000084c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080074c8  080074c8  000084c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         0000006c  24000000  080074cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000214  2400006c  08007538  0000906c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000280  08007538  00009280  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001217a  00000000  00000000  0000909a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002ae1  00000000  00000000  0001b214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000c80  00000000  00000000  0001dcf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000972  00000000  00000000  0001e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003888b  00000000  00000000  0001f2ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017890  00000000  00000000  00057b75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bd52  00000000  00000000  0006f405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cb157  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000036f8  00000000  00000000  001cb19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001ce894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400006c 	.word	0x2400006c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08007458 	.word	0x08007458

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000070 	.word	0x24000070
 80002d4:	08007458 	.word	0x08007458

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fdba 	bl	80021b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fbfd 	bl	8001e54 <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fbd0 	bl	8001e54 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fbc4 	bl	8001e54 <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 030c 	add.w	r3, r7, #12
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006f2:	4b24      	ldr	r3, [pc, #144]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006f8:	4a22      	ldr	r2, [pc, #136]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 80006fa:	f043 0310 	orr.w	r3, r3, #16
 80006fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	f003 0310 	and.w	r3, r3, #16
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000710:	4b1c      	ldr	r3, [pc, #112]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000716:	4a1b      	ldr	r2, [pc, #108]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800072e:	2201      	movs	r2, #1
 8000730:	2160      	movs	r1, #96	@ 0x60
 8000732:	4815      	ldr	r0, [pc, #84]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 8000734:	f001 fd3e 	bl	80021b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000738:	2201      	movs	r2, #1
 800073a:	2110      	movs	r1, #16
 800073c:	4813      	ldr	r0, [pc, #76]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 800073e:	f001 fd39 	bl	80021b4 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000742:	2360      	movs	r3, #96	@ 0x60
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000746:	2301      	movs	r3, #1
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800074e:	2300      	movs	r3, #0
 8000750:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4619      	mov	r1, r3
 8000758:	480b      	ldr	r0, [pc, #44]	@ (8000788 <MX_LED_GPIO_Init+0xac>)
 800075a:	f001 fb7b 	bl	8001e54 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800075e:	2310      	movs	r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000762:	2301      	movs	r3, #1
 8000764:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	2300      	movs	r3, #0
 800076c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	@ (800078c <MX_LED_GPIO_Init+0xb0>)
 8000776:	f001 fb6d 	bl	8001e54 <HAL_GPIO_Init>
}
 800077a:	bf00      	nop
 800077c:	3720      	adds	r7, #32
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	58024400 	.word	0x58024400
 8000788:	58021000 	.word	0x58021000
 800078c:	58020400 	.word	0x58020400

08000790 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 8000794:	f7ff ffa2 	bl	80006dc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000798:	f7ff ff34 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 800079c:	f7ff ff66 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 80007a0:	f000 faae 	bl	8000d00 <MX_USART1_UART_Init>
	MX_IWDG1_Init(); // 溢出时间约1s
 80007a4:	f000 f802 	bl	80007ac <MX_IWDG1_Init>
}
 80007a8:	bf00      	nop
 80007aa:	bd80      	pop	{r7, pc}

080007ac <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 80007b0:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_IWDG1_Init+0x34>)
 80007b2:	4a0c      	ldr	r2, [pc, #48]	@ (80007e4 <MX_IWDG1_Init+0x38>)
 80007b4:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <MX_IWDG1_Init+0x34>)
 80007b8:	2204      	movs	r2, #4
 80007ba:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 499;
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_IWDG1_Init+0x34>)
 80007be:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80007c2:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 499;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_IWDG1_Init+0x34>)
 80007c6:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80007ca:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 80007cc:	4804      	ldr	r0, [pc, #16]	@ (80007e0 <MX_IWDG1_Init+0x34>)
 80007ce:	f001 fd2f 	bl	8002230 <HAL_IWDG_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 80007d8:	f000 f8d6 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	24000088 	.word	0x24000088
 80007e4:	58004800 	.word	0x58004800

080007e8 <iwdg_feed>:

/* USER CODE BEGIN 1 */
void iwdg_feed(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	HAL_IWDG_Refresh(&hiwdg1);
 80007ec:	4802      	ldr	r0, [pc, #8]	@ (80007f8 <iwdg_feed+0x10>)
 80007ee:	f001 fd70 	bl	80022d2 <HAL_IWDG_Refresh>
}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	24000088 	.word	0x24000088

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000800:	f000 f896 	bl	8000930 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000804:	f000 fb78 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000808:	f000 f816 	bl	8000838 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  bsp_init();
 800080c:	f7ff ffc0 	bl	8000790 <bsp_init>
  /* USER CODE END 2 */
  HAL_GPIO_WritePin(LED_BLUE_Port, LED_BLUE_Pin, RESET); // 不喂狗会熄灭，然后重新初始化
 8000810:	2200      	movs	r2, #0
 8000812:	2110      	movs	r1, #16
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <main+0x34>)
 8000816:	f001 fccd 	bl	80021b4 <HAL_GPIO_WritePin>
  printf("IWDG Reset Example\r\n");
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <main+0x38>)
 800081c:	f006 fa88 	bl	8006d30 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  iwdg_feed();
 8000820:	f7ff ffe2 	bl	80007e8 <iwdg_feed>
	  HAL_Delay(500); // 喂狗间隔500ms
 8000824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000828:	f000 fbf8 	bl	800101c <HAL_Delay>
	  iwdg_feed();
 800082c:	bf00      	nop
 800082e:	e7f7      	b.n	8000820 <main+0x24>
 8000830:	58020400 	.word	0x58020400
 8000834:	08007470 	.word	0x08007470

08000838 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b09c      	sub	sp, #112	@ 0x70
 800083c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000842:	224c      	movs	r2, #76	@ 0x4c
 8000844:	2100      	movs	r1, #0
 8000846:	4618      	mov	r0, r3
 8000848:	f006 fb52 	bl	8006ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800084c:	1d3b      	adds	r3, r7, #4
 800084e:	2220      	movs	r2, #32
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 fb4c 	bl	8006ef0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000858:	2002      	movs	r0, #2
 800085a:	f001 fd4b 	bl	80022f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800085e:	2300      	movs	r3, #0
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	4b31      	ldr	r3, [pc, #196]	@ (8000928 <SystemClock_Config+0xf0>)
 8000864:	699b      	ldr	r3, [r3, #24]
 8000866:	4a30      	ldr	r2, [pc, #192]	@ (8000928 <SystemClock_Config+0xf0>)
 8000868:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800086c:	6193      	str	r3, [r2, #24]
 800086e:	4b2e      	ldr	r3, [pc, #184]	@ (8000928 <SystemClock_Config+0xf0>)
 8000870:	699b      	ldr	r3, [r3, #24]
 8000872:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <SystemClock_Config+0xf4>)
 800087a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087c:	4a2b      	ldr	r2, [pc, #172]	@ (800092c <SystemClock_Config+0xf4>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000884:	4b29      	ldr	r3, [pc, #164]	@ (800092c <SystemClock_Config+0xf4>)
 8000886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000888:	f003 0301 	and.w	r3, r3, #1
 800088c:	603b      	str	r3, [r7, #0]
 800088e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000890:	bf00      	nop
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <SystemClock_Config+0xf0>)
 8000894:	699b      	ldr	r3, [r3, #24]
 8000896:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800089a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089e:	d1f8      	bne.n	8000892 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80008a0:	2309      	movs	r3, #9
 80008a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80008aa:	2301      	movs	r3, #1
 80008ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008ae:	2302      	movs	r3, #2
 80008b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008b2:	2302      	movs	r3, #2
 80008b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 80008ba:	23f0      	movs	r3, #240	@ 0xf0
 80008bc:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008be:	2302      	movs	r3, #2
 80008c0:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008c2:	2302      	movs	r3, #2
 80008c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c6:	2302      	movs	r3, #2
 80008c8:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80008ca:	2308      	movs	r3, #8
 80008cc:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ce:	2300      	movs	r3, #0
 80008d0:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d2:	2300      	movs	r3, #0
 80008d4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fd44 	bl	8002368 <HAL_RCC_OscConfig>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80008e6:	f000 f84f 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	233f      	movs	r3, #63	@ 0x3f
 80008ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2303      	movs	r3, #3
 80008f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008f6:	2308      	movs	r3, #8
 80008f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008fa:	2340      	movs	r3, #64	@ 0x40
 80008fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008fe:	2340      	movs	r3, #64	@ 0x40
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000902:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000906:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000908:	2340      	movs	r3, #64	@ 0x40
 800090a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800090c:	1d3b      	adds	r3, r7, #4
 800090e:	2104      	movs	r1, #4
 8000910:	4618      	mov	r0, r3
 8000912:	f002 f983 	bl	8002c1c <HAL_RCC_ClockConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800091c:	f000 f834 	bl	8000988 <Error_Handler>
  }
}
 8000920:	bf00      	nop
 8000922:	3770      	adds	r7, #112	@ 0x70
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	58024800 	.word	0x58024800
 800092c:	58000400 	.word	0x58000400

08000930 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000936:	463b      	mov	r3, r7
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000942:	f000 fcab 	bl	800129c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000946:	2301      	movs	r3, #1
 8000948:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800094a:	2300      	movs	r3, #0
 800094c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000952:	231f      	movs	r3, #31
 8000954:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000956:	2387      	movs	r3, #135	@ 0x87
 8000958:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800095a:	2300      	movs	r3, #0
 800095c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800095e:	2300      	movs	r3, #0
 8000960:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000962:	2301      	movs	r3, #1
 8000964:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000966:	2301      	movs	r3, #1
 8000968:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800096a:	2300      	movs	r3, #0
 800096c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800096e:	2300      	movs	r3, #0
 8000970:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000972:	463b      	mov	r3, r7
 8000974:	4618      	mov	r0, r3
 8000976:	f000 fcc9 	bl	800130c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800097a:	2004      	movs	r0, #4
 800097c:	f000 fca6 	bl	80012cc <HAL_MPU_Enable>

}
 8000980:	bf00      	nop
 8000982:	3710      	adds	r7, #16
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <Error_Handler+0x8>

08000994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <HAL_MspInit+0x30>)
 800099c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009a0:	4a08      	ldr	r2, [pc, #32]	@ (80009c4 <HAL_MspInit+0x30>)
 80009a2:	f043 0302 	orr.w	r3, r3, #2
 80009a6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80009aa:	4b06      	ldr	r3, [pc, #24]	@ (80009c4 <HAL_MspInit+0x30>)
 80009ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80009b0:	f003 0302 	and.w	r3, r3, #2
 80009b4:	607b      	str	r3, [r7, #4]
 80009b6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b8:	bf00      	nop
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	58024400 	.word	0x58024400

080009c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <NMI_Handler+0x4>

080009d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <MemManage_Handler+0x4>

080009e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <UsageFault_Handler+0x4>

080009f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0a:	4770      	bx	lr

08000a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a10:	bf00      	nop
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a1a:	b580      	push	{r7, lr}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1e:	f000 fadd 	bl	8000fdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000a2a:	2002      	movs	r0, #2
 8000a2c:	f001 fbdb 	bl	80021e6 <HAL_GPIO_EXTI_IRQHandler>
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a38:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <USART1_IRQHandler+0x10>)
 8000a3a:	f004 fb85 	bl	8005148 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2400009c 	.word	0x2400009c

08000a48 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	60f8      	str	r0, [r7, #12]
 8000a50:	60b9      	str	r1, [r7, #8]
 8000a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a54:	2300      	movs	r3, #0
 8000a56:	617b      	str	r3, [r7, #20]
 8000a58:	e00a      	b.n	8000a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a5a:	f3af 8000 	nop.w
 8000a5e:	4601      	mov	r1, r0
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	1c5a      	adds	r2, r3, #1
 8000a64:	60ba      	str	r2, [r7, #8]
 8000a66:	b2ca      	uxtb	r2, r1
 8000a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a6a:	697b      	ldr	r3, [r7, #20]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	617b      	str	r3, [r7, #20]
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	429a      	cmp	r2, r3
 8000a76:	dbf0      	blt.n	8000a5a <_read+0x12>
  }

  return len;
 8000a78:	687b      	ldr	r3, [r7, #4]
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3718      	adds	r7, #24
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	b086      	sub	sp, #24
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	60b9      	str	r1, [r7, #8]
 8000a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8e:	2300      	movs	r3, #0
 8000a90:	617b      	str	r3, [r7, #20]
 8000a92:	e009      	b.n	8000aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	1c5a      	adds	r2, r3, #1
 8000a98:	60ba      	str	r2, [r7, #8]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 f9ed 	bl	8000e7c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	3301      	adds	r3, #1
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	697a      	ldr	r2, [r7, #20]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	429a      	cmp	r2, r3
 8000aae:	dbf1      	blt.n	8000a94 <_write+0x12>
  }
  return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3718      	adds	r7, #24
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <_close>:

int _close(int file)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
 8000ada:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ae2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ae4:	2300      	movs	r3, #0
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	370c      	adds	r7, #12
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <_isatty>:

int _isatty(int file)
{
 8000af2:	b480      	push	{r7}
 8000af4:	b083      	sub	sp, #12
 8000af6:	af00      	add	r7, sp, #0
 8000af8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000afa:	2301      	movs	r3, #1
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b14:	2300      	movs	r3, #0
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3714      	adds	r7, #20
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
	...

08000b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b2c:	4a14      	ldr	r2, [pc, #80]	@ (8000b80 <_sbrk+0x5c>)
 8000b2e:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <_sbrk+0x60>)
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b38:	4b13      	ldr	r3, [pc, #76]	@ (8000b88 <_sbrk+0x64>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d102      	bne.n	8000b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b40:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <_sbrk+0x64>)
 8000b42:	4a12      	ldr	r2, [pc, #72]	@ (8000b8c <_sbrk+0x68>)
 8000b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b46:	4b10      	ldr	r3, [pc, #64]	@ (8000b88 <_sbrk+0x64>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	d207      	bcs.n	8000b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b54:	f006 fa1a 	bl	8006f8c <__errno>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	220c      	movs	r2, #12
 8000b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e009      	b.n	8000b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <_sbrk+0x64>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b6a:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <_sbrk+0x64>)
 8000b6c:	681a      	ldr	r2, [r3, #0]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	4413      	add	r3, r2
 8000b72:	4a05      	ldr	r2, [pc, #20]	@ (8000b88 <_sbrk+0x64>)
 8000b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b76:	68fb      	ldr	r3, [r7, #12]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3718      	adds	r7, #24
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	24080000 	.word	0x24080000
 8000b84:	00000400 	.word	0x00000400
 8000b88:	24000098 	.word	0x24000098
 8000b8c:	24000280 	.word	0x24000280

08000b90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b94:	4b43      	ldr	r3, [pc, #268]	@ (8000ca4 <SystemInit+0x114>)
 8000b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b9a:	4a42      	ldr	r2, [pc, #264]	@ (8000ca4 <SystemInit+0x114>)
 8000b9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ba0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ba4:	4b40      	ldr	r3, [pc, #256]	@ (8000ca8 <SystemInit+0x118>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f003 030f 	and.w	r3, r3, #15
 8000bac:	2b06      	cmp	r3, #6
 8000bae:	d807      	bhi.n	8000bc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ca8 <SystemInit+0x118>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f023 030f 	bic.w	r3, r3, #15
 8000bb8:	4a3b      	ldr	r2, [pc, #236]	@ (8000ca8 <SystemInit+0x118>)
 8000bba:	f043 0307 	orr.w	r3, r3, #7
 8000bbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000bc0:	4b3a      	ldr	r3, [pc, #232]	@ (8000cac <SystemInit+0x11c>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a39      	ldr	r2, [pc, #228]	@ (8000cac <SystemInit+0x11c>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000bcc:	4b37      	ldr	r3, [pc, #220]	@ (8000cac <SystemInit+0x11c>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000bd2:	4b36      	ldr	r3, [pc, #216]	@ (8000cac <SystemInit+0x11c>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	4935      	ldr	r1, [pc, #212]	@ (8000cac <SystemInit+0x11c>)
 8000bd8:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <SystemInit+0x120>)
 8000bda:	4013      	ands	r3, r2
 8000bdc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000bde:	4b32      	ldr	r3, [pc, #200]	@ (8000ca8 <SystemInit+0x118>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	f003 0308 	and.w	r3, r3, #8
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d007      	beq.n	8000bfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000bea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ca8 <SystemInit+0x118>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f023 030f 	bic.w	r3, r3, #15
 8000bf2:	4a2d      	ldr	r2, [pc, #180]	@ (8000ca8 <SystemInit+0x118>)
 8000bf4:	f043 0307 	orr.w	r3, r3, #7
 8000bf8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8000cac <SystemInit+0x11c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c00:	4b2a      	ldr	r3, [pc, #168]	@ (8000cac <SystemInit+0x11c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c06:	4b29      	ldr	r3, [pc, #164]	@ (8000cac <SystemInit+0x11c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c0c:	4b27      	ldr	r3, [pc, #156]	@ (8000cac <SystemInit+0x11c>)
 8000c0e:	4a29      	ldr	r2, [pc, #164]	@ (8000cb4 <SystemInit+0x124>)
 8000c10:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c12:	4b26      	ldr	r3, [pc, #152]	@ (8000cac <SystemInit+0x11c>)
 8000c14:	4a28      	ldr	r2, [pc, #160]	@ (8000cb8 <SystemInit+0x128>)
 8000c16:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c18:	4b24      	ldr	r3, [pc, #144]	@ (8000cac <SystemInit+0x11c>)
 8000c1a:	4a28      	ldr	r2, [pc, #160]	@ (8000cbc <SystemInit+0x12c>)
 8000c1c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c1e:	4b23      	ldr	r3, [pc, #140]	@ (8000cac <SystemInit+0x11c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c24:	4b21      	ldr	r3, [pc, #132]	@ (8000cac <SystemInit+0x11c>)
 8000c26:	4a25      	ldr	r2, [pc, #148]	@ (8000cbc <SystemInit+0x12c>)
 8000c28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c2a:	4b20      	ldr	r3, [pc, #128]	@ (8000cac <SystemInit+0x11c>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c30:	4b1e      	ldr	r3, [pc, #120]	@ (8000cac <SystemInit+0x11c>)
 8000c32:	4a22      	ldr	r2, [pc, #136]	@ (8000cbc <SystemInit+0x12c>)
 8000c34:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c36:	4b1d      	ldr	r3, [pc, #116]	@ (8000cac <SystemInit+0x11c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8000cac <SystemInit+0x11c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	@ (8000cac <SystemInit+0x11c>)
 8000c42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000c46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000c48:	4b18      	ldr	r3, [pc, #96]	@ (8000cac <SystemInit+0x11c>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <SystemInit+0x130>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc4 <SystemInit+0x134>)
 8000c54:	4013      	ands	r3, r2
 8000c56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c5a:	d202      	bcs.n	8000c62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <SystemInit+0x138>)
 8000c5e:	2201      	movs	r2, #1
 8000c60:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000c62:	4b12      	ldr	r3, [pc, #72]	@ (8000cac <SystemInit+0x11c>)
 8000c64:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d113      	bne.n	8000c98 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c70:	4b0e      	ldr	r3, [pc, #56]	@ (8000cac <SystemInit+0x11c>)
 8000c72:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c76:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <SystemInit+0x11c>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000c7c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <SystemInit+0x13c>)
 8000c82:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000c86:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000c88:	4b08      	ldr	r3, [pc, #32]	@ (8000cac <SystemInit+0x11c>)
 8000c8a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000c8e:	4a07      	ldr	r2, [pc, #28]	@ (8000cac <SystemInit+0x11c>)
 8000c90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000c94:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00
 8000ca8:	52002000 	.word	0x52002000
 8000cac:	58024400 	.word	0x58024400
 8000cb0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cb4:	02020200 	.word	0x02020200
 8000cb8:	01ff0000 	.word	0x01ff0000
 8000cbc:	01010280 	.word	0x01010280
 8000cc0:	5c001000 	.word	0x5c001000
 8000cc4:	ffff0000 	.word	0xffff0000
 8000cc8:	51008108 	.word	0x51008108
 8000ccc:	52004000 	.word	0x52004000

08000cd0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <ExitRun0Mode+0x2c>)
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <ExitRun0Mode+0x2c>)
 8000cda:	f043 0302 	orr.w	r3, r3, #2
 8000cde:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000ce0:	bf00      	nop
 8000ce2:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <ExitRun0Mode+0x2c>)
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d0f9      	beq.n	8000ce2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	58024800 	.word	0x58024800

08000d00 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d06:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <MX_USART1_UART_Init+0x94>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000d10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d4a:	f004 f91f 	bl	8004f8c <HAL_UART_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000d54:	f7ff fe18 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d5c:	f005 fe06 	bl	800696c <HAL_UARTEx_SetTxFifoThreshold>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f7ff fe0f 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d6e:	f005 fe3b 	bl	80069e8 <HAL_UARTEx_SetRxFifoThreshold>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f7ff fe06 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_USART1_UART_Init+0x90>)
 8000d7e:	f005 fdbc 	bl	80068fa <HAL_UARTEx_DisableFifoMode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f7ff fdfe 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	2400009c 	.word	0x2400009c
 8000d94:	40011000 	.word	0x40011000

08000d98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b0ba      	sub	sp, #232	@ 0xe8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000db0:	f107 0310 	add.w	r3, r7, #16
 8000db4:	22c0      	movs	r2, #192	@ 0xc0
 8000db6:	2100      	movs	r1, #0
 8000db8:	4618      	mov	r0, r3
 8000dba:	f006 f899 	bl	8006ef0 <memset>
  if(uartHandle->Instance==USART1)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8000e70 <HAL_UART_MspInit+0xd8>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d14e      	bne.n	8000e66 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000dc8:	f04f 0201 	mov.w	r2, #1
 8000dcc:	f04f 0300 	mov.w	r3, #0
 8000dd0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000dda:	f107 0310 	add.w	r3, r7, #16
 8000dde:	4618      	mov	r0, r3
 8000de0:	f002 faa8 	bl	8003334 <HAL_RCCEx_PeriphCLKConfig>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000dea:	f7ff fdcd 	bl	8000988 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000dee:	4b21      	ldr	r3, [pc, #132]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000df4:	4a1f      	ldr	r2, [pc, #124]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b19      	ldr	r3, [pc, #100]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e12:	4a18      	ldr	r2, [pc, #96]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e1c:	4b15      	ldr	r3, [pc, #84]	@ (8000e74 <HAL_UART_MspInit+0xdc>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000e2a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000e44:	2307      	movs	r3, #7
 8000e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4809      	ldr	r0, [pc, #36]	@ (8000e78 <HAL_UART_MspInit+0xe0>)
 8000e52:	f000 ffff 	bl	8001e54 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2025      	movs	r0, #37	@ 0x25
 8000e5c:	f000 f9e9 	bl	8001232 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e60:	2025      	movs	r0, #37	@ 0x25
 8000e62:	f000 fa00 	bl	8001266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e66:	bf00      	nop
 8000e68:	37e8      	adds	r7, #232	@ 0xe8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40011000 	.word	0x40011000
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58020000 	.word	0x58020000

08000e7c <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000e84:	1d39      	adds	r1, r7, #4
 8000e86:	f04f 33ff 	mov.w	r3, #4294967295
 8000e8a:	2201      	movs	r2, #1
 8000e8c:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <__io_putchar+0x20>)
 8000e8e:	f004 f8cd 	bl	800502c <HAL_UART_Transmit>
    return ch;
 8000e92:	687b      	ldr	r3, [r7, #4]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2400009c 	.word	0x2400009c

08000ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ea0:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000edc <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000ea4:	f7ff ff14 	bl	8000cd0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ea8:	f7ff fe72 	bl	8000b90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eac:	480c      	ldr	r0, [pc, #48]	@ (8000ee0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000eae:	490d      	ldr	r1, [pc, #52]	@ (8000ee4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000eb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb4:	e002      	b.n	8000ebc <LoopCopyDataInit>

08000eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eba:	3304      	adds	r3, #4

08000ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec0:	d3f9      	bcc.n	8000eb6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8000eec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ec4:	4c0a      	ldr	r4, [pc, #40]	@ (8000ef0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec8:	e001      	b.n	8000ece <LoopFillZerobss>

08000eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ecc:	3204      	adds	r2, #4

08000ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed0:	d3fb      	bcc.n	8000eca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f006 f861 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fc91 	bl	80007fc <main>
  bx  lr
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000edc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ee0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ee4:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000ee8:	080074cc 	.word	0x080074cc
  ldr r2, =_sbss
 8000eec:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000ef0:	24000280 	.word	0x24000280

08000ef4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC3_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000efe:	2003      	movs	r0, #3
 8000f00:	f000 f98c 	bl	800121c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f04:	f002 f840 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_Init+0x68>)
 8000f0c:	699b      	ldr	r3, [r3, #24]
 8000f0e:	0a1b      	lsrs	r3, r3, #8
 8000f10:	f003 030f 	and.w	r3, r3, #15
 8000f14:	4913      	ldr	r1, [pc, #76]	@ (8000f64 <HAL_Init+0x6c>)
 8000f16:	5ccb      	ldrb	r3, [r1, r3]
 8000f18:	f003 031f 	and.w	r3, r3, #31
 8000f1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f22:	4b0f      	ldr	r3, [pc, #60]	@ (8000f60 <HAL_Init+0x68>)
 8000f24:	699b      	ldr	r3, [r3, #24]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f64 <HAL_Init+0x6c>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	fa22 f303 	lsr.w	r3, r2, r3
 8000f38:	4a0b      	ldr	r2, [pc, #44]	@ (8000f68 <HAL_Init+0x70>)
 8000f3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f3c:	4a0b      	ldr	r2, [pc, #44]	@ (8000f6c <HAL_Init+0x74>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f42:	200f      	movs	r0, #15
 8000f44:	f000 f814 	bl	8000f70 <HAL_InitTick>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e002      	b.n	8000f58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f52:	f7ff fd1f 	bl	8000994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f56:	2300      	movs	r3, #0
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	58024400 	.word	0x58024400
 8000f64:	08007484 	.word	0x08007484
 8000f68:	24000004 	.word	0x24000004
 8000f6c:	24000000 	.word	0x24000000

08000f70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_InitTick+0x60>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e021      	b.n	8000fc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f84:	4b13      	ldr	r3, [pc, #76]	@ (8000fd4 <HAL_InitTick+0x64>)
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_InitTick+0x60>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 f971 	bl	8001282 <HAL_SYSTICK_Config>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e00e      	b.n	8000fc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2b0f      	cmp	r3, #15
 8000fae:	d80a      	bhi.n	8000fc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb8:	f000 f93b 	bl	8001232 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fbc:	4a06      	ldr	r2, [pc, #24]	@ (8000fd8 <HAL_InitTick+0x68>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e000      	b.n	8000fc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fc6:	2301      	movs	r3, #1
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	2400000c 	.word	0x2400000c
 8000fd4:	24000000 	.word	0x24000000
 8000fd8:	24000008 	.word	0x24000008

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	@ (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	@ (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	2400000c 	.word	0x2400000c
 8001000:	24000130 	.word	0x24000130

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	@ (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	24000130 	.word	0x24000130

0800101c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001024:	f7ff ffee 	bl	8001004 <HAL_GetTick>
 8001028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001034:	d005      	beq.n	8001042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001036:	4b0a      	ldr	r3, [pc, #40]	@ (8001060 <HAL_Delay+0x44>)
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	461a      	mov	r2, r3
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001042:	bf00      	nop
 8001044:	f7ff ffde 	bl	8001004 <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	68fa      	ldr	r2, [r7, #12]
 8001050:	429a      	cmp	r2, r3
 8001052:	d8f7      	bhi.n	8001044 <HAL_Delay+0x28>
  {
  }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	2400000c 	.word	0x2400000c

08001064 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001068:	4b03      	ldr	r3, [pc, #12]	@ (8001078 <HAL_GetREVID+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	0c1b      	lsrs	r3, r3, #16
}
 800106e:	4618      	mov	r0, r3
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr
 8001078:	5c001000 	.word	0x5c001000

0800107c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800107c:	b480      	push	{r7}
 800107e:	b085      	sub	sp, #20
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800108c:	4b0b      	ldr	r3, [pc, #44]	@ (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001098:	4013      	ands	r3, r2
 800109a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a4:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a6:	4313      	orrs	r3, r2
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	@ (80010bc <__NVIC_SetPriorityGrouping+0x40>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00
 80010c0:	05fa0000 	.word	0x05fa0000

080010c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <__NVIC_GetPriorityGrouping+0x18>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	f003 0307 	and.w	r3, r3, #7
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010da:	4770      	bx	lr
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	db0b      	blt.n	800110a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	f003 021f 	and.w	r2, r3, #31
 80010f8:	4907      	ldr	r1, [pc, #28]	@ (8001118 <__NVIC_EnableIRQ+0x38>)
 80010fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fe:	095b      	lsrs	r3, r3, #5
 8001100:	2001      	movs	r0, #1
 8001102:	fa00 f202 	lsl.w	r2, r0, r2
 8001106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	e000e100 	.word	0xe000e100

0800111c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	6039      	str	r1, [r7, #0]
 8001126:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001128:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db0a      	blt.n	8001146 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	b2da      	uxtb	r2, r3
 8001134:	490c      	ldr	r1, [pc, #48]	@ (8001168 <__NVIC_SetPriority+0x4c>)
 8001136:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800113a:	0112      	lsls	r2, r2, #4
 800113c:	b2d2      	uxtb	r2, r2
 800113e:	440b      	add	r3, r1
 8001140:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001144:	e00a      	b.n	800115c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	b2da      	uxtb	r2, r3
 800114a:	4908      	ldr	r1, [pc, #32]	@ (800116c <__NVIC_SetPriority+0x50>)
 800114c:	88fb      	ldrh	r3, [r7, #6]
 800114e:	f003 030f 	and.w	r3, r3, #15
 8001152:	3b04      	subs	r3, #4
 8001154:	0112      	lsls	r2, r2, #4
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	440b      	add	r3, r1
 800115a:	761a      	strb	r2, [r3, #24]
}
 800115c:	bf00      	nop
 800115e:	370c      	adds	r7, #12
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000e100 	.word	0xe000e100
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001170:	b480      	push	{r7}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	f003 0307 	and.w	r3, r3, #7
 8001182:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	f1c3 0307 	rsb	r3, r3, #7
 800118a:	2b04      	cmp	r3, #4
 800118c:	bf28      	it	cs
 800118e:	2304      	movcs	r3, #4
 8001190:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001192:	69fb      	ldr	r3, [r7, #28]
 8001194:	3304      	adds	r3, #4
 8001196:	2b06      	cmp	r3, #6
 8001198:	d902      	bls.n	80011a0 <NVIC_EncodePriority+0x30>
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3b03      	subs	r3, #3
 800119e:	e000      	b.n	80011a2 <NVIC_EncodePriority+0x32>
 80011a0:	2300      	movs	r3, #0
 80011a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a4:	f04f 32ff 	mov.w	r2, #4294967295
 80011a8:	69bb      	ldr	r3, [r7, #24]
 80011aa:	fa02 f303 	lsl.w	r3, r2, r3
 80011ae:	43da      	mvns	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	401a      	ands	r2, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011b8:	f04f 31ff 	mov.w	r1, #4294967295
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	fa01 f303 	lsl.w	r3, r1, r3
 80011c2:	43d9      	mvns	r1, r3
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c8:	4313      	orrs	r3, r2
         );
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3724      	adds	r7, #36	@ 0x24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
	...

080011d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3b01      	subs	r3, #1
 80011e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011e8:	d301      	bcc.n	80011ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ea:	2301      	movs	r3, #1
 80011ec:	e00f      	b.n	800120e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ee:	4a0a      	ldr	r2, [pc, #40]	@ (8001218 <SysTick_Config+0x40>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011f6:	210f      	movs	r1, #15
 80011f8:	f04f 30ff 	mov.w	r0, #4294967295
 80011fc:	f7ff ff8e 	bl	800111c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001200:	4b05      	ldr	r3, [pc, #20]	@ (8001218 <SysTick_Config+0x40>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001206:	4b04      	ldr	r3, [pc, #16]	@ (8001218 <SysTick_Config+0x40>)
 8001208:	2207      	movs	r2, #7
 800120a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800120c:	2300      	movs	r3, #0
}
 800120e:	4618      	mov	r0, r3
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	e000e010 	.word	0xe000e010

0800121c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ff29 	bl	800107c <__NVIC_SetPriorityGrouping>
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b086      	sub	sp, #24
 8001236:	af00      	add	r7, sp, #0
 8001238:	4603      	mov	r3, r0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001240:	f7ff ff40 	bl	80010c4 <__NVIC_GetPriorityGrouping>
 8001244:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	68b9      	ldr	r1, [r7, #8]
 800124a:	6978      	ldr	r0, [r7, #20]
 800124c:	f7ff ff90 	bl	8001170 <NVIC_EncodePriority>
 8001250:	4602      	mov	r2, r0
 8001252:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001256:	4611      	mov	r1, r2
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff5f 	bl	800111c <__NVIC_SetPriority>
}
 800125e:	bf00      	nop
 8001260:	3718      	adds	r7, #24
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	4603      	mov	r3, r0
 800126e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001270:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff33 	bl	80010e0 <__NVIC_EnableIRQ>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff ffa4 	bl	80011d8 <SysTick_Config>
 8001290:	4603      	mov	r3, r0
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80012a0:	f3bf 8f5f 	dmb	sy
}
 80012a4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <HAL_MPU_Disable+0x28>)
 80012a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012aa:	4a06      	ldr	r2, [pc, #24]	@ (80012c4 <HAL_MPU_Disable+0x28>)
 80012ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012b0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012b2:	4b05      	ldr	r3, [pc, #20]	@ (80012c8 <HAL_MPU_Disable+0x2c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	605a      	str	r2, [r3, #4]
}
 80012b8:	bf00      	nop
 80012ba:	46bd      	mov	sp, r7
 80012bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c0:	4770      	bx	lr
 80012c2:	bf00      	nop
 80012c4:	e000ed00 	.word	0xe000ed00
 80012c8:	e000ed90 	.word	0xe000ed90

080012cc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001304 <HAL_MPU_Enable+0x38>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012de:	4b0a      	ldr	r3, [pc, #40]	@ (8001308 <HAL_MPU_Enable+0x3c>)
 80012e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e2:	4a09      	ldr	r2, [pc, #36]	@ (8001308 <HAL_MPU_Enable+0x3c>)
 80012e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012e8:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012ea:	f3bf 8f4f 	dsb	sy
}
 80012ee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f0:	f3bf 8f6f 	isb	sy
}
 80012f4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012f6:	bf00      	nop
 80012f8:	370c      	adds	r7, #12
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	e000ed90 	.word	0xe000ed90
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	785a      	ldrb	r2, [r3, #1]
 8001318:	4b1b      	ldr	r3, [pc, #108]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 800131a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800131c:	4b1a      	ldr	r3, [pc, #104]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	4a19      	ldr	r2, [pc, #100]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 8001322:	f023 0301 	bic.w	r3, r3, #1
 8001326:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001328:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	7b1b      	ldrb	r3, [r3, #12]
 8001334:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7adb      	ldrb	r3, [r3, #11]
 800133a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800133c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7a9b      	ldrb	r3, [r3, #10]
 8001342:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7b5b      	ldrb	r3, [r3, #13]
 800134a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800134c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7b9b      	ldrb	r3, [r3, #14]
 8001352:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7bdb      	ldrb	r3, [r3, #15]
 800135a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800135c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7a5b      	ldrb	r3, [r3, #9]
 8001362:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001364:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	7a1b      	ldrb	r3, [r3, #8]
 800136a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800136c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800136e:	687a      	ldr	r2, [r7, #4]
 8001370:	7812      	ldrb	r2, [r2, #0]
 8001372:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001376:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001378:	6113      	str	r3, [r2, #16]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed90 	.word	0xe000ed90

0800138c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b086      	sub	sp, #24
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fe36 	bl	8001004 <HAL_GetTick>
 8001398:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d101      	bne.n	80013a4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e2dc      	b.n	800195e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d008      	beq.n	80013c2 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2200      	movs	r2, #0
 80013ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
 80013c0:	e2cd      	b.n	800195e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a76      	ldr	r2, [pc, #472]	@ (80015a0 <HAL_DMA_Abort+0x214>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d04a      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a74      	ldr	r2, [pc, #464]	@ (80015a4 <HAL_DMA_Abort+0x218>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d045      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a73      	ldr	r2, [pc, #460]	@ (80015a8 <HAL_DMA_Abort+0x21c>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d040      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a71      	ldr	r2, [pc, #452]	@ (80015ac <HAL_DMA_Abort+0x220>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d03b      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a70      	ldr	r2, [pc, #448]	@ (80015b0 <HAL_DMA_Abort+0x224>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d036      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a6e      	ldr	r2, [pc, #440]	@ (80015b4 <HAL_DMA_Abort+0x228>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d031      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a6d      	ldr	r2, [pc, #436]	@ (80015b8 <HAL_DMA_Abort+0x22c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d02c      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a6b      	ldr	r2, [pc, #428]	@ (80015bc <HAL_DMA_Abort+0x230>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d027      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a6a      	ldr	r2, [pc, #424]	@ (80015c0 <HAL_DMA_Abort+0x234>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d022      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a68      	ldr	r2, [pc, #416]	@ (80015c4 <HAL_DMA_Abort+0x238>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d01d      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a67      	ldr	r2, [pc, #412]	@ (80015c8 <HAL_DMA_Abort+0x23c>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d018      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a65      	ldr	r2, [pc, #404]	@ (80015cc <HAL_DMA_Abort+0x240>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d013      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	4a64      	ldr	r2, [pc, #400]	@ (80015d0 <HAL_DMA_Abort+0x244>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d00e      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a62      	ldr	r2, [pc, #392]	@ (80015d4 <HAL_DMA_Abort+0x248>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d009      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a61      	ldr	r2, [pc, #388]	@ (80015d8 <HAL_DMA_Abort+0x24c>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d004      	beq.n	8001462 <HAL_DMA_Abort+0xd6>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a5f      	ldr	r2, [pc, #380]	@ (80015dc <HAL_DMA_Abort+0x250>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d101      	bne.n	8001466 <HAL_DMA_Abort+0xda>
 8001462:	2301      	movs	r3, #1
 8001464:	e000      	b.n	8001468 <HAL_DMA_Abort+0xdc>
 8001466:	2300      	movs	r3, #0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d013      	beq.n	8001494 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f022 021e 	bic.w	r2, r2, #30
 800147a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800148a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	617b      	str	r3, [r7, #20]
 8001492:	e00a      	b.n	80014aa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f022 020e 	bic.w	r2, r2, #14
 80014a2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a3c      	ldr	r2, [pc, #240]	@ (80015a0 <HAL_DMA_Abort+0x214>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d072      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a3a      	ldr	r2, [pc, #232]	@ (80015a4 <HAL_DMA_Abort+0x218>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d06d      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a39      	ldr	r2, [pc, #228]	@ (80015a8 <HAL_DMA_Abort+0x21c>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d068      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4a37      	ldr	r2, [pc, #220]	@ (80015ac <HAL_DMA_Abort+0x220>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d063      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a36      	ldr	r2, [pc, #216]	@ (80015b0 <HAL_DMA_Abort+0x224>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d05e      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a34      	ldr	r2, [pc, #208]	@ (80015b4 <HAL_DMA_Abort+0x228>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d059      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a33      	ldr	r2, [pc, #204]	@ (80015b8 <HAL_DMA_Abort+0x22c>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d054      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a31      	ldr	r2, [pc, #196]	@ (80015bc <HAL_DMA_Abort+0x230>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d04f      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a30      	ldr	r2, [pc, #192]	@ (80015c0 <HAL_DMA_Abort+0x234>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d04a      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a2e      	ldr	r2, [pc, #184]	@ (80015c4 <HAL_DMA_Abort+0x238>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d045      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a2d      	ldr	r2, [pc, #180]	@ (80015c8 <HAL_DMA_Abort+0x23c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d040      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a2b      	ldr	r2, [pc, #172]	@ (80015cc <HAL_DMA_Abort+0x240>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d03b      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a2a      	ldr	r2, [pc, #168]	@ (80015d0 <HAL_DMA_Abort+0x244>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d036      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a28      	ldr	r2, [pc, #160]	@ (80015d4 <HAL_DMA_Abort+0x248>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d031      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <HAL_DMA_Abort+0x24c>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d02c      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a25      	ldr	r2, [pc, #148]	@ (80015dc <HAL_DMA_Abort+0x250>)
 8001546:	4293      	cmp	r3, r2
 8001548:	d027      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a24      	ldr	r2, [pc, #144]	@ (80015e0 <HAL_DMA_Abort+0x254>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d022      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a22      	ldr	r2, [pc, #136]	@ (80015e4 <HAL_DMA_Abort+0x258>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d01d      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a21      	ldr	r2, [pc, #132]	@ (80015e8 <HAL_DMA_Abort+0x25c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d018      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a1f      	ldr	r2, [pc, #124]	@ (80015ec <HAL_DMA_Abort+0x260>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d013      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4a1e      	ldr	r2, [pc, #120]	@ (80015f0 <HAL_DMA_Abort+0x264>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d00e      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a1c      	ldr	r2, [pc, #112]	@ (80015f4 <HAL_DMA_Abort+0x268>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d009      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a1b      	ldr	r2, [pc, #108]	@ (80015f8 <HAL_DMA_Abort+0x26c>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d004      	beq.n	800159a <HAL_DMA_Abort+0x20e>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a19      	ldr	r2, [pc, #100]	@ (80015fc <HAL_DMA_Abort+0x270>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d132      	bne.n	8001600 <HAL_DMA_Abort+0x274>
 800159a:	2301      	movs	r3, #1
 800159c:	e031      	b.n	8001602 <HAL_DMA_Abort+0x276>
 800159e:	bf00      	nop
 80015a0:	40020010 	.word	0x40020010
 80015a4:	40020028 	.word	0x40020028
 80015a8:	40020040 	.word	0x40020040
 80015ac:	40020058 	.word	0x40020058
 80015b0:	40020070 	.word	0x40020070
 80015b4:	40020088 	.word	0x40020088
 80015b8:	400200a0 	.word	0x400200a0
 80015bc:	400200b8 	.word	0x400200b8
 80015c0:	40020410 	.word	0x40020410
 80015c4:	40020428 	.word	0x40020428
 80015c8:	40020440 	.word	0x40020440
 80015cc:	40020458 	.word	0x40020458
 80015d0:	40020470 	.word	0x40020470
 80015d4:	40020488 	.word	0x40020488
 80015d8:	400204a0 	.word	0x400204a0
 80015dc:	400204b8 	.word	0x400204b8
 80015e0:	58025408 	.word	0x58025408
 80015e4:	5802541c 	.word	0x5802541c
 80015e8:	58025430 	.word	0x58025430
 80015ec:	58025444 	.word	0x58025444
 80015f0:	58025458 	.word	0x58025458
 80015f4:	5802546c 	.word	0x5802546c
 80015f8:	58025480 	.word	0x58025480
 80015fc:	58025494 	.word	0x58025494
 8001600:	2300      	movs	r3, #0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001610:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001614:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a6d      	ldr	r2, [pc, #436]	@ (80017d0 <HAL_DMA_Abort+0x444>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d04a      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a6b      	ldr	r2, [pc, #428]	@ (80017d4 <HAL_DMA_Abort+0x448>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d045      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a6a      	ldr	r2, [pc, #424]	@ (80017d8 <HAL_DMA_Abort+0x44c>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d040      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a68      	ldr	r2, [pc, #416]	@ (80017dc <HAL_DMA_Abort+0x450>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d03b      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a67      	ldr	r2, [pc, #412]	@ (80017e0 <HAL_DMA_Abort+0x454>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d036      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a65      	ldr	r2, [pc, #404]	@ (80017e4 <HAL_DMA_Abort+0x458>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d031      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a64      	ldr	r2, [pc, #400]	@ (80017e8 <HAL_DMA_Abort+0x45c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d02c      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a62      	ldr	r2, [pc, #392]	@ (80017ec <HAL_DMA_Abort+0x460>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d027      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a61      	ldr	r2, [pc, #388]	@ (80017f0 <HAL_DMA_Abort+0x464>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d022      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a5f      	ldr	r2, [pc, #380]	@ (80017f4 <HAL_DMA_Abort+0x468>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d01d      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a5e      	ldr	r2, [pc, #376]	@ (80017f8 <HAL_DMA_Abort+0x46c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d018      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a5c      	ldr	r2, [pc, #368]	@ (80017fc <HAL_DMA_Abort+0x470>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a5b      	ldr	r2, [pc, #364]	@ (8001800 <HAL_DMA_Abort+0x474>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d00e      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a59      	ldr	r2, [pc, #356]	@ (8001804 <HAL_DMA_Abort+0x478>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d009      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a58      	ldr	r2, [pc, #352]	@ (8001808 <HAL_DMA_Abort+0x47c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d004      	beq.n	80016b6 <HAL_DMA_Abort+0x32a>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a56      	ldr	r2, [pc, #344]	@ (800180c <HAL_DMA_Abort+0x480>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d108      	bne.n	80016c8 <HAL_DMA_Abort+0x33c>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	e007      	b.n	80016d8 <HAL_DMA_Abort+0x34c>
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 0201 	bic.w	r2, r2, #1
 80016d6:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80016d8:	e013      	b.n	8001702 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016da:	f7ff fc93 	bl	8001004 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d90c      	bls.n	8001702 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2220      	movs	r2, #32
 80016ec:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2203      	movs	r2, #3
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e12d      	b.n	800195e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1e5      	bne.n	80016da <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a2f      	ldr	r2, [pc, #188]	@ (80017d0 <HAL_DMA_Abort+0x444>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d04a      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a2d      	ldr	r2, [pc, #180]	@ (80017d4 <HAL_DMA_Abort+0x448>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d045      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a2c      	ldr	r2, [pc, #176]	@ (80017d8 <HAL_DMA_Abort+0x44c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d040      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a2a      	ldr	r2, [pc, #168]	@ (80017dc <HAL_DMA_Abort+0x450>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d03b      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a29      	ldr	r2, [pc, #164]	@ (80017e0 <HAL_DMA_Abort+0x454>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d036      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a27      	ldr	r2, [pc, #156]	@ (80017e4 <HAL_DMA_Abort+0x458>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d031      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a26      	ldr	r2, [pc, #152]	@ (80017e8 <HAL_DMA_Abort+0x45c>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d02c      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a24      	ldr	r2, [pc, #144]	@ (80017ec <HAL_DMA_Abort+0x460>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d027      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a23      	ldr	r2, [pc, #140]	@ (80017f0 <HAL_DMA_Abort+0x464>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d022      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a21      	ldr	r2, [pc, #132]	@ (80017f4 <HAL_DMA_Abort+0x468>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01d      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a20      	ldr	r2, [pc, #128]	@ (80017f8 <HAL_DMA_Abort+0x46c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d018      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1e      	ldr	r2, [pc, #120]	@ (80017fc <HAL_DMA_Abort+0x470>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1d      	ldr	r2, [pc, #116]	@ (8001800 <HAL_DMA_Abort+0x474>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00e      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <HAL_DMA_Abort+0x478>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d009      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1a      	ldr	r2, [pc, #104]	@ (8001808 <HAL_DMA_Abort+0x47c>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d004      	beq.n	80017ae <HAL_DMA_Abort+0x422>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a18      	ldr	r2, [pc, #96]	@ (800180c <HAL_DMA_Abort+0x480>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_DMA_Abort+0x426>
 80017ae:	2301      	movs	r3, #1
 80017b0:	e000      	b.n	80017b4 <HAL_DMA_Abort+0x428>
 80017b2:	2300      	movs	r3, #0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d02b      	beq.n	8001810 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017bc:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017c2:	f003 031f 	and.w	r3, r3, #31
 80017c6:	223f      	movs	r2, #63	@ 0x3f
 80017c8:	409a      	lsls	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	e02a      	b.n	8001826 <HAL_DMA_Abort+0x49a>
 80017d0:	40020010 	.word	0x40020010
 80017d4:	40020028 	.word	0x40020028
 80017d8:	40020040 	.word	0x40020040
 80017dc:	40020058 	.word	0x40020058
 80017e0:	40020070 	.word	0x40020070
 80017e4:	40020088 	.word	0x40020088
 80017e8:	400200a0 	.word	0x400200a0
 80017ec:	400200b8 	.word	0x400200b8
 80017f0:	40020410 	.word	0x40020410
 80017f4:	40020428 	.word	0x40020428
 80017f8:	40020440 	.word	0x40020440
 80017fc:	40020458 	.word	0x40020458
 8001800:	40020470 	.word	0x40020470
 8001804:	40020488 	.word	0x40020488
 8001808:	400204a0 	.word	0x400204a0
 800180c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001814:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2201      	movs	r2, #1
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a4f      	ldr	r2, [pc, #316]	@ (8001968 <HAL_DMA_Abort+0x5dc>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d072      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a4d      	ldr	r2, [pc, #308]	@ (800196c <HAL_DMA_Abort+0x5e0>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d06d      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <HAL_DMA_Abort+0x5e4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d068      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a4a      	ldr	r2, [pc, #296]	@ (8001974 <HAL_DMA_Abort+0x5e8>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d063      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4a49      	ldr	r2, [pc, #292]	@ (8001978 <HAL_DMA_Abort+0x5ec>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d05e      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a47      	ldr	r2, [pc, #284]	@ (800197c <HAL_DMA_Abort+0x5f0>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d059      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a46      	ldr	r2, [pc, #280]	@ (8001980 <HAL_DMA_Abort+0x5f4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d054      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a44      	ldr	r2, [pc, #272]	@ (8001984 <HAL_DMA_Abort+0x5f8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d04f      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a43      	ldr	r2, [pc, #268]	@ (8001988 <HAL_DMA_Abort+0x5fc>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04a      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a41      	ldr	r2, [pc, #260]	@ (800198c <HAL_DMA_Abort+0x600>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d045      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a40      	ldr	r2, [pc, #256]	@ (8001990 <HAL_DMA_Abort+0x604>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d040      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a3e      	ldr	r2, [pc, #248]	@ (8001994 <HAL_DMA_Abort+0x608>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d03b      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001998 <HAL_DMA_Abort+0x60c>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d036      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a3b      	ldr	r2, [pc, #236]	@ (800199c <HAL_DMA_Abort+0x610>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d031      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a3a      	ldr	r2, [pc, #232]	@ (80019a0 <HAL_DMA_Abort+0x614>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d02c      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a38      	ldr	r2, [pc, #224]	@ (80019a4 <HAL_DMA_Abort+0x618>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d027      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a37      	ldr	r2, [pc, #220]	@ (80019a8 <HAL_DMA_Abort+0x61c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d022      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a35      	ldr	r2, [pc, #212]	@ (80019ac <HAL_DMA_Abort+0x620>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01d      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a34      	ldr	r2, [pc, #208]	@ (80019b0 <HAL_DMA_Abort+0x624>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d018      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a32      	ldr	r2, [pc, #200]	@ (80019b4 <HAL_DMA_Abort+0x628>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a31      	ldr	r2, [pc, #196]	@ (80019b8 <HAL_DMA_Abort+0x62c>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00e      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a2f      	ldr	r2, [pc, #188]	@ (80019bc <HAL_DMA_Abort+0x630>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d009      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2e      	ldr	r2, [pc, #184]	@ (80019c0 <HAL_DMA_Abort+0x634>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d004      	beq.n	8001916 <HAL_DMA_Abort+0x58a>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a2c      	ldr	r2, [pc, #176]	@ (80019c4 <HAL_DMA_Abort+0x638>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_DMA_Abort+0x58e>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_DMA_Abort+0x590>
 800191a:	2300      	movs	r3, #0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d015      	beq.n	800194c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001924:	687a      	ldr	r2, [r7, #4]
 8001926:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001928:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00c      	beq.n	800194c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800193c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001940:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800194a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3718      	adds	r7, #24
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	40020010 	.word	0x40020010
 800196c:	40020028 	.word	0x40020028
 8001970:	40020040 	.word	0x40020040
 8001974:	40020058 	.word	0x40020058
 8001978:	40020070 	.word	0x40020070
 800197c:	40020088 	.word	0x40020088
 8001980:	400200a0 	.word	0x400200a0
 8001984:	400200b8 	.word	0x400200b8
 8001988:	40020410 	.word	0x40020410
 800198c:	40020428 	.word	0x40020428
 8001990:	40020440 	.word	0x40020440
 8001994:	40020458 	.word	0x40020458
 8001998:	40020470 	.word	0x40020470
 800199c:	40020488 	.word	0x40020488
 80019a0:	400204a0 	.word	0x400204a0
 80019a4:	400204b8 	.word	0x400204b8
 80019a8:	58025408 	.word	0x58025408
 80019ac:	5802541c 	.word	0x5802541c
 80019b0:	58025430 	.word	0x58025430
 80019b4:	58025444 	.word	0x58025444
 80019b8:	58025458 	.word	0x58025458
 80019bc:	5802546c 	.word	0x5802546c
 80019c0:	58025480 	.word	0x58025480
 80019c4:	58025494 	.word	0x58025494

080019c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d101      	bne.n	80019da <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e237      	b.n	8001e4a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d004      	beq.n	80019f0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2280      	movs	r2, #128	@ 0x80
 80019ea:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019ec:	2301      	movs	r3, #1
 80019ee:	e22c      	b.n	8001e4a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a5c      	ldr	r2, [pc, #368]	@ (8001b68 <HAL_DMA_Abort_IT+0x1a0>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d04a      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a5b      	ldr	r2, [pc, #364]	@ (8001b6c <HAL_DMA_Abort_IT+0x1a4>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d045      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a59      	ldr	r2, [pc, #356]	@ (8001b70 <HAL_DMA_Abort_IT+0x1a8>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d040      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a58      	ldr	r2, [pc, #352]	@ (8001b74 <HAL_DMA_Abort_IT+0x1ac>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d03b      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a56      	ldr	r2, [pc, #344]	@ (8001b78 <HAL_DMA_Abort_IT+0x1b0>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d036      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a55      	ldr	r2, [pc, #340]	@ (8001b7c <HAL_DMA_Abort_IT+0x1b4>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d031      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a53      	ldr	r2, [pc, #332]	@ (8001b80 <HAL_DMA_Abort_IT+0x1b8>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d02c      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a52      	ldr	r2, [pc, #328]	@ (8001b84 <HAL_DMA_Abort_IT+0x1bc>)
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d027      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a50      	ldr	r2, [pc, #320]	@ (8001b88 <HAL_DMA_Abort_IT+0x1c0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d022      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a4f      	ldr	r2, [pc, #316]	@ (8001b8c <HAL_DMA_Abort_IT+0x1c4>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d01d      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a4d      	ldr	r2, [pc, #308]	@ (8001b90 <HAL_DMA_Abort_IT+0x1c8>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d018      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a4c      	ldr	r2, [pc, #304]	@ (8001b94 <HAL_DMA_Abort_IT+0x1cc>)
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d013      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001b98 <HAL_DMA_Abort_IT+0x1d0>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d00e      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a49      	ldr	r2, [pc, #292]	@ (8001b9c <HAL_DMA_Abort_IT+0x1d4>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d009      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a47      	ldr	r2, [pc, #284]	@ (8001ba0 <HAL_DMA_Abort_IT+0x1d8>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d004      	beq.n	8001a90 <HAL_DMA_Abort_IT+0xc8>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a46      	ldr	r2, [pc, #280]	@ (8001ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d101      	bne.n	8001a94 <HAL_DMA_Abort_IT+0xcc>
 8001a90:	2301      	movs	r3, #1
 8001a92:	e000      	b.n	8001a96 <HAL_DMA_Abort_IT+0xce>
 8001a94:	2300      	movs	r3, #0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	f000 8086 	beq.w	8001ba8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2204      	movs	r2, #4
 8001aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8001b68 <HAL_DMA_Abort_IT+0x1a0>)
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d04a      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8001b6c <HAL_DMA_Abort_IT+0x1a4>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d045      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b70 <HAL_DMA_Abort_IT+0x1a8>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d040      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a2b      	ldr	r2, [pc, #172]	@ (8001b74 <HAL_DMA_Abort_IT+0x1ac>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d03b      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a29      	ldr	r2, [pc, #164]	@ (8001b78 <HAL_DMA_Abort_IT+0x1b0>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d036      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a28      	ldr	r2, [pc, #160]	@ (8001b7c <HAL_DMA_Abort_IT+0x1b4>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d031      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a26      	ldr	r2, [pc, #152]	@ (8001b80 <HAL_DMA_Abort_IT+0x1b8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d02c      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a25      	ldr	r2, [pc, #148]	@ (8001b84 <HAL_DMA_Abort_IT+0x1bc>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d027      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a23      	ldr	r2, [pc, #140]	@ (8001b88 <HAL_DMA_Abort_IT+0x1c0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d022      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a22      	ldr	r2, [pc, #136]	@ (8001b8c <HAL_DMA_Abort_IT+0x1c4>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d01d      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a20      	ldr	r2, [pc, #128]	@ (8001b90 <HAL_DMA_Abort_IT+0x1c8>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d018      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a1f      	ldr	r2, [pc, #124]	@ (8001b94 <HAL_DMA_Abort_IT+0x1cc>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d013      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a1d      	ldr	r2, [pc, #116]	@ (8001b98 <HAL_DMA_Abort_IT+0x1d0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d00e      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a1c      	ldr	r2, [pc, #112]	@ (8001b9c <HAL_DMA_Abort_IT+0x1d4>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d009      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a1a      	ldr	r2, [pc, #104]	@ (8001ba0 <HAL_DMA_Abort_IT+0x1d8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d004      	beq.n	8001b44 <HAL_DMA_Abort_IT+0x17c>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a19      	ldr	r2, [pc, #100]	@ (8001ba4 <HAL_DMA_Abort_IT+0x1dc>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d108      	bne.n	8001b56 <HAL_DMA_Abort_IT+0x18e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	e178      	b.n	8001e48 <HAL_DMA_Abort_IT+0x480>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 0201 	bic.w	r2, r2, #1
 8001b64:	601a      	str	r2, [r3, #0]
 8001b66:	e16f      	b.n	8001e48 <HAL_DMA_Abort_IT+0x480>
 8001b68:	40020010 	.word	0x40020010
 8001b6c:	40020028 	.word	0x40020028
 8001b70:	40020040 	.word	0x40020040
 8001b74:	40020058 	.word	0x40020058
 8001b78:	40020070 	.word	0x40020070
 8001b7c:	40020088 	.word	0x40020088
 8001b80:	400200a0 	.word	0x400200a0
 8001b84:	400200b8 	.word	0x400200b8
 8001b88:	40020410 	.word	0x40020410
 8001b8c:	40020428 	.word	0x40020428
 8001b90:	40020440 	.word	0x40020440
 8001b94:	40020458 	.word	0x40020458
 8001b98:	40020470 	.word	0x40020470
 8001b9c:	40020488 	.word	0x40020488
 8001ba0:	400204a0 	.word	0x400204a0
 8001ba4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f022 020e 	bic.w	r2, r2, #14
 8001bb6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6c      	ldr	r2, [pc, #432]	@ (8001d70 <HAL_DMA_Abort_IT+0x3a8>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d04a      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a6b      	ldr	r2, [pc, #428]	@ (8001d74 <HAL_DMA_Abort_IT+0x3ac>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d045      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a69      	ldr	r2, [pc, #420]	@ (8001d78 <HAL_DMA_Abort_IT+0x3b0>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d040      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a68      	ldr	r2, [pc, #416]	@ (8001d7c <HAL_DMA_Abort_IT+0x3b4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d03b      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a66      	ldr	r2, [pc, #408]	@ (8001d80 <HAL_DMA_Abort_IT+0x3b8>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d036      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a65      	ldr	r2, [pc, #404]	@ (8001d84 <HAL_DMA_Abort_IT+0x3bc>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d031      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a63      	ldr	r2, [pc, #396]	@ (8001d88 <HAL_DMA_Abort_IT+0x3c0>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d02c      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a62      	ldr	r2, [pc, #392]	@ (8001d8c <HAL_DMA_Abort_IT+0x3c4>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d027      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a60      	ldr	r2, [pc, #384]	@ (8001d90 <HAL_DMA_Abort_IT+0x3c8>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d022      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a5f      	ldr	r2, [pc, #380]	@ (8001d94 <HAL_DMA_Abort_IT+0x3cc>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d01d      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a5d      	ldr	r2, [pc, #372]	@ (8001d98 <HAL_DMA_Abort_IT+0x3d0>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d018      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a5c      	ldr	r2, [pc, #368]	@ (8001d9c <HAL_DMA_Abort_IT+0x3d4>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d013      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a5a      	ldr	r2, [pc, #360]	@ (8001da0 <HAL_DMA_Abort_IT+0x3d8>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00e      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a59      	ldr	r2, [pc, #356]	@ (8001da4 <HAL_DMA_Abort_IT+0x3dc>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a57      	ldr	r2, [pc, #348]	@ (8001da8 <HAL_DMA_Abort_IT+0x3e0>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d004      	beq.n	8001c58 <HAL_DMA_Abort_IT+0x290>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a56      	ldr	r2, [pc, #344]	@ (8001dac <HAL_DMA_Abort_IT+0x3e4>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d108      	bne.n	8001c6a <HAL_DMA_Abort_IT+0x2a2>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f022 0201 	bic.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	e007      	b.n	8001c7a <HAL_DMA_Abort_IT+0x2b2>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f022 0201 	bic.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a3c      	ldr	r2, [pc, #240]	@ (8001d70 <HAL_DMA_Abort_IT+0x3a8>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d072      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a3a      	ldr	r2, [pc, #232]	@ (8001d74 <HAL_DMA_Abort_IT+0x3ac>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d06d      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a39      	ldr	r2, [pc, #228]	@ (8001d78 <HAL_DMA_Abort_IT+0x3b0>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d068      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a37      	ldr	r2, [pc, #220]	@ (8001d7c <HAL_DMA_Abort_IT+0x3b4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d063      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a36      	ldr	r2, [pc, #216]	@ (8001d80 <HAL_DMA_Abort_IT+0x3b8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d05e      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a34      	ldr	r2, [pc, #208]	@ (8001d84 <HAL_DMA_Abort_IT+0x3bc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d059      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a33      	ldr	r2, [pc, #204]	@ (8001d88 <HAL_DMA_Abort_IT+0x3c0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d054      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a31      	ldr	r2, [pc, #196]	@ (8001d8c <HAL_DMA_Abort_IT+0x3c4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d04f      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a30      	ldr	r2, [pc, #192]	@ (8001d90 <HAL_DMA_Abort_IT+0x3c8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d04a      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a2e      	ldr	r2, [pc, #184]	@ (8001d94 <HAL_DMA_Abort_IT+0x3cc>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d045      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_DMA_Abort_IT+0x3d0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d040      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a2b      	ldr	r2, [pc, #172]	@ (8001d9c <HAL_DMA_Abort_IT+0x3d4>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d03b      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a2a      	ldr	r2, [pc, #168]	@ (8001da0 <HAL_DMA_Abort_IT+0x3d8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d036      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a28      	ldr	r2, [pc, #160]	@ (8001da4 <HAL_DMA_Abort_IT+0x3dc>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d031      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a27      	ldr	r2, [pc, #156]	@ (8001da8 <HAL_DMA_Abort_IT+0x3e0>)
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d02c      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a25      	ldr	r2, [pc, #148]	@ (8001dac <HAL_DMA_Abort_IT+0x3e4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d027      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a24      	ldr	r2, [pc, #144]	@ (8001db0 <HAL_DMA_Abort_IT+0x3e8>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d022      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a22      	ldr	r2, [pc, #136]	@ (8001db4 <HAL_DMA_Abort_IT+0x3ec>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d01d      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a21      	ldr	r2, [pc, #132]	@ (8001db8 <HAL_DMA_Abort_IT+0x3f0>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d018      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a1f      	ldr	r2, [pc, #124]	@ (8001dbc <HAL_DMA_Abort_IT+0x3f4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d013      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <HAL_DMA_Abort_IT+0x3f8>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d00e      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1c      	ldr	r2, [pc, #112]	@ (8001dc4 <HAL_DMA_Abort_IT+0x3fc>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d009      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8001dc8 <HAL_DMA_Abort_IT+0x400>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d004      	beq.n	8001d6a <HAL_DMA_Abort_IT+0x3a2>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	@ (8001dcc <HAL_DMA_Abort_IT+0x404>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d132      	bne.n	8001dd0 <HAL_DMA_Abort_IT+0x408>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e031      	b.n	8001dd2 <HAL_DMA_Abort_IT+0x40a>
 8001d6e:	bf00      	nop
 8001d70:	40020010 	.word	0x40020010
 8001d74:	40020028 	.word	0x40020028
 8001d78:	40020040 	.word	0x40020040
 8001d7c:	40020058 	.word	0x40020058
 8001d80:	40020070 	.word	0x40020070
 8001d84:	40020088 	.word	0x40020088
 8001d88:	400200a0 	.word	0x400200a0
 8001d8c:	400200b8 	.word	0x400200b8
 8001d90:	40020410 	.word	0x40020410
 8001d94:	40020428 	.word	0x40020428
 8001d98:	40020440 	.word	0x40020440
 8001d9c:	40020458 	.word	0x40020458
 8001da0:	40020470 	.word	0x40020470
 8001da4:	40020488 	.word	0x40020488
 8001da8:	400204a0 	.word	0x400204a0
 8001dac:	400204b8 	.word	0x400204b8
 8001db0:	58025408 	.word	0x58025408
 8001db4:	5802541c 	.word	0x5802541c
 8001db8:	58025430 	.word	0x58025430
 8001dbc:	58025444 	.word	0x58025444
 8001dc0:	58025458 	.word	0x58025458
 8001dc4:	5802546c 	.word	0x5802546c
 8001dc8:	58025480 	.word	0x58025480
 8001dcc:	58025494 	.word	0x58025494
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d028      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001de4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001df0:	f003 031f 	and.w	r3, r3, #31
 8001df4:	2201      	movs	r2, #1
 8001df6:	409a      	lsls	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001e04:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d00c      	beq.n	8001e28 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001e1c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e22:	687a      	ldr	r2, [r7, #4]
 8001e24:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e26:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop

08001e54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b089      	sub	sp, #36	@ 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001e62:	4b89      	ldr	r3, [pc, #548]	@ (8002088 <HAL_GPIO_Init+0x234>)
 8001e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e66:	e194      	b.n	8002192 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	4013      	ands	r3, r2
 8001e76:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	f000 8186 	beq.w	800218c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d005      	beq.n	8001e98 <HAL_GPIO_Init+0x44>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d130      	bne.n	8001efa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	005b      	lsls	r3, r3, #1
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ece:	2201      	movs	r2, #1
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4013      	ands	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 0201 	and.w	r2, r3, #1
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	fa02 f303 	lsl.w	r3, r2, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f003 0303 	and.w	r3, r3, #3
 8001f02:	2b03      	cmp	r3, #3
 8001f04:	d017      	beq.n	8001f36 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	2203      	movs	r2, #3
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	689a      	ldr	r2, [r3, #8]
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	f003 0303 	and.w	r3, r3, #3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d123      	bne.n	8001f8a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	08da      	lsrs	r2, r3, #3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	3208      	adds	r2, #8
 8001f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f003 0307 	and.w	r3, r3, #7
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	220f      	movs	r2, #15
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43db      	mvns	r3, r3
 8001f60:	69ba      	ldr	r2, [r7, #24]
 8001f62:	4013      	ands	r3, r2
 8001f64:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	691a      	ldr	r2, [r3, #16]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	69b9      	ldr	r1, [r7, #24]
 8001f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0203 	and.w	r2, r3, #3
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	f000 80e0 	beq.w	800218c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fcc:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <HAL_GPIO_Init+0x238>)
 8001fce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fd2:	4a2e      	ldr	r2, [pc, #184]	@ (800208c <HAL_GPIO_Init+0x238>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001fdc:	4b2b      	ldr	r3, [pc, #172]	@ (800208c <HAL_GPIO_Init+0x238>)
 8001fde:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fea:	4a29      	ldr	r2, [pc, #164]	@ (8002090 <HAL_GPIO_Init+0x23c>)
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	089b      	lsrs	r3, r3, #2
 8001ff0:	3302      	adds	r3, #2
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	f003 0303 	and.w	r3, r3, #3
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	220f      	movs	r2, #15
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	69ba      	ldr	r2, [r7, #24]
 800200a:	4013      	ands	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a20      	ldr	r2, [pc, #128]	@ (8002094 <HAL_GPIO_Init+0x240>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d052      	beq.n	80020bc <HAL_GPIO_Init+0x268>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a1f      	ldr	r2, [pc, #124]	@ (8002098 <HAL_GPIO_Init+0x244>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d031      	beq.n	8002082 <HAL_GPIO_Init+0x22e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_GPIO_Init+0x248>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d02b      	beq.n	800207e <HAL_GPIO_Init+0x22a>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a1d      	ldr	r2, [pc, #116]	@ (80020a0 <HAL_GPIO_Init+0x24c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d025      	beq.n	800207a <HAL_GPIO_Init+0x226>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a1c      	ldr	r2, [pc, #112]	@ (80020a4 <HAL_GPIO_Init+0x250>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d01f      	beq.n	8002076 <HAL_GPIO_Init+0x222>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a1b      	ldr	r2, [pc, #108]	@ (80020a8 <HAL_GPIO_Init+0x254>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d019      	beq.n	8002072 <HAL_GPIO_Init+0x21e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1a      	ldr	r2, [pc, #104]	@ (80020ac <HAL_GPIO_Init+0x258>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d013      	beq.n	800206e <HAL_GPIO_Init+0x21a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a19      	ldr	r2, [pc, #100]	@ (80020b0 <HAL_GPIO_Init+0x25c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d00d      	beq.n	800206a <HAL_GPIO_Init+0x216>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a18      	ldr	r2, [pc, #96]	@ (80020b4 <HAL_GPIO_Init+0x260>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x212>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a17      	ldr	r2, [pc, #92]	@ (80020b8 <HAL_GPIO_Init+0x264>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d101      	bne.n	8002062 <HAL_GPIO_Init+0x20e>
 800205e:	2309      	movs	r3, #9
 8002060:	e02d      	b.n	80020be <HAL_GPIO_Init+0x26a>
 8002062:	230a      	movs	r3, #10
 8002064:	e02b      	b.n	80020be <HAL_GPIO_Init+0x26a>
 8002066:	2308      	movs	r3, #8
 8002068:	e029      	b.n	80020be <HAL_GPIO_Init+0x26a>
 800206a:	2307      	movs	r3, #7
 800206c:	e027      	b.n	80020be <HAL_GPIO_Init+0x26a>
 800206e:	2306      	movs	r3, #6
 8002070:	e025      	b.n	80020be <HAL_GPIO_Init+0x26a>
 8002072:	2305      	movs	r3, #5
 8002074:	e023      	b.n	80020be <HAL_GPIO_Init+0x26a>
 8002076:	2304      	movs	r3, #4
 8002078:	e021      	b.n	80020be <HAL_GPIO_Init+0x26a>
 800207a:	2303      	movs	r3, #3
 800207c:	e01f      	b.n	80020be <HAL_GPIO_Init+0x26a>
 800207e:	2302      	movs	r3, #2
 8002080:	e01d      	b.n	80020be <HAL_GPIO_Init+0x26a>
 8002082:	2301      	movs	r3, #1
 8002084:	e01b      	b.n	80020be <HAL_GPIO_Init+0x26a>
 8002086:	bf00      	nop
 8002088:	58000080 	.word	0x58000080
 800208c:	58024400 	.word	0x58024400
 8002090:	58000400 	.word	0x58000400
 8002094:	58020000 	.word	0x58020000
 8002098:	58020400 	.word	0x58020400
 800209c:	58020800 	.word	0x58020800
 80020a0:	58020c00 	.word	0x58020c00
 80020a4:	58021000 	.word	0x58021000
 80020a8:	58021400 	.word	0x58021400
 80020ac:	58021800 	.word	0x58021800
 80020b0:	58021c00 	.word	0x58021c00
 80020b4:	58022000 	.word	0x58022000
 80020b8:	58022400 	.word	0x58022400
 80020bc:	2300      	movs	r3, #0
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020ce:	4938      	ldr	r1, [pc, #224]	@ (80021b0 <HAL_GPIO_Init+0x35c>)
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	089b      	lsrs	r3, r3, #2
 80020d4:	3302      	adds	r3, #2
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80020dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002102:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800210a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d003      	beq.n	8002130 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4313      	orrs	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002130:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002134:	69bb      	ldr	r3, [r7, #24]
 8002136:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	43db      	mvns	r3, r3
 8002142:	69ba      	ldr	r2, [r7, #24]
 8002144:	4013      	ands	r3, r2
 8002146:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	3301      	adds	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
 800219c:	2b00      	cmp	r3, #0
 800219e:	f47f ae63 	bne.w	8001e68 <HAL_GPIO_Init+0x14>
  }
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3724      	adds	r7, #36	@ 0x24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	58000400 	.word	0x58000400

080021b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	460b      	mov	r3, r1
 80021be:	807b      	strh	r3, [r7, #2]
 80021c0:	4613      	mov	r3, r2
 80021c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021c4:	787b      	ldrb	r3, [r7, #1]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80021d0:	e003      	b.n	80021da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80021d2:	887b      	ldrh	r3, [r7, #2]
 80021d4:	041a      	lsls	r2, r3, #16
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	619a      	str	r2, [r3, #24]
}
 80021da:	bf00      	nop
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80021f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80021f4:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	4013      	ands	r3, r2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d008      	beq.n	8002212 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002200:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800220a:	88fb      	ldrh	r3, [r7, #6]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 f804 	bl	800221a <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8002212:	bf00      	nop
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	4603      	mov	r3, r0
 8002222:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e043      	b.n	80022ca <HAL_IWDG_Init+0x9a>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 800224a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002254:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6852      	ldr	r2, [r2, #4]
 800225e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6892      	ldr	r2, [r2, #8]
 8002268:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800226a:	f7fe fecb 	bl	8001004 <HAL_GetTick>
 800226e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002270:	e011      	b.n	8002296 <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002272:	f7fe fec7 	bl	8001004 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	f641 0201 	movw	r2, #6145	@ 0x1801
 8002280:	4293      	cmp	r3, r2
 8002282:	d908      	bls.n	8002296 <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e019      	b.n	80022ca <HAL_IWDG_Init+0x9a>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0307 	and.w	r3, r3, #7
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d1e6      	bne.n	8002272 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	691a      	ldr	r2, [r3, #16]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d005      	beq.n	80022be <HAL_IWDG_Init+0x8e>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	68d2      	ldr	r2, [r2, #12]
 80022ba:	611a      	str	r2, [r3, #16]
 80022bc:	e004      	b.n	80022c8 <HAL_IWDG_Init+0x98>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80022c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c8:	2300      	movs	r3, #0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80022d2:	b480      	push	{r7}
 80022d4:	b083      	sub	sp, #12
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80022e2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b084      	sub	sp, #16
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80022fc:	4b19      	ldr	r3, [pc, #100]	@ (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b04      	cmp	r3, #4
 8002306:	d00a      	beq.n	800231e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002308:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e01f      	b.n	800235a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800231a:	2300      	movs	r3, #0
 800231c:	e01d      	b.n	800235a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f023 0207 	bic.w	r2, r3, #7
 8002326:	490f      	ldr	r1, [pc, #60]	@ (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4313      	orrs	r3, r2
 800232c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800232e:	f7fe fe69 	bl	8001004 <HAL_GetTick>
 8002332:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002334:	e009      	b.n	800234a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002336:	f7fe fe65 	bl	8001004 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002344:	d901      	bls.n	800234a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e007      	b.n	800235a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800234a:	4b06      	ldr	r3, [pc, #24]	@ (8002364 <HAL_PWREx_ConfigSupply+0x70>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002352:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002356:	d1ee      	bne.n	8002336 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	3710      	adds	r7, #16
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024800 	.word	0x58024800

08002368 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	@ 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f000 bc48 	b.w	8002c0c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0301 	and.w	r3, r3, #1
 8002384:	2b00      	cmp	r3, #0
 8002386:	f000 8088 	beq.w	800249a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238a:	4b99      	ldr	r3, [pc, #612]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002394:	4b96      	ldr	r3, [pc, #600]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002398:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800239a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800239c:	2b10      	cmp	r3, #16
 800239e:	d007      	beq.n	80023b0 <HAL_RCC_OscConfig+0x48>
 80023a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a2:	2b18      	cmp	r3, #24
 80023a4:	d111      	bne.n	80023ca <HAL_RCC_OscConfig+0x62>
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d10c      	bne.n	80023ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b0:	4b8f      	ldr	r3, [pc, #572]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d06d      	beq.n	8002498 <HAL_RCC_OscConfig+0x130>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d169      	bne.n	8002498 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	f000 bc21 	b.w	8002c0c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023d2:	d106      	bne.n	80023e2 <HAL_RCC_OscConfig+0x7a>
 80023d4:	4b86      	ldr	r3, [pc, #536]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a85      	ldr	r2, [pc, #532]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e02e      	b.n	8002440 <HAL_RCC_OscConfig+0xd8>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10c      	bne.n	8002404 <HAL_RCC_OscConfig+0x9c>
 80023ea:	4b81      	ldr	r3, [pc, #516]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a80      	ldr	r2, [pc, #512]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f4:	6013      	str	r3, [r2, #0]
 80023f6:	4b7e      	ldr	r3, [pc, #504]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7d      	ldr	r2, [pc, #500]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80023fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002400:	6013      	str	r3, [r2, #0]
 8002402:	e01d      	b.n	8002440 <HAL_RCC_OscConfig+0xd8>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800240c:	d10c      	bne.n	8002428 <HAL_RCC_OscConfig+0xc0>
 800240e:	4b78      	ldr	r3, [pc, #480]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a77      	ldr	r2, [pc, #476]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	4b75      	ldr	r3, [pc, #468]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a74      	ldr	r2, [pc, #464]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	6013      	str	r3, [r2, #0]
 8002426:	e00b      	b.n	8002440 <HAL_RCC_OscConfig+0xd8>
 8002428:	4b71      	ldr	r3, [pc, #452]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a70      	ldr	r2, [pc, #448]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800242e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002432:	6013      	str	r3, [r2, #0]
 8002434:	4b6e      	ldr	r3, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a6d      	ldr	r2, [pc, #436]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800243a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800243e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d013      	beq.n	8002470 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002448:	f7fe fddc 	bl	8001004 <HAL_GetTick>
 800244c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002450:	f7fe fdd8 	bl	8001004 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b64      	cmp	r3, #100	@ 0x64
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e3d4      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002462:	4b63      	ldr	r3, [pc, #396]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0xe8>
 800246e:	e014      	b.n	800249a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fdc8 	bl	8001004 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002478:	f7fe fdc4 	bl	8001004 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b64      	cmp	r3, #100	@ 0x64
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e3c0      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800248a:	4b59      	ldr	r3, [pc, #356]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x110>
 8002496:	e000      	b.n	800249a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0302 	and.w	r3, r3, #2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	f000 80ca 	beq.w	800263c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024a8:	4b51      	ldr	r3, [pc, #324]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80024aa:	691b      	ldr	r3, [r3, #16]
 80024ac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024b0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024b2:	4b4f      	ldr	r3, [pc, #316]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80024b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80024b8:	6a3b      	ldr	r3, [r7, #32]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d007      	beq.n	80024ce <HAL_RCC_OscConfig+0x166>
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	2b18      	cmp	r3, #24
 80024c2:	d156      	bne.n	8002572 <HAL_RCC_OscConfig+0x20a>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d151      	bne.n	8002572 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ce:	4b48      	ldr	r3, [pc, #288]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0304 	and.w	r3, r3, #4
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_RCC_OscConfig+0x17e>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e392      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80024e6:	4b42      	ldr	r3, [pc, #264]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f023 0219 	bic.w	r2, r3, #25
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	493f      	ldr	r1, [pc, #252]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f8:	f7fe fd84 	bl	8001004 <HAL_GetTick>
 80024fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80024fe:	e008      	b.n	8002512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002500:	f7fe fd80 	bl	8001004 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e37c      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002512:	4b37      	ldr	r3, [pc, #220]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0304 	and.w	r3, r3, #4
 800251a:	2b00      	cmp	r3, #0
 800251c:	d0f0      	beq.n	8002500 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800251e:	f7fe fda1 	bl	8001064 <HAL_GetREVID>
 8002522:	4603      	mov	r3, r0
 8002524:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002528:	4293      	cmp	r3, r2
 800252a:	d817      	bhi.n	800255c <HAL_RCC_OscConfig+0x1f4>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	691b      	ldr	r3, [r3, #16]
 8002530:	2b40      	cmp	r3, #64	@ 0x40
 8002532:	d108      	bne.n	8002546 <HAL_RCC_OscConfig+0x1de>
 8002534:	4b2e      	ldr	r3, [pc, #184]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800253c:	4a2c      	ldr	r2, [pc, #176]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800253e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002542:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002544:	e07a      	b.n	800263c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002546:	4b2a      	ldr	r3, [pc, #168]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	691b      	ldr	r3, [r3, #16]
 8002552:	031b      	lsls	r3, r3, #12
 8002554:	4926      	ldr	r1, [pc, #152]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002556:	4313      	orrs	r3, r2
 8002558:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800255a:	e06f      	b.n	800263c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800255c:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	061b      	lsls	r3, r3, #24
 800256a:	4921      	ldr	r1, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002570:	e064      	b.n	800263c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d047      	beq.n	800260a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800257a:	4b1d      	ldr	r3, [pc, #116]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 0219 	bic.w	r2, r3, #25
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	68db      	ldr	r3, [r3, #12]
 8002586:	491a      	ldr	r1, [pc, #104]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 8002588:	4313      	orrs	r3, r2
 800258a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7fe fd3a 	bl	8001004 <HAL_GetTick>
 8002590:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002594:	f7fe fd36 	bl	8001004 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e332      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025a6:	4b12      	ldr	r3, [pc, #72]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b2:	f7fe fd57 	bl	8001064 <HAL_GetREVID>
 80025b6:	4603      	mov	r3, r0
 80025b8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80025bc:	4293      	cmp	r3, r2
 80025be:	d819      	bhi.n	80025f4 <HAL_RCC_OscConfig+0x28c>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	2b40      	cmp	r3, #64	@ 0x40
 80025c6:	d108      	bne.n	80025da <HAL_RCC_OscConfig+0x272>
 80025c8:	4b09      	ldr	r3, [pc, #36]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80025d0:	4a07      	ldr	r2, [pc, #28]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80025d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025d6:	6053      	str	r3, [r2, #4]
 80025d8:	e030      	b.n	800263c <HAL_RCC_OscConfig+0x2d4>
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	691b      	ldr	r3, [r3, #16]
 80025e6:	031b      	lsls	r3, r3, #12
 80025e8:	4901      	ldr	r1, [pc, #4]	@ (80025f0 <HAL_RCC_OscConfig+0x288>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
 80025ee:	e025      	b.n	800263c <HAL_RCC_OscConfig+0x2d4>
 80025f0:	58024400 	.word	0x58024400
 80025f4:	4b9a      	ldr	r3, [pc, #616]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	061b      	lsls	r3, r3, #24
 8002602:	4997      	ldr	r1, [pc, #604]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002604:	4313      	orrs	r3, r2
 8002606:	604b      	str	r3, [r1, #4]
 8002608:	e018      	b.n	800263c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260a:	4b95      	ldr	r3, [pc, #596]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a94      	ldr	r2, [pc, #592]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002616:	f7fe fcf5 	bl	8001004 <HAL_GetTick>
 800261a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261e:	f7fe fcf1 	bl	8001004 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e2ed      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002630:	4b8b      	ldr	r3, [pc, #556]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b00      	cmp	r3, #0
 800263a:	d1f0      	bne.n	800261e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 80a9 	beq.w	800279c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800264a:	4b85      	ldr	r3, [pc, #532]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800264c:	691b      	ldr	r3, [r3, #16]
 800264e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002652:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002654:	4b82      	ldr	r3, [pc, #520]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002656:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002658:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	2b08      	cmp	r3, #8
 800265e:	d007      	beq.n	8002670 <HAL_RCC_OscConfig+0x308>
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	2b18      	cmp	r3, #24
 8002664:	d13a      	bne.n	80026dc <HAL_RCC_OscConfig+0x374>
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b01      	cmp	r3, #1
 800266e:	d135      	bne.n	80026dc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002670:	4b7b      	ldr	r3, [pc, #492]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_OscConfig+0x320>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69db      	ldr	r3, [r3, #28]
 8002680:	2b80      	cmp	r3, #128	@ 0x80
 8002682:	d001      	beq.n	8002688 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e2c1      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002688:	f7fe fcec 	bl	8001064 <HAL_GetREVID>
 800268c:	4603      	mov	r3, r0
 800268e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002692:	4293      	cmp	r3, r2
 8002694:	d817      	bhi.n	80026c6 <HAL_RCC_OscConfig+0x35e>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	2b20      	cmp	r3, #32
 800269c:	d108      	bne.n	80026b0 <HAL_RCC_OscConfig+0x348>
 800269e:	4b70      	ldr	r3, [pc, #448]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80026a6:	4a6e      	ldr	r2, [pc, #440]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80026ac:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026ae:	e075      	b.n	800279c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026b0:	4b6b      	ldr	r3, [pc, #428]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	069b      	lsls	r3, r3, #26
 80026be:	4968      	ldr	r1, [pc, #416]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026c4:	e06a      	b.n	800279c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80026c6:	4b66      	ldr	r3, [pc, #408]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	061b      	lsls	r3, r3, #24
 80026d4:	4962      	ldr	r1, [pc, #392]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80026da:	e05f      	b.n	800279c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d042      	beq.n	800276a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80026e4:	4b5e      	ldr	r3, [pc, #376]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a5d      	ldr	r2, [pc, #372]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80026ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f0:	f7fe fc88 	bl	8001004 <HAL_GetTick>
 80026f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026f6:	e008      	b.n	800270a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80026f8:	f7fe fc84 	bl	8001004 <HAL_GetTick>
 80026fc:	4602      	mov	r2, r0
 80026fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	2b02      	cmp	r3, #2
 8002704:	d901      	bls.n	800270a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002706:	2303      	movs	r3, #3
 8002708:	e280      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800270a:	4b55      	ldr	r3, [pc, #340]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d0f0      	beq.n	80026f8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002716:	f7fe fca5 	bl	8001064 <HAL_GetREVID>
 800271a:	4603      	mov	r3, r0
 800271c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002720:	4293      	cmp	r3, r2
 8002722:	d817      	bhi.n	8002754 <HAL_RCC_OscConfig+0x3ec>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	2b20      	cmp	r3, #32
 800272a:	d108      	bne.n	800273e <HAL_RCC_OscConfig+0x3d6>
 800272c:	4b4c      	ldr	r3, [pc, #304]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002734:	4a4a      	ldr	r2, [pc, #296]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002736:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800273a:	6053      	str	r3, [r2, #4]
 800273c:	e02e      	b.n	800279c <HAL_RCC_OscConfig+0x434>
 800273e:	4b48      	ldr	r3, [pc, #288]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	069b      	lsls	r3, r3, #26
 800274c:	4944      	ldr	r1, [pc, #272]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800274e:	4313      	orrs	r3, r2
 8002750:	604b      	str	r3, [r1, #4]
 8002752:	e023      	b.n	800279c <HAL_RCC_OscConfig+0x434>
 8002754:	4b42      	ldr	r3, [pc, #264]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a1b      	ldr	r3, [r3, #32]
 8002760:	061b      	lsls	r3, r3, #24
 8002762:	493f      	ldr	r1, [pc, #252]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002764:	4313      	orrs	r3, r2
 8002766:	60cb      	str	r3, [r1, #12]
 8002768:	e018      	b.n	800279c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800276a:	4b3d      	ldr	r3, [pc, #244]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a3c      	ldr	r2, [pc, #240]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002770:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002776:	f7fe fc45 	bl	8001004 <HAL_GetTick>
 800277a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800277e:	f7fe fc41 	bl	8001004 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e23d      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002790:	4b33      	ldr	r3, [pc, #204]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1f0      	bne.n	800277e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0308 	and.w	r3, r3, #8
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d036      	beq.n	8002816 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	695b      	ldr	r3, [r3, #20]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d019      	beq.n	80027e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80027b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027b4:	4a2a      	ldr	r2, [pc, #168]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80027b6:	f043 0301 	orr.w	r3, r3, #1
 80027ba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027bc:	f7fe fc22 	bl	8001004 <HAL_GetTick>
 80027c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027c4:	f7fe fc1e 	bl	8001004 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e21a      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80027d6:	4b22      	ldr	r3, [pc, #136]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80027d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d0f0      	beq.n	80027c4 <HAL_RCC_OscConfig+0x45c>
 80027e2:	e018      	b.n	8002816 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027e4:	4b1e      	ldr	r3, [pc, #120]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f0:	f7fe fc08 	bl	8001004 <HAL_GetTick>
 80027f4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027f6:	e008      	b.n	800280a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f8:	f7fe fc04 	bl	8001004 <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d901      	bls.n	800280a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002806:	2303      	movs	r3, #3
 8002808:	e200      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800280a:	4b15      	ldr	r3, [pc, #84]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800280c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d1f0      	bne.n	80027f8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0320 	and.w	r3, r3, #32
 800281e:	2b00      	cmp	r3, #0
 8002820:	d039      	beq.n	8002896 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	699b      	ldr	r3, [r3, #24]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d01c      	beq.n	8002864 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800282a:	4b0d      	ldr	r3, [pc, #52]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a0c      	ldr	r2, [pc, #48]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002830:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002834:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002836:	f7fe fbe5 	bl	8001004 <HAL_GetTick>
 800283a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800283e:	f7fe fbe1 	bl	8001004 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e1dd      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002850:	4b03      	ldr	r3, [pc, #12]	@ (8002860 <HAL_RCC_OscConfig+0x4f8>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x4d6>
 800285c:	e01b      	b.n	8002896 <HAL_RCC_OscConfig+0x52e>
 800285e:	bf00      	nop
 8002860:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002864:	4b9b      	ldr	r3, [pc, #620]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a9a      	ldr	r2, [pc, #616]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 800286a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800286e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002870:	f7fe fbc8 	bl	8001004 <HAL_GetTick>
 8002874:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002876:	e008      	b.n	800288a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002878:	f7fe fbc4 	bl	8001004 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d901      	bls.n	800288a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e1c0      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800288a:	4b92      	ldr	r3, [pc, #584]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002892:	2b00      	cmp	r3, #0
 8002894:	d1f0      	bne.n	8002878 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0304 	and.w	r3, r3, #4
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 8081 	beq.w	80029a6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80028a4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ad8 <HAL_RCC_OscConfig+0x770>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a8b      	ldr	r2, [pc, #556]	@ (8002ad8 <HAL_RCC_OscConfig+0x770>)
 80028aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028b0:	f7fe fba8 	bl	8001004 <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b8:	f7fe fba4 	bl	8001004 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b64      	cmp	r3, #100	@ 0x64
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e1a0      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028ca:	4b83      	ldr	r3, [pc, #524]	@ (8002ad8 <HAL_RCC_OscConfig+0x770>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d106      	bne.n	80028ec <HAL_RCC_OscConfig+0x584>
 80028de:	4b7d      	ldr	r3, [pc, #500]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80028e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028e2:	4a7c      	ldr	r2, [pc, #496]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ea:	e02d      	b.n	8002948 <HAL_RCC_OscConfig+0x5e0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_OscConfig+0x5a6>
 80028f4:	4b77      	ldr	r3, [pc, #476]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80028f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028f8:	4a76      	ldr	r2, [pc, #472]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	f023 0301 	bic.w	r3, r3, #1
 80028fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002900:	4b74      	ldr	r3, [pc, #464]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002904:	4a73      	ldr	r2, [pc, #460]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002906:	f023 0304 	bic.w	r3, r3, #4
 800290a:	6713      	str	r3, [r2, #112]	@ 0x70
 800290c:	e01c      	b.n	8002948 <HAL_RCC_OscConfig+0x5e0>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b05      	cmp	r3, #5
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x5c8>
 8002916:	4b6f      	ldr	r3, [pc, #444]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800291a:	4a6e      	ldr	r2, [pc, #440]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6713      	str	r3, [r2, #112]	@ 0x70
 8002922:	4b6c      	ldr	r3, [pc, #432]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002924:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002926:	4a6b      	ldr	r2, [pc, #428]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002928:	f043 0301 	orr.w	r3, r3, #1
 800292c:	6713      	str	r3, [r2, #112]	@ 0x70
 800292e:	e00b      	b.n	8002948 <HAL_RCC_OscConfig+0x5e0>
 8002930:	4b68      	ldr	r3, [pc, #416]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002932:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002934:	4a67      	ldr	r2, [pc, #412]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002936:	f023 0301 	bic.w	r3, r3, #1
 800293a:	6713      	str	r3, [r2, #112]	@ 0x70
 800293c:	4b65      	ldr	r3, [pc, #404]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002940:	4a64      	ldr	r2, [pc, #400]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002942:	f023 0304 	bic.w	r3, r3, #4
 8002946:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d015      	beq.n	800297c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002950:	f7fe fb58 	bl	8001004 <HAL_GetTick>
 8002954:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002956:	e00a      	b.n	800296e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002958:	f7fe fb54 	bl	8001004 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002966:	4293      	cmp	r3, r2
 8002968:	d901      	bls.n	800296e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e14e      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800296e:	4b59      	ldr	r3, [pc, #356]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002970:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002972:	f003 0302 	and.w	r3, r3, #2
 8002976:	2b00      	cmp	r3, #0
 8002978:	d0ee      	beq.n	8002958 <HAL_RCC_OscConfig+0x5f0>
 800297a:	e014      	b.n	80029a6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fb42 	bl	8001004 <HAL_GetTick>
 8002980:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002982:	e00a      	b.n	800299a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002984:	f7fe fb3e 	bl	8001004 <HAL_GetTick>
 8002988:	4602      	mov	r2, r0
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002992:	4293      	cmp	r3, r2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e138      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800299a:	4b4e      	ldr	r3, [pc, #312]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 800299c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1ee      	bne.n	8002984 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	f000 812d 	beq.w	8002c0a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80029b0:	4b48      	ldr	r3, [pc, #288]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80029b8:	2b18      	cmp	r3, #24
 80029ba:	f000 80bd 	beq.w	8002b38 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	f040 809e 	bne.w	8002b04 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c8:	4b42      	ldr	r3, [pc, #264]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a41      	ldr	r2, [pc, #260]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80029ce:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fb16 	bl	8001004 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fb12 	bl	8001004 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e10e      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ee:	4b39      	ldr	r3, [pc, #228]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	4b36      	ldr	r3, [pc, #216]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 80029fc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80029fe:	4b37      	ldr	r3, [pc, #220]	@ (8002adc <HAL_RCC_OscConfig+0x774>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	4931      	ldr	r1, [pc, #196]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a22:	3b01      	subs	r3, #1
 8002a24:	025b      	lsls	r3, r3, #9
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	041b      	lsls	r3, r3, #16
 8002a32:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a36:	431a      	orrs	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	061b      	lsls	r3, r3, #24
 8002a40:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002a44:	4923      	ldr	r1, [pc, #140]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002a4a:	4b22      	ldr	r3, [pc, #136]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a4e:	4a21      	ldr	r2, [pc, #132]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a50:	f023 0301 	bic.w	r3, r3, #1
 8002a54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a56:	4b1f      	ldr	r3, [pc, #124]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002a5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ae0 <HAL_RCC_OscConfig+0x778>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002a62:	00d2      	lsls	r2, r2, #3
 8002a64:	491b      	ldr	r1, [pc, #108]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	f023 020c 	bic.w	r2, r3, #12
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a76:	4917      	ldr	r1, [pc, #92]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002a7c:	4b15      	ldr	r3, [pc, #84]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	f023 0202 	bic.w	r2, r3, #2
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a88:	4912      	ldr	r1, [pc, #72]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002a8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a92:	4a10      	ldr	r2, [pc, #64]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a9e:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002aa0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002aa6:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002aa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002aac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ab0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ab2:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab6:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002abe:	4b05      	ldr	r3, [pc, #20]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a04      	ldr	r2, [pc, #16]	@ (8002ad4 <HAL_RCC_OscConfig+0x76c>)
 8002ac4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ac8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aca:	f7fe fa9b 	bl	8001004 <HAL_GetTick>
 8002ace:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ad0:	e011      	b.n	8002af6 <HAL_RCC_OscConfig+0x78e>
 8002ad2:	bf00      	nop
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	58024800 	.word	0x58024800
 8002adc:	fffffc0c 	.word	0xfffffc0c
 8002ae0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae4:	f7fe fa8e 	bl	8001004 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e08a      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002af6:	4b47      	ldr	r3, [pc, #284]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d0f0      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x77c>
 8002b02:	e082      	b.n	8002c0a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b04:	4b43      	ldr	r3, [pc, #268]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a42      	ldr	r2, [pc, #264]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b10:	f7fe fa78 	bl	8001004 <HAL_GetTick>
 8002b14:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b16:	e008      	b.n	8002b2a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b18:	f7fe fa74 	bl	8001004 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d901      	bls.n	8002b2a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e070      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b2a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f0      	bne.n	8002b18 <HAL_RCC_OscConfig+0x7b0>
 8002b36:	e068      	b.n	8002c0a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b38:	4b36      	ldr	r3, [pc, #216]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b3e:	4b35      	ldr	r3, [pc, #212]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d031      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0203 	and.w	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d12a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d122      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d11a      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	0a5b      	lsrs	r3, r3, #9
 8002b7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d111      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	0c1b      	lsrs	r3, r3, #16
 8002b90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d108      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	0e1b      	lsrs	r3, r3, #24
 8002ba2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002baa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d001      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e02b      	b.n	8002c0c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002bb4:	4b17      	ldr	r3, [pc, #92]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bb8:	08db      	lsrs	r3, r3, #3
 8002bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc4:	693a      	ldr	r2, [r7, #16]
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d01f      	beq.n	8002c0a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002bca:	4b12      	ldr	r3, [pc, #72]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bce:	4a11      	ldr	r2, [pc, #68]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002bd0:	f023 0301 	bic.w	r3, r3, #1
 8002bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bd6:	f7fe fa15 	bl	8001004 <HAL_GetTick>
 8002bda:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002bdc:	bf00      	nop
 8002bde:	f7fe fa11 	bl	8001004 <HAL_GetTick>
 8002be2:	4602      	mov	r2, r0
 8002be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d0f9      	beq.n	8002bde <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002bea:	4b0a      	ldr	r3, [pc, #40]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002bec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002bee:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_OscConfig+0x8b0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002bf6:	00d2      	lsls	r2, r2, #3
 8002bf8:	4906      	ldr	r1, [pc, #24]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002bfe:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c02:	4a04      	ldr	r2, [pc, #16]	@ (8002c14 <HAL_RCC_OscConfig+0x8ac>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3730      	adds	r7, #48	@ 0x30
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	58024400 	.word	0x58024400
 8002c18:	ffff0007 	.word	0xffff0007

08002c1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b086      	sub	sp, #24
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
 8002c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e19c      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c30:	4b8a      	ldr	r3, [pc, #552]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 030f 	and.w	r3, r3, #15
 8002c38:	683a      	ldr	r2, [r7, #0]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d910      	bls.n	8002c60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c3e:	4b87      	ldr	r3, [pc, #540]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f023 020f 	bic.w	r2, r3, #15
 8002c46:	4985      	ldr	r1, [pc, #532]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c4e:	4b83      	ldr	r3, [pc, #524]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 030f 	and.w	r3, r3, #15
 8002c56:	683a      	ldr	r2, [r7, #0]
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d001      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e184      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d010      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	4b7b      	ldr	r3, [pc, #492]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d908      	bls.n	8002c8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002c7c:	4b78      	ldr	r3, [pc, #480]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	699b      	ldr	r3, [r3, #24]
 8002c80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	4975      	ldr	r1, [pc, #468]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0308 	and.w	r3, r3, #8
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d010      	beq.n	8002cbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	695a      	ldr	r2, [r3, #20]
 8002c9e:	4b70      	ldr	r3, [pc, #448]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002ca0:	69db      	ldr	r3, [r3, #28]
 8002ca2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d908      	bls.n	8002cbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002caa:	4b6d      	ldr	r3, [pc, #436]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cac:	69db      	ldr	r3, [r3, #28]
 8002cae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	496a      	ldr	r1, [pc, #424]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0310 	and.w	r3, r3, #16
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d010      	beq.n	8002cea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	699a      	ldr	r2, [r3, #24]
 8002ccc:	4b64      	ldr	r3, [pc, #400]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cce:	69db      	ldr	r3, [r3, #28]
 8002cd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d908      	bls.n	8002cea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cd8:	4b61      	ldr	r3, [pc, #388]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cda:	69db      	ldr	r3, [r3, #28]
 8002cdc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	495e      	ldr	r1, [pc, #376]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d010      	beq.n	8002d18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	4b59      	ldr	r3, [pc, #356]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d908      	bls.n	8002d18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d06:	4b56      	ldr	r3, [pc, #344]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	69db      	ldr	r3, [r3, #28]
 8002d12:	4953      	ldr	r1, [pc, #332]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68da      	ldr	r2, [r3, #12]
 8002d28:	4b4d      	ldr	r3, [pc, #308]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 030f 	and.w	r3, r3, #15
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d908      	bls.n	8002d46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	4b4a      	ldr	r3, [pc, #296]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f023 020f 	bic.w	r2, r3, #15
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4947      	ldr	r1, [pc, #284]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d055      	beq.n	8002dfe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002d52:	4b43      	ldr	r3, [pc, #268]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d54:	699b      	ldr	r3, [r3, #24]
 8002d56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	4940      	ldr	r1, [pc, #256]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d107      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002d6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d121      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e0f6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d107      	bne.n	8002d94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d84:	4b36      	ldr	r3, [pc, #216]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d115      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	e0ea      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d107      	bne.n	8002dac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002d9c:	4b30      	ldr	r3, [pc, #192]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0de      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dac:	4b2c      	ldr	r3, [pc, #176]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0d6      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dbc:	4b28      	ldr	r3, [pc, #160]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	f023 0207 	bic.w	r2, r3, #7
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	4925      	ldr	r1, [pc, #148]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dce:	f7fe f919 	bl	8001004 <HAL_GetTick>
 8002dd2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd4:	e00a      	b.n	8002dec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dd6:	f7fe f915 	bl	8001004 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d901      	bls.n	8002dec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e0be      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dec:	4b1c      	ldr	r3, [pc, #112]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	00db      	lsls	r3, r3, #3
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d1eb      	bne.n	8002dd6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e10:	699b      	ldr	r3, [r3, #24]
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d208      	bcs.n	8002e2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e1a:	4b11      	ldr	r3, [pc, #68]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e1c:	699b      	ldr	r3, [r3, #24]
 8002e1e:	f023 020f 	bic.w	r2, r3, #15
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	490e      	ldr	r1, [pc, #56]	@ (8002e60 <HAL_RCC_ClockConfig+0x244>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d214      	bcs.n	8002e64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3a:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f023 020f 	bic.w	r2, r3, #15
 8002e42:	4906      	ldr	r1, [pc, #24]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e4a:	4b04      	ldr	r3, [pc, #16]	@ (8002e5c <HAL_RCC_ClockConfig+0x240>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	683a      	ldr	r2, [r7, #0]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d005      	beq.n	8002e64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e086      	b.n	8002f6a <HAL_RCC_ClockConfig+0x34e>
 8002e5c:	52002000 	.word	0x52002000
 8002e60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d010      	beq.n	8002e92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	4b3f      	ldr	r3, [pc, #252]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d208      	bcs.n	8002e92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e80:	4b3c      	ldr	r3, [pc, #240]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e82:	699b      	ldr	r3, [r3, #24]
 8002e84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	4939      	ldr	r1, [pc, #228]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0308 	and.w	r3, r3, #8
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d010      	beq.n	8002ec0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	4b34      	ldr	r3, [pc, #208]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d208      	bcs.n	8002ec0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002eae:	4b31      	ldr	r3, [pc, #196]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	695b      	ldr	r3, [r3, #20]
 8002eba:	492e      	ldr	r1, [pc, #184]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0310 	and.w	r3, r3, #16
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d010      	beq.n	8002eee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	699a      	ldr	r2, [r3, #24]
 8002ed0:	4b28      	ldr	r3, [pc, #160]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ed2:	69db      	ldr	r3, [r3, #28]
 8002ed4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d208      	bcs.n	8002eee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002edc:	4b25      	ldr	r3, [pc, #148]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	4922      	ldr	r1, [pc, #136]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d010      	beq.n	8002f1c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	69da      	ldr	r2, [r3, #28]
 8002efe:	4b1d      	ldr	r3, [pc, #116]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d208      	bcs.n	8002f1c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f0a:	4b1a      	ldr	r3, [pc, #104]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	4917      	ldr	r1, [pc, #92]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f1c:	f000 f834 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b14      	ldr	r3, [pc, #80]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	0a1b      	lsrs	r3, r3, #8
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	4912      	ldr	r1, [pc, #72]	@ (8002f78 <HAL_RCC_ClockConfig+0x35c>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	f003 031f 	and.w	r3, r3, #31
 8002f34:	fa22 f303 	lsr.w	r3, r2, r3
 8002f38:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f74 <HAL_RCC_ClockConfig+0x358>)
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	4a0d      	ldr	r2, [pc, #52]	@ (8002f78 <HAL_RCC_ClockConfig+0x35c>)
 8002f44:	5cd3      	ldrb	r3, [r2, r3]
 8002f46:	f003 031f 	and.w	r3, r3, #31
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8002f50:	4a0a      	ldr	r2, [pc, #40]	@ (8002f7c <HAL_RCC_ClockConfig+0x360>)
 8002f52:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f54:	4a0a      	ldr	r2, [pc, #40]	@ (8002f80 <HAL_RCC_ClockConfig+0x364>)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002f84 <HAL_RCC_ClockConfig+0x368>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe f806 	bl	8000f70 <HAL_InitTick>
 8002f64:	4603      	mov	r3, r0
 8002f66:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	58024400 	.word	0x58024400
 8002f78:	08007484 	.word	0x08007484
 8002f7c:	24000004 	.word	0x24000004
 8002f80:	24000000 	.word	0x24000000
 8002f84:	24000008 	.word	0x24000008

08002f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b089      	sub	sp, #36	@ 0x24
 8002f8c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f8e:	4bb3      	ldr	r3, [pc, #716]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f96:	2b18      	cmp	r3, #24
 8002f98:	f200 8155 	bhi.w	8003246 <HAL_RCC_GetSysClockFreq+0x2be>
 8002f9c:	a201      	add	r2, pc, #4	@ (adr r2, 8002fa4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fa2:	bf00      	nop
 8002fa4:	08003009 	.word	0x08003009
 8002fa8:	08003247 	.word	0x08003247
 8002fac:	08003247 	.word	0x08003247
 8002fb0:	08003247 	.word	0x08003247
 8002fb4:	08003247 	.word	0x08003247
 8002fb8:	08003247 	.word	0x08003247
 8002fbc:	08003247 	.word	0x08003247
 8002fc0:	08003247 	.word	0x08003247
 8002fc4:	0800302f 	.word	0x0800302f
 8002fc8:	08003247 	.word	0x08003247
 8002fcc:	08003247 	.word	0x08003247
 8002fd0:	08003247 	.word	0x08003247
 8002fd4:	08003247 	.word	0x08003247
 8002fd8:	08003247 	.word	0x08003247
 8002fdc:	08003247 	.word	0x08003247
 8002fe0:	08003247 	.word	0x08003247
 8002fe4:	08003035 	.word	0x08003035
 8002fe8:	08003247 	.word	0x08003247
 8002fec:	08003247 	.word	0x08003247
 8002ff0:	08003247 	.word	0x08003247
 8002ff4:	08003247 	.word	0x08003247
 8002ff8:	08003247 	.word	0x08003247
 8002ffc:	08003247 	.word	0x08003247
 8003000:	08003247 	.word	0x08003247
 8003004:	0800303b 	.word	0x0800303b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003008:	4b94      	ldr	r3, [pc, #592]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f003 0320 	and.w	r3, r3, #32
 8003010:	2b00      	cmp	r3, #0
 8003012:	d009      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003014:	4b91      	ldr	r3, [pc, #580]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	08db      	lsrs	r3, r3, #3
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	4a90      	ldr	r2, [pc, #576]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003026:	e111      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003028:	4b8d      	ldr	r3, [pc, #564]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800302a:	61bb      	str	r3, [r7, #24]
      break;
 800302c:	e10e      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800302e:	4b8d      	ldr	r3, [pc, #564]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003030:	61bb      	str	r3, [r7, #24]
      break;
 8003032:	e10b      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003034:	4b8c      	ldr	r3, [pc, #560]	@ (8003268 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003036:	61bb      	str	r3, [r7, #24]
      break;
 8003038:	e108      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800303a:	4b88      	ldr	r3, [pc, #544]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003044:	4b85      	ldr	r3, [pc, #532]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800304e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003050:	4b82      	ldr	r3, [pc, #520]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800305a:	4b80      	ldr	r3, [pc, #512]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800305c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800305e:	08db      	lsrs	r3, r3, #3
 8003060:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003072:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	f000 80e1 	beq.w	8003240 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b02      	cmp	r3, #2
 8003082:	f000 8083 	beq.w	800318c <HAL_RCC_GetSysClockFreq+0x204>
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2b02      	cmp	r3, #2
 800308a:	f200 80a1 	bhi.w	80031d0 <HAL_RCC_GetSysClockFreq+0x248>
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0x114>
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d056      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x1c0>
 800309a:	e099      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800309c:	4b6f      	ldr	r3, [pc, #444]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0320 	and.w	r3, r3, #32
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d02d      	beq.n	8003104 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80030a8:	4b6c      	ldr	r3, [pc, #432]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	08db      	lsrs	r3, r3, #3
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	4a6b      	ldr	r2, [pc, #428]	@ (8003260 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80030b4:	fa22 f303 	lsr.w	r3, r2, r3
 80030b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	ee07 3a90 	vmov	s15, r3
 80030ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030d2:	4b62      	ldr	r3, [pc, #392]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030da:	ee07 3a90 	vmov	s15, r3
 80030de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80030e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003102:	e087      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	ee07 3a90 	vmov	s15, r3
 800310a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800310e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003270 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003112:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003116:	4b51      	ldr	r3, [pc, #324]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800311e:	ee07 3a90 	vmov	s15, r3
 8003122:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003126:	ed97 6a02 	vldr	s12, [r7, #8]
 800312a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 800312e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003132:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003136:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800313a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800313e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003142:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003146:	e065      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003148:	693b      	ldr	r3, [r7, #16]
 800314a:	ee07 3a90 	vmov	s15, r3
 800314e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003152:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003274 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003156:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800315a:	4b40      	ldr	r3, [pc, #256]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800315e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003162:	ee07 3a90 	vmov	s15, r3
 8003166:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800316a:	ed97 6a02 	vldr	s12, [r7, #8]
 800316e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003172:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003176:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800317a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800317e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003182:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003186:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800318a:	e043      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	ee07 3a90 	vmov	s15, r3
 8003192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003196:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003278 <HAL_RCC_GetSysClockFreq+0x2f0>
 800319a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319e:	4b2f      	ldr	r3, [pc, #188]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80031b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ce:	e021      	b.n	8003214 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	ee07 3a90 	vmov	s15, r3
 80031d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003274 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031e2:	4b1e      	ldr	r3, [pc, #120]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800326c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003202:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003206:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003212:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003214:	4b11      	ldr	r3, [pc, #68]	@ (800325c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003218:	0a5b      	lsrs	r3, r3, #9
 800321a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800321e:	3301      	adds	r3, #1
 8003220:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	ee07 3a90 	vmov	s15, r3
 8003228:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800322c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003230:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003234:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003238:	ee17 3a90 	vmov	r3, s15
 800323c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800323e:	e005      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]
      break;
 8003244:	e002      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003246:	4b07      	ldr	r3, [pc, #28]	@ (8003264 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003248:	61bb      	str	r3, [r7, #24]
      break;
 800324a:	bf00      	nop
  }

  return sysclockfreq;
 800324c:	69bb      	ldr	r3, [r7, #24]
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
 8003260:	03d09000 	.word	0x03d09000
 8003264:	003d0900 	.word	0x003d0900
 8003268:	007a1200 	.word	0x007a1200
 800326c:	46000000 	.word	0x46000000
 8003270:	4c742400 	.word	0x4c742400
 8003274:	4a742400 	.word	0x4a742400
 8003278:	4af42400 	.word	0x4af42400

0800327c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003282:	f7ff fe81 	bl	8002f88 <HAL_RCC_GetSysClockFreq>
 8003286:	4602      	mov	r2, r0
 8003288:	4b10      	ldr	r3, [pc, #64]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x50>)
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	f003 030f 	and.w	r3, r3, #15
 8003292:	490f      	ldr	r1, [pc, #60]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003294:	5ccb      	ldrb	r3, [r1, r3]
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	fa22 f303 	lsr.w	r3, r2, r3
 800329e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80032a0:	4b0a      	ldr	r3, [pc, #40]	@ (80032cc <HAL_RCC_GetHCLKFreq+0x50>)
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	f003 030f 	and.w	r3, r3, #15
 80032a8:	4a09      	ldr	r2, [pc, #36]	@ (80032d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80032aa:	5cd3      	ldrb	r3, [r2, r3]
 80032ac:	f003 031f 	and.w	r3, r3, #31
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	fa22 f303 	lsr.w	r3, r2, r3
 80032b6:	4a07      	ldr	r2, [pc, #28]	@ (80032d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80032ba:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80032c2:	681b      	ldr	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3708      	adds	r7, #8
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	58024400 	.word	0x58024400
 80032d0:	08007484 	.word	0x08007484
 80032d4:	24000004 	.word	0x24000004
 80032d8:	24000000 	.word	0x24000000

080032dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80032e0:	f7ff ffcc 	bl	800327c <HAL_RCC_GetHCLKFreq>
 80032e4:	4602      	mov	r2, r0
 80032e6:	4b06      	ldr	r3, [pc, #24]	@ (8003300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	091b      	lsrs	r3, r3, #4
 80032ec:	f003 0307 	and.w	r3, r3, #7
 80032f0:	4904      	ldr	r1, [pc, #16]	@ (8003304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032f2:	5ccb      	ldrb	r3, [r1, r3]
 80032f4:	f003 031f 	and.w	r3, r3, #31
 80032f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	58024400 	.word	0x58024400
 8003304:	08007484 	.word	0x08007484

08003308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800330c:	f7ff ffb6 	bl	800327c <HAL_RCC_GetHCLKFreq>
 8003310:	4602      	mov	r2, r0
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 0307 	and.w	r3, r3, #7
 800331c:	4904      	ldr	r1, [pc, #16]	@ (8003330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800331e:	5ccb      	ldrb	r3, [r1, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003328:	4618      	mov	r0, r3
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024400 	.word	0x58024400
 8003330:	08007484 	.word	0x08007484

08003334 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003338:	b0ca      	sub	sp, #296	@ 0x128
 800333a:	af00      	add	r7, sp, #0
 800333c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003340:	2300      	movs	r3, #0
 8003342:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003346:	2300      	movs	r3, #0
 8003348:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800334c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003354:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003358:	2500      	movs	r5, #0
 800335a:	ea54 0305 	orrs.w	r3, r4, r5
 800335e:	d049      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003360:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003364:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003366:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800336a:	d02f      	beq.n	80033cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800336c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003370:	d828      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003372:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003376:	d01a      	beq.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003378:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800337c:	d822      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003382:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003386:	d007      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003388:	e01c      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800338a:	4bb8      	ldr	r3, [pc, #736]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	4ab7      	ldr	r2, [pc, #732]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003396:	e01a      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003398:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339c:	3308      	adds	r3, #8
 800339e:	2102      	movs	r1, #2
 80033a0:	4618      	mov	r0, r3
 80033a2:	f001 fc8f 	bl	8004cc4 <RCCEx_PLL2_Config>
 80033a6:	4603      	mov	r3, r0
 80033a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033ac:	e00f      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b2:	3328      	adds	r3, #40	@ 0x28
 80033b4:	2102      	movs	r1, #2
 80033b6:	4618      	mov	r0, r3
 80033b8:	f001 fd36 	bl	8004e28 <RCCEx_PLL3_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033c2:	e004      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033ca:	e000      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80033cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d10a      	bne.n	80033ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80033d6:	4ba5      	ldr	r3, [pc, #660]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80033de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033e2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80033e4:	4aa1      	ldr	r2, [pc, #644]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e6:	430b      	orrs	r3, r1
 80033e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80033ea:	e003      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80033f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003400:	f04f 0900 	mov.w	r9, #0
 8003404:	ea58 0309 	orrs.w	r3, r8, r9
 8003408:	d047      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003410:	2b04      	cmp	r3, #4
 8003412:	d82a      	bhi.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003414:	a201      	add	r2, pc, #4	@ (adr r2, 800341c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800341a:	bf00      	nop
 800341c:	08003431 	.word	0x08003431
 8003420:	0800343f 	.word	0x0800343f
 8003424:	08003455 	.word	0x08003455
 8003428:	08003473 	.word	0x08003473
 800342c:	08003473 	.word	0x08003473
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003430:	4b8e      	ldr	r3, [pc, #568]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003432:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003434:	4a8d      	ldr	r2, [pc, #564]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003436:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800343a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800343c:	e01a      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800343e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003442:	3308      	adds	r3, #8
 8003444:	2100      	movs	r1, #0
 8003446:	4618      	mov	r0, r3
 8003448:	f001 fc3c 	bl	8004cc4 <RCCEx_PLL2_Config>
 800344c:	4603      	mov	r3, r0
 800344e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003452:	e00f      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	3328      	adds	r3, #40	@ 0x28
 800345a:	2100      	movs	r1, #0
 800345c:	4618      	mov	r0, r3
 800345e:	f001 fce3 	bl	8004e28 <RCCEx_PLL3_Config>
 8003462:	4603      	mov	r3, r0
 8003464:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003468:	e004      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003470:	e000      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003472:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003478:	2b00      	cmp	r3, #0
 800347a:	d10a      	bne.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800347c:	4b7b      	ldr	r3, [pc, #492]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800347e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003480:	f023 0107 	bic.w	r1, r3, #7
 8003484:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348a:	4a78      	ldr	r2, [pc, #480]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800348c:	430b      	orrs	r3, r1
 800348e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003490:	e003      	b.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003496:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800349a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800349e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034a2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80034a6:	f04f 0b00 	mov.w	fp, #0
 80034aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80034ae:	d04c      	beq.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80034b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ba:	d030      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80034bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034c0:	d829      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c4:	d02d      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80034c6:	2bc0      	cmp	r3, #192	@ 0xc0
 80034c8:	d825      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034ca:	2b80      	cmp	r3, #128	@ 0x80
 80034cc:	d018      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80034ce:	2b80      	cmp	r3, #128	@ 0x80
 80034d0:	d821      	bhi.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d002      	beq.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80034d6:	2b40      	cmp	r3, #64	@ 0x40
 80034d8:	d007      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80034da:	e01c      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034dc:	4b63      	ldr	r3, [pc, #396]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e0:	4a62      	ldr	r2, [pc, #392]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034e8:	e01c      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ee:	3308      	adds	r3, #8
 80034f0:	2100      	movs	r1, #0
 80034f2:	4618      	mov	r0, r3
 80034f4:	f001 fbe6 	bl	8004cc4 <RCCEx_PLL2_Config>
 80034f8:	4603      	mov	r3, r0
 80034fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80034fe:	e011      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003504:	3328      	adds	r3, #40	@ 0x28
 8003506:	2100      	movs	r1, #0
 8003508:	4618      	mov	r0, r3
 800350a:	f001 fc8d 	bl	8004e28 <RCCEx_PLL3_Config>
 800350e:	4603      	mov	r3, r0
 8003510:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003514:	e006      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800351c:	e002      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003522:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003528:	2b00      	cmp	r3, #0
 800352a:	d10a      	bne.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800352c:	4b4f      	ldr	r3, [pc, #316]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003530:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800353a:	4a4c      	ldr	r2, [pc, #304]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800353c:	430b      	orrs	r3, r1
 800353e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003540:	e003      	b.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800354a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003552:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8003556:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800355a:	2300      	movs	r3, #0
 800355c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003560:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003564:	460b      	mov	r3, r1
 8003566:	4313      	orrs	r3, r2
 8003568:	d053      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800356a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800356e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003572:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003576:	d035      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003578:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800357c:	d82e      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800357e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003582:	d031      	beq.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003584:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003588:	d828      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800358a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800358e:	d01a      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003590:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003594:	d822      	bhi.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800359a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800359e:	d007      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80035a0:	e01c      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035a2:	4b32      	ldr	r3, [pc, #200]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035a6:	4a31      	ldr	r2, [pc, #196]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035ae:	e01c      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b4:	3308      	adds	r3, #8
 80035b6:	2100      	movs	r1, #0
 80035b8:	4618      	mov	r0, r3
 80035ba:	f001 fb83 	bl	8004cc4 <RCCEx_PLL2_Config>
 80035be:	4603      	mov	r3, r0
 80035c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80035c4:	e011      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035ca:	3328      	adds	r3, #40	@ 0x28
 80035cc:	2100      	movs	r1, #0
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 fc2a 	bl	8004e28 <RCCEx_PLL3_Config>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035da:	e006      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035e2:	e002      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035e4:	bf00      	nop
 80035e6:	e000      	b.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80035e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d10b      	bne.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035f2:	4b1e      	ldr	r3, [pc, #120]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035fe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003602:	4a1a      	ldr	r2, [pc, #104]	@ (800366c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003604:	430b      	orrs	r3, r1
 8003606:	6593      	str	r3, [r2, #88]	@ 0x58
 8003608:	e003      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800360e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800361e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003622:	2300      	movs	r3, #0
 8003624:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003628:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800362c:	460b      	mov	r3, r1
 800362e:	4313      	orrs	r3, r2
 8003630:	d056      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003636:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800363a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800363e:	d038      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003640:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003644:	d831      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003646:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800364a:	d034      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800364c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003650:	d82b      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003652:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003656:	d01d      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003658:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800365c:	d825      	bhi.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800365e:	2b00      	cmp	r3, #0
 8003660:	d006      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003662:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003666:	d00a      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003668:	e01f      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x376>
 800366a:	bf00      	nop
 800366c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003670:	4ba2      	ldr	r3, [pc, #648]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	4aa1      	ldr	r2, [pc, #644]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003676:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800367a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800367c:	e01c      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800367e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003682:	3308      	adds	r3, #8
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f001 fb1c 	bl	8004cc4 <RCCEx_PLL2_Config>
 800368c:	4603      	mov	r3, r0
 800368e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003692:	e011      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003698:	3328      	adds	r3, #40	@ 0x28
 800369a:	2100      	movs	r1, #0
 800369c:	4618      	mov	r0, r3
 800369e:	f001 fbc3 	bl	8004e28 <RCCEx_PLL3_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036a8:	e006      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036b0:	e002      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80036b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d10b      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80036c0:	4b8e      	ldr	r3, [pc, #568]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036c4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80036c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036cc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80036d0:	4a8a      	ldr	r2, [pc, #552]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d2:	430b      	orrs	r3, r1
 80036d4:	6593      	str	r3, [r2, #88]	@ 0x58
 80036d6:	e003      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80036e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036ec:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80036f0:	2300      	movs	r3, #0
 80036f2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80036f6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80036fa:	460b      	mov	r3, r1
 80036fc:	4313      	orrs	r3, r2
 80036fe:	d03a      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003700:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003706:	2b30      	cmp	r3, #48	@ 0x30
 8003708:	d01f      	beq.n	800374a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800370a:	2b30      	cmp	r3, #48	@ 0x30
 800370c:	d819      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800370e:	2b20      	cmp	r3, #32
 8003710:	d00c      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003712:	2b20      	cmp	r3, #32
 8003714:	d815      	bhi.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d019      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800371a:	2b10      	cmp	r3, #16
 800371c:	d111      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800371e:	4b77      	ldr	r3, [pc, #476]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003722:	4a76      	ldr	r2, [pc, #472]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003724:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003728:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800372a:	e011      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	3308      	adds	r3, #8
 8003732:	2102      	movs	r1, #2
 8003734:	4618      	mov	r0, r3
 8003736:	f001 fac5 	bl	8004cc4 <RCCEx_PLL2_Config>
 800373a:	4603      	mov	r3, r0
 800373c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003740:	e006      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003748:	e002      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800374a:	bf00      	nop
 800374c:	e000      	b.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800374e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003750:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10a      	bne.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003758:	4b68      	ldr	r3, [pc, #416]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800375a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800375c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	4a65      	ldr	r2, [pc, #404]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003768:	430b      	orrs	r3, r1
 800376a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800376c:	e003      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800376e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003772:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800377e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003782:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003786:	2300      	movs	r3, #0
 8003788:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800378c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003790:	460b      	mov	r3, r1
 8003792:	4313      	orrs	r3, r2
 8003794:	d051      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003796:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800379a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800379c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a0:	d035      	beq.n	800380e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80037a6:	d82e      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037ac:	d031      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80037ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80037b2:	d828      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037b8:	d01a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80037ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80037be:	d822      	bhi.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80037c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037c8:	d007      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80037ca:	e01c      	b.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037cc:	4b4b      	ldr	r3, [pc, #300]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a4a      	ldr	r2, [pc, #296]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037d8:	e01c      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037de:	3308      	adds	r3, #8
 80037e0:	2100      	movs	r1, #0
 80037e2:	4618      	mov	r0, r3
 80037e4:	f001 fa6e 	bl	8004cc4 <RCCEx_PLL2_Config>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037ee:	e011      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f4:	3328      	adds	r3, #40	@ 0x28
 80037f6:	2100      	movs	r1, #0
 80037f8:	4618      	mov	r0, r3
 80037fa:	f001 fb15 	bl	8004e28 <RCCEx_PLL3_Config>
 80037fe:	4603      	mov	r3, r0
 8003800:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003804:	e006      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800380c:	e002      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800380e:	bf00      	nop
 8003810:	e000      	b.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003812:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003814:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003818:	2b00      	cmp	r3, #0
 800381a:	d10a      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800381c:	4b37      	ldr	r3, [pc, #220]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800381e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003820:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003824:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003828:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800382a:	4a34      	ldr	r2, [pc, #208]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800382c:	430b      	orrs	r3, r1
 800382e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003830:	e003      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003836:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003846:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003850:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003854:	460b      	mov	r3, r1
 8003856:	4313      	orrs	r3, r2
 8003858:	d056      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800385e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003860:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003864:	d033      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003866:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800386a:	d82c      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800386c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003870:	d02f      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003872:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003876:	d826      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003878:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800387c:	d02b      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800387e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003882:	d820      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003884:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003888:	d012      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800388a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800388e:	d81a      	bhi.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003890:	2b00      	cmp	r3, #0
 8003892:	d022      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d115      	bne.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800389a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389e:	3308      	adds	r3, #8
 80038a0:	2101      	movs	r1, #1
 80038a2:	4618      	mov	r0, r3
 80038a4:	f001 fa0e 	bl	8004cc4 <RCCEx_PLL2_Config>
 80038a8:	4603      	mov	r3, r0
 80038aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038ae:	e015      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80038b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b4:	3328      	adds	r3, #40	@ 0x28
 80038b6:	2101      	movs	r1, #1
 80038b8:	4618      	mov	r0, r3
 80038ba:	f001 fab5 	bl	8004e28 <RCCEx_PLL3_Config>
 80038be:	4603      	mov	r3, r0
 80038c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80038c4:	e00a      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80038cc:	e006      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038ce:	bf00      	nop
 80038d0:	e004      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038d2:	bf00      	nop
 80038d4:	e002      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038d6:	bf00      	nop
 80038d8:	e000      	b.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80038da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10d      	bne.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038e4:	4b05      	ldr	r3, [pc, #20]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038e8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80038f2:	4a02      	ldr	r2, [pc, #8]	@ (80038fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6513      	str	r3, [r2, #80]	@ 0x50
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80038fa:	bf00      	nop
 80038fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003900:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003904:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800390c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003910:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003914:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003918:	2300      	movs	r3, #0
 800391a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800391e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003922:	460b      	mov	r3, r1
 8003924:	4313      	orrs	r3, r2
 8003926:	d055      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800392c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003930:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003934:	d033      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003936:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800393a:	d82c      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800393c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003940:	d02f      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003942:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003946:	d826      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003948:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800394c:	d02b      	beq.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800394e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003952:	d820      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003954:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003958:	d012      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800395a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800395e:	d81a      	bhi.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003960:	2b00      	cmp	r3, #0
 8003962:	d022      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003964:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003968:	d115      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	3308      	adds	r3, #8
 8003970:	2101      	movs	r1, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f001 f9a6 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800397e:	e015      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003984:	3328      	adds	r3, #40	@ 0x28
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f001 fa4d 	bl	8004e28 <RCCEx_PLL3_Config>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003994:	e00a      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800399e:	bf00      	nop
 80039a0:	e004      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039a2:	bf00      	nop
 80039a4:	e002      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039a6:	bf00      	nop
 80039a8:	e000      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80039aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80039b4:	4ba3      	ldr	r3, [pc, #652]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039b8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80039bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80039c4:	4a9f      	ldr	r2, [pc, #636]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c6:	430b      	orrs	r3, r1
 80039c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80039ca:	e003      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039dc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039e0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80039ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80039ee:	460b      	mov	r3, r1
 80039f0:	4313      	orrs	r3, r2
 80039f2:	d037      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039fe:	d00e      	beq.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003a00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a04:	d816      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003a0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a0e:	d111      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a10:	4b8c      	ldr	r3, [pc, #560]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a14:	4a8b      	ldr	r2, [pc, #556]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a1c:	e00f      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a22:	3308      	adds	r3, #8
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f94c 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a46:	4b7f      	ldr	r3, [pc, #508]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a54:	4a7b      	ldr	r2, [pc, #492]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a7a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d039      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8a:	2b03      	cmp	r3, #3
 8003a8c:	d81c      	bhi.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003a8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ad1 	.word	0x08003ad1
 8003a98:	08003aa5 	.word	0x08003aa5
 8003a9c:	08003ab3 	.word	0x08003ab3
 8003aa0:	08003ad1 	.word	0x08003ad1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003aa4:	4b67      	ldr	r3, [pc, #412]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aa8:	4a66      	ldr	r2, [pc, #408]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ab0:	e00f      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	2102      	movs	r1, #2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f001 f902 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ac6:	e004      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ace:	e000      	b.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003ad0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10a      	bne.n	8003af0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ada:	4b5a      	ldr	r3, [pc, #360]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003adc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ade:	f023 0103 	bic.w	r1, r3, #3
 8003ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ae6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae8:	4a56      	ldr	r2, [pc, #344]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aea:	430b      	orrs	r3, r1
 8003aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003af4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b04:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003b0e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003b12:	460b      	mov	r3, r1
 8003b14:	4313      	orrs	r3, r2
 8003b16:	f000 809f 	beq.w	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a4a      	ldr	r2, [pc, #296]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b26:	f7fd fa6d 	bl	8001004 <HAL_GetTick>
 8003b2a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b30:	f7fd fa68 	bl	8001004 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003b3a:	1ad3      	subs	r3, r2, r3
 8003b3c:	2b64      	cmp	r3, #100	@ 0x64
 8003b3e:	d903      	bls.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b46:	e005      	b.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b48:	4b3f      	ldr	r3, [pc, #252]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d0ed      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d179      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b5c:	4b39      	ldr	r3, [pc, #228]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003b68:	4053      	eors	r3, r2
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d015      	beq.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b72:	4b34      	ldr	r3, [pc, #208]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b7e:	4b31      	ldr	r3, [pc, #196]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	4a30      	ldr	r2, [pc, #192]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b8a:	4b2e      	ldr	r3, [pc, #184]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b96:	4a2b      	ldr	r2, [pc, #172]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003b9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ba2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ba6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003baa:	d118      	bne.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bac:	f7fd fa2a 	bl	8001004 <HAL_GetTick>
 8003bb0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb4:	e00d      	b.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fd fa25 	bl	8001004 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003bc0:	1ad2      	subs	r2, r2, r3
 8003bc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d903      	bls.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003bd0:	e005      	b.n	8003bde <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0eb      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003bde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d129      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003bee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bf2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bf6:	d10e      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003bf8:	4b12      	ldr	r3, [pc, #72]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c08:	091a      	lsrs	r2, r3, #4
 8003c0a:	4b10      	ldr	r3, [pc, #64]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003c0c:	4013      	ands	r3, r2
 8003c0e:	4a0d      	ldr	r2, [pc, #52]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c10:	430b      	orrs	r3, r1
 8003c12:	6113      	str	r3, [r2, #16]
 8003c14:	e005      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c20:	6113      	str	r3, [r2, #16]
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c2a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c32:	4a04      	ldr	r2, [pc, #16]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c34:	430b      	orrs	r3, r1
 8003c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c38:	e00e      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003c42:	e009      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003c44:	58024400 	.word	0x58024400
 8003c48:	58024800 	.word	0x58024800
 8003c4c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c60:	f002 0301 	and.w	r3, r2, #1
 8003c64:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003c6e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4313      	orrs	r3, r2
 8003c76:	f000 8089 	beq.w	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003c80:	2b28      	cmp	r3, #40	@ 0x28
 8003c82:	d86b      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003c84:	a201      	add	r2, pc, #4	@ (adr r2, 8003c8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c8a:	bf00      	nop
 8003c8c:	08003d65 	.word	0x08003d65
 8003c90:	08003d5d 	.word	0x08003d5d
 8003c94:	08003d5d 	.word	0x08003d5d
 8003c98:	08003d5d 	.word	0x08003d5d
 8003c9c:	08003d5d 	.word	0x08003d5d
 8003ca0:	08003d5d 	.word	0x08003d5d
 8003ca4:	08003d5d 	.word	0x08003d5d
 8003ca8:	08003d5d 	.word	0x08003d5d
 8003cac:	08003d31 	.word	0x08003d31
 8003cb0:	08003d5d 	.word	0x08003d5d
 8003cb4:	08003d5d 	.word	0x08003d5d
 8003cb8:	08003d5d 	.word	0x08003d5d
 8003cbc:	08003d5d 	.word	0x08003d5d
 8003cc0:	08003d5d 	.word	0x08003d5d
 8003cc4:	08003d5d 	.word	0x08003d5d
 8003cc8:	08003d5d 	.word	0x08003d5d
 8003ccc:	08003d47 	.word	0x08003d47
 8003cd0:	08003d5d 	.word	0x08003d5d
 8003cd4:	08003d5d 	.word	0x08003d5d
 8003cd8:	08003d5d 	.word	0x08003d5d
 8003cdc:	08003d5d 	.word	0x08003d5d
 8003ce0:	08003d5d 	.word	0x08003d5d
 8003ce4:	08003d5d 	.word	0x08003d5d
 8003ce8:	08003d5d 	.word	0x08003d5d
 8003cec:	08003d65 	.word	0x08003d65
 8003cf0:	08003d5d 	.word	0x08003d5d
 8003cf4:	08003d5d 	.word	0x08003d5d
 8003cf8:	08003d5d 	.word	0x08003d5d
 8003cfc:	08003d5d 	.word	0x08003d5d
 8003d00:	08003d5d 	.word	0x08003d5d
 8003d04:	08003d5d 	.word	0x08003d5d
 8003d08:	08003d5d 	.word	0x08003d5d
 8003d0c:	08003d65 	.word	0x08003d65
 8003d10:	08003d5d 	.word	0x08003d5d
 8003d14:	08003d5d 	.word	0x08003d5d
 8003d18:	08003d5d 	.word	0x08003d5d
 8003d1c:	08003d5d 	.word	0x08003d5d
 8003d20:	08003d5d 	.word	0x08003d5d
 8003d24:	08003d5d 	.word	0x08003d5d
 8003d28:	08003d5d 	.word	0x08003d5d
 8003d2c:	08003d65 	.word	0x08003d65
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d34:	3308      	adds	r3, #8
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ffc3 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d44:	e00f      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d4a:	3328      	adds	r3, #40	@ 0x28
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f001 f86a 	bl	8004e28 <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10a      	bne.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d6e:	4bbf      	ldr	r3, [pc, #764]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d7c:	4abb      	ldr	r2, [pc, #748]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d7e:	430b      	orrs	r3, r1
 8003d80:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d82:	e003      	b.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d94:	f002 0302 	and.w	r3, r2, #2
 8003d98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003da2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003da6:	460b      	mov	r3, r1
 8003da8:	4313      	orrs	r3, r2
 8003daa:	d041      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003db0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d824      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003db6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dbc:	08003e09 	.word	0x08003e09
 8003dc0:	08003dd5 	.word	0x08003dd5
 8003dc4:	08003deb 	.word	0x08003deb
 8003dc8:	08003e09 	.word	0x08003e09
 8003dcc:	08003e09 	.word	0x08003e09
 8003dd0:	08003e09 	.word	0x08003e09
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dd8:	3308      	adds	r3, #8
 8003dda:	2101      	movs	r1, #1
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 ff71 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003de8:	e00f      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dee:	3328      	adds	r3, #40	@ 0x28
 8003df0:	2101      	movs	r1, #1
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f818 	bl	8004e28 <RCCEx_PLL3_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e12:	4b96      	ldr	r3, [pc, #600]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e16:	f023 0107 	bic.w	r1, r3, #7
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e20:	4a92      	ldr	r2, [pc, #584]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f002 0304 	and.w	r3, r2, #4
 8003e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e46:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	d044      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e58:	2b05      	cmp	r3, #5
 8003e5a:	d825      	bhi.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003eb1 	.word	0x08003eb1
 8003e68:	08003e7d 	.word	0x08003e7d
 8003e6c:	08003e93 	.word	0x08003e93
 8003e70:	08003eb1 	.word	0x08003eb1
 8003e74:	08003eb1 	.word	0x08003eb1
 8003e78:	08003eb1 	.word	0x08003eb1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e80:	3308      	adds	r3, #8
 8003e82:	2101      	movs	r1, #1
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 ff1d 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e90:	e00f      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e96:	3328      	adds	r3, #40	@ 0x28
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 ffc4 	bl	8004e28 <RCCEx_PLL3_Config>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ea6:	e004      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003eae:	e000      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003eb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003eb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eba:	4b6c      	ldr	r3, [pc, #432]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ebe:	f023 0107 	bic.w	r1, r3, #7
 8003ec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003eca:	4a68      	ldr	r2, [pc, #416]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ecc:	430b      	orrs	r3, r1
 8003ece:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ed0:	e003      	b.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ed2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ed6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee2:	f002 0320 	and.w	r3, r2, #32
 8003ee6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003eea:	2300      	movs	r3, #0
 8003eec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ef0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	d055      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f06:	d033      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003f08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f0c:	d82c      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f12:	d02f      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f18:	d826      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f1e:	d02b      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003f20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f24:	d820      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f2a:	d012      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003f2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f30:	d81a      	bhi.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d022      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003f36:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f3a:	d115      	bne.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f40:	3308      	adds	r3, #8
 8003f42:	2100      	movs	r1, #0
 8003f44:	4618      	mov	r0, r3
 8003f46:	f000 febd 	bl	8004cc4 <RCCEx_PLL2_Config>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f50:	e015      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f56:	3328      	adds	r3, #40	@ 0x28
 8003f58:	2102      	movs	r1, #2
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 ff64 	bl	8004e28 <RCCEx_PLL3_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f66:	e00a      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003f6e:	e006      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f70:	bf00      	nop
 8003f72:	e004      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f74:	bf00      	nop
 8003f76:	e002      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f78:	bf00      	nop
 8003f7a:	e000      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f86:	4b39      	ldr	r3, [pc, #228]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f96:	4a35      	ldr	r2, [pc, #212]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f9c:	e003      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003fb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003fbc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003fc0:	460b      	mov	r3, r1
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	d058      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003fce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd2:	d033      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003fd4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fd8:	d82c      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fde:	d02f      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fe4:	d826      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003fe6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fea:	d02b      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003fec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff0:	d820      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ff2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ff6:	d012      	beq.n	800401e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003ff8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ffc:	d81a      	bhi.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d022      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004002:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004006:	d115      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	3308      	adds	r3, #8
 800400e:	2100      	movs	r1, #0
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fe57 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800401c:	e015      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800401e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004022:	3328      	adds	r3, #40	@ 0x28
 8004024:	2102      	movs	r1, #2
 8004026:	4618      	mov	r0, r3
 8004028:	f000 fefe 	bl	8004e28 <RCCEx_PLL3_Config>
 800402c:	4603      	mov	r3, r0
 800402e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004032:	e00a      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800403a:	e006      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800403c:	bf00      	nop
 800403e:	e004      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004040:	bf00      	nop
 8004042:	e002      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004044:	bf00      	nop
 8004046:	e000      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004048:	bf00      	nop
    }

    if (ret == HAL_OK)
 800404a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10e      	bne.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004052:	4b06      	ldr	r3, [pc, #24]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004056:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800405e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004062:	4a02      	ldr	r2, [pc, #8]	@ (800406c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004064:	430b      	orrs	r3, r1
 8004066:	6593      	str	r3, [r2, #88]	@ 0x58
 8004068:	e006      	b.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800406a:	bf00      	nop
 800406c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004084:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004088:	2300      	movs	r3, #0
 800408a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800408e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004092:	460b      	mov	r3, r1
 8004094:	4313      	orrs	r3, r2
 8004096:	d055      	beq.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80040a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040a4:	d033      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80040a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80040aa:	d82c      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b0:	d02f      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80040b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040b6:	d826      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040bc:	d02b      	beq.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80040be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040c2:	d820      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c8:	d012      	beq.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80040ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ce:	d81a      	bhi.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d022      	beq.n	800411a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040d8:	d115      	bne.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040de:	3308      	adds	r3, #8
 80040e0:	2100      	movs	r1, #0
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fdee 	bl	8004cc4 <RCCEx_PLL2_Config>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040ee:	e015      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040f4:	3328      	adds	r3, #40	@ 0x28
 80040f6:	2102      	movs	r1, #2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f000 fe95 	bl	8004e28 <RCCEx_PLL3_Config>
 80040fe:	4603      	mov	r3, r0
 8004100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004104:	e00a      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800410c:	e006      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800410e:	bf00      	nop
 8004110:	e004      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004112:	bf00      	nop
 8004114:	e002      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004116:	bf00      	nop
 8004118:	e000      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800411a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800411c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004120:	2b00      	cmp	r3, #0
 8004122:	d10b      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004124:	4ba1      	ldr	r3, [pc, #644]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004128:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004130:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004134:	4a9d      	ldr	r2, [pc, #628]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004136:	430b      	orrs	r3, r1
 8004138:	6593      	str	r3, [r2, #88]	@ 0x58
 800413a:	e003      	b.n	8004144 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800413c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800414c:	f002 0308 	and.w	r3, r2, #8
 8004150:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004154:	2300      	movs	r3, #0
 8004156:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800415a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800415e:	460b      	mov	r3, r1
 8004160:	4313      	orrs	r3, r2
 8004162:	d01e      	beq.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004168:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800416c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004170:	d10c      	bne.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004172:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004176:	3328      	adds	r3, #40	@ 0x28
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f000 fe54 	bl	8004e28 <RCCEx_PLL3_Config>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d002      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800418c:	4b87      	ldr	r3, [pc, #540]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800418e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004190:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800419c:	4a83      	ldr	r2, [pc, #524]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800419e:	430b      	orrs	r3, r1
 80041a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80041a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041aa:	f002 0310 	and.w	r3, r2, #16
 80041ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041b2:	2300      	movs	r3, #0
 80041b4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041b8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041bc:	460b      	mov	r3, r1
 80041be:	4313      	orrs	r3, r2
 80041c0:	d01e      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80041c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041ce:	d10c      	bne.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d4:	3328      	adds	r3, #40	@ 0x28
 80041d6:	2102      	movs	r1, #2
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fe25 	bl	8004e28 <RCCEx_PLL3_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d002      	beq.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ea:	4b70      	ldr	r3, [pc, #448]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041fa:	4a6c      	ldr	r2, [pc, #432]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004200:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004208:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800420c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004210:	2300      	movs	r3, #0
 8004212:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004216:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800421a:	460b      	mov	r3, r1
 800421c:	4313      	orrs	r3, r2
 800421e:	d03e      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004228:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800422c:	d022      	beq.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800422e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004232:	d81b      	bhi.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004234:	2b00      	cmp	r3, #0
 8004236:	d003      	beq.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004238:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800423c:	d00b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800423e:	e015      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004244:	3308      	adds	r3, #8
 8004246:	2100      	movs	r1, #0
 8004248:	4618      	mov	r0, r3
 800424a:	f000 fd3b 	bl	8004cc4 <RCCEx_PLL2_Config>
 800424e:	4603      	mov	r3, r0
 8004250:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004254:	e00f      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425a:	3328      	adds	r3, #40	@ 0x28
 800425c:	2102      	movs	r1, #2
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fde2 	bl	8004e28 <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800426a:	e004      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004272:	e000      	b.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004274:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004276:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10b      	bne.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800427e:	4b4b      	ldr	r3, [pc, #300]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800428e:	4a47      	ldr	r2, [pc, #284]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004290:	430b      	orrs	r3, r1
 8004292:	6593      	str	r3, [r2, #88]	@ 0x58
 8004294:	e003      	b.n	800429e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004296:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800429a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80042aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80042ac:	2300      	movs	r3, #0
 80042ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80042b0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80042b4:	460b      	mov	r3, r1
 80042b6:	4313      	orrs	r3, r2
 80042b8:	d03b      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80042ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042c6:	d01f      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80042c8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042cc:	d818      	bhi.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80042ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042d2:	d003      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80042d4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042d8:	d007      	beq.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80042da:	e011      	b.n	8004300 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042dc:	4b33      	ldr	r3, [pc, #204]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e0:	4a32      	ldr	r2, [pc, #200]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042e8:	e00f      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ee:	3328      	adds	r3, #40	@ 0x28
 80042f0:	2101      	movs	r1, #1
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fd98 	bl	8004e28 <RCCEx_PLL3_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80042fe:	e004      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004306:	e000      	b.n	800430a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004308:	bf00      	nop
    }

    if (ret == HAL_OK)
 800430a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10b      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004312:	4b26      	ldr	r3, [pc, #152]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004314:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004316:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800431a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	4a22      	ldr	r2, [pc, #136]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004324:	430b      	orrs	r3, r1
 8004326:	6553      	str	r3, [r2, #84]	@ 0x54
 8004328:	e003      	b.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800432a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800432e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800433e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004340:	2300      	movs	r3, #0
 8004342:	677b      	str	r3, [r7, #116]	@ 0x74
 8004344:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004348:	460b      	mov	r3, r1
 800434a:	4313      	orrs	r3, r2
 800434c:	d034      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004352:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004354:	2b00      	cmp	r3, #0
 8004356:	d003      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800435c:	d007      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800435e:	e011      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004360:	4b12      	ldr	r3, [pc, #72]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004364:	4a11      	ldr	r2, [pc, #68]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004366:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800436a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800436c:	e00e      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800436e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004372:	3308      	adds	r3, #8
 8004374:	2102      	movs	r1, #2
 8004376:	4618      	mov	r0, r3
 8004378:	f000 fca4 	bl	8004cc4 <RCCEx_PLL2_Config>
 800437c:	4603      	mov	r3, r0
 800437e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004382:	e003      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800438a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004390:	2b00      	cmp	r3, #0
 8004392:	d10d      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004394:	4b05      	ldr	r3, [pc, #20]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004396:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004398:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043a2:	4a02      	ldr	r2, [pc, #8]	@ (80043ac <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80043a8:	e006      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80043aa:	bf00      	nop
 80043ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80043b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80043c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043c6:	2300      	movs	r3, #0
 80043c8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043ca:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043ce:	460b      	mov	r3, r1
 80043d0:	4313      	orrs	r3, r2
 80043d2:	d00c      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d8:	3328      	adds	r3, #40	@ 0x28
 80043da:	2102      	movs	r1, #2
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd23 	bl	8004e28 <RCCEx_PLL3_Config>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d002      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80043fc:	2300      	movs	r3, #0
 80043fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8004400:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8004404:	460b      	mov	r3, r1
 8004406:	4313      	orrs	r3, r2
 8004408:	d038      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800440a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800440e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004416:	d018      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004418:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800441c:	d811      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800441e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004422:	d014      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004428:	d80b      	bhi.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d011      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800442e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004432:	d106      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004434:	4bc3      	ldr	r3, [pc, #780]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004438:	4ac2      	ldr	r2, [pc, #776]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800443a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800443e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004440:	e008      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800445c:	4bb9      	ldr	r3, [pc, #740]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800446c:	4ab5      	ldr	r2, [pc, #724]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6553      	str	r3, [r2, #84]	@ 0x54
 8004472:	e003      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004488:	65bb      	str	r3, [r7, #88]	@ 0x58
 800448a:	2300      	movs	r3, #0
 800448c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800448e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004498:	4baa      	ldr	r3, [pc, #680]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044a6:	4aa7      	ldr	r2, [pc, #668]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80044b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80044ba:	2300      	movs	r3, #0
 80044bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80044be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d00a      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80044c8:	4b9e      	ldr	r3, [pc, #632]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80044d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80044d8:	4a9a      	ldr	r2, [pc, #616]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044da:	430b      	orrs	r3, r1
 80044dc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80044ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80044ec:	2300      	movs	r3, #0
 80044ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044f0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d009      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044fa:	4b92      	ldr	r3, [pc, #584]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80044fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044fe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8004502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004506:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004508:	4a8e      	ldr	r2, [pc, #568]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800450a:	430b      	orrs	r3, r1
 800450c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800450e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004516:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800451a:	643b      	str	r3, [r7, #64]	@ 0x40
 800451c:	2300      	movs	r3, #0
 800451e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004520:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004524:	460b      	mov	r3, r1
 8004526:	4313      	orrs	r3, r2
 8004528:	d00e      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800452a:	4b86      	ldr	r3, [pc, #536]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	4a85      	ldr	r2, [pc, #532]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004530:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004534:	6113      	str	r3, [r2, #16]
 8004536:	4b83      	ldr	r3, [pc, #524]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004538:	6919      	ldr	r1, [r3, #16]
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004542:	4a80      	ldr	r2, [pc, #512]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004554:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004556:	2300      	movs	r3, #0
 8004558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800455a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d009      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004564:	4b77      	ldr	r3, [pc, #476]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004566:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004568:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004572:	4a74      	ldr	r2, [pc, #464]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004574:	430b      	orrs	r3, r1
 8004576:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004580:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004584:	633b      	str	r3, [r7, #48]	@ 0x30
 8004586:	2300      	movs	r3, #0
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
 800458a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800458e:	460b      	mov	r3, r1
 8004590:	4313      	orrs	r3, r2
 8004592:	d00a      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004594:	4b6b      	ldr	r3, [pc, #428]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004596:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004598:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800459c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80045a4:	4a67      	ldr	r2, [pc, #412]	@ (8004744 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045a6:	430b      	orrs	r3, r1
 80045a8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	2100      	movs	r1, #0
 80045b4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045b6:	f003 0301 	and.w	r3, r3, #1
 80045ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045bc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d011      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ca:	3308      	adds	r3, #8
 80045cc:	2100      	movs	r1, #0
 80045ce:	4618      	mov	r0, r3
 80045d0:	f000 fb78 	bl	8004cc4 <RCCEx_PLL2_Config>
 80045d4:	4603      	mov	r3, r0
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80045da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80045ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f2:	2100      	movs	r1, #0
 80045f4:	6239      	str	r1, [r7, #32]
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004600:	460b      	mov	r3, r1
 8004602:	4313      	orrs	r3, r2
 8004604:	d011      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800460a:	3308      	adds	r3, #8
 800460c:	2101      	movs	r1, #1
 800460e:	4618      	mov	r0, r3
 8004610:	f000 fb58 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800461a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004626:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800462a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	2100      	movs	r1, #0
 8004634:	61b9      	str	r1, [r7, #24]
 8004636:	f003 0304 	and.w	r3, r3, #4
 800463a:	61fb      	str	r3, [r7, #28]
 800463c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d011      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800464a:	3308      	adds	r3, #8
 800464c:	2102      	movs	r1, #2
 800464e:	4618      	mov	r0, r3
 8004650:	f000 fb38 	bl	8004cc4 <RCCEx_PLL2_Config>
 8004654:	4603      	mov	r3, r0
 8004656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800465a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800465e:	2b00      	cmp	r3, #0
 8004660:	d003      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	2100      	movs	r1, #0
 8004674:	6139      	str	r1, [r7, #16]
 8004676:	f003 0308 	and.w	r3, r3, #8
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d011      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	3328      	adds	r3, #40	@ 0x28
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f000 fbca 	bl	8004e28 <RCCEx_PLL3_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800469a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046b2:	2100      	movs	r1, #0
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	f003 0310 	and.w	r3, r3, #16
 80046ba:	60fb      	str	r3, [r7, #12]
 80046bc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046c0:	460b      	mov	r3, r1
 80046c2:	4313      	orrs	r3, r2
 80046c4:	d011      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ca:	3328      	adds	r3, #40	@ 0x28
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fbaa 	bl	8004e28 <RCCEx_PLL3_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d003      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80046ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f2:	2100      	movs	r1, #0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	f003 0320 	and.w	r3, r3, #32
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004700:	460b      	mov	r3, r1
 8004702:	4313      	orrs	r3, r2
 8004704:	d011      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800470a:	3328      	adds	r3, #40	@ 0x28
 800470c:	2102      	movs	r1, #2
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fb8a 	bl	8004e28 <RCCEx_PLL3_Config>
 8004714:	4603      	mov	r3, r0
 8004716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800471a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471e:	2b00      	cmp	r3, #0
 8004720:	d003      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004726:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800472a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800472e:	2b00      	cmp	r3, #0
 8004730:	d101      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004732:	2300      	movs	r3, #0
 8004734:	e000      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
}
 8004738:	4618      	mov	r0, r3
 800473a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800473e:	46bd      	mov	sp, r7
 8004740:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004744:	58024400 	.word	0x58024400

08004748 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800474c:	f7fe fd96 	bl	800327c <HAL_RCC_GetHCLKFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b06      	ldr	r3, [pc, #24]	@ (800476c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	091b      	lsrs	r3, r3, #4
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	4904      	ldr	r1, [pc, #16]	@ (8004770 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004768:	4618      	mov	r0, r3
 800476a:	bd80      	pop	{r7, pc}
 800476c:	58024400 	.word	0x58024400
 8004770:	08007484 	.word	0x08007484

08004774 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004774:	b480      	push	{r7}
 8004776:	b089      	sub	sp, #36	@ 0x24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800477c:	4ba1      	ldr	r3, [pc, #644]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004786:	4b9f      	ldr	r3, [pc, #636]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800478a:	0b1b      	lsrs	r3, r3, #12
 800478c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004790:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004792:	4b9c      	ldr	r3, [pc, #624]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	091b      	lsrs	r3, r3, #4
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800479e:	4b99      	ldr	r3, [pc, #612]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a2:	08db      	lsrs	r3, r3, #3
 80047a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047a8:	693a      	ldr	r2, [r7, #16]
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	f000 8111 	beq.w	80049e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047c2:	69bb      	ldr	r3, [r7, #24]
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	f000 8083 	beq.w	80048d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	2b02      	cmp	r3, #2
 80047ce:	f200 80a1 	bhi.w	8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d003      	beq.n	80047e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80047d8:	69bb      	ldr	r3, [r7, #24]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d056      	beq.n	800488c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80047de:	e099      	b.n	8004914 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047e0:	4b88      	ldr	r3, [pc, #544]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f003 0320 	and.w	r3, r3, #32
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d02d      	beq.n	8004848 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80047ec:	4b85      	ldr	r3, [pc, #532]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	08db      	lsrs	r3, r3, #3
 80047f2:	f003 0303 	and.w	r3, r3, #3
 80047f6:	4a84      	ldr	r2, [pc, #528]	@ (8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80047f8:	fa22 f303 	lsr.w	r3, r2, r3
 80047fc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	ee07 3a90 	vmov	s15, r3
 8004804:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004816:	4b7b      	ldr	r3, [pc, #492]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004826:	ed97 6a03 	vldr	s12, [r7, #12]
 800482a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800482e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004832:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004836:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800483e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004842:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004846:	e087      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004852:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485a:	4b6a      	ldr	r3, [pc, #424]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800485c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800485e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486a:	ed97 6a03 	vldr	s12, [r7, #12]
 800486e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004872:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004876:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800487e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004882:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004886:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800488a:	e065      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004896:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800489a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800489e:	4b59      	ldr	r3, [pc, #356]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048a6:	ee07 3a90 	vmov	s15, r3
 80048aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048ce:	e043      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048da:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80048de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e2:	4b48      	ldr	r3, [pc, #288]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ea:	ee07 3a90 	vmov	s15, r3
 80048ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048f6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800490e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004912:	e021      	b.n	8004958 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800491e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004926:	4b37      	ldr	r3, [pc, #220]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800492e:	ee07 3a90 	vmov	s15, r3
 8004932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004936:	ed97 6a03 	vldr	s12, [r7, #12]
 800493a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800493e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800494a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800494e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004952:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004956:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004958:	4b2a      	ldr	r3, [pc, #168]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800495a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800495c:	0a5b      	lsrs	r3, r3, #9
 800495e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004962:	ee07 3a90 	vmov	s15, r3
 8004966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800496e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004972:	edd7 6a07 	vldr	s13, [r7, #28]
 8004976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800497a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497e:	ee17 2a90 	vmov	r2, s15
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004986:	4b1f      	ldr	r3, [pc, #124]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800498a:	0c1b      	lsrs	r3, r3, #16
 800498c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004990:	ee07 3a90 	vmov	s15, r3
 8004994:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004998:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800499c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ac:	ee17 2a90 	vmov	r2, s15
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049b4:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b8:	0e1b      	lsrs	r3, r3, #24
 80049ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049da:	ee17 2a90 	vmov	r2, s15
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80049e2:	e008      	b.n	80049f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	609a      	str	r2, [r3, #8]
}
 80049f6:	bf00      	nop
 80049f8:	3724      	adds	r7, #36	@ 0x24
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	58024400 	.word	0x58024400
 8004a08:	03d09000 	.word	0x03d09000
 8004a0c:	46000000 	.word	0x46000000
 8004a10:	4c742400 	.word	0x4c742400
 8004a14:	4a742400 	.word	0x4a742400
 8004a18:	4af42400 	.word	0x4af42400

08004a1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a24:	4ba1      	ldr	r3, [pc, #644]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a28:	f003 0303 	and.w	r3, r3, #3
 8004a2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a2e:	4b9f      	ldr	r3, [pc, #636]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a32:	0d1b      	lsrs	r3, r3, #20
 8004a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a3a:	4b9c      	ldr	r3, [pc, #624]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a3e:	0a1b      	lsrs	r3, r3, #8
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a46:	4b99      	ldr	r3, [pc, #612]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a4a:	08db      	lsrs	r3, r3, #3
 8004a4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	f000 8111 	beq.w	8004c8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	f000 8083 	beq.w	8004b78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	2b02      	cmp	r3, #2
 8004a76:	f200 80a1 	bhi.w	8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d003      	beq.n	8004a88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d056      	beq.n	8004b34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a86:	e099      	b.n	8004bbc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a88:	4b88      	ldr	r3, [pc, #544]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d02d      	beq.n	8004af0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a94:	4b85      	ldr	r3, [pc, #532]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	08db      	lsrs	r3, r3, #3
 8004a9a:	f003 0303 	and.w	r3, r3, #3
 8004a9e:	4a84      	ldr	r2, [pc, #528]	@ (8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004aa0:	fa22 f303 	lsr.w	r3, r2, r3
 8004aa4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	ee07 3a90 	vmov	s15, r3
 8004aac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004abe:	4b7b      	ldr	r3, [pc, #492]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac6:	ee07 3a90 	vmov	s15, r3
 8004aca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ace:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ad2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ad6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ada:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ade:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ae2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ae6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004aee:	e087      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004afa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004afe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b02:	4b6a      	ldr	r3, [pc, #424]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b0a:	ee07 3a90 	vmov	s15, r3
 8004b0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b12:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b32:	e065      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b46:	4b59      	ldr	r3, [pc, #356]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b4e:	ee07 3a90 	vmov	s15, r3
 8004b52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b56:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b76:	e043      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b8a:	4b48      	ldr	r3, [pc, #288]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b92:	ee07 3a90 	vmov	s15, r3
 8004b96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004ba2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ba6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004baa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bba:	e021      	b.n	8004c00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bc6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004cbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bce:	4b37      	ldr	r3, [pc, #220]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bd6:	ee07 3a90 	vmov	s15, r3
 8004bda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bde:	ed97 6a03 	vldr	s12, [r7, #12]
 8004be2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004cb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004be6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bfe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c00:	4b2a      	ldr	r3, [pc, #168]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c04:	0a5b      	lsrs	r3, r3, #9
 8004c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c26:	ee17 2a90 	vmov	r2, s15
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c32:	0c1b      	lsrs	r3, r3, #16
 8004c34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c38:	ee07 3a90 	vmov	s15, r3
 8004c3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c48:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c54:	ee17 2a90 	vmov	r2, s15
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c5c:	4b13      	ldr	r3, [pc, #76]	@ (8004cac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c60:	0e1b      	lsrs	r3, r3, #24
 8004c62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c82:	ee17 2a90 	vmov	r2, s15
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c8a:	e008      	b.n	8004c9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	609a      	str	r2, [r3, #8]
}
 8004c9e:	bf00      	nop
 8004ca0:	3724      	adds	r7, #36	@ 0x24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	58024400 	.word	0x58024400
 8004cb0:	03d09000 	.word	0x03d09000
 8004cb4:	46000000 	.word	0x46000000
 8004cb8:	4c742400 	.word	0x4c742400
 8004cbc:	4a742400 	.word	0x4a742400
 8004cc0:	4af42400 	.word	0x4af42400

08004cc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cd2:	4b53      	ldr	r3, [pc, #332]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004cd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd6:	f003 0303 	and.w	r3, r3, #3
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d101      	bne.n	8004ce2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e099      	b.n	8004e16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004ce2:	4b4f      	ldr	r3, [pc, #316]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a4e      	ldr	r2, [pc, #312]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004ce8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004cec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cee:	f7fc f989 	bl	8001004 <HAL_GetTick>
 8004cf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004cf4:	e008      	b.n	8004d08 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004cf6:	f7fc f985 	bl	8001004 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d901      	bls.n	8004d08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d04:	2303      	movs	r3, #3
 8004d06:	e086      	b.n	8004e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d08:	4b45      	ldr	r3, [pc, #276]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1f0      	bne.n	8004cf6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d14:	4b42      	ldr	r3, [pc, #264]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d18:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	031b      	lsls	r3, r3, #12
 8004d22:	493f      	ldr	r1, [pc, #252]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	4313      	orrs	r3, r2
 8004d26:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	025b      	lsls	r3, r3, #9
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	3b01      	subs	r3, #1
 8004d44:	041b      	lsls	r3, r3, #16
 8004d46:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	061b      	lsls	r3, r3, #24
 8004d54:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d58:	4931      	ldr	r1, [pc, #196]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d5e:	4b30      	ldr	r3, [pc, #192]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d62:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	695b      	ldr	r3, [r3, #20]
 8004d6a:	492d      	ldr	r1, [pc, #180]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d70:	4b2b      	ldr	r3, [pc, #172]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d74:	f023 0220 	bic.w	r2, r3, #32
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	4928      	ldr	r1, [pc, #160]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d82:	4b27      	ldr	r3, [pc, #156]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d86:	4a26      	ldr	r2, [pc, #152]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	f023 0310 	bic.w	r3, r3, #16
 8004d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d8e:	4b24      	ldr	r3, [pc, #144]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <RCCEx_PLL2_Config+0x160>)
 8004d94:	4013      	ands	r3, r2
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	69d2      	ldr	r2, [r2, #28]
 8004d9a:	00d2      	lsls	r2, r2, #3
 8004d9c:	4920      	ldr	r1, [pc, #128]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004da2:	4b1f      	ldr	r3, [pc, #124]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004da8:	f043 0310 	orr.w	r3, r3, #16
 8004dac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d106      	bne.n	8004dc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004db4:	4b1a      	ldr	r3, [pc, #104]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db8:	4a19      	ldr	r2, [pc, #100]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dc0:	e00f      	b.n	8004de2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d106      	bne.n	8004dd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004dc8:	4b15      	ldr	r3, [pc, #84]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a14      	ldr	r2, [pc, #80]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dd4:	e005      	b.n	8004de2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004dd6:	4b12      	ldr	r3, [pc, #72]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dda:	4a11      	ldr	r2, [pc, #68]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004de0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004de2:	4b0f      	ldr	r3, [pc, #60]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a0e      	ldr	r2, [pc, #56]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004de8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004dec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dee:	f7fc f909 	bl	8001004 <HAL_GetTick>
 8004df2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004df4:	e008      	b.n	8004e08 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004df6:	f7fc f905 	bl	8001004 <HAL_GetTick>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1ad3      	subs	r3, r2, r3
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d901      	bls.n	8004e08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e006      	b.n	8004e16 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e08:	4b05      	ldr	r3, [pc, #20]	@ (8004e20 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d0f0      	beq.n	8004df6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3710      	adds	r7, #16
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	58024400 	.word	0x58024400
 8004e24:	ffff0007 	.word	0xffff0007

08004e28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e32:	2300      	movs	r3, #0
 8004e34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e36:	4b53      	ldr	r3, [pc, #332]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d101      	bne.n	8004e46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e099      	b.n	8004f7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e46:	4b4f      	ldr	r3, [pc, #316]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a4e      	ldr	r2, [pc, #312]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e52:	f7fc f8d7 	bl	8001004 <HAL_GetTick>
 8004e56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e5a:	f7fc f8d3 	bl	8001004 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e086      	b.n	8004f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e6c:	4b45      	ldr	r3, [pc, #276]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1f0      	bne.n	8004e5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e78:	4b42      	ldr	r3, [pc, #264]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e7c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	051b      	lsls	r3, r3, #20
 8004e86:	493f      	ldr	r1, [pc, #252]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	3b01      	subs	r3, #1
 8004e9c:	025b      	lsls	r3, r3, #9
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	3b01      	subs	r3, #1
 8004ea8:	041b      	lsls	r3, r3, #16
 8004eaa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eae:	431a      	orrs	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	691b      	ldr	r3, [r3, #16]
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	061b      	lsls	r3, r3, #24
 8004eb8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ebc:	4931      	ldr	r1, [pc, #196]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004ec2:	4b30      	ldr	r3, [pc, #192]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ec4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	492d      	ldr	r1, [pc, #180]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004ed4:	4b2b      	ldr	r3, [pc, #172]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	4928      	ldr	r1, [pc, #160]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004ee6:	4b27      	ldr	r3, [pc, #156]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eea:	4a26      	ldr	r2, [pc, #152]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ef0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004ef2:	4b24      	ldr	r3, [pc, #144]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004ef4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ef6:	4b24      	ldr	r3, [pc, #144]	@ (8004f88 <RCCEx_PLL3_Config+0x160>)
 8004ef8:	4013      	ands	r3, r2
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	69d2      	ldr	r2, [r2, #28]
 8004efe:	00d2      	lsls	r2, r2, #3
 8004f00:	4920      	ldr	r1, [pc, #128]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f06:	4b1f      	ldr	r3, [pc, #124]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f0a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f0c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f10:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f18:	4b1a      	ldr	r3, [pc, #104]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f1c:	4a19      	ldr	r2, [pc, #100]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f1e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f22:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f24:	e00f      	b.n	8004f46 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d106      	bne.n	8004f3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f2c:	4b15      	ldr	r3, [pc, #84]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	4a14      	ldr	r2, [pc, #80]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f32:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f36:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f38:	e005      	b.n	8004f46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f3a:	4b12      	ldr	r3, [pc, #72]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	4a11      	ldr	r2, [pc, #68]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f44:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f46:	4b0f      	ldr	r3, [pc, #60]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a0e      	ldr	r2, [pc, #56]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f52:	f7fc f857 	bl	8001004 <HAL_GetTick>
 8004f56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f58:	e008      	b.n	8004f6c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f5a:	f7fc f853 	bl	8001004 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d901      	bls.n	8004f6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f68:	2303      	movs	r3, #3
 8004f6a:	e006      	b.n	8004f7a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f6c:	4b05      	ldr	r3, [pc, #20]	@ (8004f84 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d0f0      	beq.n	8004f5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	58024400 	.word	0x58024400
 8004f88:	ffff0007 	.word	0xffff0007

08004f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e042      	b.n	8005024 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f7fb fef1 	bl	8000d98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2224      	movs	r2, #36	@ 0x24
 8004fba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d002      	beq.n	8004fdc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f001 fa14 	bl	8006404 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fca9 	bl	8005934 <UART_SetConfig>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e01b      	b.n	8005024 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004ffa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800500a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f042 0201 	orr.w	r2, r2, #1
 800501a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f001 fa93 	bl	8006548 <UART_CheckIdleState>
 8005022:	4603      	mov	r3, r0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b08a      	sub	sp, #40	@ 0x28
 8005030:	af02      	add	r7, sp, #8
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005042:	2b20      	cmp	r3, #32
 8005044:	d17b      	bne.n	800513e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d002      	beq.n	8005052 <HAL_UART_Transmit+0x26>
 800504c:	88fb      	ldrh	r3, [r7, #6]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e074      	b.n	8005140 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2221      	movs	r2, #33	@ 0x21
 8005062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005066:	f7fb ffcd 	bl	8001004 <HAL_GetTick>
 800506a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	88fa      	ldrh	r2, [r7, #6]
 8005078:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005084:	d108      	bne.n	8005098 <HAL_UART_Transmit+0x6c>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d104      	bne.n	8005098 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800508e:	2300      	movs	r3, #0
 8005090:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	61bb      	str	r3, [r7, #24]
 8005096:	e003      	b.n	80050a0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800509c:	2300      	movs	r3, #0
 800509e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050a0:	e030      	b.n	8005104 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	2200      	movs	r2, #0
 80050aa:	2180      	movs	r1, #128	@ 0x80
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f001 faf5 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d005      	beq.n	80050c4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	2220      	movs	r2, #32
 80050bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050c0:	2303      	movs	r3, #3
 80050c2:	e03d      	b.n	8005140 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10b      	bne.n	80050e2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	881b      	ldrh	r3, [r3, #0]
 80050ce:	461a      	mov	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050d8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	3302      	adds	r3, #2
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	e007      	b.n	80050f2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050e2:	69fb      	ldr	r3, [r7, #28]
 80050e4:	781a      	ldrb	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	3301      	adds	r3, #1
 80050f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	3b01      	subs	r3, #1
 80050fc:	b29a      	uxth	r2, r3
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800510a:	b29b      	uxth	r3, r3
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1c8      	bne.n	80050a2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	9300      	str	r3, [sp, #0]
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	2200      	movs	r2, #0
 8005118:	2140      	movs	r1, #64	@ 0x40
 800511a:	68f8      	ldr	r0, [r7, #12]
 800511c:	f001 fabe 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2220      	movs	r2, #32
 800512a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e006      	b.n	8005140 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2220      	movs	r2, #32
 8005136:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800513a:	2300      	movs	r3, #0
 800513c:	e000      	b.n	8005140 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800513e:	2302      	movs	r3, #2
  }
}
 8005140:	4618      	mov	r0, r3
 8005142:	3720      	adds	r7, #32
 8005144:	46bd      	mov	sp, r7
 8005146:	bd80      	pop	{r7, pc}

08005148 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b0ba      	sub	sp, #232	@ 0xe8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800516e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005172:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005176:	4013      	ands	r3, r2
 8005178:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800517c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005180:	2b00      	cmp	r3, #0
 8005182:	d11b      	bne.n	80051bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005188:	f003 0320 	and.w	r3, r3, #32
 800518c:	2b00      	cmp	r3, #0
 800518e:	d015      	beq.n	80051bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d105      	bne.n	80051a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800519c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d009      	beq.n	80051bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8393 	beq.w	80058d8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	4798      	blx	r3
      }
      return;
 80051ba:	e38d      	b.n	80058d8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	f000 8123 	beq.w	800540c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80051ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005400 <HAL_UART_IRQHandler+0x2b8>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80051d6:	4b8b      	ldr	r3, [pc, #556]	@ (8005404 <HAL_UART_IRQHandler+0x2bc>)
 80051d8:	4013      	ands	r3, r2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	f000 8116 	beq.w	800540c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80051e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d011      	beq.n	8005210 <HAL_UART_IRQHandler+0xc8>
 80051ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00b      	beq.n	8005210 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2201      	movs	r2, #1
 80051fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005206:	f043 0201 	orr.w	r2, r3, #1
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005214:	f003 0302 	and.w	r3, r3, #2
 8005218:	2b00      	cmp	r3, #0
 800521a:	d011      	beq.n	8005240 <HAL_UART_IRQHandler+0xf8>
 800521c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005220:	f003 0301 	and.w	r3, r3, #1
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00b      	beq.n	8005240 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	2202      	movs	r2, #2
 800522e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005236:	f043 0204 	orr.w	r2, r3, #4
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005240:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b00      	cmp	r3, #0
 800524a:	d011      	beq.n	8005270 <HAL_UART_IRQHandler+0x128>
 800524c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005250:	f003 0301 	and.w	r3, r3, #1
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00b      	beq.n	8005270 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	2204      	movs	r2, #4
 800525e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005270:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005274:	f003 0308 	and.w	r3, r3, #8
 8005278:	2b00      	cmp	r3, #0
 800527a:	d017      	beq.n	80052ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800527c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005280:	f003 0320 	and.w	r3, r3, #32
 8005284:	2b00      	cmp	r3, #0
 8005286:	d105      	bne.n	8005294 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005288:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800528c:	4b5c      	ldr	r3, [pc, #368]	@ (8005400 <HAL_UART_IRQHandler+0x2b8>)
 800528e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	2208      	movs	r2, #8
 800529a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052a2:	f043 0208 	orr.w	r2, r3, #8
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d012      	beq.n	80052de <HAL_UART_IRQHandler+0x196>
 80052b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052bc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d00c      	beq.n	80052de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052d4:	f043 0220 	orr.w	r2, r3, #32
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 82f9 	beq.w	80058dc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80052ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ee:	f003 0320 	and.w	r3, r3, #32
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d013      	beq.n	800531e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80052f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005302:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800531a:	6878      	ldr	r0, [r7, #4]
 800531c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005324:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005332:	2b40      	cmp	r3, #64	@ 0x40
 8005334:	d005      	beq.n	8005342 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005336:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800533a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800533e:	2b00      	cmp	r3, #0
 8005340:	d054      	beq.n	80053ec <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005342:	6878      	ldr	r0, [r7, #4]
 8005344:	f001 fa18 	bl	8006778 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005352:	2b40      	cmp	r3, #64	@ 0x40
 8005354:	d146      	bne.n	80053e4 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3308      	adds	r3, #8
 800535c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005360:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005364:	e853 3f00 	ldrex	r3, [r3]
 8005368:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800536c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005374:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3308      	adds	r3, #8
 800537e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005382:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005386:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800538e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005392:	e841 2300 	strex	r3, r2, [r1]
 8005396:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800539a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1d9      	bne.n	8005356 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d017      	beq.n	80053dc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b2:	4a15      	ldr	r2, [pc, #84]	@ (8005408 <HAL_UART_IRQHandler+0x2c0>)
 80053b4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fc fb03 	bl	80019c8 <HAL_DMA_Abort_IT>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d019      	beq.n	80053fc <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053d0:	687a      	ldr	r2, [r7, #4]
 80053d2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80053d6:	4610      	mov	r0, r2
 80053d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053da:	e00f      	b.n	80053fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f000 fa93 	bl	8005908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e2:	e00b      	b.n	80053fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fa8f 	bl	8005908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053ea:	e007      	b.n	80053fc <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fa8b 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80053fa:	e26f      	b.n	80058dc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fc:	bf00      	nop
    return;
 80053fe:	e26d      	b.n	80058dc <HAL_UART_IRQHandler+0x794>
 8005400:	10000001 	.word	0x10000001
 8005404:	04000120 	.word	0x04000120
 8005408:	08006845 	.word	0x08006845

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005410:	2b01      	cmp	r3, #1
 8005412:	f040 8203 	bne.w	800581c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800541a:	f003 0310 	and.w	r3, r3, #16
 800541e:	2b00      	cmp	r3, #0
 8005420:	f000 81fc 	beq.w	800581c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005424:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005428:	f003 0310 	and.w	r3, r3, #16
 800542c:	2b00      	cmp	r3, #0
 800542e:	f000 81f5 	beq.w	800581c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	2210      	movs	r2, #16
 8005438:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	f040 816d 	bne.w	8005724 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	4aa4      	ldr	r2, [pc, #656]	@ (80056e4 <HAL_UART_IRQHandler+0x59c>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d068      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4aa1      	ldr	r2, [pc, #644]	@ (80056e8 <HAL_UART_IRQHandler+0x5a0>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d061      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a9f      	ldr	r2, [pc, #636]	@ (80056ec <HAL_UART_IRQHandler+0x5a4>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d05a      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a9c      	ldr	r2, [pc, #624]	@ (80056f0 <HAL_UART_IRQHandler+0x5a8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d053      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a9a      	ldr	r2, [pc, #616]	@ (80056f4 <HAL_UART_IRQHandler+0x5ac>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d04c      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a97      	ldr	r2, [pc, #604]	@ (80056f8 <HAL_UART_IRQHandler+0x5b0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d045      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a95      	ldr	r2, [pc, #596]	@ (80056fc <HAL_UART_IRQHandler+0x5b4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d03e      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a92      	ldr	r2, [pc, #584]	@ (8005700 <HAL_UART_IRQHandler+0x5b8>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d037      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a90      	ldr	r2, [pc, #576]	@ (8005704 <HAL_UART_IRQHandler+0x5bc>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d030      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a8d      	ldr	r2, [pc, #564]	@ (8005708 <HAL_UART_IRQHandler+0x5c0>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d029      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a8b      	ldr	r2, [pc, #556]	@ (800570c <HAL_UART_IRQHandler+0x5c4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d022      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a88      	ldr	r2, [pc, #544]	@ (8005710 <HAL_UART_IRQHandler+0x5c8>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d01b      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a86      	ldr	r2, [pc, #536]	@ (8005714 <HAL_UART_IRQHandler+0x5cc>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d014      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a83      	ldr	r2, [pc, #524]	@ (8005718 <HAL_UART_IRQHandler+0x5d0>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d00d      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a81      	ldr	r2, [pc, #516]	@ (800571c <HAL_UART_IRQHandler+0x5d4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d006      	beq.n	800552a <HAL_UART_IRQHandler+0x3e2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a7e      	ldr	r2, [pc, #504]	@ (8005720 <HAL_UART_IRQHandler+0x5d8>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d106      	bne.n	8005538 <HAL_UART_IRQHandler+0x3f0>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	b29b      	uxth	r3, r3
 8005536:	e005      	b.n	8005544 <HAL_UART_IRQHandler+0x3fc>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685b      	ldr	r3, [r3, #4]
 8005542:	b29b      	uxth	r3, r3
 8005544:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005548:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 80ad 	beq.w	80056ac <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005558:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800555c:	429a      	cmp	r2, r3
 800555e:	f080 80a5 	bcs.w	80056ac <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005568:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005572:	69db      	ldr	r3, [r3, #28]
 8005574:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005578:	f000 8087 	beq.w	800568a <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005584:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005590:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005594:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005598:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	461a      	mov	r2, r3
 80055a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055a6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1da      	bne.n	800557c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055d0:	e853 3f00 	ldrex	r3, [r3]
 80055d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055d8:	f023 0301 	bic.w	r3, r3, #1
 80055dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	3308      	adds	r3, #8
 80055e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80055ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80055ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80055f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80055fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1e1      	bne.n	80055c6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3308      	adds	r3, #8
 8005608:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800560a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800560c:	e853 3f00 	ldrex	r3, [r3]
 8005610:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005612:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005614:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005618:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	3308      	adds	r3, #8
 8005622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005626:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005628:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800562c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005634:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e3      	bne.n	8005602 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005650:	e853 3f00 	ldrex	r3, [r3]
 8005654:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005656:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005658:	f023 0310 	bic.w	r3, r3, #16
 800565c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800566a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800566c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005670:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005678:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800567a:	2b00      	cmp	r3, #0
 800567c:	d1e4      	bne.n	8005648 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005684:	4618      	mov	r0, r3
 8005686:	f7fb fe81 	bl	800138c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2202      	movs	r2, #2
 800568e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800569c:	b29b      	uxth	r3, r3
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 f939 	bl	800591c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80056aa:	e119      	b.n	80058e0 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80056b6:	429a      	cmp	r2, r3
 80056b8:	f040 8112 	bne.w	80058e0 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056c2:	69db      	ldr	r3, [r3, #28]
 80056c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056c8:	f040 810a 	bne.w	80058e0 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80056d8:	4619      	mov	r1, r3
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	f000 f91e 	bl	800591c <HAL_UARTEx_RxEventCallback>
      return;
 80056e0:	e0fe      	b.n	80058e0 <HAL_UART_IRQHandler+0x798>
 80056e2:	bf00      	nop
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005730:	b29b      	uxth	r3, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80cf 	beq.w	80058e4 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8005746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80ca 	beq.w	80058e4 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005772:	647b      	str	r3, [r7, #68]	@ 0x44
 8005774:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e4      	bne.n	8005750 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	4b55      	ldr	r3, [pc, #340]	@ (80058f0 <HAL_UART_IRQHandler+0x7a8>)
 800579a:	4013      	ands	r3, r2
 800579c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0310 	bic.w	r3, r3, #16
 80057e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	69b9      	ldr	r1, [r7, #24]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	617b      	str	r3, [r7, #20]
   return(result);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e4      	bne.n	80057d2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800580e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f881 	bl	800591c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800581a:	e063      	b.n	80058e4 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <HAL_UART_IRQHandler+0x6fe>
 8005828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800583c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 f83d 	bl	80068be <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005844:	e051      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d014      	beq.n	800587c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d105      	bne.n	800586a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800586e:	2b00      	cmp	r3, #0
 8005870:	d03a      	beq.n	80058e8 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    }
    return;
 800587a:	e035      	b.n	80058e8 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x754>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 ffe7 	bl	8006868 <UART_EndTransmit_IT>
    return;
 800589a:	e026      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_UART_IRQHandler+0x774>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 f816 	bl	80068e6 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ba:	e016      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d010      	beq.n	80058ea <HAL_UART_IRQHandler+0x7a2>
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da0c      	bge.n	80058ea <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fffe 	bl	80068d2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d6:	e008      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80058d8:	bf00      	nop
 80058da:	e006      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
    return;
 80058dc:	bf00      	nop
 80058de:	e004      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
      return;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_UART_IRQHandler+0x7a2>
    return;
 80058e8:	bf00      	nop
  }
}
 80058ea:	37e8      	adds	r7, #232	@ 0xe8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	effffffe 	.word	0xeffffffe

080058f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005938:	b092      	sub	sp, #72	@ 0x48
 800593a:	af00      	add	r7, sp, #0
 800593c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	431a      	orrs	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	431a      	orrs	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	4313      	orrs	r3, r2
 800595a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4bbe      	ldr	r3, [pc, #760]	@ (8005c5c <UART_SetConfig+0x328>)
 8005964:	4013      	ands	r3, r2
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800596c:	430b      	orrs	r3, r1
 800596e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4ab3      	ldr	r2, [pc, #716]	@ (8005c60 <UART_SetConfig+0x32c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800599c:	4313      	orrs	r3, r2
 800599e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	4baf      	ldr	r3, [pc, #700]	@ (8005c64 <UART_SetConfig+0x330>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	f023 010f 	bic.w	r1, r3, #15
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4aa6      	ldr	r2, [pc, #664]	@ (8005c68 <UART_SetConfig+0x334>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d177      	bne.n	8005ac4 <UART_SetConfig+0x190>
 80059d4:	4ba5      	ldr	r3, [pc, #660]	@ (8005c6c <UART_SetConfig+0x338>)
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059dc:	2b28      	cmp	r3, #40	@ 0x28
 80059de:	d86d      	bhi.n	8005abc <UART_SetConfig+0x188>
 80059e0:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <UART_SetConfig+0xb4>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005abd 	.word	0x08005abd
 80059f0:	08005abd 	.word	0x08005abd
 80059f4:	08005abd 	.word	0x08005abd
 80059f8:	08005abd 	.word	0x08005abd
 80059fc:	08005abd 	.word	0x08005abd
 8005a00:	08005abd 	.word	0x08005abd
 8005a04:	08005abd 	.word	0x08005abd
 8005a08:	08005a95 	.word	0x08005a95
 8005a0c:	08005abd 	.word	0x08005abd
 8005a10:	08005abd 	.word	0x08005abd
 8005a14:	08005abd 	.word	0x08005abd
 8005a18:	08005abd 	.word	0x08005abd
 8005a1c:	08005abd 	.word	0x08005abd
 8005a20:	08005abd 	.word	0x08005abd
 8005a24:	08005abd 	.word	0x08005abd
 8005a28:	08005a9d 	.word	0x08005a9d
 8005a2c:	08005abd 	.word	0x08005abd
 8005a30:	08005abd 	.word	0x08005abd
 8005a34:	08005abd 	.word	0x08005abd
 8005a38:	08005abd 	.word	0x08005abd
 8005a3c:	08005abd 	.word	0x08005abd
 8005a40:	08005abd 	.word	0x08005abd
 8005a44:	08005abd 	.word	0x08005abd
 8005a48:	08005aa5 	.word	0x08005aa5
 8005a4c:	08005abd 	.word	0x08005abd
 8005a50:	08005abd 	.word	0x08005abd
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005abd 	.word	0x08005abd
 8005a5c:	08005abd 	.word	0x08005abd
 8005a60:	08005abd 	.word	0x08005abd
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005abd 	.word	0x08005abd
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005abd 	.word	0x08005abd
 8005a7c:	08005abd 	.word	0x08005abd
 8005a80:	08005abd 	.word	0x08005abd
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e222      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e21e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e21a      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e216      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005aac:	2320      	movs	r3, #32
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e212      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ab4:	2340      	movs	r3, #64	@ 0x40
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e20e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005abc:	2380      	movs	r3, #128	@ 0x80
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e20a      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a69      	ldr	r2, [pc, #420]	@ (8005c70 <UART_SetConfig+0x33c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d130      	bne.n	8005b30 <UART_SetConfig+0x1fc>
 8005ace:	4b67      	ldr	r3, [pc, #412]	@ (8005c6c <UART_SetConfig+0x338>)
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	d826      	bhi.n	8005b28 <UART_SetConfig+0x1f4>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x1ac>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	08005b09 	.word	0x08005b09
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e1ec      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b00:	2304      	movs	r3, #4
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e1e8      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0e:	e1e4      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b10:	2310      	movs	r3, #16
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b16:	e1e0      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b18:	2320      	movs	r3, #32
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1e:	e1dc      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b20:	2340      	movs	r3, #64	@ 0x40
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b26:	e1d8      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b28:	2380      	movs	r3, #128	@ 0x80
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e1d4      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a4f      	ldr	r2, [pc, #316]	@ (8005c74 <UART_SetConfig+0x340>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d130      	bne.n	8005b9c <UART_SetConfig+0x268>
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c6c <UART_SetConfig+0x338>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d826      	bhi.n	8005b94 <UART_SetConfig+0x260>
 8005b46:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <UART_SetConfig+0x218>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b65 	.word	0x08005b65
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6a:	e1b6      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b72:	e1b2      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b74:	2308      	movs	r3, #8
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7a:	e1ae      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b82:	e1aa      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b84:	2320      	movs	r3, #32
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8a:	e1a6      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b8c:	2340      	movs	r3, #64	@ 0x40
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b92:	e1a2      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e19e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a35      	ldr	r2, [pc, #212]	@ (8005c78 <UART_SetConfig+0x344>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d130      	bne.n	8005c08 <UART_SetConfig+0x2d4>
 8005ba6:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <UART_SetConfig+0x338>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d826      	bhi.n	8005c00 <UART_SetConfig+0x2cc>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0x284>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bd1 	.word	0x08005bd1
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	08005be1 	.word	0x08005be1
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e180      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e17c      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e178      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e174      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e170      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005bf8:	2340      	movs	r3, #64	@ 0x40
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e16c      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c00:	2380      	movs	r3, #128	@ 0x80
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e168      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <UART_SetConfig+0x348>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d142      	bne.n	8005c98 <UART_SetConfig+0x364>
 8005c12:	4b16      	ldr	r3, [pc, #88]	@ (8005c6c <UART_SetConfig+0x338>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d838      	bhi.n	8005c90 <UART_SetConfig+0x35c>
 8005c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <UART_SetConfig+0x2f0>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c3d 	.word	0x08005c3d
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	08005c4d 	.word	0x08005c4d
 8005c30:	08005c55 	.word	0x08005c55
 8005c34:	08005c81 	.word	0x08005c81
 8005c38:	08005c89 	.word	0x08005c89
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e14a      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e146      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e142      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e13e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c5c:	cfff69f3 	.word	0xcfff69f3
 8005c60:	58000c00 	.word	0x58000c00
 8005c64:	11fff4ff 	.word	0x11fff4ff
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	40004400 	.word	0x40004400
 8005c74:	40004800 	.word	0x40004800
 8005c78:	40004c00 	.word	0x40004c00
 8005c7c:	40005000 	.word	0x40005000
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e128      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e124      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c90:	2380      	movs	r3, #128	@ 0x80
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e120      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4acb      	ldr	r2, [pc, #812]	@ (8005fcc <UART_SetConfig+0x698>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d176      	bne.n	8005d90 <UART_SetConfig+0x45c>
 8005ca2:	4bcb      	ldr	r3, [pc, #812]	@ (8005fd0 <UART_SetConfig+0x69c>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005caa:	2b28      	cmp	r3, #40	@ 0x28
 8005cac:	d86c      	bhi.n	8005d88 <UART_SetConfig+0x454>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <UART_SetConfig+0x380>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d59 	.word	0x08005d59
 8005cb8:	08005d89 	.word	0x08005d89
 8005cbc:	08005d89 	.word	0x08005d89
 8005cc0:	08005d89 	.word	0x08005d89
 8005cc4:	08005d89 	.word	0x08005d89
 8005cc8:	08005d89 	.word	0x08005d89
 8005ccc:	08005d89 	.word	0x08005d89
 8005cd0:	08005d89 	.word	0x08005d89
 8005cd4:	08005d61 	.word	0x08005d61
 8005cd8:	08005d89 	.word	0x08005d89
 8005cdc:	08005d89 	.word	0x08005d89
 8005ce0:	08005d89 	.word	0x08005d89
 8005ce4:	08005d89 	.word	0x08005d89
 8005ce8:	08005d89 	.word	0x08005d89
 8005cec:	08005d89 	.word	0x08005d89
 8005cf0:	08005d89 	.word	0x08005d89
 8005cf4:	08005d69 	.word	0x08005d69
 8005cf8:	08005d89 	.word	0x08005d89
 8005cfc:	08005d89 	.word	0x08005d89
 8005d00:	08005d89 	.word	0x08005d89
 8005d04:	08005d89 	.word	0x08005d89
 8005d08:	08005d89 	.word	0x08005d89
 8005d0c:	08005d89 	.word	0x08005d89
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d71 	.word	0x08005d71
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	08005d89 	.word	0x08005d89
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d89 	.word	0x08005d89
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005d89 	.word	0x08005d89
 8005d48:	08005d89 	.word	0x08005d89
 8005d4c:	08005d89 	.word	0x08005d89
 8005d50:	08005d89 	.word	0x08005d89
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e0bc      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e0b8      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e0b4      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e0b0      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e0ac      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d80:	2340      	movs	r3, #64	@ 0x40
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e0a8      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d88:	2380      	movs	r3, #128	@ 0x80
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e0a4      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a8f      	ldr	r2, [pc, #572]	@ (8005fd4 <UART_SetConfig+0x6a0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d130      	bne.n	8005dfc <UART_SetConfig+0x4c8>
 8005d9a:	4b8d      	ldr	r3, [pc, #564]	@ (8005fd0 <UART_SetConfig+0x69c>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d826      	bhi.n	8005df4 <UART_SetConfig+0x4c0>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x478>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e086      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e082      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e07e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e07a      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e076      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005dec:	2340      	movs	r3, #64	@ 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e072      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e06e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a75      	ldr	r2, [pc, #468]	@ (8005fd8 <UART_SetConfig+0x6a4>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d130      	bne.n	8005e68 <UART_SetConfig+0x534>
 8005e06:	4b72      	ldr	r3, [pc, #456]	@ (8005fd0 <UART_SetConfig+0x69c>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d826      	bhi.n	8005e60 <UART_SetConfig+0x52c>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <UART_SetConfig+0x4e4>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e31 	.word	0x08005e31
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e41 	.word	0x08005e41
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e050      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e04c      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e048      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e044      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e50:	2320      	movs	r3, #32
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e040      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e58:	2340      	movs	r3, #64	@ 0x40
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e03c      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e60:	2380      	movs	r3, #128	@ 0x80
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e038      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a5b      	ldr	r2, [pc, #364]	@ (8005fdc <UART_SetConfig+0x6a8>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d130      	bne.n	8005ed4 <UART_SetConfig+0x5a0>
 8005e72:	4b57      	ldr	r3, [pc, #348]	@ (8005fd0 <UART_SetConfig+0x69c>)
 8005e74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e76:	f003 0307 	and.w	r3, r3, #7
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d826      	bhi.n	8005ecc <UART_SetConfig+0x598>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <UART_SetConfig+0x550>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005e9d 	.word	0x08005e9d
 8005e88:	08005ea5 	.word	0x08005ea5
 8005e8c:	08005ead 	.word	0x08005ead
 8005e90:	08005eb5 	.word	0x08005eb5
 8005e94:	08005ebd 	.word	0x08005ebd
 8005e98:	08005ec5 	.word	0x08005ec5
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ea2:	e01a      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ea4:	2304      	movs	r3, #4
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eaa:	e016      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005eac:	2308      	movs	r3, #8
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eb2:	e012      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005eb4:	2310      	movs	r3, #16
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eba:	e00e      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ebc:	2320      	movs	r3, #32
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec2:	e00a      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ec4:	2340      	movs	r3, #64	@ 0x40
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eca:	e006      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ecc:	2380      	movs	r3, #128	@ 0x80
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed2:	e002      	b.n	8005eda <UART_SetConfig+0x5a6>
 8005ed4:	2380      	movs	r3, #128	@ 0x80
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a3f      	ldr	r2, [pc, #252]	@ (8005fdc <UART_SetConfig+0x6a8>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f040 80f8 	bne.w	80060d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ee6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005eea:	2b20      	cmp	r3, #32
 8005eec:	dc46      	bgt.n	8005f7c <UART_SetConfig+0x648>
 8005eee:	2b02      	cmp	r3, #2
 8005ef0:	f2c0 8082 	blt.w	8005ff8 <UART_SetConfig+0x6c4>
 8005ef4:	3b02      	subs	r3, #2
 8005ef6:	2b1e      	cmp	r3, #30
 8005ef8:	d87e      	bhi.n	8005ff8 <UART_SetConfig+0x6c4>
 8005efa:	a201      	add	r2, pc, #4	@ (adr r2, 8005f00 <UART_SetConfig+0x5cc>)
 8005efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f00:	08005f83 	.word	0x08005f83
 8005f04:	08005ff9 	.word	0x08005ff9
 8005f08:	08005f8b 	.word	0x08005f8b
 8005f0c:	08005ff9 	.word	0x08005ff9
 8005f10:	08005ff9 	.word	0x08005ff9
 8005f14:	08005ff9 	.word	0x08005ff9
 8005f18:	08005f9b 	.word	0x08005f9b
 8005f1c:	08005ff9 	.word	0x08005ff9
 8005f20:	08005ff9 	.word	0x08005ff9
 8005f24:	08005ff9 	.word	0x08005ff9
 8005f28:	08005ff9 	.word	0x08005ff9
 8005f2c:	08005ff9 	.word	0x08005ff9
 8005f30:	08005ff9 	.word	0x08005ff9
 8005f34:	08005ff9 	.word	0x08005ff9
 8005f38:	08005fab 	.word	0x08005fab
 8005f3c:	08005ff9 	.word	0x08005ff9
 8005f40:	08005ff9 	.word	0x08005ff9
 8005f44:	08005ff9 	.word	0x08005ff9
 8005f48:	08005ff9 	.word	0x08005ff9
 8005f4c:	08005ff9 	.word	0x08005ff9
 8005f50:	08005ff9 	.word	0x08005ff9
 8005f54:	08005ff9 	.word	0x08005ff9
 8005f58:	08005ff9 	.word	0x08005ff9
 8005f5c:	08005ff9 	.word	0x08005ff9
 8005f60:	08005ff9 	.word	0x08005ff9
 8005f64:	08005ff9 	.word	0x08005ff9
 8005f68:	08005ff9 	.word	0x08005ff9
 8005f6c:	08005ff9 	.word	0x08005ff9
 8005f70:	08005ff9 	.word	0x08005ff9
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	08005feb 	.word	0x08005feb
 8005f7c:	2b40      	cmp	r3, #64	@ 0x40
 8005f7e:	d037      	beq.n	8005ff0 <UART_SetConfig+0x6bc>
 8005f80:	e03a      	b.n	8005ff8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005f82:	f7fe fbe1 	bl	8004748 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005f88:	e03c      	b.n	8006004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f7fe fbf0 	bl	8004774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005f98:	e034      	b.n	8006004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f9a:	f107 0318 	add.w	r3, r7, #24
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fd3c 	bl	8004a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fa8:	e02c      	b.n	8006004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005faa:	4b09      	ldr	r3, [pc, #36]	@ (8005fd0 <UART_SetConfig+0x69c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d016      	beq.n	8005fe4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005fb6:	4b06      	ldr	r3, [pc, #24]	@ (8005fd0 <UART_SetConfig+0x69c>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	08db      	lsrs	r3, r3, #3
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	4a07      	ldr	r2, [pc, #28]	@ (8005fe0 <UART_SetConfig+0x6ac>)
 8005fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005fc8:	e01c      	b.n	8006004 <UART_SetConfig+0x6d0>
 8005fca:	bf00      	nop
 8005fcc:	40011400 	.word	0x40011400
 8005fd0:	58024400 	.word	0x58024400
 8005fd4:	40007800 	.word	0x40007800
 8005fd8:	40007c00 	.word	0x40007c00
 8005fdc:	58000c00 	.word	0x58000c00
 8005fe0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005fe4:	4b9d      	ldr	r3, [pc, #628]	@ (800625c <UART_SetConfig+0x928>)
 8005fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fe8:	e00c      	b.n	8006004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005fea:	4b9d      	ldr	r3, [pc, #628]	@ (8006260 <UART_SetConfig+0x92c>)
 8005fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005fee:	e009      	b.n	8006004 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ff0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ff6:	e005      	b.n	8006004 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ffc:	2301      	movs	r3, #1
 8005ffe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006002:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006004:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 81de 	beq.w	80063c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800600c:	697b      	ldr	r3, [r7, #20]
 800600e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006010:	4a94      	ldr	r2, [pc, #592]	@ (8006264 <UART_SetConfig+0x930>)
 8006012:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006016:	461a      	mov	r2, r3
 8006018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601a:	fbb3 f3f2 	udiv	r3, r3, r2
 800601e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	4613      	mov	r3, r2
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	4413      	add	r3, r2
 800602a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800602c:	429a      	cmp	r2, r3
 800602e:	d305      	bcc.n	800603c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006038:	429a      	cmp	r2, r3
 800603a:	d903      	bls.n	8006044 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006042:	e1c1      	b.n	80063c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006044:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006046:	2200      	movs	r2, #0
 8006048:	60bb      	str	r3, [r7, #8]
 800604a:	60fa      	str	r2, [r7, #12]
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006050:	4a84      	ldr	r2, [pc, #528]	@ (8006264 <UART_SetConfig+0x930>)
 8006052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006056:	b29b      	uxth	r3, r3
 8006058:	2200      	movs	r2, #0
 800605a:	603b      	str	r3, [r7, #0]
 800605c:	607a      	str	r2, [r7, #4]
 800605e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006062:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006066:	f7fa f937 	bl	80002d8 <__aeabi_uldivmod>
 800606a:	4602      	mov	r2, r0
 800606c:	460b      	mov	r3, r1
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	f04f 0200 	mov.w	r2, #0
 8006076:	f04f 0300 	mov.w	r3, #0
 800607a:	020b      	lsls	r3, r1, #8
 800607c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006080:	0202      	lsls	r2, r0, #8
 8006082:	6979      	ldr	r1, [r7, #20]
 8006084:	6849      	ldr	r1, [r1, #4]
 8006086:	0849      	lsrs	r1, r1, #1
 8006088:	2000      	movs	r0, #0
 800608a:	460c      	mov	r4, r1
 800608c:	4605      	mov	r5, r0
 800608e:	eb12 0804 	adds.w	r8, r2, r4
 8006092:	eb43 0905 	adc.w	r9, r3, r5
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	2200      	movs	r2, #0
 800609c:	469a      	mov	sl, r3
 800609e:	4693      	mov	fp, r2
 80060a0:	4652      	mov	r2, sl
 80060a2:	465b      	mov	r3, fp
 80060a4:	4640      	mov	r0, r8
 80060a6:	4649      	mov	r1, r9
 80060a8:	f7fa f916 	bl	80002d8 <__aeabi_uldivmod>
 80060ac:	4602      	mov	r2, r0
 80060ae:	460b      	mov	r3, r1
 80060b0:	4613      	mov	r3, r2
 80060b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060ba:	d308      	bcc.n	80060ce <UART_SetConfig+0x79a>
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80060c2:	d204      	bcs.n	80060ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80060ca:	60da      	str	r2, [r3, #12]
 80060cc:	e17c      	b.n	80063c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80060d4:	e178      	b.n	80063c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060de:	f040 80c5 	bne.w	800626c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80060e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060e6:	2b20      	cmp	r3, #32
 80060e8:	dc48      	bgt.n	800617c <UART_SetConfig+0x848>
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	db7b      	blt.n	80061e6 <UART_SetConfig+0x8b2>
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d879      	bhi.n	80061e6 <UART_SetConfig+0x8b2>
 80060f2:	a201      	add	r2, pc, #4	@ (adr r2, 80060f8 <UART_SetConfig+0x7c4>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	08006183 	.word	0x08006183
 80060fc:	0800618b 	.word	0x0800618b
 8006100:	080061e7 	.word	0x080061e7
 8006104:	080061e7 	.word	0x080061e7
 8006108:	08006193 	.word	0x08006193
 800610c:	080061e7 	.word	0x080061e7
 8006110:	080061e7 	.word	0x080061e7
 8006114:	080061e7 	.word	0x080061e7
 8006118:	080061a3 	.word	0x080061a3
 800611c:	080061e7 	.word	0x080061e7
 8006120:	080061e7 	.word	0x080061e7
 8006124:	080061e7 	.word	0x080061e7
 8006128:	080061e7 	.word	0x080061e7
 800612c:	080061e7 	.word	0x080061e7
 8006130:	080061e7 	.word	0x080061e7
 8006134:	080061e7 	.word	0x080061e7
 8006138:	080061b3 	.word	0x080061b3
 800613c:	080061e7 	.word	0x080061e7
 8006140:	080061e7 	.word	0x080061e7
 8006144:	080061e7 	.word	0x080061e7
 8006148:	080061e7 	.word	0x080061e7
 800614c:	080061e7 	.word	0x080061e7
 8006150:	080061e7 	.word	0x080061e7
 8006154:	080061e7 	.word	0x080061e7
 8006158:	080061e7 	.word	0x080061e7
 800615c:	080061e7 	.word	0x080061e7
 8006160:	080061e7 	.word	0x080061e7
 8006164:	080061e7 	.word	0x080061e7
 8006168:	080061e7 	.word	0x080061e7
 800616c:	080061e7 	.word	0x080061e7
 8006170:	080061e7 	.word	0x080061e7
 8006174:	080061e7 	.word	0x080061e7
 8006178:	080061d9 	.word	0x080061d9
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	d02e      	beq.n	80061de <UART_SetConfig+0x8aa>
 8006180:	e031      	b.n	80061e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006182:	f7fd f8ab 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8006186:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006188:	e033      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800618a:	f7fd f8bd 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 800618e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006190:	e02f      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe faec 	bl	8004774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e027      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a2:	f107 0318 	add.w	r3, r7, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fc38 	bl	8004a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b0:	e01f      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b2:	4b2d      	ldr	r3, [pc, #180]	@ (8006268 <UART_SetConfig+0x934>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061be:	4b2a      	ldr	r3, [pc, #168]	@ (8006268 <UART_SetConfig+0x934>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	08db      	lsrs	r3, r3, #3
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	4a24      	ldr	r2, [pc, #144]	@ (800625c <UART_SetConfig+0x928>)
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d0:	e00f      	b.n	80061f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061d2:	4b22      	ldr	r3, [pc, #136]	@ (800625c <UART_SetConfig+0x928>)
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d6:	e00c      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061d8:	4b21      	ldr	r3, [pc, #132]	@ (8006260 <UART_SetConfig+0x92c>)
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e009      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e4:	e005      	b.n	80061f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 80e7 	beq.w	80063c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	4a19      	ldr	r2, [pc, #100]	@ (8006264 <UART_SetConfig+0x930>)
 8006200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006204:	461a      	mov	r2, r3
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	fbb3 f3f2 	udiv	r3, r3, r2
 800620c:	005a      	lsls	r2, r3, #1
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	085b      	lsrs	r3, r3, #1
 8006214:	441a      	add	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	fbb2 f3f3 	udiv	r3, r2, r3
 800621e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006220:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006222:	2b0f      	cmp	r3, #15
 8006224:	d916      	bls.n	8006254 <UART_SetConfig+0x920>
 8006226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006228:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800622c:	d212      	bcs.n	8006254 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800622e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006230:	b29b      	uxth	r3, r3
 8006232:	f023 030f 	bic.w	r3, r3, #15
 8006236:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800623a:	085b      	lsrs	r3, r3, #1
 800623c:	b29b      	uxth	r3, r3
 800623e:	f003 0307 	and.w	r3, r3, #7
 8006242:	b29a      	uxth	r2, r3
 8006244:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006246:	4313      	orrs	r3, r2
 8006248:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006250:	60da      	str	r2, [r3, #12]
 8006252:	e0b9      	b.n	80063c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006254:	2301      	movs	r3, #1
 8006256:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800625a:	e0b5      	b.n	80063c8 <UART_SetConfig+0xa94>
 800625c:	03d09000 	.word	0x03d09000
 8006260:	003d0900 	.word	0x003d0900
 8006264:	08007494 	.word	0x08007494
 8006268:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800626c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006270:	2b20      	cmp	r3, #32
 8006272:	dc49      	bgt.n	8006308 <UART_SetConfig+0x9d4>
 8006274:	2b00      	cmp	r3, #0
 8006276:	db7c      	blt.n	8006372 <UART_SetConfig+0xa3e>
 8006278:	2b20      	cmp	r3, #32
 800627a:	d87a      	bhi.n	8006372 <UART_SetConfig+0xa3e>
 800627c:	a201      	add	r2, pc, #4	@ (adr r2, 8006284 <UART_SetConfig+0x950>)
 800627e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006282:	bf00      	nop
 8006284:	0800630f 	.word	0x0800630f
 8006288:	08006317 	.word	0x08006317
 800628c:	08006373 	.word	0x08006373
 8006290:	08006373 	.word	0x08006373
 8006294:	0800631f 	.word	0x0800631f
 8006298:	08006373 	.word	0x08006373
 800629c:	08006373 	.word	0x08006373
 80062a0:	08006373 	.word	0x08006373
 80062a4:	0800632f 	.word	0x0800632f
 80062a8:	08006373 	.word	0x08006373
 80062ac:	08006373 	.word	0x08006373
 80062b0:	08006373 	.word	0x08006373
 80062b4:	08006373 	.word	0x08006373
 80062b8:	08006373 	.word	0x08006373
 80062bc:	08006373 	.word	0x08006373
 80062c0:	08006373 	.word	0x08006373
 80062c4:	0800633f 	.word	0x0800633f
 80062c8:	08006373 	.word	0x08006373
 80062cc:	08006373 	.word	0x08006373
 80062d0:	08006373 	.word	0x08006373
 80062d4:	08006373 	.word	0x08006373
 80062d8:	08006373 	.word	0x08006373
 80062dc:	08006373 	.word	0x08006373
 80062e0:	08006373 	.word	0x08006373
 80062e4:	08006373 	.word	0x08006373
 80062e8:	08006373 	.word	0x08006373
 80062ec:	08006373 	.word	0x08006373
 80062f0:	08006373 	.word	0x08006373
 80062f4:	08006373 	.word	0x08006373
 80062f8:	08006373 	.word	0x08006373
 80062fc:	08006373 	.word	0x08006373
 8006300:	08006373 	.word	0x08006373
 8006304:	08006365 	.word	0x08006365
 8006308:	2b40      	cmp	r3, #64	@ 0x40
 800630a:	d02e      	beq.n	800636a <UART_SetConfig+0xa36>
 800630c:	e031      	b.n	8006372 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800630e:	f7fc ffe5 	bl	80032dc <HAL_RCC_GetPCLK1Freq>
 8006312:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006314:	e033      	b.n	800637e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006316:	f7fc fff7 	bl	8003308 <HAL_RCC_GetPCLK2Freq>
 800631a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800631c:	e02f      	b.n	800637e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800631e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fa26 	bl	8004774 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800632c:	e027      	b.n	800637e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800632e:	f107 0318 	add.w	r3, r7, #24
 8006332:	4618      	mov	r0, r3
 8006334:	f7fe fb72 	bl	8004a1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800633c:	e01f      	b.n	800637e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800633e:	4b2d      	ldr	r3, [pc, #180]	@ (80063f4 <UART_SetConfig+0xac0>)
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f003 0320 	and.w	r3, r3, #32
 8006346:	2b00      	cmp	r3, #0
 8006348:	d009      	beq.n	800635e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800634a:	4b2a      	ldr	r3, [pc, #168]	@ (80063f4 <UART_SetConfig+0xac0>)
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	08db      	lsrs	r3, r3, #3
 8006350:	f003 0303 	and.w	r3, r3, #3
 8006354:	4a28      	ldr	r2, [pc, #160]	@ (80063f8 <UART_SetConfig+0xac4>)
 8006356:	fa22 f303 	lsr.w	r3, r2, r3
 800635a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800635c:	e00f      	b.n	800637e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800635e:	4b26      	ldr	r3, [pc, #152]	@ (80063f8 <UART_SetConfig+0xac4>)
 8006360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006362:	e00c      	b.n	800637e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006364:	4b25      	ldr	r3, [pc, #148]	@ (80063fc <UART_SetConfig+0xac8>)
 8006366:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006368:	e009      	b.n	800637e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800636a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800636e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006370:	e005      	b.n	800637e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006372:	2300      	movs	r3, #0
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800637c:	bf00      	nop
    }

    if (pclk != 0U)
 800637e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006380:	2b00      	cmp	r3, #0
 8006382:	d021      	beq.n	80063c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	4a1d      	ldr	r2, [pc, #116]	@ (8006400 <UART_SetConfig+0xacc>)
 800638a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800638e:	461a      	mov	r2, r3
 8006390:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006392:	fbb3 f2f2 	udiv	r2, r3, r2
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	085b      	lsrs	r3, r3, #1
 800639c:	441a      	add	r2, r3
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80063a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063aa:	2b0f      	cmp	r3, #15
 80063ac:	d909      	bls.n	80063c2 <UART_SetConfig+0xa8e>
 80063ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063b4:	d205      	bcs.n	80063c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	b29a      	uxth	r2, r3
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	60da      	str	r2, [r3, #12]
 80063c0:	e002      	b.n	80063c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80063c2:	2301      	movs	r3, #1
 80063c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2200      	movs	r2, #0
 80063dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80063e4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3748      	adds	r7, #72	@ 0x48
 80063ec:	46bd      	mov	sp, r7
 80063ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063f2:	bf00      	nop
 80063f4:	58024400 	.word	0x58024400
 80063f8:	03d09000 	.word	0x03d09000
 80063fc:	003d0900 	.word	0x003d0900
 8006400:	08007494 	.word	0x08007494

08006404 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006410:	f003 0308 	and.w	r3, r3, #8
 8006414:	2b00      	cmp	r3, #0
 8006416:	d00a      	beq.n	800642e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	430a      	orrs	r2, r1
 800642c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006432:	f003 0301 	and.w	r3, r3, #1
 8006436:	2b00      	cmp	r3, #0
 8006438:	d00a      	beq.n	8006450 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	685b      	ldr	r3, [r3, #4]
 8006440:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	430a      	orrs	r2, r1
 800644e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006454:	f003 0302 	and.w	r3, r3, #2
 8006458:	2b00      	cmp	r3, #0
 800645a:	d00a      	beq.n	8006472 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	430a      	orrs	r2, r1
 8006470:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006476:	f003 0304 	and.w	r3, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00a      	beq.n	8006494 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006498:	f003 0310 	and.w	r3, r3, #16
 800649c:	2b00      	cmp	r3, #0
 800649e:	d00a      	beq.n	80064b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	689b      	ldr	r3, [r3, #8]
 80064a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00a      	beq.n	80064d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	430a      	orrs	r2, r1
 80064d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01a      	beq.n	800651a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	430a      	orrs	r2, r1
 80064f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006502:	d10a      	bne.n	800651a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	430a      	orrs	r2, r1
 8006518:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	430a      	orrs	r2, r1
 800653a:	605a      	str	r2, [r3, #4]
  }
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b098      	sub	sp, #96	@ 0x60
 800654c:	af02      	add	r7, sp, #8
 800654e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006558:	f7fa fd54 	bl	8001004 <HAL_GetTick>
 800655c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b08      	cmp	r3, #8
 800656a:	d12f      	bne.n	80065cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800656c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006570:	9300      	str	r3, [sp, #0]
 8006572:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006574:	2200      	movs	r2, #0
 8006576:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f000 f88e 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 8006580:	4603      	mov	r3, r0
 8006582:	2b00      	cmp	r3, #0
 8006584:	d022      	beq.n	80065cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658e:	e853 3f00 	ldrex	r3, [r3]
 8006592:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006596:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800659a:	653b      	str	r3, [r7, #80]	@ 0x50
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80065a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ac:	e841 2300 	strex	r3, r2, [r1]
 80065b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1e6      	bne.n	8006586 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2220      	movs	r2, #32
 80065bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065c8:	2303      	movs	r3, #3
 80065ca:	e063      	b.n	8006694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0304 	and.w	r3, r3, #4
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d149      	bne.n	800666e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80065e2:	2200      	movs	r2, #0
 80065e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f000 f857 	bl	800669c <UART_WaitOnFlagUntilTimeout>
 80065ee:	4603      	mov	r3, r0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d03c      	beq.n	800666e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fc:	e853 3f00 	ldrex	r3, [r3]
 8006600:	623b      	str	r3, [r7, #32]
   return(result);
 8006602:	6a3b      	ldr	r3, [r7, #32]
 8006604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006612:	633b      	str	r3, [r7, #48]	@ 0x30
 8006614:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006618:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006622:	2b00      	cmp	r3, #0
 8006624:	d1e6      	bne.n	80065f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3308      	adds	r3, #8
 800662c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	e853 3f00 	ldrex	r3, [r3]
 8006634:	60fb      	str	r3, [r7, #12]
   return(result);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f023 0301 	bic.w	r3, r3, #1
 800663c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	3308      	adds	r3, #8
 8006644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006646:	61fa      	str	r2, [r7, #28]
 8006648:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664a:	69b9      	ldr	r1, [r7, #24]
 800664c:	69fa      	ldr	r2, [r7, #28]
 800664e:	e841 2300 	strex	r3, r2, [r1]
 8006652:	617b      	str	r3, [r7, #20]
   return(result);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d1e5      	bne.n	8006626 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2220      	movs	r2, #32
 800665e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2200      	movs	r2, #0
 8006666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800666a:	2303      	movs	r3, #3
 800666c:	e012      	b.n	8006694 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2220      	movs	r2, #32
 8006672:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2220      	movs	r2, #32
 800667a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3758      	adds	r7, #88	@ 0x58
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4613      	mov	r3, r2
 80066aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ac:	e04f      	b.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b4:	d04b      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066b6:	f7fa fca5 	bl	8001004 <HAL_GetTick>
 80066ba:	4602      	mov	r2, r0
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	1ad3      	subs	r3, r2, r3
 80066c0:	69ba      	ldr	r2, [r7, #24]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d302      	bcc.n	80066cc <UART_WaitOnFlagUntilTimeout+0x30>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e04e      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0304 	and.w	r3, r3, #4
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d037      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	2b80      	cmp	r3, #128	@ 0x80
 80066e2:	d034      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d031      	beq.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f003 0308 	and.w	r3, r3, #8
 80066f4:	2b08      	cmp	r3, #8
 80066f6:	d110      	bne.n	800671a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	2208      	movs	r2, #8
 80066fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006700:	68f8      	ldr	r0, [r7, #12]
 8006702:	f000 f839 	bl	8006778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2208      	movs	r2, #8
 800670a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006716:	2301      	movs	r3, #1
 8006718:	e029      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006724:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006728:	d111      	bne.n	800674e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006732:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f000 f81f 	bl	8006778 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e00f      	b.n	800676e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	69da      	ldr	r2, [r3, #28]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	4013      	ands	r3, r2
 8006758:	68ba      	ldr	r2, [r7, #8]
 800675a:	429a      	cmp	r2, r3
 800675c:	bf0c      	ite	eq
 800675e:	2301      	moveq	r3, #1
 8006760:	2300      	movne	r3, #0
 8006762:	b2db      	uxtb	r3, r3
 8006764:	461a      	mov	r2, r3
 8006766:	79fb      	ldrb	r3, [r7, #7]
 8006768:	429a      	cmp	r2, r3
 800676a:	d0a0      	beq.n	80066ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}
	...

08006778 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006778:	b480      	push	{r7}
 800677a:	b095      	sub	sp, #84	@ 0x54
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006788:	e853 3f00 	ldrex	r3, [r3]
 800678c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800678e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006790:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006794:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	461a      	mov	r2, r3
 800679c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800679e:	643b      	str	r3, [r7, #64]	@ 0x40
 80067a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80067a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80067ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e6      	bne.n	8006780 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3308      	adds	r3, #8
 80067b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ba:	6a3b      	ldr	r3, [r7, #32]
 80067bc:	e853 3f00 	ldrex	r3, [r3]
 80067c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80067c2:	69fa      	ldr	r2, [r7, #28]
 80067c4:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <UART_EndRxTransfer+0xc8>)
 80067c6:	4013      	ands	r3, r2
 80067c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3308      	adds	r3, #8
 80067d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80067d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80067d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80067d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80067da:	e841 2300 	strex	r3, r2, [r1]
 80067de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80067e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1e5      	bne.n	80067b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80067ea:	2b01      	cmp	r3, #1
 80067ec:	d118      	bne.n	8006820 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	f023 0310 	bic.w	r3, r3, #16
 8006802:	647b      	str	r3, [r7, #68]	@ 0x44
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800680c:	61bb      	str	r3, [r7, #24]
 800680e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6979      	ldr	r1, [r7, #20]
 8006812:	69ba      	ldr	r2, [r7, #24]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	613b      	str	r3, [r7, #16]
   return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006834:	bf00      	nop
 8006836:	3754      	adds	r7, #84	@ 0x54
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	effffffe 	.word	0xeffffffe

08006844 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006850:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2200      	movs	r2, #0
 8006856:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800685a:	68f8      	ldr	r0, [r7, #12]
 800685c:	f7ff f854 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b088      	sub	sp, #32
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	e853 3f00 	ldrex	r3, [r3]
 800687c:	60bb      	str	r3, [r7, #8]
   return(result);
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006884:	61fb      	str	r3, [r7, #28]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	461a      	mov	r2, r3
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	61bb      	str	r3, [r7, #24]
 8006890:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006892:	6979      	ldr	r1, [r7, #20]
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	e841 2300 	strex	r3, r2, [r1]
 800689a:	613b      	str	r3, [r7, #16]
   return(result);
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1e6      	bne.n	8006870 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2220      	movs	r2, #32
 80068a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f7ff f81f 	bl	80058f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068b6:	bf00      	nop
 80068b8:	3720      	adds	r7, #32
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}

080068be <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80068e6:	b480      	push	{r7}
 80068e8:	b083      	sub	sp, #12
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80068ee:	bf00      	nop
 80068f0:	370c      	adds	r7, #12
 80068f2:	46bd      	mov	sp, r7
 80068f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f8:	4770      	bx	lr

080068fa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80068fa:	b480      	push	{r7}
 80068fc:	b085      	sub	sp, #20
 80068fe:	af00      	add	r7, sp, #0
 8006900:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_UARTEx_DisableFifoMode+0x16>
 800690c:	2302      	movs	r3, #2
 800690e:	e027      	b.n	8006960 <HAL_UARTEx_DisableFifoMode+0x66>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2224      	movs	r2, #36	@ 0x24
 800691c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f022 0201 	bic.w	r2, r2, #1
 8006936:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800693e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2220      	movs	r2, #32
 8006952:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2200      	movs	r2, #0
 800695a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3714      	adds	r7, #20
 8006964:	46bd      	mov	sp, r7
 8006966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696a:	4770      	bx	lr

0800696c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b084      	sub	sp, #16
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
 8006974:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800697c:	2b01      	cmp	r3, #1
 800697e:	d101      	bne.n	8006984 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006980:	2302      	movs	r3, #2
 8006982:	e02d      	b.n	80069e0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2224      	movs	r2, #36	@ 0x24
 8006990:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f022 0201 	bic.w	r2, r2, #1
 80069aa:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	683a      	ldr	r2, [r7, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f84f 	bl	8006a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	68fa      	ldr	r2, [r7, #12]
 80069cc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2220      	movs	r2, #32
 80069d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
 80069f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d101      	bne.n	8006a00 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80069fc:	2302      	movs	r3, #2
 80069fe:	e02d      	b.n	8006a5c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2224      	movs	r2, #36	@ 0x24
 8006a0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0201 	bic.w	r2, r2, #1
 8006a26:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	683a      	ldr	r2, [r7, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 f811 	bl	8006a64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2220      	movs	r2, #32
 8006a4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d108      	bne.n	8006a86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a84:	e031      	b.n	8006aea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a86:	2310      	movs	r3, #16
 8006a88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a8a:	2310      	movs	r3, #16
 8006a8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	0e5b      	lsrs	r3, r3, #25
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	f003 0307 	and.w	r3, r3, #7
 8006a9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689b      	ldr	r3, [r3, #8]
 8006aa4:	0f5b      	lsrs	r3, r3, #29
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	f003 0307 	and.w	r3, r3, #7
 8006aac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	7b3a      	ldrb	r2, [r7, #12]
 8006ab2:	4911      	ldr	r1, [pc, #68]	@ (8006af8 <UARTEx_SetNbDataToProcess+0x94>)
 8006ab4:	5c8a      	ldrb	r2, [r1, r2]
 8006ab6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aba:	7b3a      	ldrb	r2, [r7, #12]
 8006abc:	490f      	ldr	r1, [pc, #60]	@ (8006afc <UARTEx_SetNbDataToProcess+0x98>)
 8006abe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ac0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ac4:	b29a      	uxth	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	7b7a      	ldrb	r2, [r7, #13]
 8006ad0:	4909      	ldr	r1, [pc, #36]	@ (8006af8 <UARTEx_SetNbDataToProcess+0x94>)
 8006ad2:	5c8a      	ldrb	r2, [r1, r2]
 8006ad4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006ad8:	7b7a      	ldrb	r2, [r7, #13]
 8006ada:	4908      	ldr	r1, [pc, #32]	@ (8006afc <UARTEx_SetNbDataToProcess+0x98>)
 8006adc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ade:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ae2:	b29a      	uxth	r2, r3
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006aea:	bf00      	nop
 8006aec:	3714      	adds	r7, #20
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	080074ac 	.word	0x080074ac
 8006afc:	080074b4 	.word	0x080074b4

08006b00 <std>:
 8006b00:	2300      	movs	r3, #0
 8006b02:	b510      	push	{r4, lr}
 8006b04:	4604      	mov	r4, r0
 8006b06:	e9c0 3300 	strd	r3, r3, [r0]
 8006b0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b0e:	6083      	str	r3, [r0, #8]
 8006b10:	8181      	strh	r1, [r0, #12]
 8006b12:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b14:	81c2      	strh	r2, [r0, #14]
 8006b16:	6183      	str	r3, [r0, #24]
 8006b18:	4619      	mov	r1, r3
 8006b1a:	2208      	movs	r2, #8
 8006b1c:	305c      	adds	r0, #92	@ 0x5c
 8006b1e:	f000 f9e7 	bl	8006ef0 <memset>
 8006b22:	4b0d      	ldr	r3, [pc, #52]	@ (8006b58 <std+0x58>)
 8006b24:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b26:	4b0d      	ldr	r3, [pc, #52]	@ (8006b5c <std+0x5c>)
 8006b28:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b60 <std+0x60>)
 8006b2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b2e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b64 <std+0x64>)
 8006b30:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <std+0x68>)
 8006b34:	6224      	str	r4, [r4, #32]
 8006b36:	429c      	cmp	r4, r3
 8006b38:	d006      	beq.n	8006b48 <std+0x48>
 8006b3a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b3e:	4294      	cmp	r4, r2
 8006b40:	d002      	beq.n	8006b48 <std+0x48>
 8006b42:	33d0      	adds	r3, #208	@ 0xd0
 8006b44:	429c      	cmp	r4, r3
 8006b46:	d105      	bne.n	8006b54 <std+0x54>
 8006b48:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b50:	f000 ba46 	b.w	8006fe0 <__retarget_lock_init_recursive>
 8006b54:	bd10      	pop	{r4, pc}
 8006b56:	bf00      	nop
 8006b58:	08006d41 	.word	0x08006d41
 8006b5c:	08006d63 	.word	0x08006d63
 8006b60:	08006d9b 	.word	0x08006d9b
 8006b64:	08006dbf 	.word	0x08006dbf
 8006b68:	24000134 	.word	0x24000134

08006b6c <stdio_exit_handler>:
 8006b6c:	4a02      	ldr	r2, [pc, #8]	@ (8006b78 <stdio_exit_handler+0xc>)
 8006b6e:	4903      	ldr	r1, [pc, #12]	@ (8006b7c <stdio_exit_handler+0x10>)
 8006b70:	4803      	ldr	r0, [pc, #12]	@ (8006b80 <stdio_exit_handler+0x14>)
 8006b72:	f000 b869 	b.w	8006c48 <_fwalk_sglue>
 8006b76:	bf00      	nop
 8006b78:	24000010 	.word	0x24000010
 8006b7c:	080072e1 	.word	0x080072e1
 8006b80:	24000020 	.word	0x24000020

08006b84 <cleanup_stdio>:
 8006b84:	6841      	ldr	r1, [r0, #4]
 8006b86:	4b0c      	ldr	r3, [pc, #48]	@ (8006bb8 <cleanup_stdio+0x34>)
 8006b88:	4299      	cmp	r1, r3
 8006b8a:	b510      	push	{r4, lr}
 8006b8c:	4604      	mov	r4, r0
 8006b8e:	d001      	beq.n	8006b94 <cleanup_stdio+0x10>
 8006b90:	f000 fba6 	bl	80072e0 <_fflush_r>
 8006b94:	68a1      	ldr	r1, [r4, #8]
 8006b96:	4b09      	ldr	r3, [pc, #36]	@ (8006bbc <cleanup_stdio+0x38>)
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	d002      	beq.n	8006ba2 <cleanup_stdio+0x1e>
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 fb9f 	bl	80072e0 <_fflush_r>
 8006ba2:	68e1      	ldr	r1, [r4, #12]
 8006ba4:	4b06      	ldr	r3, [pc, #24]	@ (8006bc0 <cleanup_stdio+0x3c>)
 8006ba6:	4299      	cmp	r1, r3
 8006ba8:	d004      	beq.n	8006bb4 <cleanup_stdio+0x30>
 8006baa:	4620      	mov	r0, r4
 8006bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bb0:	f000 bb96 	b.w	80072e0 <_fflush_r>
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	bf00      	nop
 8006bb8:	24000134 	.word	0x24000134
 8006bbc:	2400019c 	.word	0x2400019c
 8006bc0:	24000204 	.word	0x24000204

08006bc4 <global_stdio_init.part.0>:
 8006bc4:	b510      	push	{r4, lr}
 8006bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8006bf4 <global_stdio_init.part.0+0x30>)
 8006bc8:	4c0b      	ldr	r4, [pc, #44]	@ (8006bf8 <global_stdio_init.part.0+0x34>)
 8006bca:	4a0c      	ldr	r2, [pc, #48]	@ (8006bfc <global_stdio_init.part.0+0x38>)
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	4620      	mov	r0, r4
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	2104      	movs	r1, #4
 8006bd4:	f7ff ff94 	bl	8006b00 <std>
 8006bd8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bdc:	2201      	movs	r2, #1
 8006bde:	2109      	movs	r1, #9
 8006be0:	f7ff ff8e 	bl	8006b00 <std>
 8006be4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006be8:	2202      	movs	r2, #2
 8006bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bee:	2112      	movs	r1, #18
 8006bf0:	f7ff bf86 	b.w	8006b00 <std>
 8006bf4:	2400026c 	.word	0x2400026c
 8006bf8:	24000134 	.word	0x24000134
 8006bfc:	08006b6d 	.word	0x08006b6d

08006c00 <__sfp_lock_acquire>:
 8006c00:	4801      	ldr	r0, [pc, #4]	@ (8006c08 <__sfp_lock_acquire+0x8>)
 8006c02:	f000 b9ee 	b.w	8006fe2 <__retarget_lock_acquire_recursive>
 8006c06:	bf00      	nop
 8006c08:	24000275 	.word	0x24000275

08006c0c <__sfp_lock_release>:
 8006c0c:	4801      	ldr	r0, [pc, #4]	@ (8006c14 <__sfp_lock_release+0x8>)
 8006c0e:	f000 b9e9 	b.w	8006fe4 <__retarget_lock_release_recursive>
 8006c12:	bf00      	nop
 8006c14:	24000275 	.word	0x24000275

08006c18 <__sinit>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	4604      	mov	r4, r0
 8006c1c:	f7ff fff0 	bl	8006c00 <__sfp_lock_acquire>
 8006c20:	6a23      	ldr	r3, [r4, #32]
 8006c22:	b11b      	cbz	r3, 8006c2c <__sinit+0x14>
 8006c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c28:	f7ff bff0 	b.w	8006c0c <__sfp_lock_release>
 8006c2c:	4b04      	ldr	r3, [pc, #16]	@ (8006c40 <__sinit+0x28>)
 8006c2e:	6223      	str	r3, [r4, #32]
 8006c30:	4b04      	ldr	r3, [pc, #16]	@ (8006c44 <__sinit+0x2c>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1f5      	bne.n	8006c24 <__sinit+0xc>
 8006c38:	f7ff ffc4 	bl	8006bc4 <global_stdio_init.part.0>
 8006c3c:	e7f2      	b.n	8006c24 <__sinit+0xc>
 8006c3e:	bf00      	nop
 8006c40:	08006b85 	.word	0x08006b85
 8006c44:	2400026c 	.word	0x2400026c

08006c48 <_fwalk_sglue>:
 8006c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c4c:	4607      	mov	r7, r0
 8006c4e:	4688      	mov	r8, r1
 8006c50:	4614      	mov	r4, r2
 8006c52:	2600      	movs	r6, #0
 8006c54:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c58:	f1b9 0901 	subs.w	r9, r9, #1
 8006c5c:	d505      	bpl.n	8006c6a <_fwalk_sglue+0x22>
 8006c5e:	6824      	ldr	r4, [r4, #0]
 8006c60:	2c00      	cmp	r4, #0
 8006c62:	d1f7      	bne.n	8006c54 <_fwalk_sglue+0xc>
 8006c64:	4630      	mov	r0, r6
 8006c66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c6a:	89ab      	ldrh	r3, [r5, #12]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d907      	bls.n	8006c80 <_fwalk_sglue+0x38>
 8006c70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c74:	3301      	adds	r3, #1
 8006c76:	d003      	beq.n	8006c80 <_fwalk_sglue+0x38>
 8006c78:	4629      	mov	r1, r5
 8006c7a:	4638      	mov	r0, r7
 8006c7c:	47c0      	blx	r8
 8006c7e:	4306      	orrs	r6, r0
 8006c80:	3568      	adds	r5, #104	@ 0x68
 8006c82:	e7e9      	b.n	8006c58 <_fwalk_sglue+0x10>

08006c84 <_puts_r>:
 8006c84:	6a03      	ldr	r3, [r0, #32]
 8006c86:	b570      	push	{r4, r5, r6, lr}
 8006c88:	6884      	ldr	r4, [r0, #8]
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	460e      	mov	r6, r1
 8006c8e:	b90b      	cbnz	r3, 8006c94 <_puts_r+0x10>
 8006c90:	f7ff ffc2 	bl	8006c18 <__sinit>
 8006c94:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006c96:	07db      	lsls	r3, r3, #31
 8006c98:	d405      	bmi.n	8006ca6 <_puts_r+0x22>
 8006c9a:	89a3      	ldrh	r3, [r4, #12]
 8006c9c:	0598      	lsls	r0, r3, #22
 8006c9e:	d402      	bmi.n	8006ca6 <_puts_r+0x22>
 8006ca0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ca2:	f000 f99e 	bl	8006fe2 <__retarget_lock_acquire_recursive>
 8006ca6:	89a3      	ldrh	r3, [r4, #12]
 8006ca8:	0719      	lsls	r1, r3, #28
 8006caa:	d502      	bpl.n	8006cb2 <_puts_r+0x2e>
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d135      	bne.n	8006d1e <_puts_r+0x9a>
 8006cb2:	4621      	mov	r1, r4
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	f000 f8c5 	bl	8006e44 <__swsetup_r>
 8006cba:	b380      	cbz	r0, 8006d1e <_puts_r+0x9a>
 8006cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8006cc0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cc2:	07da      	lsls	r2, r3, #31
 8006cc4:	d405      	bmi.n	8006cd2 <_puts_r+0x4e>
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	059b      	lsls	r3, r3, #22
 8006cca:	d402      	bmi.n	8006cd2 <_puts_r+0x4e>
 8006ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cce:	f000 f989 	bl	8006fe4 <__retarget_lock_release_recursive>
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	bd70      	pop	{r4, r5, r6, pc}
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	da04      	bge.n	8006ce4 <_puts_r+0x60>
 8006cda:	69a2      	ldr	r2, [r4, #24]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	dc17      	bgt.n	8006d10 <_puts_r+0x8c>
 8006ce0:	290a      	cmp	r1, #10
 8006ce2:	d015      	beq.n	8006d10 <_puts_r+0x8c>
 8006ce4:	6823      	ldr	r3, [r4, #0]
 8006ce6:	1c5a      	adds	r2, r3, #1
 8006ce8:	6022      	str	r2, [r4, #0]
 8006cea:	7019      	strb	r1, [r3, #0]
 8006cec:	68a3      	ldr	r3, [r4, #8]
 8006cee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cf2:	3b01      	subs	r3, #1
 8006cf4:	60a3      	str	r3, [r4, #8]
 8006cf6:	2900      	cmp	r1, #0
 8006cf8:	d1ed      	bne.n	8006cd6 <_puts_r+0x52>
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	da11      	bge.n	8006d22 <_puts_r+0x9e>
 8006cfe:	4622      	mov	r2, r4
 8006d00:	210a      	movs	r1, #10
 8006d02:	4628      	mov	r0, r5
 8006d04:	f000 f85f 	bl	8006dc6 <__swbuf_r>
 8006d08:	3001      	adds	r0, #1
 8006d0a:	d0d7      	beq.n	8006cbc <_puts_r+0x38>
 8006d0c:	250a      	movs	r5, #10
 8006d0e:	e7d7      	b.n	8006cc0 <_puts_r+0x3c>
 8006d10:	4622      	mov	r2, r4
 8006d12:	4628      	mov	r0, r5
 8006d14:	f000 f857 	bl	8006dc6 <__swbuf_r>
 8006d18:	3001      	adds	r0, #1
 8006d1a:	d1e7      	bne.n	8006cec <_puts_r+0x68>
 8006d1c:	e7ce      	b.n	8006cbc <_puts_r+0x38>
 8006d1e:	3e01      	subs	r6, #1
 8006d20:	e7e4      	b.n	8006cec <_puts_r+0x68>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	220a      	movs	r2, #10
 8006d2a:	701a      	strb	r2, [r3, #0]
 8006d2c:	e7ee      	b.n	8006d0c <_puts_r+0x88>
	...

08006d30 <puts>:
 8006d30:	4b02      	ldr	r3, [pc, #8]	@ (8006d3c <puts+0xc>)
 8006d32:	4601      	mov	r1, r0
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f7ff bfa5 	b.w	8006c84 <_puts_r>
 8006d3a:	bf00      	nop
 8006d3c:	2400001c 	.word	0x2400001c

08006d40 <__sread>:
 8006d40:	b510      	push	{r4, lr}
 8006d42:	460c      	mov	r4, r1
 8006d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d48:	f000 f8fc 	bl	8006f44 <_read_r>
 8006d4c:	2800      	cmp	r0, #0
 8006d4e:	bfab      	itete	ge
 8006d50:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d52:	89a3      	ldrhlt	r3, [r4, #12]
 8006d54:	181b      	addge	r3, r3, r0
 8006d56:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d5a:	bfac      	ite	ge
 8006d5c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d5e:	81a3      	strhlt	r3, [r4, #12]
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <__swrite>:
 8006d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d66:	461f      	mov	r7, r3
 8006d68:	898b      	ldrh	r3, [r1, #12]
 8006d6a:	05db      	lsls	r3, r3, #23
 8006d6c:	4605      	mov	r5, r0
 8006d6e:	460c      	mov	r4, r1
 8006d70:	4616      	mov	r6, r2
 8006d72:	d505      	bpl.n	8006d80 <__swrite+0x1e>
 8006d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d78:	2302      	movs	r3, #2
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	f000 f8d0 	bl	8006f20 <_lseek_r>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d86:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	463b      	mov	r3, r7
 8006d90:	4628      	mov	r0, r5
 8006d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d96:	f000 b8e7 	b.w	8006f68 <_write_r>

08006d9a <__sseek>:
 8006d9a:	b510      	push	{r4, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006da2:	f000 f8bd 	bl	8006f20 <_lseek_r>
 8006da6:	1c43      	adds	r3, r0, #1
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	bf15      	itete	ne
 8006dac:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006db2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006db6:	81a3      	strheq	r3, [r4, #12]
 8006db8:	bf18      	it	ne
 8006dba:	81a3      	strhne	r3, [r4, #12]
 8006dbc:	bd10      	pop	{r4, pc}

08006dbe <__sclose>:
 8006dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc2:	f000 b89d 	b.w	8006f00 <_close_r>

08006dc6 <__swbuf_r>:
 8006dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dc8:	460e      	mov	r6, r1
 8006dca:	4614      	mov	r4, r2
 8006dcc:	4605      	mov	r5, r0
 8006dce:	b118      	cbz	r0, 8006dd8 <__swbuf_r+0x12>
 8006dd0:	6a03      	ldr	r3, [r0, #32]
 8006dd2:	b90b      	cbnz	r3, 8006dd8 <__swbuf_r+0x12>
 8006dd4:	f7ff ff20 	bl	8006c18 <__sinit>
 8006dd8:	69a3      	ldr	r3, [r4, #24]
 8006dda:	60a3      	str	r3, [r4, #8]
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	071a      	lsls	r2, r3, #28
 8006de0:	d501      	bpl.n	8006de6 <__swbuf_r+0x20>
 8006de2:	6923      	ldr	r3, [r4, #16]
 8006de4:	b943      	cbnz	r3, 8006df8 <__swbuf_r+0x32>
 8006de6:	4621      	mov	r1, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 f82b 	bl	8006e44 <__swsetup_r>
 8006dee:	b118      	cbz	r0, 8006df8 <__swbuf_r+0x32>
 8006df0:	f04f 37ff 	mov.w	r7, #4294967295
 8006df4:	4638      	mov	r0, r7
 8006df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006df8:	6823      	ldr	r3, [r4, #0]
 8006dfa:	6922      	ldr	r2, [r4, #16]
 8006dfc:	1a98      	subs	r0, r3, r2
 8006dfe:	6963      	ldr	r3, [r4, #20]
 8006e00:	b2f6      	uxtb	r6, r6
 8006e02:	4283      	cmp	r3, r0
 8006e04:	4637      	mov	r7, r6
 8006e06:	dc05      	bgt.n	8006e14 <__swbuf_r+0x4e>
 8006e08:	4621      	mov	r1, r4
 8006e0a:	4628      	mov	r0, r5
 8006e0c:	f000 fa68 	bl	80072e0 <_fflush_r>
 8006e10:	2800      	cmp	r0, #0
 8006e12:	d1ed      	bne.n	8006df0 <__swbuf_r+0x2a>
 8006e14:	68a3      	ldr	r3, [r4, #8]
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60a3      	str	r3, [r4, #8]
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	1c5a      	adds	r2, r3, #1
 8006e1e:	6022      	str	r2, [r4, #0]
 8006e20:	701e      	strb	r6, [r3, #0]
 8006e22:	6962      	ldr	r2, [r4, #20]
 8006e24:	1c43      	adds	r3, r0, #1
 8006e26:	429a      	cmp	r2, r3
 8006e28:	d004      	beq.n	8006e34 <__swbuf_r+0x6e>
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	07db      	lsls	r3, r3, #31
 8006e2e:	d5e1      	bpl.n	8006df4 <__swbuf_r+0x2e>
 8006e30:	2e0a      	cmp	r6, #10
 8006e32:	d1df      	bne.n	8006df4 <__swbuf_r+0x2e>
 8006e34:	4621      	mov	r1, r4
 8006e36:	4628      	mov	r0, r5
 8006e38:	f000 fa52 	bl	80072e0 <_fflush_r>
 8006e3c:	2800      	cmp	r0, #0
 8006e3e:	d0d9      	beq.n	8006df4 <__swbuf_r+0x2e>
 8006e40:	e7d6      	b.n	8006df0 <__swbuf_r+0x2a>
	...

08006e44 <__swsetup_r>:
 8006e44:	b538      	push	{r3, r4, r5, lr}
 8006e46:	4b29      	ldr	r3, [pc, #164]	@ (8006eec <__swsetup_r+0xa8>)
 8006e48:	4605      	mov	r5, r0
 8006e4a:	6818      	ldr	r0, [r3, #0]
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	b118      	cbz	r0, 8006e58 <__swsetup_r+0x14>
 8006e50:	6a03      	ldr	r3, [r0, #32]
 8006e52:	b90b      	cbnz	r3, 8006e58 <__swsetup_r+0x14>
 8006e54:	f7ff fee0 	bl	8006c18 <__sinit>
 8006e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5c:	0719      	lsls	r1, r3, #28
 8006e5e:	d422      	bmi.n	8006ea6 <__swsetup_r+0x62>
 8006e60:	06da      	lsls	r2, r3, #27
 8006e62:	d407      	bmi.n	8006e74 <__swsetup_r+0x30>
 8006e64:	2209      	movs	r2, #9
 8006e66:	602a      	str	r2, [r5, #0]
 8006e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e6c:	81a3      	strh	r3, [r4, #12]
 8006e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e72:	e033      	b.n	8006edc <__swsetup_r+0x98>
 8006e74:	0758      	lsls	r0, r3, #29
 8006e76:	d512      	bpl.n	8006e9e <__swsetup_r+0x5a>
 8006e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e7a:	b141      	cbz	r1, 8006e8e <__swsetup_r+0x4a>
 8006e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e80:	4299      	cmp	r1, r3
 8006e82:	d002      	beq.n	8006e8a <__swsetup_r+0x46>
 8006e84:	4628      	mov	r0, r5
 8006e86:	f000 f8af 	bl	8006fe8 <_free_r>
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e94:	81a3      	strh	r3, [r4, #12]
 8006e96:	2300      	movs	r3, #0
 8006e98:	6063      	str	r3, [r4, #4]
 8006e9a:	6923      	ldr	r3, [r4, #16]
 8006e9c:	6023      	str	r3, [r4, #0]
 8006e9e:	89a3      	ldrh	r3, [r4, #12]
 8006ea0:	f043 0308 	orr.w	r3, r3, #8
 8006ea4:	81a3      	strh	r3, [r4, #12]
 8006ea6:	6923      	ldr	r3, [r4, #16]
 8006ea8:	b94b      	cbnz	r3, 8006ebe <__swsetup_r+0x7a>
 8006eaa:	89a3      	ldrh	r3, [r4, #12]
 8006eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006eb4:	d003      	beq.n	8006ebe <__swsetup_r+0x7a>
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fa5f 	bl	800737c <__smakebuf_r>
 8006ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ec2:	f013 0201 	ands.w	r2, r3, #1
 8006ec6:	d00a      	beq.n	8006ede <__swsetup_r+0x9a>
 8006ec8:	2200      	movs	r2, #0
 8006eca:	60a2      	str	r2, [r4, #8]
 8006ecc:	6962      	ldr	r2, [r4, #20]
 8006ece:	4252      	negs	r2, r2
 8006ed0:	61a2      	str	r2, [r4, #24]
 8006ed2:	6922      	ldr	r2, [r4, #16]
 8006ed4:	b942      	cbnz	r2, 8006ee8 <__swsetup_r+0xa4>
 8006ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006eda:	d1c5      	bne.n	8006e68 <__swsetup_r+0x24>
 8006edc:	bd38      	pop	{r3, r4, r5, pc}
 8006ede:	0799      	lsls	r1, r3, #30
 8006ee0:	bf58      	it	pl
 8006ee2:	6962      	ldrpl	r2, [r4, #20]
 8006ee4:	60a2      	str	r2, [r4, #8]
 8006ee6:	e7f4      	b.n	8006ed2 <__swsetup_r+0x8e>
 8006ee8:	2000      	movs	r0, #0
 8006eea:	e7f7      	b.n	8006edc <__swsetup_r+0x98>
 8006eec:	2400001c 	.word	0x2400001c

08006ef0 <memset>:
 8006ef0:	4402      	add	r2, r0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d100      	bne.n	8006efa <memset+0xa>
 8006ef8:	4770      	bx	lr
 8006efa:	f803 1b01 	strb.w	r1, [r3], #1
 8006efe:	e7f9      	b.n	8006ef4 <memset+0x4>

08006f00 <_close_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	4d06      	ldr	r5, [pc, #24]	@ (8006f1c <_close_r+0x1c>)
 8006f04:	2300      	movs	r3, #0
 8006f06:	4604      	mov	r4, r0
 8006f08:	4608      	mov	r0, r1
 8006f0a:	602b      	str	r3, [r5, #0]
 8006f0c:	f7f9 fdd5 	bl	8000aba <_close>
 8006f10:	1c43      	adds	r3, r0, #1
 8006f12:	d102      	bne.n	8006f1a <_close_r+0x1a>
 8006f14:	682b      	ldr	r3, [r5, #0]
 8006f16:	b103      	cbz	r3, 8006f1a <_close_r+0x1a>
 8006f18:	6023      	str	r3, [r4, #0]
 8006f1a:	bd38      	pop	{r3, r4, r5, pc}
 8006f1c:	24000270 	.word	0x24000270

08006f20 <_lseek_r>:
 8006f20:	b538      	push	{r3, r4, r5, lr}
 8006f22:	4d07      	ldr	r5, [pc, #28]	@ (8006f40 <_lseek_r+0x20>)
 8006f24:	4604      	mov	r4, r0
 8006f26:	4608      	mov	r0, r1
 8006f28:	4611      	mov	r1, r2
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	602a      	str	r2, [r5, #0]
 8006f2e:	461a      	mov	r2, r3
 8006f30:	f7f9 fdea 	bl	8000b08 <_lseek>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d102      	bne.n	8006f3e <_lseek_r+0x1e>
 8006f38:	682b      	ldr	r3, [r5, #0]
 8006f3a:	b103      	cbz	r3, 8006f3e <_lseek_r+0x1e>
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	bd38      	pop	{r3, r4, r5, pc}
 8006f40:	24000270 	.word	0x24000270

08006f44 <_read_r>:
 8006f44:	b538      	push	{r3, r4, r5, lr}
 8006f46:	4d07      	ldr	r5, [pc, #28]	@ (8006f64 <_read_r+0x20>)
 8006f48:	4604      	mov	r4, r0
 8006f4a:	4608      	mov	r0, r1
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	2200      	movs	r2, #0
 8006f50:	602a      	str	r2, [r5, #0]
 8006f52:	461a      	mov	r2, r3
 8006f54:	f7f9 fd78 	bl	8000a48 <_read>
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	d102      	bne.n	8006f62 <_read_r+0x1e>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b103      	cbz	r3, 8006f62 <_read_r+0x1e>
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	bd38      	pop	{r3, r4, r5, pc}
 8006f64:	24000270 	.word	0x24000270

08006f68 <_write_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d07      	ldr	r5, [pc, #28]	@ (8006f88 <_write_r+0x20>)
 8006f6c:	4604      	mov	r4, r0
 8006f6e:	4608      	mov	r0, r1
 8006f70:	4611      	mov	r1, r2
 8006f72:	2200      	movs	r2, #0
 8006f74:	602a      	str	r2, [r5, #0]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f7f9 fd83 	bl	8000a82 <_write>
 8006f7c:	1c43      	adds	r3, r0, #1
 8006f7e:	d102      	bne.n	8006f86 <_write_r+0x1e>
 8006f80:	682b      	ldr	r3, [r5, #0]
 8006f82:	b103      	cbz	r3, 8006f86 <_write_r+0x1e>
 8006f84:	6023      	str	r3, [r4, #0]
 8006f86:	bd38      	pop	{r3, r4, r5, pc}
 8006f88:	24000270 	.word	0x24000270

08006f8c <__errno>:
 8006f8c:	4b01      	ldr	r3, [pc, #4]	@ (8006f94 <__errno+0x8>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2400001c 	.word	0x2400001c

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8006fd0 <__libc_init_array+0x38>)
 8006f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8006fd4 <__libc_init_array+0x3c>)
 8006f9e:	1b64      	subs	r4, r4, r5
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	2600      	movs	r6, #0
 8006fa4:	42a6      	cmp	r6, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8006fd8 <__libc_init_array+0x40>)
 8006faa:	4c0c      	ldr	r4, [pc, #48]	@ (8006fdc <__libc_init_array+0x44>)
 8006fac:	f000 fa54 	bl	8007458 <_init>
 8006fb0:	1b64      	subs	r4, r4, r5
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	2600      	movs	r6, #0
 8006fb6:	42a6      	cmp	r6, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc0:	4798      	blx	r3
 8006fc2:	3601      	adds	r6, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fca:	4798      	blx	r3
 8006fcc:	3601      	adds	r6, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	080074c4 	.word	0x080074c4
 8006fd4:	080074c4 	.word	0x080074c4
 8006fd8:	080074c4 	.word	0x080074c4
 8006fdc:	080074c8 	.word	0x080074c8

08006fe0 <__retarget_lock_init_recursive>:
 8006fe0:	4770      	bx	lr

08006fe2 <__retarget_lock_acquire_recursive>:
 8006fe2:	4770      	bx	lr

08006fe4 <__retarget_lock_release_recursive>:
 8006fe4:	4770      	bx	lr
	...

08006fe8 <_free_r>:
 8006fe8:	b538      	push	{r3, r4, r5, lr}
 8006fea:	4605      	mov	r5, r0
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d041      	beq.n	8007074 <_free_r+0x8c>
 8006ff0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ff4:	1f0c      	subs	r4, r1, #4
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	bfb8      	it	lt
 8006ffa:	18e4      	addlt	r4, r4, r3
 8006ffc:	f000 f8e0 	bl	80071c0 <__malloc_lock>
 8007000:	4a1d      	ldr	r2, [pc, #116]	@ (8007078 <_free_r+0x90>)
 8007002:	6813      	ldr	r3, [r2, #0]
 8007004:	b933      	cbnz	r3, 8007014 <_free_r+0x2c>
 8007006:	6063      	str	r3, [r4, #4]
 8007008:	6014      	str	r4, [r2, #0]
 800700a:	4628      	mov	r0, r5
 800700c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007010:	f000 b8dc 	b.w	80071cc <__malloc_unlock>
 8007014:	42a3      	cmp	r3, r4
 8007016:	d908      	bls.n	800702a <_free_r+0x42>
 8007018:	6820      	ldr	r0, [r4, #0]
 800701a:	1821      	adds	r1, r4, r0
 800701c:	428b      	cmp	r3, r1
 800701e:	bf01      	itttt	eq
 8007020:	6819      	ldreq	r1, [r3, #0]
 8007022:	685b      	ldreq	r3, [r3, #4]
 8007024:	1809      	addeq	r1, r1, r0
 8007026:	6021      	streq	r1, [r4, #0]
 8007028:	e7ed      	b.n	8007006 <_free_r+0x1e>
 800702a:	461a      	mov	r2, r3
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	b10b      	cbz	r3, 8007034 <_free_r+0x4c>
 8007030:	42a3      	cmp	r3, r4
 8007032:	d9fa      	bls.n	800702a <_free_r+0x42>
 8007034:	6811      	ldr	r1, [r2, #0]
 8007036:	1850      	adds	r0, r2, r1
 8007038:	42a0      	cmp	r0, r4
 800703a:	d10b      	bne.n	8007054 <_free_r+0x6c>
 800703c:	6820      	ldr	r0, [r4, #0]
 800703e:	4401      	add	r1, r0
 8007040:	1850      	adds	r0, r2, r1
 8007042:	4283      	cmp	r3, r0
 8007044:	6011      	str	r1, [r2, #0]
 8007046:	d1e0      	bne.n	800700a <_free_r+0x22>
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	6053      	str	r3, [r2, #4]
 800704e:	4408      	add	r0, r1
 8007050:	6010      	str	r0, [r2, #0]
 8007052:	e7da      	b.n	800700a <_free_r+0x22>
 8007054:	d902      	bls.n	800705c <_free_r+0x74>
 8007056:	230c      	movs	r3, #12
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	e7d6      	b.n	800700a <_free_r+0x22>
 800705c:	6820      	ldr	r0, [r4, #0]
 800705e:	1821      	adds	r1, r4, r0
 8007060:	428b      	cmp	r3, r1
 8007062:	bf04      	itt	eq
 8007064:	6819      	ldreq	r1, [r3, #0]
 8007066:	685b      	ldreq	r3, [r3, #4]
 8007068:	6063      	str	r3, [r4, #4]
 800706a:	bf04      	itt	eq
 800706c:	1809      	addeq	r1, r1, r0
 800706e:	6021      	streq	r1, [r4, #0]
 8007070:	6054      	str	r4, [r2, #4]
 8007072:	e7ca      	b.n	800700a <_free_r+0x22>
 8007074:	bd38      	pop	{r3, r4, r5, pc}
 8007076:	bf00      	nop
 8007078:	2400027c 	.word	0x2400027c

0800707c <sbrk_aligned>:
 800707c:	b570      	push	{r4, r5, r6, lr}
 800707e:	4e0f      	ldr	r6, [pc, #60]	@ (80070bc <sbrk_aligned+0x40>)
 8007080:	460c      	mov	r4, r1
 8007082:	6831      	ldr	r1, [r6, #0]
 8007084:	4605      	mov	r5, r0
 8007086:	b911      	cbnz	r1, 800708e <sbrk_aligned+0x12>
 8007088:	f000 f9d6 	bl	8007438 <_sbrk_r>
 800708c:	6030      	str	r0, [r6, #0]
 800708e:	4621      	mov	r1, r4
 8007090:	4628      	mov	r0, r5
 8007092:	f000 f9d1 	bl	8007438 <_sbrk_r>
 8007096:	1c43      	adds	r3, r0, #1
 8007098:	d103      	bne.n	80070a2 <sbrk_aligned+0x26>
 800709a:	f04f 34ff 	mov.w	r4, #4294967295
 800709e:	4620      	mov	r0, r4
 80070a0:	bd70      	pop	{r4, r5, r6, pc}
 80070a2:	1cc4      	adds	r4, r0, #3
 80070a4:	f024 0403 	bic.w	r4, r4, #3
 80070a8:	42a0      	cmp	r0, r4
 80070aa:	d0f8      	beq.n	800709e <sbrk_aligned+0x22>
 80070ac:	1a21      	subs	r1, r4, r0
 80070ae:	4628      	mov	r0, r5
 80070b0:	f000 f9c2 	bl	8007438 <_sbrk_r>
 80070b4:	3001      	adds	r0, #1
 80070b6:	d1f2      	bne.n	800709e <sbrk_aligned+0x22>
 80070b8:	e7ef      	b.n	800709a <sbrk_aligned+0x1e>
 80070ba:	bf00      	nop
 80070bc:	24000278 	.word	0x24000278

080070c0 <_malloc_r>:
 80070c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070c4:	1ccd      	adds	r5, r1, #3
 80070c6:	f025 0503 	bic.w	r5, r5, #3
 80070ca:	3508      	adds	r5, #8
 80070cc:	2d0c      	cmp	r5, #12
 80070ce:	bf38      	it	cc
 80070d0:	250c      	movcc	r5, #12
 80070d2:	2d00      	cmp	r5, #0
 80070d4:	4606      	mov	r6, r0
 80070d6:	db01      	blt.n	80070dc <_malloc_r+0x1c>
 80070d8:	42a9      	cmp	r1, r5
 80070da:	d904      	bls.n	80070e6 <_malloc_r+0x26>
 80070dc:	230c      	movs	r3, #12
 80070de:	6033      	str	r3, [r6, #0]
 80070e0:	2000      	movs	r0, #0
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071bc <_malloc_r+0xfc>
 80070ea:	f000 f869 	bl	80071c0 <__malloc_lock>
 80070ee:	f8d8 3000 	ldr.w	r3, [r8]
 80070f2:	461c      	mov	r4, r3
 80070f4:	bb44      	cbnz	r4, 8007148 <_malloc_r+0x88>
 80070f6:	4629      	mov	r1, r5
 80070f8:	4630      	mov	r0, r6
 80070fa:	f7ff ffbf 	bl	800707c <sbrk_aligned>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	4604      	mov	r4, r0
 8007102:	d158      	bne.n	80071b6 <_malloc_r+0xf6>
 8007104:	f8d8 4000 	ldr.w	r4, [r8]
 8007108:	4627      	mov	r7, r4
 800710a:	2f00      	cmp	r7, #0
 800710c:	d143      	bne.n	8007196 <_malloc_r+0xd6>
 800710e:	2c00      	cmp	r4, #0
 8007110:	d04b      	beq.n	80071aa <_malloc_r+0xea>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	4639      	mov	r1, r7
 8007116:	4630      	mov	r0, r6
 8007118:	eb04 0903 	add.w	r9, r4, r3
 800711c:	f000 f98c 	bl	8007438 <_sbrk_r>
 8007120:	4581      	cmp	r9, r0
 8007122:	d142      	bne.n	80071aa <_malloc_r+0xea>
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	1a6d      	subs	r5, r5, r1
 8007128:	4629      	mov	r1, r5
 800712a:	4630      	mov	r0, r6
 800712c:	f7ff ffa6 	bl	800707c <sbrk_aligned>
 8007130:	3001      	adds	r0, #1
 8007132:	d03a      	beq.n	80071aa <_malloc_r+0xea>
 8007134:	6823      	ldr	r3, [r4, #0]
 8007136:	442b      	add	r3, r5
 8007138:	6023      	str	r3, [r4, #0]
 800713a:	f8d8 3000 	ldr.w	r3, [r8]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	bb62      	cbnz	r2, 800719c <_malloc_r+0xdc>
 8007142:	f8c8 7000 	str.w	r7, [r8]
 8007146:	e00f      	b.n	8007168 <_malloc_r+0xa8>
 8007148:	6822      	ldr	r2, [r4, #0]
 800714a:	1b52      	subs	r2, r2, r5
 800714c:	d420      	bmi.n	8007190 <_malloc_r+0xd0>
 800714e:	2a0b      	cmp	r2, #11
 8007150:	d917      	bls.n	8007182 <_malloc_r+0xc2>
 8007152:	1961      	adds	r1, r4, r5
 8007154:	42a3      	cmp	r3, r4
 8007156:	6025      	str	r5, [r4, #0]
 8007158:	bf18      	it	ne
 800715a:	6059      	strne	r1, [r3, #4]
 800715c:	6863      	ldr	r3, [r4, #4]
 800715e:	bf08      	it	eq
 8007160:	f8c8 1000 	streq.w	r1, [r8]
 8007164:	5162      	str	r2, [r4, r5]
 8007166:	604b      	str	r3, [r1, #4]
 8007168:	4630      	mov	r0, r6
 800716a:	f000 f82f 	bl	80071cc <__malloc_unlock>
 800716e:	f104 000b 	add.w	r0, r4, #11
 8007172:	1d23      	adds	r3, r4, #4
 8007174:	f020 0007 	bic.w	r0, r0, #7
 8007178:	1ac2      	subs	r2, r0, r3
 800717a:	bf1c      	itt	ne
 800717c:	1a1b      	subne	r3, r3, r0
 800717e:	50a3      	strne	r3, [r4, r2]
 8007180:	e7af      	b.n	80070e2 <_malloc_r+0x22>
 8007182:	6862      	ldr	r2, [r4, #4]
 8007184:	42a3      	cmp	r3, r4
 8007186:	bf0c      	ite	eq
 8007188:	f8c8 2000 	streq.w	r2, [r8]
 800718c:	605a      	strne	r2, [r3, #4]
 800718e:	e7eb      	b.n	8007168 <_malloc_r+0xa8>
 8007190:	4623      	mov	r3, r4
 8007192:	6864      	ldr	r4, [r4, #4]
 8007194:	e7ae      	b.n	80070f4 <_malloc_r+0x34>
 8007196:	463c      	mov	r4, r7
 8007198:	687f      	ldr	r7, [r7, #4]
 800719a:	e7b6      	b.n	800710a <_malloc_r+0x4a>
 800719c:	461a      	mov	r2, r3
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	42a3      	cmp	r3, r4
 80071a2:	d1fb      	bne.n	800719c <_malloc_r+0xdc>
 80071a4:	2300      	movs	r3, #0
 80071a6:	6053      	str	r3, [r2, #4]
 80071a8:	e7de      	b.n	8007168 <_malloc_r+0xa8>
 80071aa:	230c      	movs	r3, #12
 80071ac:	6033      	str	r3, [r6, #0]
 80071ae:	4630      	mov	r0, r6
 80071b0:	f000 f80c 	bl	80071cc <__malloc_unlock>
 80071b4:	e794      	b.n	80070e0 <_malloc_r+0x20>
 80071b6:	6005      	str	r5, [r0, #0]
 80071b8:	e7d6      	b.n	8007168 <_malloc_r+0xa8>
 80071ba:	bf00      	nop
 80071bc:	2400027c 	.word	0x2400027c

080071c0 <__malloc_lock>:
 80071c0:	4801      	ldr	r0, [pc, #4]	@ (80071c8 <__malloc_lock+0x8>)
 80071c2:	f7ff bf0e 	b.w	8006fe2 <__retarget_lock_acquire_recursive>
 80071c6:	bf00      	nop
 80071c8:	24000274 	.word	0x24000274

080071cc <__malloc_unlock>:
 80071cc:	4801      	ldr	r0, [pc, #4]	@ (80071d4 <__malloc_unlock+0x8>)
 80071ce:	f7ff bf09 	b.w	8006fe4 <__retarget_lock_release_recursive>
 80071d2:	bf00      	nop
 80071d4:	24000274 	.word	0x24000274

080071d8 <__sflush_r>:
 80071d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e0:	0716      	lsls	r6, r2, #28
 80071e2:	4605      	mov	r5, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	d454      	bmi.n	8007292 <__sflush_r+0xba>
 80071e8:	684b      	ldr	r3, [r1, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	dc02      	bgt.n	80071f4 <__sflush_r+0x1c>
 80071ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	dd48      	ble.n	8007286 <__sflush_r+0xae>
 80071f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071f6:	2e00      	cmp	r6, #0
 80071f8:	d045      	beq.n	8007286 <__sflush_r+0xae>
 80071fa:	2300      	movs	r3, #0
 80071fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007200:	682f      	ldr	r7, [r5, #0]
 8007202:	6a21      	ldr	r1, [r4, #32]
 8007204:	602b      	str	r3, [r5, #0]
 8007206:	d030      	beq.n	800726a <__sflush_r+0x92>
 8007208:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	0759      	lsls	r1, r3, #29
 800720e:	d505      	bpl.n	800721c <__sflush_r+0x44>
 8007210:	6863      	ldr	r3, [r4, #4]
 8007212:	1ad2      	subs	r2, r2, r3
 8007214:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007216:	b10b      	cbz	r3, 800721c <__sflush_r+0x44>
 8007218:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800721a:	1ad2      	subs	r2, r2, r3
 800721c:	2300      	movs	r3, #0
 800721e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007220:	6a21      	ldr	r1, [r4, #32]
 8007222:	4628      	mov	r0, r5
 8007224:	47b0      	blx	r6
 8007226:	1c43      	adds	r3, r0, #1
 8007228:	89a3      	ldrh	r3, [r4, #12]
 800722a:	d106      	bne.n	800723a <__sflush_r+0x62>
 800722c:	6829      	ldr	r1, [r5, #0]
 800722e:	291d      	cmp	r1, #29
 8007230:	d82b      	bhi.n	800728a <__sflush_r+0xb2>
 8007232:	4a2a      	ldr	r2, [pc, #168]	@ (80072dc <__sflush_r+0x104>)
 8007234:	40ca      	lsrs	r2, r1
 8007236:	07d6      	lsls	r6, r2, #31
 8007238:	d527      	bpl.n	800728a <__sflush_r+0xb2>
 800723a:	2200      	movs	r2, #0
 800723c:	6062      	str	r2, [r4, #4]
 800723e:	04d9      	lsls	r1, r3, #19
 8007240:	6922      	ldr	r2, [r4, #16]
 8007242:	6022      	str	r2, [r4, #0]
 8007244:	d504      	bpl.n	8007250 <__sflush_r+0x78>
 8007246:	1c42      	adds	r2, r0, #1
 8007248:	d101      	bne.n	800724e <__sflush_r+0x76>
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	b903      	cbnz	r3, 8007250 <__sflush_r+0x78>
 800724e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007250:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007252:	602f      	str	r7, [r5, #0]
 8007254:	b1b9      	cbz	r1, 8007286 <__sflush_r+0xae>
 8007256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800725a:	4299      	cmp	r1, r3
 800725c:	d002      	beq.n	8007264 <__sflush_r+0x8c>
 800725e:	4628      	mov	r0, r5
 8007260:	f7ff fec2 	bl	8006fe8 <_free_r>
 8007264:	2300      	movs	r3, #0
 8007266:	6363      	str	r3, [r4, #52]	@ 0x34
 8007268:	e00d      	b.n	8007286 <__sflush_r+0xae>
 800726a:	2301      	movs	r3, #1
 800726c:	4628      	mov	r0, r5
 800726e:	47b0      	blx	r6
 8007270:	4602      	mov	r2, r0
 8007272:	1c50      	adds	r0, r2, #1
 8007274:	d1c9      	bne.n	800720a <__sflush_r+0x32>
 8007276:	682b      	ldr	r3, [r5, #0]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0c6      	beq.n	800720a <__sflush_r+0x32>
 800727c:	2b1d      	cmp	r3, #29
 800727e:	d001      	beq.n	8007284 <__sflush_r+0xac>
 8007280:	2b16      	cmp	r3, #22
 8007282:	d11e      	bne.n	80072c2 <__sflush_r+0xea>
 8007284:	602f      	str	r7, [r5, #0]
 8007286:	2000      	movs	r0, #0
 8007288:	e022      	b.n	80072d0 <__sflush_r+0xf8>
 800728a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800728e:	b21b      	sxth	r3, r3
 8007290:	e01b      	b.n	80072ca <__sflush_r+0xf2>
 8007292:	690f      	ldr	r7, [r1, #16]
 8007294:	2f00      	cmp	r7, #0
 8007296:	d0f6      	beq.n	8007286 <__sflush_r+0xae>
 8007298:	0793      	lsls	r3, r2, #30
 800729a:	680e      	ldr	r6, [r1, #0]
 800729c:	bf08      	it	eq
 800729e:	694b      	ldreq	r3, [r1, #20]
 80072a0:	600f      	str	r7, [r1, #0]
 80072a2:	bf18      	it	ne
 80072a4:	2300      	movne	r3, #0
 80072a6:	eba6 0807 	sub.w	r8, r6, r7
 80072aa:	608b      	str	r3, [r1, #8]
 80072ac:	f1b8 0f00 	cmp.w	r8, #0
 80072b0:	dde9      	ble.n	8007286 <__sflush_r+0xae>
 80072b2:	6a21      	ldr	r1, [r4, #32]
 80072b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80072b6:	4643      	mov	r3, r8
 80072b8:	463a      	mov	r2, r7
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b0      	blx	r6
 80072be:	2800      	cmp	r0, #0
 80072c0:	dc08      	bgt.n	80072d4 <__sflush_r+0xfc>
 80072c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80072ca:	81a3      	strh	r3, [r4, #12]
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072d4:	4407      	add	r7, r0
 80072d6:	eba8 0800 	sub.w	r8, r8, r0
 80072da:	e7e7      	b.n	80072ac <__sflush_r+0xd4>
 80072dc:	20400001 	.word	0x20400001

080072e0 <_fflush_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	690b      	ldr	r3, [r1, #16]
 80072e4:	4605      	mov	r5, r0
 80072e6:	460c      	mov	r4, r1
 80072e8:	b913      	cbnz	r3, 80072f0 <_fflush_r+0x10>
 80072ea:	2500      	movs	r5, #0
 80072ec:	4628      	mov	r0, r5
 80072ee:	bd38      	pop	{r3, r4, r5, pc}
 80072f0:	b118      	cbz	r0, 80072fa <_fflush_r+0x1a>
 80072f2:	6a03      	ldr	r3, [r0, #32]
 80072f4:	b90b      	cbnz	r3, 80072fa <_fflush_r+0x1a>
 80072f6:	f7ff fc8f 	bl	8006c18 <__sinit>
 80072fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d0f3      	beq.n	80072ea <_fflush_r+0xa>
 8007302:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007304:	07d0      	lsls	r0, r2, #31
 8007306:	d404      	bmi.n	8007312 <_fflush_r+0x32>
 8007308:	0599      	lsls	r1, r3, #22
 800730a:	d402      	bmi.n	8007312 <_fflush_r+0x32>
 800730c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800730e:	f7ff fe68 	bl	8006fe2 <__retarget_lock_acquire_recursive>
 8007312:	4628      	mov	r0, r5
 8007314:	4621      	mov	r1, r4
 8007316:	f7ff ff5f 	bl	80071d8 <__sflush_r>
 800731a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800731c:	07da      	lsls	r2, r3, #31
 800731e:	4605      	mov	r5, r0
 8007320:	d4e4      	bmi.n	80072ec <_fflush_r+0xc>
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	059b      	lsls	r3, r3, #22
 8007326:	d4e1      	bmi.n	80072ec <_fflush_r+0xc>
 8007328:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800732a:	f7ff fe5b 	bl	8006fe4 <__retarget_lock_release_recursive>
 800732e:	e7dd      	b.n	80072ec <_fflush_r+0xc>

08007330 <__swhatbuf_r>:
 8007330:	b570      	push	{r4, r5, r6, lr}
 8007332:	460c      	mov	r4, r1
 8007334:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007338:	2900      	cmp	r1, #0
 800733a:	b096      	sub	sp, #88	@ 0x58
 800733c:	4615      	mov	r5, r2
 800733e:	461e      	mov	r6, r3
 8007340:	da0d      	bge.n	800735e <__swhatbuf_r+0x2e>
 8007342:	89a3      	ldrh	r3, [r4, #12]
 8007344:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007348:	f04f 0100 	mov.w	r1, #0
 800734c:	bf14      	ite	ne
 800734e:	2340      	movne	r3, #64	@ 0x40
 8007350:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007354:	2000      	movs	r0, #0
 8007356:	6031      	str	r1, [r6, #0]
 8007358:	602b      	str	r3, [r5, #0]
 800735a:	b016      	add	sp, #88	@ 0x58
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	466a      	mov	r2, sp
 8007360:	f000 f848 	bl	80073f4 <_fstat_r>
 8007364:	2800      	cmp	r0, #0
 8007366:	dbec      	blt.n	8007342 <__swhatbuf_r+0x12>
 8007368:	9901      	ldr	r1, [sp, #4]
 800736a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800736e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007372:	4259      	negs	r1, r3
 8007374:	4159      	adcs	r1, r3
 8007376:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800737a:	e7eb      	b.n	8007354 <__swhatbuf_r+0x24>

0800737c <__smakebuf_r>:
 800737c:	898b      	ldrh	r3, [r1, #12]
 800737e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007380:	079d      	lsls	r5, r3, #30
 8007382:	4606      	mov	r6, r0
 8007384:	460c      	mov	r4, r1
 8007386:	d507      	bpl.n	8007398 <__smakebuf_r+0x1c>
 8007388:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	2301      	movs	r3, #1
 8007392:	6163      	str	r3, [r4, #20]
 8007394:	b003      	add	sp, #12
 8007396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007398:	ab01      	add	r3, sp, #4
 800739a:	466a      	mov	r2, sp
 800739c:	f7ff ffc8 	bl	8007330 <__swhatbuf_r>
 80073a0:	9f00      	ldr	r7, [sp, #0]
 80073a2:	4605      	mov	r5, r0
 80073a4:	4639      	mov	r1, r7
 80073a6:	4630      	mov	r0, r6
 80073a8:	f7ff fe8a 	bl	80070c0 <_malloc_r>
 80073ac:	b948      	cbnz	r0, 80073c2 <__smakebuf_r+0x46>
 80073ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b2:	059a      	lsls	r2, r3, #22
 80073b4:	d4ee      	bmi.n	8007394 <__smakebuf_r+0x18>
 80073b6:	f023 0303 	bic.w	r3, r3, #3
 80073ba:	f043 0302 	orr.w	r3, r3, #2
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	e7e2      	b.n	8007388 <__smakebuf_r+0xc>
 80073c2:	89a3      	ldrh	r3, [r4, #12]
 80073c4:	6020      	str	r0, [r4, #0]
 80073c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	9b01      	ldr	r3, [sp, #4]
 80073ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80073d2:	b15b      	cbz	r3, 80073ec <__smakebuf_r+0x70>
 80073d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073d8:	4630      	mov	r0, r6
 80073da:	f000 f81d 	bl	8007418 <_isatty_r>
 80073de:	b128      	cbz	r0, 80073ec <__smakebuf_r+0x70>
 80073e0:	89a3      	ldrh	r3, [r4, #12]
 80073e2:	f023 0303 	bic.w	r3, r3, #3
 80073e6:	f043 0301 	orr.w	r3, r3, #1
 80073ea:	81a3      	strh	r3, [r4, #12]
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	431d      	orrs	r5, r3
 80073f0:	81a5      	strh	r5, [r4, #12]
 80073f2:	e7cf      	b.n	8007394 <__smakebuf_r+0x18>

080073f4 <_fstat_r>:
 80073f4:	b538      	push	{r3, r4, r5, lr}
 80073f6:	4d07      	ldr	r5, [pc, #28]	@ (8007414 <_fstat_r+0x20>)
 80073f8:	2300      	movs	r3, #0
 80073fa:	4604      	mov	r4, r0
 80073fc:	4608      	mov	r0, r1
 80073fe:	4611      	mov	r1, r2
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	f7f9 fb66 	bl	8000ad2 <_fstat>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d102      	bne.n	8007410 <_fstat_r+0x1c>
 800740a:	682b      	ldr	r3, [r5, #0]
 800740c:	b103      	cbz	r3, 8007410 <_fstat_r+0x1c>
 800740e:	6023      	str	r3, [r4, #0]
 8007410:	bd38      	pop	{r3, r4, r5, pc}
 8007412:	bf00      	nop
 8007414:	24000270 	.word	0x24000270

08007418 <_isatty_r>:
 8007418:	b538      	push	{r3, r4, r5, lr}
 800741a:	4d06      	ldr	r5, [pc, #24]	@ (8007434 <_isatty_r+0x1c>)
 800741c:	2300      	movs	r3, #0
 800741e:	4604      	mov	r4, r0
 8007420:	4608      	mov	r0, r1
 8007422:	602b      	str	r3, [r5, #0]
 8007424:	f7f9 fb65 	bl	8000af2 <_isatty>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d102      	bne.n	8007432 <_isatty_r+0x1a>
 800742c:	682b      	ldr	r3, [r5, #0]
 800742e:	b103      	cbz	r3, 8007432 <_isatty_r+0x1a>
 8007430:	6023      	str	r3, [r4, #0]
 8007432:	bd38      	pop	{r3, r4, r5, pc}
 8007434:	24000270 	.word	0x24000270

08007438 <_sbrk_r>:
 8007438:	b538      	push	{r3, r4, r5, lr}
 800743a:	4d06      	ldr	r5, [pc, #24]	@ (8007454 <_sbrk_r+0x1c>)
 800743c:	2300      	movs	r3, #0
 800743e:	4604      	mov	r4, r0
 8007440:	4608      	mov	r0, r1
 8007442:	602b      	str	r3, [r5, #0]
 8007444:	f7f9 fb6e 	bl	8000b24 <_sbrk>
 8007448:	1c43      	adds	r3, r0, #1
 800744a:	d102      	bne.n	8007452 <_sbrk_r+0x1a>
 800744c:	682b      	ldr	r3, [r5, #0]
 800744e:	b103      	cbz	r3, 8007452 <_sbrk_r+0x1a>
 8007450:	6023      	str	r3, [r4, #0]
 8007452:	bd38      	pop	{r3, r4, r5, pc}
 8007454:	24000270 	.word	0x24000270

08007458 <_init>:
 8007458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745a:	bf00      	nop
 800745c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800745e:	bc08      	pop	{r3}
 8007460:	469e      	mov	lr, r3
 8007462:	4770      	bx	lr

08007464 <_fini>:
 8007464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007466:	bf00      	nop
 8007468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746a:	bc08      	pop	{r3}
 800746c:	469e      	mov	lr, r3
 800746e:	4770      	bx	lr
