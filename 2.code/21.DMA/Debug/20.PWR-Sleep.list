
20.PWR-Sleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072cc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007564  08007564  00008564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080075b8  080075b8  000085b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080075c0  080075c0  000085c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080075c4  080075c4  000085c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000070  24000000  080075c8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  24000070  08007638  00009070  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000274  08007638  00009274  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013071  00000000  00000000  0000909e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002be0  00000000  00000000  0001c10f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000d08  00000000  00000000  0001ecf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000009d8  00000000  00000000  0001f9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000388c4  00000000  00000000  000203d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00017adb  00000000  00000000  00058c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0015bece  00000000  00000000  0007076f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cc63d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003940  00000000  00000000  001cc680  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001cffc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000070 	.word	0x24000070
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800754c 	.word	0x0800754c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000074 	.word	0x24000074
 80002d4:	0800754c 	.word	0x0800754c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b086      	sub	sp, #24
 8000608:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060a:	1d3b      	adds	r3, r7, #4
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]
 8000616:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000618:	4b12      	ldr	r3, [pc, #72]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800061a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800061e:	4a11      	ldr	r2, [pc, #68]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 8000620:	f043 0310 	orr.w	r3, r3, #16
 8000624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000628:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	f003 0310 	and.w	r3, r3, #16
 8000632:	603b      	str	r3, [r7, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	2110      	movs	r1, #16
 800063a:	480b      	ldr	r0, [pc, #44]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 800063c:	f001 fe86 	bl	800234c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000640:	2310      	movs	r3, #16
 8000642:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000644:	2301      	movs	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000648:	2300      	movs	r3, #0
 800064a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	4619      	mov	r1, r3
 8000654:	4804      	ldr	r0, [pc, #16]	@ (8000668 <MX_BEEP_GPIO_Init+0x64>)
 8000656:	f001 fcb1 	bl	8001fbc <HAL_GPIO_Init>
}
 800065a:	bf00      	nop
 800065c:	3718      	adds	r7, #24
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	58024400 	.word	0x58024400
 8000668:	58021000 	.word	0x58021000

0800066c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000672:	1d3b      	adds	r3, r7, #4
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000686:	4a13      	ldr	r2, [pc, #76]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000690:	4b10      	ldr	r3, [pc, #64]	@ (80006d4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	f003 0301 	and.w	r3, r3, #1
 800069a:	603b      	str	r3, [r7, #0]
 800069c:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 800069e:	2301      	movs	r3, #1
 80006a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a2:	2300      	movs	r3, #0
 80006a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006a6:	2302      	movs	r3, #2
 80006a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006aa:	1d3b      	adds	r3, r7, #4
 80006ac:	4619      	mov	r1, r3
 80006ae:	480a      	ldr	r0, [pc, #40]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006b0:	f001 fc84 	bl	8001fbc <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006b4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	1d3b      	adds	r3, r7, #4
 80006c4:	4619      	mov	r1, r3
 80006c6:	4804      	ldr	r0, [pc, #16]	@ (80006d8 <MX_KEY_GPIO_Init+0x6c>)
 80006c8:	f001 fc78 	bl	8001fbc <HAL_GPIO_Init>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	58024400 	.word	0x58024400
 80006d8:	58020000 	.word	0x58020000

080006dc <key_scan>:
  * KEY0_PRES, 1, KEY0 按下
  * KEY1_PRES, 2, KEY1 按下
  * WKUP_PRES, 3, WKUP 按下
 */
uint8_t key_scan(uint8_t mode)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    static uint8_t key_up = 1; /* 按键按松开标志 */
    uint8_t keyval = 0;
 80006e6:	2300      	movs	r3, #0
 80006e8:	73fb      	strb	r3, [r7, #15]
    if (mode) key_up = 1; /* 支持连按 */
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d002      	beq.n	80006f6 <key_scan+0x1a>
 80006f0:	4b30      	ldr	r3, [pc, #192]	@ (80007b4 <key_scan+0xd8>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
    // 获取按键的实际电平状态
    GPIO_PinState key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 80006f6:	2102      	movs	r1, #2
 80006f8:	482f      	ldr	r0, [pc, #188]	@ (80007b8 <key_scan+0xdc>)
 80006fa:	f001 fe0f 	bl	800231c <HAL_GPIO_ReadPin>
 80006fe:	4603      	mov	r3, r0
 8000700:	73bb      	strb	r3, [r7, #14]
    GPIO_PinState key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8000702:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000706:	482c      	ldr	r0, [pc, #176]	@ (80007b8 <key_scan+0xdc>)
 8000708:	f001 fe08 	bl	800231c <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	737b      	strb	r3, [r7, #13]
    GPIO_PinState wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 8000710:	2101      	movs	r1, #1
 8000712:	4829      	ldr	r0, [pc, #164]	@ (80007b8 <key_scan+0xdc>)
 8000714:	f001 fe02 	bl	800231c <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	733b      	strb	r3, [r7, #12]
    /* 按键松开标志为 1, 且有任意一个按键按下了 */
    // 注意：KEY0和KEY1是上拉，按下为低电平；WK_UP是下拉，按下为高电平。
    if (key_up && (key0_state == GPIO_PIN_RESET || key1_state == GPIO_PIN_RESET || wkup_state == GPIO_PIN_SET))
 800071c:	4b25      	ldr	r3, [pc, #148]	@ (80007b4 <key_scan+0xd8>)
 800071e:	781b      	ldrb	r3, [r3, #0]
 8000720:	2b00      	cmp	r3, #0
 8000722:	d033      	beq.n	800078c <key_scan+0xb0>
 8000724:	7bbb      	ldrb	r3, [r7, #14]
 8000726:	2b00      	cmp	r3, #0
 8000728:	d005      	beq.n	8000736 <key_scan+0x5a>
 800072a:	7b7b      	ldrb	r3, [r7, #13]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <key_scan+0x5a>
 8000730:	7b3b      	ldrb	r3, [r7, #12]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d12a      	bne.n	800078c <key_scan+0xb0>
    {
        HAL_Delay(10); /* 去抖动 */ // 短暂延时进行消抖
 8000736:	200a      	movs	r0, #10
 8000738:	f000 fd14 	bl	8001164 <HAL_Delay>
        // 再次读取以确认按键状态，防止抖动
        key0_state = HAL_GPIO_ReadPin(KEY0_GPIO_Port, KEY0_Pin);
 800073c:	2102      	movs	r1, #2
 800073e:	481e      	ldr	r0, [pc, #120]	@ (80007b8 <key_scan+0xdc>)
 8000740:	f001 fdec 	bl	800231c <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	73bb      	strb	r3, [r7, #14]
        key1_state = HAL_GPIO_ReadPin(KEY1_GPIO_Port, KEY1_Pin);
 8000748:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800074c:	481a      	ldr	r0, [pc, #104]	@ (80007b8 <key_scan+0xdc>)
 800074e:	f001 fde5 	bl	800231c <HAL_GPIO_ReadPin>
 8000752:	4603      	mov	r3, r0
 8000754:	737b      	strb	r3, [r7, #13]
        wkup_state = HAL_GPIO_ReadPin(WK_UP_GPIO_Port, WK_UP_Pin);
 8000756:	2101      	movs	r1, #1
 8000758:	4817      	ldr	r0, [pc, #92]	@ (80007b8 <key_scan+0xdc>)
 800075a:	f001 fddf 	bl	800231c <HAL_GPIO_ReadPin>
 800075e:	4603      	mov	r3, r0
 8000760:	733b      	strb	r3, [r7, #12]
        key_up = 0; // 设置按键已按下标志
 8000762:	4b14      	ldr	r3, [pc, #80]	@ (80007b4 <key_scan+0xd8>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
        // 根据按键状态判断是哪个按键被按下
        // 优先级：WK_UP > KEY1 > KEY0
        if (wkup_state == GPIO_PIN_SET)
 8000768:	7b3b      	ldrb	r3, [r7, #12]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d102      	bne.n	8000774 <key_scan+0x98>
        {
            keyval = WKUP_PRES;
 800076e:	2303      	movs	r3, #3
 8000770:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 8000772:	e018      	b.n	80007a6 <key_scan+0xca>
        }
        else if (key1_state == GPIO_PIN_RESET) // KEY1是上拉，按下为低电平
 8000774:	7b7b      	ldrb	r3, [r7, #13]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d102      	bne.n	8000780 <key_scan+0xa4>
        {
            keyval = KEY1_PRES;
 800077a:	2302      	movs	r3, #2
 800077c:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 800077e:	e012      	b.n	80007a6 <key_scan+0xca>
        }
        else if (key0_state == GPIO_PIN_RESET) // KEY0是上拉，按下为低电平
 8000780:	7bbb      	ldrb	r3, [r7, #14]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d10f      	bne.n	80007a6 <key_scan+0xca>
        {
            keyval = KEY0_PRES;
 8000786:	2301      	movs	r3, #1
 8000788:	73fb      	strb	r3, [r7, #15]
        if (wkup_state == GPIO_PIN_SET)
 800078a:	e00c      	b.n	80007a6 <key_scan+0xca>
        }
    }
    // 没有任何按键按下, 标记按键松开
    // 此时所有按键都处于非按下状态 (KEY0/KEY1 高电平，WK_UP 低电平)
    else if (key0_state == GPIO_PIN_SET && key1_state == GPIO_PIN_SET && wkup_state == GPIO_PIN_RESET)
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	2b01      	cmp	r3, #1
 8000790:	d10a      	bne.n	80007a8 <key_scan+0xcc>
 8000792:	7b7b      	ldrb	r3, [r7, #13]
 8000794:	2b01      	cmp	r3, #1
 8000796:	d107      	bne.n	80007a8 <key_scan+0xcc>
 8000798:	7b3b      	ldrb	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d104      	bne.n	80007a8 <key_scan+0xcc>
    {
        key_up = 1;
 800079e:	4b05      	ldr	r3, [pc, #20]	@ (80007b4 <key_scan+0xd8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	701a      	strb	r2, [r3, #0]
 80007a4:	e000      	b.n	80007a8 <key_scan+0xcc>
        if (wkup_state == GPIO_PIN_SET)
 80007a6:	bf00      	nop
    }
    return keyval; /* 返回键值 */
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000000 	.word	0x24000000
 80007b8:	58020000 	.word	0x58020000

080007bc <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007d2:	4b24      	ldr	r3, [pc, #144]	@ (8000864 <MX_LED_GPIO_Init+0xa8>)
 80007d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007d8:	4a22      	ldr	r2, [pc, #136]	@ (8000864 <MX_LED_GPIO_Init+0xa8>)
 80007da:	f043 0310 	orr.w	r3, r3, #16
 80007de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007e2:	4b20      	ldr	r3, [pc, #128]	@ (8000864 <MX_LED_GPIO_Init+0xa8>)
 80007e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007e8:	f003 0310 	and.w	r3, r3, #16
 80007ec:	60bb      	str	r3, [r7, #8]
 80007ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f0:	4b1c      	ldr	r3, [pc, #112]	@ (8000864 <MX_LED_GPIO_Init+0xa8>)
 80007f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000864 <MX_LED_GPIO_Init+0xa8>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000800:	4b18      	ldr	r3, [pc, #96]	@ (8000864 <MX_LED_GPIO_Init+0xa8>)
 8000802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800080e:	2201      	movs	r2, #1
 8000810:	2160      	movs	r1, #96	@ 0x60
 8000812:	4815      	ldr	r0, [pc, #84]	@ (8000868 <MX_LED_GPIO_Init+0xac>)
 8000814:	f001 fd9a 	bl	800234c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000818:	2201      	movs	r2, #1
 800081a:	2110      	movs	r1, #16
 800081c:	4813      	ldr	r0, [pc, #76]	@ (800086c <MX_LED_GPIO_Init+0xb0>)
 800081e:	f001 fd95 	bl	800234c <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000822:	2360      	movs	r3, #96	@ 0x60
 8000824:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	4619      	mov	r1, r3
 8000838:	480b      	ldr	r0, [pc, #44]	@ (8000868 <MX_LED_GPIO_Init+0xac>)
 800083a:	f001 fbbf 	bl	8001fbc <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800083e:	2310      	movs	r3, #16
 8000840:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000842:	2301      	movs	r3, #1
 8000844:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4805      	ldr	r0, [pc, #20]	@ (800086c <MX_LED_GPIO_Init+0xb0>)
 8000856:	f001 fbb1 	bl	8001fbc <HAL_GPIO_Init>
}
 800085a:	bf00      	nop
 800085c:	3720      	adds	r7, #32
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	58024400 	.word	0x58024400
 8000868:	58021000 	.word	0x58021000
 800086c:	58020400 	.word	0x58020400

08000870 <pwr_key_init>:
#include "pwr.h"
#include "key.h"

// 低功耗模式下的按键初始化(用于唤醒睡眠模式/停止模式)
void pwr_key_init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_Init;
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b14      	ldr	r3, [pc, #80]	@ (80008c8 <pwr_key_init+0x58>)
 8000878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087c:	4a12      	ldr	r2, [pc, #72]	@ (80008c8 <pwr_key_init+0x58>)
 800087e:	f043 0301 	orr.w	r3, r3, #1
 8000882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000886:	4b10      	ldr	r3, [pc, #64]	@ (80008c8 <pwr_key_init+0x58>)
 8000888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	603b      	str	r3, [r7, #0]
 8000892:	683b      	ldr	r3, [r7, #0]
	GPIO_Init.Pin = WK_UP_Pin;
 8000894:	2301      	movs	r3, #1
 8000896:	607b      	str	r3, [r7, #4]
	GPIO_Init.Mode = GPIO_MODE_IT_RISING; // 上升沿中断
 8000898:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089c:	60bb      	str	r3, [r7, #8]
	GPIO_Init.Pull = GPIO_PULLDOWN;
 800089e:	2302      	movs	r3, #2
 80008a0:	60fb      	str	r3, [r7, #12]
	GPIO_Init.Speed = GPIO_SPEED_FREQ_HIGH;
 80008a2:	2302      	movs	r3, #2
 80008a4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_Init);
 80008a6:	1d3b      	adds	r3, r7, #4
 80008a8:	4619      	mov	r1, r3
 80008aa:	4808      	ldr	r0, [pc, #32]	@ (80008cc <pwr_key_init+0x5c>)
 80008ac:	f001 fb86 	bl	8001fbc <HAL_GPIO_Init>
	HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 2);
 80008b0:	2202      	movs	r2, #2
 80008b2:	2102      	movs	r1, #2
 80008b4:	2006      	movs	r0, #6
 80008b6:	f000 fd70 	bl	800139a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008ba:	2006      	movs	r0, #6
 80008bc:	f000 fd87 	bl	80013ce <HAL_NVIC_EnableIRQ>
}
 80008c0:	bf00      	nop
 80008c2:	3718      	adds	r7, #24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	58024400 	.word	0x58024400
 80008cc:	58020000 	.word	0x58020000

080008d0 <pwr_sleep>:

// 进入睡眠模式
void pwr_sleep(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
	HAL_SuspendTick(); // 暂停滴答时钟
 80008d4:	f000 fc6a 	bl	80011ac <HAL_SuspendTick>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // 进入睡眠模式
 80008d8:	2101      	movs	r1, #1
 80008da:	2000      	movs	r0, #0
 80008dc:	f001 fd6a 	bl	80023b4 <HAL_PWR_EnterSLEEPMode>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(WK_UP_Pin);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f001 fd48 	bl	800237e <HAL_GPIO_EXTI_IRQHandler>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008f2:	b480      	push	{r7}
 80008f4:	b083      	sub	sp, #12
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	4603      	mov	r3, r0
 80008fa:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == WK_UP_Pin)
	{

	}
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 800090c:	f7ff ff56 	bl	80007bc <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 8000910:	f7ff fe78 	bl	8000604 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 8000914:	f7ff feaa 	bl	800066c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	MX_USART1_UART_Init();
 8000918:	f000 fa96 	bl	8000e48 <MX_USART1_UART_Init>
}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}

08000920 <main>:

void SystemClock_Config(void);
static void MPU_Config(void);

int main(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
  uint8_t key_value = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	71fb      	strb	r3, [r7, #7]
  MPU_Config();
 800092a:	f000 f8a5 	bl	8000a78 <MPU_Config>
  HAL_Init();
 800092e:	f000 fb87 	bl	8001040 <HAL_Init>
  SystemClock_Config();
 8000932:	f000 f825 	bl	8000980 <SystemClock_Config>
  bsp_init();
 8000936:	f7ff ffe7 	bl	8000908 <bsp_init>
  pwr_key_init();
 800093a:	f7ff ff99 	bl	8000870 <pwr_key_init>
  while (1)
  {
    key_value = key_scan(0);
 800093e:	2000      	movs	r0, #0
 8000940:	f7ff fecc 	bl	80006dc <key_scan>
 8000944:	4603      	mov	r3, r0
 8000946:	71fb      	strb	r3, [r7, #7]
    if(key_value == KEY0_PRES)
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d1f7      	bne.n	800093e <main+0x1e>
    {
      HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, RESET);
 800094e:	2200      	movs	r2, #0
 8000950:	2140      	movs	r1, #64	@ 0x40
 8000952:	4808      	ldr	r0, [pc, #32]	@ (8000974 <main+0x54>)
 8000954:	f001 fcfa 	bl	800234c <HAL_GPIO_WritePin>
      printf("Enter Sleep\r\n");
 8000958:	4807      	ldr	r0, [pc, #28]	@ (8000978 <main+0x58>)
 800095a:	f006 fa63 	bl	8006e24 <puts>
      pwr_sleep(); // 进入睡眠模式
 800095e:	f7ff ffb7 	bl	80008d0 <pwr_sleep>
      printf("Exit Sleep\r\n");
 8000962:	4806      	ldr	r0, [pc, #24]	@ (800097c <main+0x5c>)
 8000964:	f006 fa5e 	bl	8006e24 <puts>
      HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, SET);
 8000968:	2201      	movs	r2, #1
 800096a:	2140      	movs	r1, #64	@ 0x40
 800096c:	4801      	ldr	r0, [pc, #4]	@ (8000974 <main+0x54>)
 800096e:	f001 fced 	bl	800234c <HAL_GPIO_WritePin>
    key_value = key_scan(0);
 8000972:	e7e4      	b.n	800093e <main+0x1e>
 8000974:	58021000 	.word	0x58021000
 8000978:	08007564 	.word	0x08007564
 800097c:	08007574 	.word	0x08007574

08000980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b09c      	sub	sp, #112	@ 0x70
 8000984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000986:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800098a:	224c      	movs	r2, #76	@ 0x4c
 800098c:	2100      	movs	r1, #0
 800098e:	4618      	mov	r0, r3
 8000990:	f006 fb28 	bl	8006fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000994:	1d3b      	adds	r3, r7, #4
 8000996:	2220      	movs	r2, #32
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f006 fb22 	bl	8006fe4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80009a0:	2002      	movs	r0, #2
 80009a2:	f001 fd21 	bl	80023e8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009a6:	2300      	movs	r3, #0
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	4b31      	ldr	r3, [pc, #196]	@ (8000a70 <SystemClock_Config+0xf0>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	4a30      	ldr	r2, [pc, #192]	@ (8000a70 <SystemClock_Config+0xf0>)
 80009b0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80009b4:	6193      	str	r3, [r2, #24]
 80009b6:	4b2e      	ldr	r3, [pc, #184]	@ (8000a70 <SystemClock_Config+0xf0>)
 80009b8:	699b      	ldr	r3, [r3, #24]
 80009ba:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <SystemClock_Config+0xf4>)
 80009c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009c4:	4a2b      	ldr	r2, [pc, #172]	@ (8000a74 <SystemClock_Config+0xf4>)
 80009c6:	f043 0301 	orr.w	r3, r3, #1
 80009ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80009cc:	4b29      	ldr	r3, [pc, #164]	@ (8000a74 <SystemClock_Config+0xf4>)
 80009ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009d0:	f003 0301 	and.w	r3, r3, #1
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009d8:	bf00      	nop
 80009da:	4b25      	ldr	r3, [pc, #148]	@ (8000a70 <SystemClock_Config+0xf0>)
 80009dc:	699b      	ldr	r3, [r3, #24]
 80009de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009e6:	d1f8      	bne.n	80009da <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 80009e8:	2321      	movs	r3, #33	@ 0x21
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80009f2:	2301      	movs	r3, #1
 80009f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f6:	2302      	movs	r3, #2
 80009f8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009fa:	2302      	movs	r3, #2
 80009fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80009fe:	2302      	movs	r3, #2
 8000a00:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000a02:	23f0      	movs	r3, #240	@ 0xf0
 8000a04:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000a12:	2308      	movs	r3, #8
 8000a14:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a16:	2300      	movs	r3, #0
 8000a18:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fd1a 	bl	800245c <HAL_RCC_OscConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000a2e:	f000 f84f 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a32:	233f      	movs	r3, #63	@ 0x3f
 8000a34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a36:	2303      	movs	r3, #3
 8000a38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a42:	2340      	movs	r3, #64	@ 0x40
 8000a44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a46:	2340      	movs	r3, #64	@ 0x40
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a4e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a50:	2340      	movs	r3, #64	@ 0x40
 8000a52:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	2104      	movs	r1, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f002 f959 	bl	8002d10 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000a64:	f000 f834 	bl	8000ad0 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3770      	adds	r7, #112	@ 0x70
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	58024800 	.word	0x58024800
 8000a74:	58000400 	.word	0x58000400

08000a78 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b084      	sub	sp, #16
 8000a7c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000a7e:	463b      	mov	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000a8a:	f000 fcbb 	bl	8001404 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000a9a:	231f      	movs	r3, #31
 8000a9c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000a9e:	2387      	movs	r3, #135	@ 0x87
 8000aa0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000aba:	463b      	mov	r3, r7
 8000abc:	4618      	mov	r0, r3
 8000abe:	f000 fcd9 	bl	8001474 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ac2:	2004      	movs	r0, #4
 8000ac4:	f000 fcb6 	bl	8001434 <HAL_MPU_Enable>

}
 8000ac8:	bf00      	nop
 8000aca:	3710      	adds	r7, #16
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_MspInit+0x30>)
 8000ae4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ae8:	4a08      	ldr	r2, [pc, #32]	@ (8000b0c <HAL_MspInit+0x30>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000af2:	4b06      	ldr	r3, [pc, #24]	@ (8000b0c <HAL_MspInit+0x30>)
 8000af4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	58024400 	.word	0x58024400

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b14:	bf00      	nop
 8000b16:	e7fd      	b.n	8000b14 <NMI_Handler+0x4>

08000b18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1c:	bf00      	nop
 8000b1e:	e7fd      	b.n	8000b1c <HardFault_Handler+0x4>

08000b20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <MemManage_Handler+0x4>

08000b28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2c:	bf00      	nop
 8000b2e:	e7fd      	b.n	8000b2c <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	bf00      	nop
 8000b36:	e7fd      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b52:	4770      	bx	lr

08000b54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr

08000b62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b66:	f000 fadd 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000b72:	2002      	movs	r0, #2
 8000b74:	f001 fc03 	bl	800237e <HAL_GPIO_EXTI_IRQHandler>
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b80:	4802      	ldr	r0, [pc, #8]	@ (8000b8c <USART1_IRQHandler+0x10>)
 8000b82:	f004 fb5b 	bl	800523c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	24000090 	.word	0x24000090

08000b90 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	e00a      	b.n	8000bb8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ba2:	f3af 8000 	nop.w
 8000ba6:	4601      	mov	r1, r0
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	b2ca      	uxtb	r2, r1
 8000bb0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697a      	ldr	r2, [r7, #20]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	429a      	cmp	r2, r3
 8000bbe:	dbf0      	blt.n	8000ba2 <_read+0x12>
  }

  return len;
 8000bc0:	687b      	ldr	r3, [r7, #4]
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	3718      	adds	r7, #24
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}

08000bca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b086      	sub	sp, #24
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	60f8      	str	r0, [r7, #12]
 8000bd2:	60b9      	str	r1, [r7, #8]
 8000bd4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	e009      	b.n	8000bf0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	1c5a      	adds	r2, r3, #1
 8000be0:	60ba      	str	r2, [r7, #8]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	4618      	mov	r0, r3
 8000be6:	f000 f9ed 	bl	8000fc4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	3301      	adds	r3, #1
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	dbf1      	blt.n	8000bdc <_write+0x12>
  }
  return len;
 8000bf8:	687b      	ldr	r3, [r7, #4]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3718      	adds	r7, #24
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_close>:

int _close(int file)
{
 8000c02:	b480      	push	{r7}
 8000c04:	b083      	sub	sp, #12
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	370c      	adds	r7, #12
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	b083      	sub	sp, #12
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	6078      	str	r0, [r7, #4]
 8000c22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <_isatty>:

int _isatty(int file)
{
 8000c3a:	b480      	push	{r7}
 8000c3c:	b083      	sub	sp, #12
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b085      	sub	sp, #20
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c5c:	2300      	movs	r3, #0
}
 8000c5e:	4618      	mov	r0, r3
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
	...

08000c6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c74:	4a14      	ldr	r2, [pc, #80]	@ (8000cc8 <_sbrk+0x5c>)
 8000c76:	4b15      	ldr	r3, [pc, #84]	@ (8000ccc <_sbrk+0x60>)
 8000c78:	1ad3      	subs	r3, r2, r3
 8000c7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c80:	4b13      	ldr	r3, [pc, #76]	@ (8000cd0 <_sbrk+0x64>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d102      	bne.n	8000c8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c88:	4b11      	ldr	r3, [pc, #68]	@ (8000cd0 <_sbrk+0x64>)
 8000c8a:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <_sbrk+0x68>)
 8000c8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c8e:	4b10      	ldr	r3, [pc, #64]	@ (8000cd0 <_sbrk+0x64>)
 8000c90:	681a      	ldr	r2, [r3, #0]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4413      	add	r3, r2
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d207      	bcs.n	8000cac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c9c:	f006 f9f0 	bl	8007080 <__errno>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8000caa:	e009      	b.n	8000cc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cac:	4b08      	ldr	r3, [pc, #32]	@ (8000cd0 <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cb2:	4b07      	ldr	r3, [pc, #28]	@ (8000cd0 <_sbrk+0x64>)
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	4413      	add	r3, r2
 8000cba:	4a05      	ldr	r2, [pc, #20]	@ (8000cd0 <_sbrk+0x64>)
 8000cbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cbe:	68fb      	ldr	r3, [r7, #12]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	24080000 	.word	0x24080000
 8000ccc:	00000400 	.word	0x00000400
 8000cd0:	2400008c 	.word	0x2400008c
 8000cd4:	24000278 	.word	0x24000278

08000cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cdc:	4b43      	ldr	r3, [pc, #268]	@ (8000dec <SystemInit+0x114>)
 8000cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ce2:	4a42      	ldr	r2, [pc, #264]	@ (8000dec <SystemInit+0x114>)
 8000ce4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000cec:	4b40      	ldr	r3, [pc, #256]	@ (8000df0 <SystemInit+0x118>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 030f 	and.w	r3, r3, #15
 8000cf4:	2b06      	cmp	r3, #6
 8000cf6:	d807      	bhi.n	8000d08 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf8:	4b3d      	ldr	r3, [pc, #244]	@ (8000df0 <SystemInit+0x118>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f023 030f 	bic.w	r3, r3, #15
 8000d00:	4a3b      	ldr	r2, [pc, #236]	@ (8000df0 <SystemInit+0x118>)
 8000d02:	f043 0307 	orr.w	r3, r3, #7
 8000d06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d08:	4b3a      	ldr	r3, [pc, #232]	@ (8000df4 <SystemInit+0x11c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a39      	ldr	r2, [pc, #228]	@ (8000df4 <SystemInit+0x11c>)
 8000d0e:	f043 0301 	orr.w	r3, r3, #1
 8000d12:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d14:	4b37      	ldr	r3, [pc, #220]	@ (8000df4 <SystemInit+0x11c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d1a:	4b36      	ldr	r3, [pc, #216]	@ (8000df4 <SystemInit+0x11c>)
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	4935      	ldr	r1, [pc, #212]	@ (8000df4 <SystemInit+0x11c>)
 8000d20:	4b35      	ldr	r3, [pc, #212]	@ (8000df8 <SystemInit+0x120>)
 8000d22:	4013      	ands	r3, r2
 8000d24:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d26:	4b32      	ldr	r3, [pc, #200]	@ (8000df0 <SystemInit+0x118>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f003 0308 	and.w	r3, r3, #8
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d007      	beq.n	8000d42 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d32:	4b2f      	ldr	r3, [pc, #188]	@ (8000df0 <SystemInit+0x118>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	f023 030f 	bic.w	r3, r3, #15
 8000d3a:	4a2d      	ldr	r2, [pc, #180]	@ (8000df0 <SystemInit+0x118>)
 8000d3c:	f043 0307 	orr.w	r3, r3, #7
 8000d40:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d42:	4b2c      	ldr	r3, [pc, #176]	@ (8000df4 <SystemInit+0x11c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d48:	4b2a      	ldr	r3, [pc, #168]	@ (8000df4 <SystemInit+0x11c>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d4e:	4b29      	ldr	r3, [pc, #164]	@ (8000df4 <SystemInit+0x11c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d54:	4b27      	ldr	r3, [pc, #156]	@ (8000df4 <SystemInit+0x11c>)
 8000d56:	4a29      	ldr	r2, [pc, #164]	@ (8000dfc <SystemInit+0x124>)
 8000d58:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d5a:	4b26      	ldr	r3, [pc, #152]	@ (8000df4 <SystemInit+0x11c>)
 8000d5c:	4a28      	ldr	r2, [pc, #160]	@ (8000e00 <SystemInit+0x128>)
 8000d5e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d60:	4b24      	ldr	r3, [pc, #144]	@ (8000df4 <SystemInit+0x11c>)
 8000d62:	4a28      	ldr	r2, [pc, #160]	@ (8000e04 <SystemInit+0x12c>)
 8000d64:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d66:	4b23      	ldr	r3, [pc, #140]	@ (8000df4 <SystemInit+0x11c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <SystemInit+0x11c>)
 8000d6e:	4a25      	ldr	r2, [pc, #148]	@ (8000e04 <SystemInit+0x12c>)
 8000d70:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d72:	4b20      	ldr	r3, [pc, #128]	@ (8000df4 <SystemInit+0x11c>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d78:	4b1e      	ldr	r3, [pc, #120]	@ (8000df4 <SystemInit+0x11c>)
 8000d7a:	4a22      	ldr	r2, [pc, #136]	@ (8000e04 <SystemInit+0x12c>)
 8000d7c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <SystemInit+0x11c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	@ (8000df4 <SystemInit+0x11c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a1a      	ldr	r2, [pc, #104]	@ (8000df4 <SystemInit+0x11c>)
 8000d8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d90:	4b18      	ldr	r3, [pc, #96]	@ (8000df4 <SystemInit+0x11c>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d96:	4b1c      	ldr	r3, [pc, #112]	@ (8000e08 <SystemInit+0x130>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e0c <SystemInit+0x134>)
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000da2:	d202      	bcs.n	8000daa <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000da4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e10 <SystemInit+0x138>)
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000daa:	4b12      	ldr	r3, [pc, #72]	@ (8000df4 <SystemInit+0x11c>)
 8000dac:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000db0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d113      	bne.n	8000de0 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000db8:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <SystemInit+0x11c>)
 8000dba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dbe:	4a0d      	ldr	r2, [pc, #52]	@ (8000df4 <SystemInit+0x11c>)
 8000dc0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dc4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <SystemInit+0x13c>)
 8000dca:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dce:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dd0:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <SystemInit+0x11c>)
 8000dd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dd6:	4a07      	ldr	r2, [pc, #28]	@ (8000df4 <SystemInit+0x11c>)
 8000dd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ddc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00
 8000df0:	52002000 	.word	0x52002000
 8000df4:	58024400 	.word	0x58024400
 8000df8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000dfc:	02020200 	.word	0x02020200
 8000e00:	01ff0000 	.word	0x01ff0000
 8000e04:	01010280 	.word	0x01010280
 8000e08:	5c001000 	.word	0x5c001000
 8000e0c:	ffff0000 	.word	0xffff0000
 8000e10:	51008108 	.word	0x51008108
 8000e14:	52004000 	.word	0x52004000

08000e18 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e1c:	4b09      	ldr	r3, [pc, #36]	@ (8000e44 <ExitRun0Mode+0x2c>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	4a08      	ldr	r2, [pc, #32]	@ (8000e44 <ExitRun0Mode+0x2c>)
 8000e22:	f043 0302 	orr.w	r3, r3, #2
 8000e26:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e28:	bf00      	nop
 8000e2a:	4b06      	ldr	r3, [pc, #24]	@ (8000e44 <ExitRun0Mode+0x2c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d0f9      	beq.n	8000e2a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e36:	bf00      	nop
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	58024800 	.word	0x58024800

08000e48 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e4c:	4b22      	ldr	r3, [pc, #136]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e4e:	4a23      	ldr	r2, [pc, #140]	@ (8000edc <MX_USART1_UART_Init+0x94>)
 8000e50:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e52:	4b21      	ldr	r3, [pc, #132]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e54:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e58:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e6e:	220c      	movs	r2, #12
 8000e70:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e72:	4b19      	ldr	r3, [pc, #100]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e78:	4b17      	ldr	r3, [pc, #92]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e7e:	4b16      	ldr	r3, [pc, #88]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e84:	4b14      	ldr	r3, [pc, #80]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e8a:	4b13      	ldr	r3, [pc, #76]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e90:	4811      	ldr	r0, [pc, #68]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000e92:	f004 f8f5 	bl	8005080 <HAL_UART_Init>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e9c:	f7ff fe18 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ea4:	f005 fddc 	bl	8006a60 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000eae:	f7ff fe0f 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4808      	ldr	r0, [pc, #32]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000eb6:	f005 fe11 	bl	8006adc <HAL_UARTEx_SetRxFifoThreshold>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ec0:	f7ff fe06 	bl	8000ad0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ec4:	4804      	ldr	r0, [pc, #16]	@ (8000ed8 <MX_USART1_UART_Init+0x90>)
 8000ec6:	f005 fd92 	bl	80069ee <HAL_UARTEx_DisableFifoMode>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ed0:	f7ff fdfe 	bl	8000ad0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	24000090 	.word	0x24000090
 8000edc:	40011000 	.word	0x40011000

08000ee0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b0ba      	sub	sp, #232	@ 0xe8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef8:	f107 0310 	add.w	r3, r7, #16
 8000efc:	22c0      	movs	r2, #192	@ 0xc0
 8000efe:	2100      	movs	r1, #0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f006 f86f 	bl	8006fe4 <memset>
  if(uartHandle->Instance==USART1)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fb8 <HAL_UART_MspInit+0xd8>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d14e      	bne.n	8000fae <HAL_UART_MspInit+0xce>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f10:	f04f 0201 	mov.w	r2, #1
 8000f14:	f04f 0300 	mov.w	r3, #0
 8000f18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f22:	f107 0310 	add.w	r3, r7, #16
 8000f26:	4618      	mov	r0, r3
 8000f28:	f002 fa7e 	bl	8003428 <HAL_RCCEx_PeriphCLKConfig>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f32:	f7ff fdcd 	bl	8000ad0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f36:	4b21      	ldr	r3, [pc, #132]	@ (8000fbc <HAL_UART_MspInit+0xdc>)
 8000f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f3c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fbc <HAL_UART_MspInit+0xdc>)
 8000f3e:	f043 0310 	orr.w	r3, r3, #16
 8000f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f46:	4b1d      	ldr	r3, [pc, #116]	@ (8000fbc <HAL_UART_MspInit+0xdc>)
 8000f48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f4c:	f003 0310 	and.w	r3, r3, #16
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b19      	ldr	r3, [pc, #100]	@ (8000fbc <HAL_UART_MspInit+0xdc>)
 8000f56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5a:	4a18      	ldr	r2, [pc, #96]	@ (8000fbc <HAL_UART_MspInit+0xdc>)
 8000f5c:	f043 0301 	orr.w	r3, r3, #1
 8000f60:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_UART_MspInit+0xdc>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60bb      	str	r3, [r7, #8]
 8000f70:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f72:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f86:	2302      	movs	r3, #2
 8000f88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f8c:	2307      	movs	r3, #7
 8000f8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f92:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f96:	4619      	mov	r1, r3
 8000f98:	4809      	ldr	r0, [pc, #36]	@ (8000fc0 <HAL_UART_MspInit+0xe0>)
 8000f9a:	f001 f80f 	bl	8001fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2025      	movs	r0, #37	@ 0x25
 8000fa4:	f000 f9f9 	bl	800139a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fa8:	2025      	movs	r0, #37	@ 0x25
 8000faa:	f000 fa10 	bl	80013ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000fae:	bf00      	nop
 8000fb0:	37e8      	adds	r7, #232	@ 0xe8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40011000 	.word	0x40011000
 8000fbc:	58024400 	.word	0x58024400
 8000fc0:	58020000 	.word	0x58020000

08000fc4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

/* printf重定向 */
PUTCHAR_PROTOTYPE
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fcc:	1d39      	adds	r1, r7, #4
 8000fce:	f04f 33ff 	mov.w	r3, #4294967295
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4803      	ldr	r0, [pc, #12]	@ (8000fe4 <__io_putchar+0x20>)
 8000fd6:	f004 f8a3 	bl	8005120 <HAL_UART_Transmit>
    return ch;
 8000fda:	687b      	ldr	r3, [r7, #4]
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	24000090 	.word	0x24000090

08000fe8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001024 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fec:	f7ff ff14 	bl	8000e18 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ff0:	f7ff fe72 	bl	8000cd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800101a:	f006 f837 	bl	800708c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff fc7f 	bl	8000920 <main>
  bx  lr
 8001022:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001024:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001028:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800102c:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001030:	080075c8 	.word	0x080075c8
  ldr r2, =_sbss
 8001034:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001038:	24000274 	.word	0x24000274

0800103c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC3_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001046:	2003      	movs	r0, #3
 8001048:	f000 f99c 	bl	8001384 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800104c:	f002 f816 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8001050:	4602      	mov	r2, r0
 8001052:	4b15      	ldr	r3, [pc, #84]	@ (80010a8 <HAL_Init+0x68>)
 8001054:	699b      	ldr	r3, [r3, #24]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	f003 030f 	and.w	r3, r3, #15
 800105c:	4913      	ldr	r1, [pc, #76]	@ (80010ac <HAL_Init+0x6c>)
 800105e:	5ccb      	ldrb	r3, [r1, r3]
 8001060:	f003 031f 	and.w	r3, r3, #31
 8001064:	fa22 f303 	lsr.w	r3, r2, r3
 8001068:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800106a:	4b0f      	ldr	r3, [pc, #60]	@ (80010a8 <HAL_Init+0x68>)
 800106c:	699b      	ldr	r3, [r3, #24]
 800106e:	f003 030f 	and.w	r3, r3, #15
 8001072:	4a0e      	ldr	r2, [pc, #56]	@ (80010ac <HAL_Init+0x6c>)
 8001074:	5cd3      	ldrb	r3, [r2, r3]
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	687a      	ldr	r2, [r7, #4]
 800107c:	fa22 f303 	lsr.w	r3, r2, r3
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <HAL_Init+0x70>)
 8001082:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001084:	4a0b      	ldr	r2, [pc, #44]	@ (80010b4 <HAL_Init+0x74>)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800108a:	200f      	movs	r0, #15
 800108c:	f000 f814 	bl	80010b8 <HAL_InitTick>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e002      	b.n	80010a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800109a:	f7ff fd1f 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	58024400 	.word	0x58024400
 80010ac:	08007580 	.word	0x08007580
 80010b0:	24000008 	.word	0x24000008
 80010b4:	24000004 	.word	0x24000004

080010b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80010c0:	4b15      	ldr	r3, [pc, #84]	@ (8001118 <HAL_InitTick+0x60>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e021      	b.n	8001110 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80010cc:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_InitTick+0x64>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <HAL_InitTick+0x60>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f981 	bl	80013ea <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f94b 	bl	800139a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_InitTick+0x68>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	24000010 	.word	0x24000010
 800111c:	24000004 	.word	0x24000004
 8001120:	2400000c 	.word	0x2400000c

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	24000010 	.word	0x24000010
 8001148:	24000124 	.word	0x24000124

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	24000124 	.word	0x24000124

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	24000010 	.word	0x24000010

080011ac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 80011b0:	4b05      	ldr	r3, [pc, #20]	@ (80011c8 <HAL_SuspendTick+0x1c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <HAL_SuspendTick+0x1c>)
 80011b6:	f023 0302 	bic.w	r3, r3, #2
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80011d0:	4b03      	ldr	r3, [pc, #12]	@ (80011e0 <HAL_GetREVID+0x14>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	0c1b      	lsrs	r3, r3, #16
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	5c001000 	.word	0x5c001000

080011e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001200:	4013      	ands	r3, r2
 8001202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800120c:	4b06      	ldr	r3, [pc, #24]	@ (8001228 <__NVIC_SetPriorityGrouping+0x44>)
 800120e:	4313      	orrs	r3, r2
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x40>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00
 8001228:	05fa0000 	.word	0x05fa0000

0800122c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001230:	4b04      	ldr	r3, [pc, #16]	@ (8001244 <__NVIC_GetPriorityGrouping+0x18>)
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	f003 0307 	and.w	r3, r3, #7
}
 800123a:	4618      	mov	r0, r3
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001252:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	db0b      	blt.n	8001272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	f003 021f 	and.w	r2, r3, #31
 8001260:	4907      	ldr	r1, [pc, #28]	@ (8001280 <__NVIC_EnableIRQ+0x38>)
 8001262:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001266:	095b      	lsrs	r3, r3, #5
 8001268:	2001      	movs	r0, #1
 800126a:	fa00 f202 	lsl.w	r2, r0, r2
 800126e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100

08001284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001290:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001294:	2b00      	cmp	r3, #0
 8001296:	db0a      	blt.n	80012ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	b2da      	uxtb	r2, r3
 800129c:	490c      	ldr	r1, [pc, #48]	@ (80012d0 <__NVIC_SetPriority+0x4c>)
 800129e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012a2:	0112      	lsls	r2, r2, #4
 80012a4:	b2d2      	uxtb	r2, r2
 80012a6:	440b      	add	r3, r1
 80012a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012ac:	e00a      	b.n	80012c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	4908      	ldr	r1, [pc, #32]	@ (80012d4 <__NVIC_SetPriority+0x50>)
 80012b4:	88fb      	ldrh	r3, [r7, #6]
 80012b6:	f003 030f 	and.w	r3, r3, #15
 80012ba:	3b04      	subs	r3, #4
 80012bc:	0112      	lsls	r2, r2, #4
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	440b      	add	r3, r1
 80012c2:	761a      	strb	r2, [r3, #24]
}
 80012c4:	bf00      	nop
 80012c6:	370c      	adds	r7, #12
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000e100 	.word	0xe000e100
 80012d4:	e000ed00 	.word	0xe000ed00

080012d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d8:	b480      	push	{r7}
 80012da:	b089      	sub	sp, #36	@ 0x24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f1c3 0307 	rsb	r3, r3, #7
 80012f2:	2b04      	cmp	r3, #4
 80012f4:	bf28      	it	cs
 80012f6:	2304      	movcs	r3, #4
 80012f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	3304      	adds	r3, #4
 80012fe:	2b06      	cmp	r3, #6
 8001300:	d902      	bls.n	8001308 <NVIC_EncodePriority+0x30>
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3b03      	subs	r3, #3
 8001306:	e000      	b.n	800130a <NVIC_EncodePriority+0x32>
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	69bb      	ldr	r3, [r7, #24]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43da      	mvns	r2, r3
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	401a      	ands	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001320:	f04f 31ff 	mov.w	r1, #4294967295
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	43d9      	mvns	r1, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001330:	4313      	orrs	r3, r2
         );
}
 8001332:	4618      	mov	r0, r3
 8001334:	3724      	adds	r7, #36	@ 0x24
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3b01      	subs	r3, #1
 800134c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001350:	d301      	bcc.n	8001356 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001352:	2301      	movs	r3, #1
 8001354:	e00f      	b.n	8001376 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001356:	4a0a      	ldr	r2, [pc, #40]	@ (8001380 <SysTick_Config+0x40>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	3b01      	subs	r3, #1
 800135c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135e:	210f      	movs	r1, #15
 8001360:	f04f 30ff 	mov.w	r0, #4294967295
 8001364:	f7ff ff8e 	bl	8001284 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001368:	4b05      	ldr	r3, [pc, #20]	@ (8001380 <SysTick_Config+0x40>)
 800136a:	2200      	movs	r2, #0
 800136c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136e:	4b04      	ldr	r3, [pc, #16]	@ (8001380 <SysTick_Config+0x40>)
 8001370:	2207      	movs	r2, #7
 8001372:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	e000e010 	.word	0xe000e010

08001384 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff29 	bl	80011e4 <__NVIC_SetPriorityGrouping>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b086      	sub	sp, #24
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	60b9      	str	r1, [r7, #8]
 80013a4:	607a      	str	r2, [r7, #4]
 80013a6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff40 	bl	800122c <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff90 	bl	80012d8 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5f 	bl	8001284 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff33 	bl	8001248 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa4 	bl	8001340 <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001408:	f3bf 8f5f 	dmb	sy
}
 800140c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800140e:	4b07      	ldr	r3, [pc, #28]	@ (800142c <HAL_MPU_Disable+0x28>)
 8001410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001412:	4a06      	ldr	r2, [pc, #24]	@ (800142c <HAL_MPU_Disable+0x28>)
 8001414:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001418:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800141a:	4b05      	ldr	r3, [pc, #20]	@ (8001430 <HAL_MPU_Disable+0x2c>)
 800141c:	2200      	movs	r2, #0
 800141e:	605a      	str	r2, [r3, #4]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	e000ed00 	.word	0xe000ed00
 8001430:	e000ed90 	.word	0xe000ed90

08001434 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800143c:	4a0b      	ldr	r2, [pc, #44]	@ (800146c <HAL_MPU_Enable+0x38>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001446:	4b0a      	ldr	r3, [pc, #40]	@ (8001470 <HAL_MPU_Enable+0x3c>)
 8001448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800144a:	4a09      	ldr	r2, [pc, #36]	@ (8001470 <HAL_MPU_Enable+0x3c>)
 800144c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001450:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001452:	f3bf 8f4f 	dsb	sy
}
 8001456:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001458:	f3bf 8f6f 	isb	sy
}
 800145c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	e000ed90 	.word	0xe000ed90
 8001470:	e000ed00 	.word	0xe000ed00

08001474 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	785a      	ldrb	r2, [r3, #1]
 8001480:	4b1b      	ldr	r3, [pc, #108]	@ (80014f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001482:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	4a19      	ldr	r2, [pc, #100]	@ (80014f0 <HAL_MPU_ConfigRegion+0x7c>)
 800148a:	f023 0301 	bic.w	r3, r3, #1
 800148e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001490:	4a17      	ldr	r2, [pc, #92]	@ (80014f0 <HAL_MPU_ConfigRegion+0x7c>)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	7b1b      	ldrb	r3, [r3, #12]
 800149c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	7adb      	ldrb	r3, [r3, #11]
 80014a2:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014a4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	7a9b      	ldrb	r3, [r3, #10]
 80014aa:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80014ac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	7b5b      	ldrb	r3, [r3, #13]
 80014b2:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80014b4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	7b9b      	ldrb	r3, [r3, #14]
 80014ba:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80014bc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	7bdb      	ldrb	r3, [r3, #15]
 80014c2:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80014c4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	7a5b      	ldrb	r3, [r3, #9]
 80014ca:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80014cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	7a1b      	ldrb	r3, [r3, #8]
 80014d2:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80014d4:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	7812      	ldrb	r2, [r2, #0]
 80014da:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80014de:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80014e0:	6113      	str	r3, [r2, #16]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed90 	.word	0xe000ed90

080014f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80014fc:	f7ff fe26 	bl	800114c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e2dc      	b.n	8001ac6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001512:	b2db      	uxtb	r3, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d008      	beq.n	800152a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2280      	movs	r2, #128	@ 0x80
 800151c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2200      	movs	r2, #0
 8001522:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e2cd      	b.n	8001ac6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a76      	ldr	r2, [pc, #472]	@ (8001708 <HAL_DMA_Abort+0x214>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d04a      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a74      	ldr	r2, [pc, #464]	@ (800170c <HAL_DMA_Abort+0x218>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d045      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a73      	ldr	r2, [pc, #460]	@ (8001710 <HAL_DMA_Abort+0x21c>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d040      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a71      	ldr	r2, [pc, #452]	@ (8001714 <HAL_DMA_Abort+0x220>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d03b      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a70      	ldr	r2, [pc, #448]	@ (8001718 <HAL_DMA_Abort+0x224>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d036      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a6e      	ldr	r2, [pc, #440]	@ (800171c <HAL_DMA_Abort+0x228>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d031      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a6d      	ldr	r2, [pc, #436]	@ (8001720 <HAL_DMA_Abort+0x22c>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d02c      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a6b      	ldr	r2, [pc, #428]	@ (8001724 <HAL_DMA_Abort+0x230>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d027      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6a      	ldr	r2, [pc, #424]	@ (8001728 <HAL_DMA_Abort+0x234>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d022      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a68      	ldr	r2, [pc, #416]	@ (800172c <HAL_DMA_Abort+0x238>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d01d      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	4a67      	ldr	r2, [pc, #412]	@ (8001730 <HAL_DMA_Abort+0x23c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d018      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a65      	ldr	r2, [pc, #404]	@ (8001734 <HAL_DMA_Abort+0x240>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d013      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a64      	ldr	r2, [pc, #400]	@ (8001738 <HAL_DMA_Abort+0x244>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d00e      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a62      	ldr	r2, [pc, #392]	@ (800173c <HAL_DMA_Abort+0x248>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d009      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a61      	ldr	r2, [pc, #388]	@ (8001740 <HAL_DMA_Abort+0x24c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d004      	beq.n	80015ca <HAL_DMA_Abort+0xd6>
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a5f      	ldr	r2, [pc, #380]	@ (8001744 <HAL_DMA_Abort+0x250>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Abort+0xda>
 80015ca:	2301      	movs	r3, #1
 80015cc:	e000      	b.n	80015d0 <HAL_DMA_Abort+0xdc>
 80015ce:	2300      	movs	r3, #0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d013      	beq.n	80015fc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f022 021e 	bic.w	r2, r2, #30
 80015e2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	695a      	ldr	r2, [r3, #20]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015f2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e00a      	b.n	8001612 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f022 020e 	bic.w	r2, r2, #14
 800160a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a3c      	ldr	r2, [pc, #240]	@ (8001708 <HAL_DMA_Abort+0x214>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d072      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a3a      	ldr	r2, [pc, #232]	@ (800170c <HAL_DMA_Abort+0x218>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d06d      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a39      	ldr	r2, [pc, #228]	@ (8001710 <HAL_DMA_Abort+0x21c>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d068      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a37      	ldr	r2, [pc, #220]	@ (8001714 <HAL_DMA_Abort+0x220>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d063      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a36      	ldr	r2, [pc, #216]	@ (8001718 <HAL_DMA_Abort+0x224>)
 8001640:	4293      	cmp	r3, r2
 8001642:	d05e      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a34      	ldr	r2, [pc, #208]	@ (800171c <HAL_DMA_Abort+0x228>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d059      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a33      	ldr	r2, [pc, #204]	@ (8001720 <HAL_DMA_Abort+0x22c>)
 8001654:	4293      	cmp	r3, r2
 8001656:	d054      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a31      	ldr	r2, [pc, #196]	@ (8001724 <HAL_DMA_Abort+0x230>)
 800165e:	4293      	cmp	r3, r2
 8001660:	d04f      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a30      	ldr	r2, [pc, #192]	@ (8001728 <HAL_DMA_Abort+0x234>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d04a      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4a2e      	ldr	r2, [pc, #184]	@ (800172c <HAL_DMA_Abort+0x238>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d045      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a2d      	ldr	r2, [pc, #180]	@ (8001730 <HAL_DMA_Abort+0x23c>)
 800167c:	4293      	cmp	r3, r2
 800167e:	d040      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a2b      	ldr	r2, [pc, #172]	@ (8001734 <HAL_DMA_Abort+0x240>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d03b      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a2a      	ldr	r2, [pc, #168]	@ (8001738 <HAL_DMA_Abort+0x244>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d036      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a28      	ldr	r2, [pc, #160]	@ (800173c <HAL_DMA_Abort+0x248>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d031      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a27      	ldr	r2, [pc, #156]	@ (8001740 <HAL_DMA_Abort+0x24c>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d02c      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a25      	ldr	r2, [pc, #148]	@ (8001744 <HAL_DMA_Abort+0x250>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d027      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a24      	ldr	r2, [pc, #144]	@ (8001748 <HAL_DMA_Abort+0x254>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d022      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a22      	ldr	r2, [pc, #136]	@ (800174c <HAL_DMA_Abort+0x258>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d01d      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a21      	ldr	r2, [pc, #132]	@ (8001750 <HAL_DMA_Abort+0x25c>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d018      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001754 <HAL_DMA_Abort+0x260>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d013      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a1e      	ldr	r2, [pc, #120]	@ (8001758 <HAL_DMA_Abort+0x264>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00e      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a1c      	ldr	r2, [pc, #112]	@ (800175c <HAL_DMA_Abort+0x268>)
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d009      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a1b      	ldr	r2, [pc, #108]	@ (8001760 <HAL_DMA_Abort+0x26c>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d004      	beq.n	8001702 <HAL_DMA_Abort+0x20e>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a19      	ldr	r2, [pc, #100]	@ (8001764 <HAL_DMA_Abort+0x270>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d132      	bne.n	8001768 <HAL_DMA_Abort+0x274>
 8001702:	2301      	movs	r3, #1
 8001704:	e031      	b.n	800176a <HAL_DMA_Abort+0x276>
 8001706:	bf00      	nop
 8001708:	40020010 	.word	0x40020010
 800170c:	40020028 	.word	0x40020028
 8001710:	40020040 	.word	0x40020040
 8001714:	40020058 	.word	0x40020058
 8001718:	40020070 	.word	0x40020070
 800171c:	40020088 	.word	0x40020088
 8001720:	400200a0 	.word	0x400200a0
 8001724:	400200b8 	.word	0x400200b8
 8001728:	40020410 	.word	0x40020410
 800172c:	40020428 	.word	0x40020428
 8001730:	40020440 	.word	0x40020440
 8001734:	40020458 	.word	0x40020458
 8001738:	40020470 	.word	0x40020470
 800173c:	40020488 	.word	0x40020488
 8001740:	400204a0 	.word	0x400204a0
 8001744:	400204b8 	.word	0x400204b8
 8001748:	58025408 	.word	0x58025408
 800174c:	5802541c 	.word	0x5802541c
 8001750:	58025430 	.word	0x58025430
 8001754:	58025444 	.word	0x58025444
 8001758:	58025458 	.word	0x58025458
 800175c:	5802546c 	.word	0x5802546c
 8001760:	58025480 	.word	0x58025480
 8001764:	58025494 	.word	0x58025494
 8001768:	2300      	movs	r3, #0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d007      	beq.n	800177e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001778:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800177c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a6d      	ldr	r2, [pc, #436]	@ (8001938 <HAL_DMA_Abort+0x444>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d04a      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6b      	ldr	r2, [pc, #428]	@ (800193c <HAL_DMA_Abort+0x448>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d045      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6a      	ldr	r2, [pc, #424]	@ (8001940 <HAL_DMA_Abort+0x44c>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d040      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a68      	ldr	r2, [pc, #416]	@ (8001944 <HAL_DMA_Abort+0x450>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d03b      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a67      	ldr	r2, [pc, #412]	@ (8001948 <HAL_DMA_Abort+0x454>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d036      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a65      	ldr	r2, [pc, #404]	@ (800194c <HAL_DMA_Abort+0x458>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d031      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a64      	ldr	r2, [pc, #400]	@ (8001950 <HAL_DMA_Abort+0x45c>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d02c      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a62      	ldr	r2, [pc, #392]	@ (8001954 <HAL_DMA_Abort+0x460>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d027      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a61      	ldr	r2, [pc, #388]	@ (8001958 <HAL_DMA_Abort+0x464>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d022      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a5f      	ldr	r2, [pc, #380]	@ (800195c <HAL_DMA_Abort+0x468>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d01d      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5e      	ldr	r2, [pc, #376]	@ (8001960 <HAL_DMA_Abort+0x46c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d018      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a5c      	ldr	r2, [pc, #368]	@ (8001964 <HAL_DMA_Abort+0x470>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d013      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001968 <HAL_DMA_Abort+0x474>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a59      	ldr	r2, [pc, #356]	@ (800196c <HAL_DMA_Abort+0x478>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d009      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a58      	ldr	r2, [pc, #352]	@ (8001970 <HAL_DMA_Abort+0x47c>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d004      	beq.n	800181e <HAL_DMA_Abort+0x32a>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a56      	ldr	r2, [pc, #344]	@ (8001974 <HAL_DMA_Abort+0x480>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d108      	bne.n	8001830 <HAL_DMA_Abort+0x33c>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	601a      	str	r2, [r3, #0]
 800182e:	e007      	b.n	8001840 <HAL_DMA_Abort+0x34c>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0201 	bic.w	r2, r2, #1
 800183e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001840:	e013      	b.n	800186a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001842:	f7ff fc83 	bl	800114c <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b05      	cmp	r3, #5
 800184e:	d90c      	bls.n	800186a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2220      	movs	r2, #32
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2203      	movs	r2, #3
 800185a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e12d      	b.n	8001ac6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d1e5      	bne.n	8001842 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a2f      	ldr	r2, [pc, #188]	@ (8001938 <HAL_DMA_Abort+0x444>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d04a      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2d      	ldr	r2, [pc, #180]	@ (800193c <HAL_DMA_Abort+0x448>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d045      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a2c      	ldr	r2, [pc, #176]	@ (8001940 <HAL_DMA_Abort+0x44c>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d040      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a2a      	ldr	r2, [pc, #168]	@ (8001944 <HAL_DMA_Abort+0x450>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d03b      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <HAL_DMA_Abort+0x454>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d036      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a27      	ldr	r2, [pc, #156]	@ (800194c <HAL_DMA_Abort+0x458>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d031      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a26      	ldr	r2, [pc, #152]	@ (8001950 <HAL_DMA_Abort+0x45c>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d02c      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a24      	ldr	r2, [pc, #144]	@ (8001954 <HAL_DMA_Abort+0x460>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d027      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a23      	ldr	r2, [pc, #140]	@ (8001958 <HAL_DMA_Abort+0x464>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d022      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a21      	ldr	r2, [pc, #132]	@ (800195c <HAL_DMA_Abort+0x468>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d01d      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a20      	ldr	r2, [pc, #128]	@ (8001960 <HAL_DMA_Abort+0x46c>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d018      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001964 <HAL_DMA_Abort+0x470>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d013      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001968 <HAL_DMA_Abort+0x474>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d00e      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a1b      	ldr	r2, [pc, #108]	@ (800196c <HAL_DMA_Abort+0x478>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d009      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a1a      	ldr	r2, [pc, #104]	@ (8001970 <HAL_DMA_Abort+0x47c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d004      	beq.n	8001916 <HAL_DMA_Abort+0x422>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a18      	ldr	r2, [pc, #96]	@ (8001974 <HAL_DMA_Abort+0x480>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d101      	bne.n	800191a <HAL_DMA_Abort+0x426>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_DMA_Abort+0x428>
 800191a:	2300      	movs	r3, #0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d02b      	beq.n	8001978 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001924:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800192a:	f003 031f 	and.w	r3, r3, #31
 800192e:	223f      	movs	r2, #63	@ 0x3f
 8001930:	409a      	lsls	r2, r3
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	e02a      	b.n	800198e <HAL_DMA_Abort+0x49a>
 8001938:	40020010 	.word	0x40020010
 800193c:	40020028 	.word	0x40020028
 8001940:	40020040 	.word	0x40020040
 8001944:	40020058 	.word	0x40020058
 8001948:	40020070 	.word	0x40020070
 800194c:	40020088 	.word	0x40020088
 8001950:	400200a0 	.word	0x400200a0
 8001954:	400200b8 	.word	0x400200b8
 8001958:	40020410 	.word	0x40020410
 800195c:	40020428 	.word	0x40020428
 8001960:	40020440 	.word	0x40020440
 8001964:	40020458 	.word	0x40020458
 8001968:	40020470 	.word	0x40020470
 800196c:	40020488 	.word	0x40020488
 8001970:	400204a0 	.word	0x400204a0
 8001974:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001982:	f003 031f 	and.w	r3, r3, #31
 8001986:	2201      	movs	r2, #1
 8001988:	409a      	lsls	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a4f      	ldr	r2, [pc, #316]	@ (8001ad0 <HAL_DMA_Abort+0x5dc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d072      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad4 <HAL_DMA_Abort+0x5e0>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d06d      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4c      	ldr	r2, [pc, #304]	@ (8001ad8 <HAL_DMA_Abort+0x5e4>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d068      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a4a      	ldr	r2, [pc, #296]	@ (8001adc <HAL_DMA_Abort+0x5e8>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d063      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a49      	ldr	r2, [pc, #292]	@ (8001ae0 <HAL_DMA_Abort+0x5ec>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d05e      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a47      	ldr	r2, [pc, #284]	@ (8001ae4 <HAL_DMA_Abort+0x5f0>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d059      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a46      	ldr	r2, [pc, #280]	@ (8001ae8 <HAL_DMA_Abort+0x5f4>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d054      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a44      	ldr	r2, [pc, #272]	@ (8001aec <HAL_DMA_Abort+0x5f8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d04f      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a43      	ldr	r2, [pc, #268]	@ (8001af0 <HAL_DMA_Abort+0x5fc>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d04a      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a41      	ldr	r2, [pc, #260]	@ (8001af4 <HAL_DMA_Abort+0x600>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d045      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a40      	ldr	r2, [pc, #256]	@ (8001af8 <HAL_DMA_Abort+0x604>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d040      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a3e      	ldr	r2, [pc, #248]	@ (8001afc <HAL_DMA_Abort+0x608>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d03b      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a3d      	ldr	r2, [pc, #244]	@ (8001b00 <HAL_DMA_Abort+0x60c>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d036      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a3b      	ldr	r2, [pc, #236]	@ (8001b04 <HAL_DMA_Abort+0x610>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d031      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b08 <HAL_DMA_Abort+0x614>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d02c      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a38      	ldr	r2, [pc, #224]	@ (8001b0c <HAL_DMA_Abort+0x618>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d027      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a37      	ldr	r2, [pc, #220]	@ (8001b10 <HAL_DMA_Abort+0x61c>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d022      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a35      	ldr	r2, [pc, #212]	@ (8001b14 <HAL_DMA_Abort+0x620>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d01d      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a34      	ldr	r2, [pc, #208]	@ (8001b18 <HAL_DMA_Abort+0x624>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d018      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a32      	ldr	r2, [pc, #200]	@ (8001b1c <HAL_DMA_Abort+0x628>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a31      	ldr	r2, [pc, #196]	@ (8001b20 <HAL_DMA_Abort+0x62c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d00e      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a2f      	ldr	r2, [pc, #188]	@ (8001b24 <HAL_DMA_Abort+0x630>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d009      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a2e      	ldr	r2, [pc, #184]	@ (8001b28 <HAL_DMA_Abort+0x634>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d004      	beq.n	8001a7e <HAL_DMA_Abort+0x58a>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a2c      	ldr	r2, [pc, #176]	@ (8001b2c <HAL_DMA_Abort+0x638>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d101      	bne.n	8001a82 <HAL_DMA_Abort+0x58e>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_Abort+0x590>
 8001a82:	2300      	movs	r3, #0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d015      	beq.n	8001ab4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a90:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d00c      	beq.n	8001ab4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001aa8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aae:	687a      	ldr	r2, [r7, #4]
 8001ab0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001ab2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2201      	movs	r2, #1
 8001ab8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2200      	movs	r2, #0
 8001ac0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3718      	adds	r7, #24
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40020010 	.word	0x40020010
 8001ad4:	40020028 	.word	0x40020028
 8001ad8:	40020040 	.word	0x40020040
 8001adc:	40020058 	.word	0x40020058
 8001ae0:	40020070 	.word	0x40020070
 8001ae4:	40020088 	.word	0x40020088
 8001ae8:	400200a0 	.word	0x400200a0
 8001aec:	400200b8 	.word	0x400200b8
 8001af0:	40020410 	.word	0x40020410
 8001af4:	40020428 	.word	0x40020428
 8001af8:	40020440 	.word	0x40020440
 8001afc:	40020458 	.word	0x40020458
 8001b00:	40020470 	.word	0x40020470
 8001b04:	40020488 	.word	0x40020488
 8001b08:	400204a0 	.word	0x400204a0
 8001b0c:	400204b8 	.word	0x400204b8
 8001b10:	58025408 	.word	0x58025408
 8001b14:	5802541c 	.word	0x5802541c
 8001b18:	58025430 	.word	0x58025430
 8001b1c:	58025444 	.word	0x58025444
 8001b20:	58025458 	.word	0x58025458
 8001b24:	5802546c 	.word	0x5802546c
 8001b28:	58025480 	.word	0x58025480
 8001b2c:	58025494 	.word	0x58025494

08001b30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b084      	sub	sp, #16
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e237      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d004      	beq.n	8001b58 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2280      	movs	r2, #128	@ 0x80
 8001b52:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e22c      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd0 <HAL_DMA_Abort_IT+0x1a0>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d04a      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a5b      	ldr	r2, [pc, #364]	@ (8001cd4 <HAL_DMA_Abort_IT+0x1a4>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d045      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a59      	ldr	r2, [pc, #356]	@ (8001cd8 <HAL_DMA_Abort_IT+0x1a8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d040      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a58      	ldr	r2, [pc, #352]	@ (8001cdc <HAL_DMA_Abort_IT+0x1ac>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d03b      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a56      	ldr	r2, [pc, #344]	@ (8001ce0 <HAL_DMA_Abort_IT+0x1b0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d036      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a55      	ldr	r2, [pc, #340]	@ (8001ce4 <HAL_DMA_Abort_IT+0x1b4>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d031      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a53      	ldr	r2, [pc, #332]	@ (8001ce8 <HAL_DMA_Abort_IT+0x1b8>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d02c      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a52      	ldr	r2, [pc, #328]	@ (8001cec <HAL_DMA_Abort_IT+0x1bc>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d027      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a50      	ldr	r2, [pc, #320]	@ (8001cf0 <HAL_DMA_Abort_IT+0x1c0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d022      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf4 <HAL_DMA_Abort_IT+0x1c4>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d01d      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a4d      	ldr	r2, [pc, #308]	@ (8001cf8 <HAL_DMA_Abort_IT+0x1c8>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d018      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a4c      	ldr	r2, [pc, #304]	@ (8001cfc <HAL_DMA_Abort_IT+0x1cc>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d013      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a4a      	ldr	r2, [pc, #296]	@ (8001d00 <HAL_DMA_Abort_IT+0x1d0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d00e      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a49      	ldr	r2, [pc, #292]	@ (8001d04 <HAL_DMA_Abort_IT+0x1d4>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d009      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a47      	ldr	r2, [pc, #284]	@ (8001d08 <HAL_DMA_Abort_IT+0x1d8>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_DMA_Abort_IT+0xc8>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a46      	ldr	r2, [pc, #280]	@ (8001d0c <HAL_DMA_Abort_IT+0x1dc>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d101      	bne.n	8001bfc <HAL_DMA_Abort_IT+0xcc>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <HAL_DMA_Abort_IT+0xce>
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8086 	beq.w	8001d10 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2204      	movs	r2, #4
 8001c08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd0 <HAL_DMA_Abort_IT+0x1a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d04a      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a2e      	ldr	r2, [pc, #184]	@ (8001cd4 <HAL_DMA_Abort_IT+0x1a4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d045      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a2c      	ldr	r2, [pc, #176]	@ (8001cd8 <HAL_DMA_Abort_IT+0x1a8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d040      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a2b      	ldr	r2, [pc, #172]	@ (8001cdc <HAL_DMA_Abort_IT+0x1ac>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d03b      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a29      	ldr	r2, [pc, #164]	@ (8001ce0 <HAL_DMA_Abort_IT+0x1b0>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d036      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a28      	ldr	r2, [pc, #160]	@ (8001ce4 <HAL_DMA_Abort_IT+0x1b4>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d031      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a26      	ldr	r2, [pc, #152]	@ (8001ce8 <HAL_DMA_Abort_IT+0x1b8>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d02c      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <HAL_DMA_Abort_IT+0x1bc>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d027      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a23      	ldr	r2, [pc, #140]	@ (8001cf0 <HAL_DMA_Abort_IT+0x1c0>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d022      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a22      	ldr	r2, [pc, #136]	@ (8001cf4 <HAL_DMA_Abort_IT+0x1c4>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d01d      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a20      	ldr	r2, [pc, #128]	@ (8001cf8 <HAL_DMA_Abort_IT+0x1c8>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d018      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a1f      	ldr	r2, [pc, #124]	@ (8001cfc <HAL_DMA_Abort_IT+0x1cc>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d013      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a1d      	ldr	r2, [pc, #116]	@ (8001d00 <HAL_DMA_Abort_IT+0x1d0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d00e      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a1c      	ldr	r2, [pc, #112]	@ (8001d04 <HAL_DMA_Abort_IT+0x1d4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d009      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a1a      	ldr	r2, [pc, #104]	@ (8001d08 <HAL_DMA_Abort_IT+0x1d8>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d004      	beq.n	8001cac <HAL_DMA_Abort_IT+0x17c>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a19      	ldr	r2, [pc, #100]	@ (8001d0c <HAL_DMA_Abort_IT+0x1dc>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d108      	bne.n	8001cbe <HAL_DMA_Abort_IT+0x18e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0201 	bic.w	r2, r2, #1
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	e178      	b.n	8001fb0 <HAL_DMA_Abort_IT+0x480>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f022 0201 	bic.w	r2, r2, #1
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	e16f      	b.n	8001fb0 <HAL_DMA_Abort_IT+0x480>
 8001cd0:	40020010 	.word	0x40020010
 8001cd4:	40020028 	.word	0x40020028
 8001cd8:	40020040 	.word	0x40020040
 8001cdc:	40020058 	.word	0x40020058
 8001ce0:	40020070 	.word	0x40020070
 8001ce4:	40020088 	.word	0x40020088
 8001ce8:	400200a0 	.word	0x400200a0
 8001cec:	400200b8 	.word	0x400200b8
 8001cf0:	40020410 	.word	0x40020410
 8001cf4:	40020428 	.word	0x40020428
 8001cf8:	40020440 	.word	0x40020440
 8001cfc:	40020458 	.word	0x40020458
 8001d00:	40020470 	.word	0x40020470
 8001d04:	40020488 	.word	0x40020488
 8001d08:	400204a0 	.word	0x400204a0
 8001d0c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a6c      	ldr	r2, [pc, #432]	@ (8001ed8 <HAL_DMA_Abort_IT+0x3a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04a      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a6b      	ldr	r2, [pc, #428]	@ (8001edc <HAL_DMA_Abort_IT+0x3ac>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d045      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a69      	ldr	r2, [pc, #420]	@ (8001ee0 <HAL_DMA_Abort_IT+0x3b0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d040      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a68      	ldr	r2, [pc, #416]	@ (8001ee4 <HAL_DMA_Abort_IT+0x3b4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d03b      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a66      	ldr	r2, [pc, #408]	@ (8001ee8 <HAL_DMA_Abort_IT+0x3b8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d036      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a65      	ldr	r2, [pc, #404]	@ (8001eec <HAL_DMA_Abort_IT+0x3bc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d031      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a63      	ldr	r2, [pc, #396]	@ (8001ef0 <HAL_DMA_Abort_IT+0x3c0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02c      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a62      	ldr	r2, [pc, #392]	@ (8001ef4 <HAL_DMA_Abort_IT+0x3c4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d027      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a60      	ldr	r2, [pc, #384]	@ (8001ef8 <HAL_DMA_Abort_IT+0x3c8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d022      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a5f      	ldr	r2, [pc, #380]	@ (8001efc <HAL_DMA_Abort_IT+0x3cc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d01d      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a5d      	ldr	r2, [pc, #372]	@ (8001f00 <HAL_DMA_Abort_IT+0x3d0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d018      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a5c      	ldr	r2, [pc, #368]	@ (8001f04 <HAL_DMA_Abort_IT+0x3d4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a5a      	ldr	r2, [pc, #360]	@ (8001f08 <HAL_DMA_Abort_IT+0x3d8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00e      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a59      	ldr	r2, [pc, #356]	@ (8001f0c <HAL_DMA_Abort_IT+0x3dc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a57      	ldr	r2, [pc, #348]	@ (8001f10 <HAL_DMA_Abort_IT+0x3e0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x290>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a56      	ldr	r2, [pc, #344]	@ (8001f14 <HAL_DMA_Abort_IT+0x3e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <HAL_DMA_Abort_IT+0x2a2>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e007      	b.n	8001de2 <HAL_DMA_Abort_IT+0x2b2>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3c      	ldr	r2, [pc, #240]	@ (8001ed8 <HAL_DMA_Abort_IT+0x3a8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d072      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a3a      	ldr	r2, [pc, #232]	@ (8001edc <HAL_DMA_Abort_IT+0x3ac>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d06d      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a39      	ldr	r2, [pc, #228]	@ (8001ee0 <HAL_DMA_Abort_IT+0x3b0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d068      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a37      	ldr	r2, [pc, #220]	@ (8001ee4 <HAL_DMA_Abort_IT+0x3b4>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d063      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a36      	ldr	r2, [pc, #216]	@ (8001ee8 <HAL_DMA_Abort_IT+0x3b8>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d05e      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a34      	ldr	r2, [pc, #208]	@ (8001eec <HAL_DMA_Abort_IT+0x3bc>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d059      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a33      	ldr	r2, [pc, #204]	@ (8001ef0 <HAL_DMA_Abort_IT+0x3c0>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d054      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a31      	ldr	r2, [pc, #196]	@ (8001ef4 <HAL_DMA_Abort_IT+0x3c4>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d04f      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a30      	ldr	r2, [pc, #192]	@ (8001ef8 <HAL_DMA_Abort_IT+0x3c8>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04a      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a2e      	ldr	r2, [pc, #184]	@ (8001efc <HAL_DMA_Abort_IT+0x3cc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d045      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a2d      	ldr	r2, [pc, #180]	@ (8001f00 <HAL_DMA_Abort_IT+0x3d0>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d040      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a2b      	ldr	r2, [pc, #172]	@ (8001f04 <HAL_DMA_Abort_IT+0x3d4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d03b      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8001f08 <HAL_DMA_Abort_IT+0x3d8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d036      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a28      	ldr	r2, [pc, #160]	@ (8001f0c <HAL_DMA_Abort_IT+0x3dc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d031      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a27      	ldr	r2, [pc, #156]	@ (8001f10 <HAL_DMA_Abort_IT+0x3e0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d02c      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a25      	ldr	r2, [pc, #148]	@ (8001f14 <HAL_DMA_Abort_IT+0x3e4>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d027      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a24      	ldr	r2, [pc, #144]	@ (8001f18 <HAL_DMA_Abort_IT+0x3e8>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d022      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a22      	ldr	r2, [pc, #136]	@ (8001f1c <HAL_DMA_Abort_IT+0x3ec>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d01d      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a21      	ldr	r2, [pc, #132]	@ (8001f20 <HAL_DMA_Abort_IT+0x3f0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d018      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f24 <HAL_DMA_Abort_IT+0x3f4>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d013      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a1e      	ldr	r2, [pc, #120]	@ (8001f28 <HAL_DMA_Abort_IT+0x3f8>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d00e      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8001f2c <HAL_DMA_Abort_IT+0x3fc>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d009      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a1b      	ldr	r2, [pc, #108]	@ (8001f30 <HAL_DMA_Abort_IT+0x400>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d004      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x3a2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <HAL_DMA_Abort_IT+0x404>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d132      	bne.n	8001f38 <HAL_DMA_Abort_IT+0x408>
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e031      	b.n	8001f3a <HAL_DMA_Abort_IT+0x40a>
 8001ed6:	bf00      	nop
 8001ed8:	40020010 	.word	0x40020010
 8001edc:	40020028 	.word	0x40020028
 8001ee0:	40020040 	.word	0x40020040
 8001ee4:	40020058 	.word	0x40020058
 8001ee8:	40020070 	.word	0x40020070
 8001eec:	40020088 	.word	0x40020088
 8001ef0:	400200a0 	.word	0x400200a0
 8001ef4:	400200b8 	.word	0x400200b8
 8001ef8:	40020410 	.word	0x40020410
 8001efc:	40020428 	.word	0x40020428
 8001f00:	40020440 	.word	0x40020440
 8001f04:	40020458 	.word	0x40020458
 8001f08:	40020470 	.word	0x40020470
 8001f0c:	40020488 	.word	0x40020488
 8001f10:	400204a0 	.word	0x400204a0
 8001f14:	400204b8 	.word	0x400204b8
 8001f18:	58025408 	.word	0x58025408
 8001f1c:	5802541c 	.word	0x5802541c
 8001f20:	58025430 	.word	0x58025430
 8001f24:	58025444 	.word	0x58025444
 8001f28:	58025458 	.word	0x58025458
 8001f2c:	5802546c 	.word	0x5802546c
 8001f30:	58025480 	.word	0x58025480
 8001f34:	58025494 	.word	0x58025494
 8001f38:	2300      	movs	r3, #0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d028      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f48:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f4c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f52:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f58:	f003 031f 	and.w	r3, r3, #31
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	409a      	lsls	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001f6c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001f80:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f84:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f8a:	687a      	ldr	r2, [r7, #4]
 8001f8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001f8e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001fac:	6878      	ldr	r0, [r7, #4]
 8001fae:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001fb0:	2300      	movs	r3, #0
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	3710      	adds	r7, #16
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop

08001fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	@ 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fca:	4b89      	ldr	r3, [pc, #548]	@ (80021f0 <HAL_GPIO_Init+0x234>)
 8001fcc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fce:	e194      	b.n	80022fa <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 8186 	beq.w	80022f4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f003 0303 	and.w	r3, r3, #3
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d005      	beq.n	8002000 <HAL_GPIO_Init+0x44>
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 0303 	and.w	r3, r3, #3
 8001ffc:	2b02      	cmp	r3, #2
 8001ffe:	d130      	bne.n	8002062 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	2203      	movs	r2, #3
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	69fb      	ldr	r3, [r7, #28]
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	fa02 f303 	lsl.w	r3, r2, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4313      	orrs	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002036:	2201      	movs	r2, #1
 8002038:	69fb      	ldr	r3, [r7, #28]
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	091b      	lsrs	r3, r3, #4
 800204c:	f003 0201 	and.w	r2, r3, #1
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4313      	orrs	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	f003 0303 	and.w	r3, r3, #3
 800206a:	2b03      	cmp	r3, #3
 800206c:	d017      	beq.n	800209e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	2203      	movs	r2, #3
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	fa02 f303 	lsl.w	r3, r2, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d123      	bne.n	80020f2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	08da      	lsrs	r2, r3, #3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3208      	adds	r2, #8
 80020b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	220f      	movs	r2, #15
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	691a      	ldr	r2, [r3, #16]
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	69b9      	ldr	r1, [r7, #24]
 80020ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020f8:	69fb      	ldr	r3, [r7, #28]
 80020fa:	005b      	lsls	r3, r3, #1
 80020fc:	2203      	movs	r2, #3
 80020fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002102:	43db      	mvns	r3, r3
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	4013      	ands	r3, r2
 8002108:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 0203 	and.w	r2, r3, #3
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	005b      	lsls	r3, r3, #1
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	69ba      	ldr	r2, [r7, #24]
 800211c:	4313      	orrs	r3, r2
 800211e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800212e:	2b00      	cmp	r3, #0
 8002130:	f000 80e0 	beq.w	80022f4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002134:	4b2f      	ldr	r3, [pc, #188]	@ (80021f4 <HAL_GPIO_Init+0x238>)
 8002136:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800213a:	4a2e      	ldr	r2, [pc, #184]	@ (80021f4 <HAL_GPIO_Init+0x238>)
 800213c:	f043 0302 	orr.w	r3, r3, #2
 8002140:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002144:	4b2b      	ldr	r3, [pc, #172]	@ (80021f4 <HAL_GPIO_Init+0x238>)
 8002146:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800214a:	f003 0302 	and.w	r3, r3, #2
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002152:	4a29      	ldr	r2, [pc, #164]	@ (80021f8 <HAL_GPIO_Init+0x23c>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800215e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	220f      	movs	r2, #15
 800216a:	fa02 f303 	lsl.w	r3, r2, r3
 800216e:	43db      	mvns	r3, r3
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	4013      	ands	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a20      	ldr	r2, [pc, #128]	@ (80021fc <HAL_GPIO_Init+0x240>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d052      	beq.n	8002224 <HAL_GPIO_Init+0x268>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1f      	ldr	r2, [pc, #124]	@ (8002200 <HAL_GPIO_Init+0x244>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d031      	beq.n	80021ea <HAL_GPIO_Init+0x22e>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1e      	ldr	r2, [pc, #120]	@ (8002204 <HAL_GPIO_Init+0x248>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <HAL_GPIO_Init+0x22a>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a1d      	ldr	r2, [pc, #116]	@ (8002208 <HAL_GPIO_Init+0x24c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d025      	beq.n	80021e2 <HAL_GPIO_Init+0x226>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a1c      	ldr	r2, [pc, #112]	@ (800220c <HAL_GPIO_Init+0x250>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d01f      	beq.n	80021de <HAL_GPIO_Init+0x222>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002210 <HAL_GPIO_Init+0x254>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d019      	beq.n	80021da <HAL_GPIO_Init+0x21e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a1a      	ldr	r2, [pc, #104]	@ (8002214 <HAL_GPIO_Init+0x258>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d013      	beq.n	80021d6 <HAL_GPIO_Init+0x21a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a19      	ldr	r2, [pc, #100]	@ (8002218 <HAL_GPIO_Init+0x25c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d00d      	beq.n	80021d2 <HAL_GPIO_Init+0x216>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a18      	ldr	r2, [pc, #96]	@ (800221c <HAL_GPIO_Init+0x260>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d007      	beq.n	80021ce <HAL_GPIO_Init+0x212>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a17      	ldr	r2, [pc, #92]	@ (8002220 <HAL_GPIO_Init+0x264>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d101      	bne.n	80021ca <HAL_GPIO_Init+0x20e>
 80021c6:	2309      	movs	r3, #9
 80021c8:	e02d      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ca:	230a      	movs	r3, #10
 80021cc:	e02b      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ce:	2308      	movs	r3, #8
 80021d0:	e029      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021d2:	2307      	movs	r3, #7
 80021d4:	e027      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021d6:	2306      	movs	r3, #6
 80021d8:	e025      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021da:	2305      	movs	r3, #5
 80021dc:	e023      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021de:	2304      	movs	r3, #4
 80021e0:	e021      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021e2:	2303      	movs	r3, #3
 80021e4:	e01f      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021e6:	2302      	movs	r3, #2
 80021e8:	e01d      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e01b      	b.n	8002226 <HAL_GPIO_Init+0x26a>
 80021ee:	bf00      	nop
 80021f0:	58000080 	.word	0x58000080
 80021f4:	58024400 	.word	0x58024400
 80021f8:	58000400 	.word	0x58000400
 80021fc:	58020000 	.word	0x58020000
 8002200:	58020400 	.word	0x58020400
 8002204:	58020800 	.word	0x58020800
 8002208:	58020c00 	.word	0x58020c00
 800220c:	58021000 	.word	0x58021000
 8002210:	58021400 	.word	0x58021400
 8002214:	58021800 	.word	0x58021800
 8002218:	58021c00 	.word	0x58021c00
 800221c:	58022000 	.word	0x58022000
 8002220:	58022400 	.word	0x58022400
 8002224:	2300      	movs	r3, #0
 8002226:	69fa      	ldr	r2, [r7, #28]
 8002228:	f002 0203 	and.w	r2, r2, #3
 800222c:	0092      	lsls	r2, r2, #2
 800222e:	4093      	lsls	r3, r2
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4313      	orrs	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002236:	4938      	ldr	r1, [pc, #224]	@ (8002318 <HAL_GPIO_Init+0x35c>)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	089b      	lsrs	r3, r3, #2
 800223c:	3302      	adds	r3, #2
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002244:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800226a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002272:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	43db      	mvns	r3, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4013      	ands	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d003      	beq.n	8002298 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002298:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	43db      	mvns	r3, r3
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	4013      	ands	r3, r2
 80022ae:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d003      	beq.n	80022ee <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	3301      	adds	r3, #1
 80022f8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa22 f303 	lsr.w	r3, r2, r3
 8002304:	2b00      	cmp	r3, #0
 8002306:	f47f ae63 	bne.w	8001fd0 <HAL_GPIO_Init+0x14>
  }
}
 800230a:	bf00      	nop
 800230c:	bf00      	nop
 800230e:	3724      	adds	r7, #36	@ 0x24
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	58000400 	.word	0x58000400

0800231c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	460b      	mov	r3, r1
 8002326:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	887b      	ldrh	r3, [r7, #2]
 800232e:	4013      	ands	r3, r2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d002      	beq.n	800233a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002334:	2301      	movs	r3, #1
 8002336:	73fb      	strb	r3, [r7, #15]
 8002338:	e001      	b.n	800233e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800233e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	619a      	str	r2, [r3, #24]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b082      	sub	sp, #8
 8002382:	af00      	add	r7, sp, #0
 8002384:	4603      	mov	r3, r0
 8002386:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8002388:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	4013      	ands	r3, r2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002398:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80023a2:	88fb      	ldrh	r3, [r7, #6]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7fe faa4 	bl	80008f2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
	...

080023b4 <HAL_PWR_EnterSLEEPMode>:
  * @note   Ensure to clear pending events before calling this API through
  *         HAL_PWREx_ClearPendingEvent() when the SLEEP entry is WFE.
  * @retval None.
  */
void HAL_PWR_EnterSLEEPMode (uint32_t Regulator, uint8_t SLEEPEntry)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	460b      	mov	r3, r1
 80023be:	70fb      	strb	r3, [r7, #3]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(Regulator);

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 80023c0:	4b08      	ldr	r3, [pc, #32]	@ (80023e4 <HAL_PWR_EnterSLEEPMode+0x30>)
 80023c2:	691b      	ldr	r3, [r3, #16]
 80023c4:	4a07      	ldr	r2, [pc, #28]	@ (80023e4 <HAL_PWR_EnterSLEEPMode+0x30>)
 80023c6:	f023 0304 	bic.w	r3, r3, #4
 80023ca:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry */
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80023cc:	78fb      	ldrb	r3, [r7, #3]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_PWR_EnterSLEEPMode+0x22>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 80023d2:	bf30      	wfi
  else
  {
    /* Request Wait For Event */
    __WFE ();
  }
}
 80023d4:	e000      	b.n	80023d8 <HAL_PWR_EnterSLEEPMode+0x24>
    __WFE ();
 80023d6:	bf20      	wfe
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr
 80023e4:	e000ed00 	.word	0xe000ed00

080023e8 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80023f0:	4b19      	ldr	r3, [pc, #100]	@ (8002458 <HAL_PWREx_ConfigSupply+0x70>)
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	2b04      	cmp	r3, #4
 80023fa:	d00a      	beq.n	8002412 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80023fc:	4b16      	ldr	r3, [pc, #88]	@ (8002458 <HAL_PWREx_ConfigSupply+0x70>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	d001      	beq.n	800240e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e01f      	b.n	800244e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	e01d      	b.n	800244e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002412:	4b11      	ldr	r3, [pc, #68]	@ (8002458 <HAL_PWREx_ConfigSupply+0x70>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f023 0207 	bic.w	r2, r3, #7
 800241a:	490f      	ldr	r1, [pc, #60]	@ (8002458 <HAL_PWREx_ConfigSupply+0x70>)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	4313      	orrs	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002422:	f7fe fe93 	bl	800114c <HAL_GetTick>
 8002426:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002428:	e009      	b.n	800243e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800242a:	f7fe fe8f 	bl	800114c <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002438:	d901      	bls.n	800243e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e007      	b.n	800244e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800243e:	4b06      	ldr	r3, [pc, #24]	@ (8002458 <HAL_PWREx_ConfigSupply+0x70>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002446:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800244a:	d1ee      	bne.n	800242a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800244c:	2300      	movs	r3, #0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3710      	adds	r7, #16
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	58024800 	.word	0x58024800

0800245c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08c      	sub	sp, #48	@ 0x30
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d102      	bne.n	8002470 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	f000 bc48 	b.w	8002d00 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 8088 	beq.w	800258e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800247e:	4b99      	ldr	r3, [pc, #612]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002480:	691b      	ldr	r3, [r3, #16]
 8002482:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002486:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002488:	4b96      	ldr	r3, [pc, #600]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800248a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800248e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002490:	2b10      	cmp	r3, #16
 8002492:	d007      	beq.n	80024a4 <HAL_RCC_OscConfig+0x48>
 8002494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002496:	2b18      	cmp	r3, #24
 8002498:	d111      	bne.n	80024be <HAL_RCC_OscConfig+0x62>
 800249a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d10c      	bne.n	80024be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a4:	4b8f      	ldr	r3, [pc, #572]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d06d      	beq.n	800258c <HAL_RCC_OscConfig+0x130>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d169      	bne.n	800258c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	f000 bc21 	b.w	8002d00 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x7a>
 80024c8:	4b86      	ldr	r3, [pc, #536]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a85      	ldr	r2, [pc, #532]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024ce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d2:	6013      	str	r3, [r2, #0]
 80024d4:	e02e      	b.n	8002534 <HAL_RCC_OscConfig+0xd8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x9c>
 80024de:	4b81      	ldr	r3, [pc, #516]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a80      	ldr	r2, [pc, #512]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e8:	6013      	str	r3, [r2, #0]
 80024ea:	4b7e      	ldr	r3, [pc, #504]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a7d      	ldr	r2, [pc, #500]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80024f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	e01d      	b.n	8002534 <HAL_RCC_OscConfig+0xd8>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002500:	d10c      	bne.n	800251c <HAL_RCC_OscConfig+0xc0>
 8002502:	4b78      	ldr	r3, [pc, #480]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a77      	ldr	r2, [pc, #476]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002508:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	4b75      	ldr	r3, [pc, #468]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a74      	ldr	r2, [pc, #464]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002514:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	e00b      	b.n	8002534 <HAL_RCC_OscConfig+0xd8>
 800251c:	4b71      	ldr	r3, [pc, #452]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a70      	ldr	r2, [pc, #448]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002522:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002526:	6013      	str	r3, [r2, #0]
 8002528:	4b6e      	ldr	r3, [pc, #440]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6d      	ldr	r2, [pc, #436]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800252e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d013      	beq.n	8002564 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800253c:	f7fe fe06 	bl	800114c <HAL_GetTick>
 8002540:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002542:	e008      	b.n	8002556 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002544:	f7fe fe02 	bl	800114c <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	2b64      	cmp	r3, #100	@ 0x64
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e3d4      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002556:	4b63      	ldr	r3, [pc, #396]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d0f0      	beq.n	8002544 <HAL_RCC_OscConfig+0xe8>
 8002562:	e014      	b.n	800258e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7fe fdf2 	bl	800114c <HAL_GetTick>
 8002568:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7fe fdee 	bl	800114c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e3c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800257e:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1f0      	bne.n	800256c <HAL_RCC_OscConfig+0x110>
 800258a:	e000      	b.n	800258e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 80ca 	beq.w	8002730 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800259c:	4b51      	ldr	r3, [pc, #324]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025a4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025a6:	4b4f      	ldr	r3, [pc, #316]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80025a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025aa:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d007      	beq.n	80025c2 <HAL_RCC_OscConfig+0x166>
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	2b18      	cmp	r3, #24
 80025b6:	d156      	bne.n	8002666 <HAL_RCC_OscConfig+0x20a>
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d151      	bne.n	8002666 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025c2:	4b48      	ldr	r3, [pc, #288]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0304 	and.w	r3, r3, #4
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_RCC_OscConfig+0x17e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e392      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80025da:	4b42      	ldr	r3, [pc, #264]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f023 0219 	bic.w	r2, r3, #25
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	493f      	ldr	r1, [pc, #252]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80025e8:	4313      	orrs	r3, r2
 80025ea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ec:	f7fe fdae 	bl	800114c <HAL_GetTick>
 80025f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025f2:	e008      	b.n	8002606 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025f4:	f7fe fdaa 	bl	800114c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d901      	bls.n	8002606 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002602:	2303      	movs	r3, #3
 8002604:	e37c      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002606:	4b37      	ldr	r3, [pc, #220]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d0f0      	beq.n	80025f4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002612:	f7fe fddb 	bl	80011cc <HAL_GetREVID>
 8002616:	4603      	mov	r3, r0
 8002618:	f241 0203 	movw	r2, #4099	@ 0x1003
 800261c:	4293      	cmp	r3, r2
 800261e:	d817      	bhi.n	8002650 <HAL_RCC_OscConfig+0x1f4>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	691b      	ldr	r3, [r3, #16]
 8002624:	2b40      	cmp	r3, #64	@ 0x40
 8002626:	d108      	bne.n	800263a <HAL_RCC_OscConfig+0x1de>
 8002628:	4b2e      	ldr	r3, [pc, #184]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002630:	4a2c      	ldr	r2, [pc, #176]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002636:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002638:	e07a      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800263a:	4b2a      	ldr	r3, [pc, #168]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	031b      	lsls	r3, r3, #12
 8002648:	4926      	ldr	r1, [pc, #152]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800264a:	4313      	orrs	r3, r2
 800264c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800264e:	e06f      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002650:	4b24      	ldr	r3, [pc, #144]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	061b      	lsls	r3, r3, #24
 800265e:	4921      	ldr	r1, [pc, #132]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002660:	4313      	orrs	r3, r2
 8002662:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002664:	e064      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d047      	beq.n	80026fe <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800266e:	4b1d      	ldr	r3, [pc, #116]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f023 0219 	bic.w	r2, r3, #25
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	491a      	ldr	r1, [pc, #104]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800267c:	4313      	orrs	r3, r2
 800267e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe fd64 	bl	800114c <HAL_GetTick>
 8002684:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002688:	f7fe fd60 	bl	800114c <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e332      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 0304 	and.w	r3, r3, #4
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	f7fe fd91 	bl	80011cc <HAL_GetREVID>
 80026aa:	4603      	mov	r3, r0
 80026ac:	f241 0203 	movw	r2, #4099	@ 0x1003
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d819      	bhi.n	80026e8 <HAL_RCC_OscConfig+0x28c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	691b      	ldr	r3, [r3, #16]
 80026b8:	2b40      	cmp	r3, #64	@ 0x40
 80026ba:	d108      	bne.n	80026ce <HAL_RCC_OscConfig+0x272>
 80026bc:	4b09      	ldr	r3, [pc, #36]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80026c4:	4a07      	ldr	r2, [pc, #28]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80026c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026ca:	6053      	str	r3, [r2, #4]
 80026cc:	e030      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
 80026ce:	4b05      	ldr	r3, [pc, #20]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	031b      	lsls	r3, r3, #12
 80026dc:	4901      	ldr	r1, [pc, #4]	@ (80026e4 <HAL_RCC_OscConfig+0x288>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	604b      	str	r3, [r1, #4]
 80026e2:	e025      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
 80026e4:	58024400 	.word	0x58024400
 80026e8:	4b9a      	ldr	r3, [pc, #616]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	061b      	lsls	r3, r3, #24
 80026f6:	4997      	ldr	r1, [pc, #604]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	e018      	b.n	8002730 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fe:	4b95      	ldr	r3, [pc, #596]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a94      	ldr	r2, [pc, #592]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270a:	f7fe fd1f 	bl	800114c <HAL_GetTick>
 800270e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe fd1b 	bl	800114c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e2ed      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002724:	4b8b      	ldr	r3, [pc, #556]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a9 	beq.w	8002890 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273e:	4b85      	ldr	r3, [pc, #532]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002746:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002748:	4b82      	ldr	r3, [pc, #520]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800274a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b08      	cmp	r3, #8
 8002752:	d007      	beq.n	8002764 <HAL_RCC_OscConfig+0x308>
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2b18      	cmp	r3, #24
 8002758:	d13a      	bne.n	80027d0 <HAL_RCC_OscConfig+0x374>
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 0303 	and.w	r3, r3, #3
 8002760:	2b01      	cmp	r3, #1
 8002762:	d135      	bne.n	80027d0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002764:	4b7b      	ldr	r3, [pc, #492]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_RCC_OscConfig+0x320>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	2b80      	cmp	r3, #128	@ 0x80
 8002776:	d001      	beq.n	800277c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e2c1      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800277c:	f7fe fd26 	bl	80011cc <HAL_GetREVID>
 8002780:	4603      	mov	r3, r0
 8002782:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002786:	4293      	cmp	r3, r2
 8002788:	d817      	bhi.n	80027ba <HAL_RCC_OscConfig+0x35e>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
 800278e:	2b20      	cmp	r3, #32
 8002790:	d108      	bne.n	80027a4 <HAL_RCC_OscConfig+0x348>
 8002792:	4b70      	ldr	r3, [pc, #448]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800279a:	4a6e      	ldr	r2, [pc, #440]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800279c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80027a0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027a2:	e075      	b.n	8002890 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027a4:	4b6b      	ldr	r3, [pc, #428]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a1b      	ldr	r3, [r3, #32]
 80027b0:	069b      	lsls	r3, r3, #26
 80027b2:	4968      	ldr	r1, [pc, #416]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027b8:	e06a      	b.n	8002890 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ba:	4b66      	ldr	r3, [pc, #408]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	061b      	lsls	r3, r3, #24
 80027c8:	4962      	ldr	r1, [pc, #392]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ce:	e05f      	b.n	8002890 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d042      	beq.n	800285e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80027d8:	4b5e      	ldr	r3, [pc, #376]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5d      	ldr	r2, [pc, #372]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80027de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e4:	f7fe fcb2 	bl	800114c <HAL_GetTick>
 80027e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027ea:	e008      	b.n	80027fe <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027ec:	f7fe fcae 	bl	800114c <HAL_GetTick>
 80027f0:	4602      	mov	r2, r0
 80027f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f4:	1ad3      	subs	r3, r2, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d901      	bls.n	80027fe <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80027fa:	2303      	movs	r3, #3
 80027fc:	e280      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027fe:	4b55      	ldr	r3, [pc, #340]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	2b00      	cmp	r3, #0
 8002808:	d0f0      	beq.n	80027ec <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800280a:	f7fe fcdf 	bl	80011cc <HAL_GetREVID>
 800280e:	4603      	mov	r3, r0
 8002810:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002814:	4293      	cmp	r3, r2
 8002816:	d817      	bhi.n	8002848 <HAL_RCC_OscConfig+0x3ec>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	2b20      	cmp	r3, #32
 800281e:	d108      	bne.n	8002832 <HAL_RCC_OscConfig+0x3d6>
 8002820:	4b4c      	ldr	r3, [pc, #304]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002828:	4a4a      	ldr	r2, [pc, #296]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800282a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800282e:	6053      	str	r3, [r2, #4]
 8002830:	e02e      	b.n	8002890 <HAL_RCC_OscConfig+0x434>
 8002832:	4b48      	ldr	r3, [pc, #288]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	069b      	lsls	r3, r3, #26
 8002840:	4944      	ldr	r1, [pc, #272]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	4313      	orrs	r3, r2
 8002844:	604b      	str	r3, [r1, #4]
 8002846:	e023      	b.n	8002890 <HAL_RCC_OscConfig+0x434>
 8002848:	4b42      	ldr	r3, [pc, #264]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a1b      	ldr	r3, [r3, #32]
 8002854:	061b      	lsls	r3, r3, #24
 8002856:	493f      	ldr	r1, [pc, #252]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e018      	b.n	8002890 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800285e:	4b3d      	ldr	r3, [pc, #244]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a3c      	ldr	r2, [pc, #240]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800286a:	f7fe fc6f 	bl	800114c <HAL_GetTick>
 800286e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002872:	f7fe fc6b 	bl	800114c <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e23d      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002884:	4b33      	ldr	r3, [pc, #204]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d036      	beq.n	800290a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d019      	beq.n	80028d8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a8:	4a2a      	ldr	r2, [pc, #168]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80028aa:	f043 0301 	orr.w	r3, r3, #1
 80028ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe fc4c 	bl	800114c <HAL_GetTick>
 80028b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b8:	f7fe fc48 	bl	800114c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e21a      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028ca:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80028cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0f0      	beq.n	80028b8 <HAL_RCC_OscConfig+0x45c>
 80028d6:	e018      	b.n	800290a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	4a1d      	ldr	r2, [pc, #116]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe fc32 	bl	800114c <HAL_GetTick>
 80028e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ec:	f7fe fc2e 	bl	800114c <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e200      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002900:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f0      	bne.n	80028ec <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0320 	and.w	r3, r3, #32
 8002912:	2b00      	cmp	r3, #0
 8002914:	d039      	beq.n	800298a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01c      	beq.n	8002958 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a0c      	ldr	r2, [pc, #48]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002924:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002928:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800292a:	f7fe fc0f 	bl	800114c <HAL_GetTick>
 800292e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002932:	f7fe fc0b 	bl	800114c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1dd      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002944:	4b03      	ldr	r3, [pc, #12]	@ (8002954 <HAL_RCC_OscConfig+0x4f8>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0f0      	beq.n	8002932 <HAL_RCC_OscConfig+0x4d6>
 8002950:	e01b      	b.n	800298a <HAL_RCC_OscConfig+0x52e>
 8002952:	bf00      	nop
 8002954:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002958:	4b9b      	ldr	r3, [pc, #620]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a9a      	ldr	r2, [pc, #616]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 800295e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002962:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002964:	f7fe fbf2 	bl	800114c <HAL_GetTick>
 8002968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800296c:	f7fe fbee 	bl	800114c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e1c0      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800297e:	4b92      	ldr	r3, [pc, #584]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1f0      	bne.n	800296c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0304 	and.w	r3, r3, #4
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 8081 	beq.w	8002a9a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002998:	4b8c      	ldr	r3, [pc, #560]	@ (8002bcc <HAL_RCC_OscConfig+0x770>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a8b      	ldr	r2, [pc, #556]	@ (8002bcc <HAL_RCC_OscConfig+0x770>)
 800299e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029a4:	f7fe fbd2 	bl	800114c <HAL_GetTick>
 80029a8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029aa:	e008      	b.n	80029be <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029ac:	f7fe fbce 	bl	800114c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	2b64      	cmp	r3, #100	@ 0x64
 80029b8:	d901      	bls.n	80029be <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e1a0      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029be:	4b83      	ldr	r3, [pc, #524]	@ (8002bcc <HAL_RCC_OscConfig+0x770>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d0f0      	beq.n	80029ac <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x584>
 80029d2:	4b7d      	ldr	r3, [pc, #500]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 80029d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d6:	4a7c      	ldr	r2, [pc, #496]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 80029d8:	f043 0301 	orr.w	r3, r3, #1
 80029dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80029de:	e02d      	b.n	8002a3c <HAL_RCC_OscConfig+0x5e0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10c      	bne.n	8002a02 <HAL_RCC_OscConfig+0x5a6>
 80029e8:	4b77      	ldr	r3, [pc, #476]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	4a76      	ldr	r2, [pc, #472]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 80029ee:	f023 0301 	bic.w	r3, r3, #1
 80029f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029f4:	4b74      	ldr	r3, [pc, #464]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 80029f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f8:	4a73      	ldr	r2, [pc, #460]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 80029fa:	f023 0304 	bic.w	r3, r3, #4
 80029fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a00:	e01c      	b.n	8002a3c <HAL_RCC_OscConfig+0x5e0>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c8>
 8002a0a:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a0e:	4a6e      	ldr	r2, [pc, #440]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a16:	4b6c      	ldr	r3, [pc, #432]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a1a:	4a6b      	ldr	r2, [pc, #428]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a22:	e00b      	b.n	8002a3c <HAL_RCC_OscConfig+0x5e0>
 8002a24:	4b68      	ldr	r3, [pc, #416]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a28:	4a67      	ldr	r2, [pc, #412]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a30:	4b65      	ldr	r3, [pc, #404]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a34:	4a64      	ldr	r2, [pc, #400]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d015      	beq.n	8002a70 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a44:	f7fe fb82 	bl	800114c <HAL_GetTick>
 8002a48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a4a:	e00a      	b.n	8002a62 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4c:	f7fe fb7e 	bl	800114c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e14e      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a62:	4b59      	ldr	r3, [pc, #356]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0ee      	beq.n	8002a4c <HAL_RCC_OscConfig+0x5f0>
 8002a6e:	e014      	b.n	8002a9a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a70:	f7fe fb6c 	bl	800114c <HAL_GetTick>
 8002a74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a76:	e00a      	b.n	8002a8e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a78:	f7fe fb68 	bl	800114c <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e138      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a8e:	4b4e      	ldr	r3, [pc, #312]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d1ee      	bne.n	8002a78 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f000 812d 	beq.w	8002cfe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002aa4:	4b48      	ldr	r3, [pc, #288]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002aac:	2b18      	cmp	r3, #24
 8002aae:	f000 80bd 	beq.w	8002c2c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	f040 809e 	bne.w	8002bf8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abc:	4b42      	ldr	r3, [pc, #264]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a41      	ldr	r2, [pc, #260]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002ac2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ac6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fb40 	bl	800114c <HAL_GetTick>
 8002acc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe fb3c 	bl	800114c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e10e      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae2:	4b39      	ldr	r3, [pc, #228]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002aee:	4b36      	ldr	r3, [pc, #216]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002af0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002af2:	4b37      	ldr	r3, [pc, #220]	@ (8002bd0 <HAL_RCC_OscConfig+0x774>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	687a      	ldr	r2, [r7, #4]
 8002af8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002afe:	0112      	lsls	r2, r2, #4
 8002b00:	430a      	orrs	r2, r1
 8002b02:	4931      	ldr	r1, [pc, #196]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b16:	3b01      	subs	r3, #1
 8002b18:	025b      	lsls	r3, r3, #9
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b22:	3b01      	subs	r3, #1
 8002b24:	041b      	lsls	r3, r3, #16
 8002b26:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b30:	3b01      	subs	r3, #1
 8002b32:	061b      	lsls	r3, r3, #24
 8002b34:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b38:	4923      	ldr	r1, [pc, #140]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b3e:	4b22      	ldr	r3, [pc, #136]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b42:	4a21      	ldr	r2, [pc, #132]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b4e:	4b21      	ldr	r3, [pc, #132]	@ (8002bd4 <HAL_RCC_OscConfig+0x778>)
 8002b50:	4013      	ands	r3, r2
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b56:	00d2      	lsls	r2, r2, #3
 8002b58:	491b      	ldr	r1, [pc, #108]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b5a:	4313      	orrs	r3, r2
 8002b5c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	f023 020c 	bic.w	r2, r3, #12
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6a:	4917      	ldr	r1, [pc, #92]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f023 0202 	bic.w	r2, r3, #2
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b7c:	4912      	ldr	r1, [pc, #72]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b82:	4b11      	ldr	r3, [pc, #68]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	4a10      	ldr	r2, [pc, #64]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	4a0d      	ldr	r2, [pc, #52]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002b9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ba4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002ba6:	4b08      	ldr	r3, [pc, #32]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	4a07      	ldr	r2, [pc, #28]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb2:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a04      	ldr	r2, [pc, #16]	@ (8002bc8 <HAL_RCC_OscConfig+0x76c>)
 8002bb8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bbe:	f7fe fac5 	bl	800114c <HAL_GetTick>
 8002bc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bc4:	e011      	b.n	8002bea <HAL_RCC_OscConfig+0x78e>
 8002bc6:	bf00      	nop
 8002bc8:	58024400 	.word	0x58024400
 8002bcc:	58024800 	.word	0x58024800
 8002bd0:	fffffc0c 	.word	0xfffffc0c
 8002bd4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fab8 	bl	800114c <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e08a      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bea:	4b47      	ldr	r3, [pc, #284]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x77c>
 8002bf6:	e082      	b.n	8002cfe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf8:	4b43      	ldr	r3, [pc, #268]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a42      	ldr	r2, [pc, #264]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe faa2 	bl	800114c <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fa9e 	bl	800114c <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e070      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c1e:	4b3a      	ldr	r3, [pc, #232]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x7b0>
 8002c2a:	e068      	b.n	8002cfe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c2c:	4b36      	ldr	r3, [pc, #216]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c30:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c32:	4b35      	ldr	r3, [pc, #212]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d031      	beq.n	8002ca4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f003 0203 	and.w	r2, r3, #3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c4a:	429a      	cmp	r2, r3
 8002c4c:	d12a      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	091b      	lsrs	r3, r3, #4
 8002c52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d122      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c68:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d11a      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	0a5b      	lsrs	r3, r3, #9
 8002c72:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d111      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	0c1b      	lsrs	r3, r3, #16
 8002c84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c8c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d108      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	0e1b      	lsrs	r3, r3, #24
 8002c96:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c9e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d001      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e02b      	b.n	8002d00 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ca8:	4b17      	ldr	r3, [pc, #92]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cac:	08db      	lsrs	r3, r3, #3
 8002cae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cb2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d01f      	beq.n	8002cfe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002cbe:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc2:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002cc4:	f023 0301 	bic.w	r3, r3, #1
 8002cc8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cca:	f7fe fa3f 	bl	800114c <HAL_GetTick>
 8002cce:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002cd0:	bf00      	nop
 8002cd2:	f7fe fa3b 	bl	800114c <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d0f9      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cde:	4b0a      	ldr	r3, [pc, #40]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ce2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d0c <HAL_RCC_OscConfig+0x8b0>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cea:	00d2      	lsls	r2, r2, #3
 8002cec:	4906      	ldr	r1, [pc, #24]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cf2:	4b05      	ldr	r3, [pc, #20]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf6:	4a04      	ldr	r2, [pc, #16]	@ (8002d08 <HAL_RCC_OscConfig+0x8ac>)
 8002cf8:	f043 0301 	orr.w	r3, r3, #1
 8002cfc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3730      	adds	r7, #48	@ 0x30
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	58024400 	.word	0x58024400
 8002d0c:	ffff0007 	.word	0xffff0007

08002d10 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b086      	sub	sp, #24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e19c      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b8a      	ldr	r3, [pc, #552]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 030f 	and.w	r3, r3, #15
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d910      	bls.n	8002d54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b87      	ldr	r3, [pc, #540]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f023 020f 	bic.w	r2, r3, #15
 8002d3a:	4985      	ldr	r1, [pc, #532]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d42:	4b83      	ldr	r3, [pc, #524]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 030f 	and.w	r3, r3, #15
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	429a      	cmp	r2, r3
 8002d4e:	d001      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e184      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0304 	and.w	r3, r3, #4
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d010      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	4b7b      	ldr	r3, [pc, #492]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d908      	bls.n	8002d82 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d70:	4b78      	ldr	r3, [pc, #480]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	4975      	ldr	r1, [pc, #468]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d010      	beq.n	8002db0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695a      	ldr	r2, [r3, #20]
 8002d92:	4b70      	ldr	r3, [pc, #448]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d9e:	4b6d      	ldr	r3, [pc, #436]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	496a      	ldr	r1, [pc, #424]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0310 	and.w	r3, r3, #16
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d010      	beq.n	8002dde <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699a      	ldr	r2, [r3, #24]
 8002dc0:	4b64      	ldr	r3, [pc, #400]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d908      	bls.n	8002dde <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dcc:	4b61      	ldr	r3, [pc, #388]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	495e      	ldr	r1, [pc, #376]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0320 	and.w	r3, r3, #32
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	4b59      	ldr	r3, [pc, #356]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d908      	bls.n	8002e0c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dfa:	4b56      	ldr	r3, [pc, #344]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	4953      	ldr	r1, [pc, #332]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d010      	beq.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68da      	ldr	r2, [r3, #12]
 8002e1c:	4b4d      	ldr	r3, [pc, #308]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 030f 	and.w	r3, r3, #15
 8002e24:	429a      	cmp	r2, r3
 8002e26:	d908      	bls.n	8002e3a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e28:	4b4a      	ldr	r3, [pc, #296]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f023 020f 	bic.w	r2, r3, #15
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	4947      	ldr	r1, [pc, #284]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d055      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e46:	4b43      	ldr	r3, [pc, #268]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e48:	699b      	ldr	r3, [r3, #24]
 8002e4a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	4940      	ldr	r1, [pc, #256]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d107      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e60:	4b3c      	ldr	r3, [pc, #240]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d121      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0f6      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d107      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e78:	4b36      	ldr	r3, [pc, #216]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d115      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0ea      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e90:	4b30      	ldr	r3, [pc, #192]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0de      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ea0:	4b2c      	ldr	r3, [pc, #176]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0d6      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002eb0:	4b28      	ldr	r3, [pc, #160]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	f023 0207 	bic.w	r2, r3, #7
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	4925      	ldr	r1, [pc, #148]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f943 	bl	800114c <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec8:	e00a      	b.n	8002ee0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eca:	f7fe f93f 	bl	800114c <HAL_GetTick>
 8002ece:	4602      	mov	r2, r0
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e0be      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	00db      	lsls	r3, r3, #3
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d1eb      	bne.n	8002eca <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0302 	and.w	r3, r3, #2
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68da      	ldr	r2, [r3, #12]
 8002f02:	4b14      	ldr	r3, [pc, #80]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	699b      	ldr	r3, [r3, #24]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f0e:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f023 020f 	bic.w	r2, r3, #15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	490e      	ldr	r1, [pc, #56]	@ (8002f54 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f20:	4b0b      	ldr	r3, [pc, #44]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 030f 	and.w	r3, r3, #15
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d214      	bcs.n	8002f58 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f2e:	4b08      	ldr	r3, [pc, #32]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 020f 	bic.w	r2, r3, #15
 8002f36:	4906      	ldr	r1, [pc, #24]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	4b04      	ldr	r3, [pc, #16]	@ (8002f50 <HAL_RCC_ClockConfig+0x240>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 030f 	and.w	r3, r3, #15
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d005      	beq.n	8002f58 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e086      	b.n	800305e <HAL_RCC_ClockConfig+0x34e>
 8002f50:	52002000 	.word	0x52002000
 8002f54:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d010      	beq.n	8002f86 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	4b3f      	ldr	r3, [pc, #252]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d208      	bcs.n	8002f86 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f74:	4b3c      	ldr	r3, [pc, #240]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	691b      	ldr	r3, [r3, #16]
 8002f80:	4939      	ldr	r1, [pc, #228]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d010      	beq.n	8002fb4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	695a      	ldr	r2, [r3, #20]
 8002f96:	4b34      	ldr	r3, [pc, #208]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002f98:	69db      	ldr	r3, [r3, #28]
 8002f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d208      	bcs.n	8002fb4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fa2:	4b31      	ldr	r3, [pc, #196]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	492e      	ldr	r1, [pc, #184]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d010      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699a      	ldr	r2, [r3, #24]
 8002fc4:	4b28      	ldr	r3, [pc, #160]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d208      	bcs.n	8002fe2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fd0:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	4922      	ldr	r1, [pc, #136]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0320 	and.w	r3, r3, #32
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d010      	beq.n	8003010 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	69da      	ldr	r2, [r3, #28]
 8002ff2:	4b1d      	ldr	r3, [pc, #116]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8002ff4:	6a1b      	ldr	r3, [r3, #32]
 8002ff6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d208      	bcs.n	8003010 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	4917      	ldr	r1, [pc, #92]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 800300c:	4313      	orrs	r3, r2
 800300e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003010:	f000 f834 	bl	800307c <HAL_RCC_GetSysClockFreq>
 8003014:	4602      	mov	r2, r0
 8003016:	4b14      	ldr	r3, [pc, #80]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	0a1b      	lsrs	r3, r3, #8
 800301c:	f003 030f 	and.w	r3, r3, #15
 8003020:	4912      	ldr	r1, [pc, #72]	@ (800306c <HAL_RCC_ClockConfig+0x35c>)
 8003022:	5ccb      	ldrb	r3, [r1, r3]
 8003024:	f003 031f 	and.w	r3, r3, #31
 8003028:	fa22 f303 	lsr.w	r3, r2, r3
 800302c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800302e:	4b0e      	ldr	r3, [pc, #56]	@ (8003068 <HAL_RCC_ClockConfig+0x358>)
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	4a0d      	ldr	r2, [pc, #52]	@ (800306c <HAL_RCC_ClockConfig+0x35c>)
 8003038:	5cd3      	ldrb	r3, [r2, r3]
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
 8003044:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <HAL_RCC_ClockConfig+0x360>)
 8003046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003048:	4a0a      	ldr	r2, [pc, #40]	@ (8003074 <HAL_RCC_ClockConfig+0x364>)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800304e:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <HAL_RCC_ClockConfig+0x368>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fe f830 	bl	80010b8 <HAL_InitTick>
 8003058:	4603      	mov	r3, r0
 800305a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800305c:	7bfb      	ldrb	r3, [r7, #15]
}
 800305e:	4618      	mov	r0, r3
 8003060:	3718      	adds	r7, #24
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}
 8003066:	bf00      	nop
 8003068:	58024400 	.word	0x58024400
 800306c:	08007580 	.word	0x08007580
 8003070:	24000008 	.word	0x24000008
 8003074:	24000004 	.word	0x24000004
 8003078:	2400000c 	.word	0x2400000c

0800307c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800307c:	b480      	push	{r7}
 800307e:	b089      	sub	sp, #36	@ 0x24
 8003080:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003082:	4bb3      	ldr	r3, [pc, #716]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800308a:	2b18      	cmp	r3, #24
 800308c:	f200 8155 	bhi.w	800333a <HAL_RCC_GetSysClockFreq+0x2be>
 8003090:	a201      	add	r2, pc, #4	@ (adr r2, 8003098 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003096:	bf00      	nop
 8003098:	080030fd 	.word	0x080030fd
 800309c:	0800333b 	.word	0x0800333b
 80030a0:	0800333b 	.word	0x0800333b
 80030a4:	0800333b 	.word	0x0800333b
 80030a8:	0800333b 	.word	0x0800333b
 80030ac:	0800333b 	.word	0x0800333b
 80030b0:	0800333b 	.word	0x0800333b
 80030b4:	0800333b 	.word	0x0800333b
 80030b8:	08003123 	.word	0x08003123
 80030bc:	0800333b 	.word	0x0800333b
 80030c0:	0800333b 	.word	0x0800333b
 80030c4:	0800333b 	.word	0x0800333b
 80030c8:	0800333b 	.word	0x0800333b
 80030cc:	0800333b 	.word	0x0800333b
 80030d0:	0800333b 	.word	0x0800333b
 80030d4:	0800333b 	.word	0x0800333b
 80030d8:	08003129 	.word	0x08003129
 80030dc:	0800333b 	.word	0x0800333b
 80030e0:	0800333b 	.word	0x0800333b
 80030e4:	0800333b 	.word	0x0800333b
 80030e8:	0800333b 	.word	0x0800333b
 80030ec:	0800333b 	.word	0x0800333b
 80030f0:	0800333b 	.word	0x0800333b
 80030f4:	0800333b 	.word	0x0800333b
 80030f8:	0800312f 	.word	0x0800312f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fc:	4b94      	ldr	r3, [pc, #592]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d009      	beq.n	800311c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003108:	4b91      	ldr	r3, [pc, #580]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	4a90      	ldr	r2, [pc, #576]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800311a:	e111      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800311c:	4b8d      	ldr	r3, [pc, #564]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800311e:	61bb      	str	r3, [r7, #24]
      break;
 8003120:	e10e      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003122:	4b8d      	ldr	r3, [pc, #564]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003124:	61bb      	str	r3, [r7, #24]
      break;
 8003126:	e10b      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003128:	4b8c      	ldr	r3, [pc, #560]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800312a:	61bb      	str	r3, [r7, #24]
      break;
 800312c:	e108      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800312e:	4b88      	ldr	r3, [pc, #544]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003138:	4b85      	ldr	r3, [pc, #532]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313c:	091b      	lsrs	r3, r3, #4
 800313e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003142:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003144:	4b82      	ldr	r3, [pc, #520]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800314e:	4b80      	ldr	r3, [pc, #512]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003150:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003152:	08db      	lsrs	r3, r3, #3
 8003154:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	ee07 3a90 	vmov	s15, r3
 8003162:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003166:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80e1 	beq.w	8003334 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	2b02      	cmp	r3, #2
 8003176:	f000 8083 	beq.w	8003280 <HAL_RCC_GetSysClockFreq+0x204>
 800317a:	697b      	ldr	r3, [r7, #20]
 800317c:	2b02      	cmp	r3, #2
 800317e:	f200 80a1 	bhi.w	80032c4 <HAL_RCC_GetSysClockFreq+0x248>
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d003      	beq.n	8003190 <HAL_RCC_GetSysClockFreq+0x114>
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d056      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0x1c0>
 800318e:	e099      	b.n	80032c4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003190:	4b6f      	ldr	r3, [pc, #444]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d02d      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800319c:	4b6c      	ldr	r3, [pc, #432]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	08db      	lsrs	r3, r3, #3
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	4a6b      	ldr	r2, [pc, #428]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	ee07 3a90 	vmov	s15, r3
 80031b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	ee07 3a90 	vmov	s15, r3
 80031be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b62      	ldr	r3, [pc, #392]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80031da:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80031f6:	e087      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003364 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b51      	ldr	r3, [pc, #324]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a02 	vldr	s12, [r7, #8]
 800321e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800323a:	e065      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003368 <HAL_RCC_GetSysClockFreq+0x2ec>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b40      	ldr	r3, [pc, #256]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003262:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800327e:	e043      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	ee07 3a90 	vmov	s15, r3
 8003286:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800328a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2f0>
 800328e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003292:	4b2f      	ldr	r3, [pc, #188]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	ee07 3a90 	vmov	s15, r3
 800329e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032a6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032c2:	e021      	b.n	8003308 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ce:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003368 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032d6:	4b1e      	ldr	r3, [pc, #120]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032ea:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8003360 <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003302:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003306:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003308:	4b11      	ldr	r3, [pc, #68]	@ (8003350 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	0a5b      	lsrs	r3, r3, #9
 800330e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003312:	3301      	adds	r3, #1
 8003314:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	ee07 3a90 	vmov	s15, r3
 800331c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003320:	edd7 6a07 	vldr	s13, [r7, #28]
 8003324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003328:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800332c:	ee17 3a90 	vmov	r3, s15
 8003330:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003332:	e005      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003334:	2300      	movs	r3, #0
 8003336:	61bb      	str	r3, [r7, #24]
      break;
 8003338:	e002      	b.n	8003340 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800333a:	4b07      	ldr	r3, [pc, #28]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800333c:	61bb      	str	r3, [r7, #24]
      break;
 800333e:	bf00      	nop
  }

  return sysclockfreq;
 8003340:	69bb      	ldr	r3, [r7, #24]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3724      	adds	r7, #36	@ 0x24
 8003346:	46bd      	mov	sp, r7
 8003348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	58024400 	.word	0x58024400
 8003354:	03d09000 	.word	0x03d09000
 8003358:	003d0900 	.word	0x003d0900
 800335c:	007a1200 	.word	0x007a1200
 8003360:	46000000 	.word	0x46000000
 8003364:	4c742400 	.word	0x4c742400
 8003368:	4a742400 	.word	0x4a742400
 800336c:	4af42400 	.word	0x4af42400

08003370 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003376:	f7ff fe81 	bl	800307c <HAL_RCC_GetSysClockFreq>
 800337a:	4602      	mov	r2, r0
 800337c:	4b10      	ldr	r3, [pc, #64]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	0a1b      	lsrs	r3, r3, #8
 8003382:	f003 030f 	and.w	r3, r3, #15
 8003386:	490f      	ldr	r1, [pc, #60]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x54>)
 8003388:	5ccb      	ldrb	r3, [r1, r3]
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	fa22 f303 	lsr.w	r3, r2, r3
 8003392:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <HAL_RCC_GetHCLKFreq+0x50>)
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	f003 030f 	and.w	r3, r3, #15
 800339c:	4a09      	ldr	r2, [pc, #36]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800339e:	5cd3      	ldrb	r3, [r2, r3]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	fa22 f303 	lsr.w	r3, r2, r3
 80033aa:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ae:	4a07      	ldr	r2, [pc, #28]	@ (80033cc <HAL_RCC_GetHCLKFreq+0x5c>)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033b4:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <HAL_RCC_GetHCLKFreq+0x58>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3708      	adds	r7, #8
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}
 80033c0:	58024400 	.word	0x58024400
 80033c4:	08007580 	.word	0x08007580
 80033c8:	24000008 	.word	0x24000008
 80033cc:	24000004 	.word	0x24000004

080033d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033d4:	f7ff ffcc 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 80033d8:	4602      	mov	r2, r0
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033dc:	69db      	ldr	r3, [r3, #28]
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	f003 0307 	and.w	r3, r3, #7
 80033e4:	4904      	ldr	r1, [pc, #16]	@ (80033f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033e6:	5ccb      	ldrb	r3, [r1, r3]
 80033e8:	f003 031f 	and.w	r3, r3, #31
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	58024400 	.word	0x58024400
 80033f8:	08007580 	.word	0x08007580

080033fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003400:	f7ff ffb6 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8003404:	4602      	mov	r2, r0
 8003406:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	4904      	ldr	r1, [pc, #16]	@ (8003424 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003412:	5ccb      	ldrb	r3, [r1, r3]
 8003414:	f003 031f 	and.w	r3, r3, #31
 8003418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800341c:	4618      	mov	r0, r3
 800341e:	bd80      	pop	{r7, pc}
 8003420:	58024400 	.word	0x58024400
 8003424:	08007580 	.word	0x08007580

08003428 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b0ca      	sub	sp, #296	@ 0x128
 800342e:	af00      	add	r7, sp, #0
 8003430:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800343a:	2300      	movs	r3, #0
 800343c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003448:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800344c:	2500      	movs	r5, #0
 800344e:	ea54 0305 	orrs.w	r3, r4, r5
 8003452:	d049      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003454:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003458:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800345a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800345e:	d02f      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003460:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003464:	d828      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003466:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800346a:	d01a      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800346c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003470:	d822      	bhi.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800347a:	d007      	beq.n	800348c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800347c:	e01c      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800347e:	4bb8      	ldr	r3, [pc, #736]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003480:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003482:	4ab7      	ldr	r2, [pc, #732]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003488:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800348a:	e01a      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800348c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003490:	3308      	adds	r3, #8
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f001 fc8f 	bl	8004db8 <RCCEx_PLL2_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034a0:	e00f      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a6:	3328      	adds	r3, #40	@ 0x28
 80034a8:	2102      	movs	r1, #2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f001 fd36 	bl	8004f1c <RCCEx_PLL3_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034b6:	e004      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034be:	e000      	b.n	80034c2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034ca:	4ba5      	ldr	r3, [pc, #660]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ce:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034d8:	4aa1      	ldr	r2, [pc, #644]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034da:	430b      	orrs	r3, r1
 80034dc:	6513      	str	r3, [r2, #80]	@ 0x50
 80034de:	e003      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80034f4:	f04f 0900 	mov.w	r9, #0
 80034f8:	ea58 0309 	orrs.w	r3, r8, r9
 80034fc:	d047      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003504:	2b04      	cmp	r3, #4
 8003506:	d82a      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003508:	a201      	add	r2, pc, #4	@ (adr r2, 8003510 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800350a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800350e:	bf00      	nop
 8003510:	08003525 	.word	0x08003525
 8003514:	08003533 	.word	0x08003533
 8003518:	08003549 	.word	0x08003549
 800351c:	08003567 	.word	0x08003567
 8003520:	08003567 	.word	0x08003567
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4b8e      	ldr	r3, [pc, #568]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003528:	4a8d      	ldr	r2, [pc, #564]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003530:	e01a      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003536:	3308      	adds	r3, #8
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fc3c 	bl	8004db8 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003546:	e00f      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800354c:	3328      	adds	r3, #40	@ 0x28
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fce3 	bl	8004f1c <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355c:	e004      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003564:	e000      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003566:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10a      	bne.n	8003586 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003570:	4b7b      	ldr	r3, [pc, #492]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003574:	f023 0107 	bic.w	r1, r3, #7
 8003578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800357c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800357e:	4a78      	ldr	r2, [pc, #480]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003580:	430b      	orrs	r3, r1
 8003582:	6513      	str	r3, [r2, #80]	@ 0x50
 8003584:	e003      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003586:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800358a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800358e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800359a:	f04f 0b00 	mov.w	fp, #0
 800359e:	ea5a 030b 	orrs.w	r3, sl, fp
 80035a2:	d04c      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035ae:	d030      	beq.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80035b0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035b4:	d829      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80035b8:	d02d      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80035bc:	d825      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d018      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035c2:	2b80      	cmp	r3, #128	@ 0x80
 80035c4:	d821      	bhi.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80035ca:	2b40      	cmp	r3, #64	@ 0x40
 80035cc:	d007      	beq.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80035ce:	e01c      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d0:	4b63      	ldr	r3, [pc, #396]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	4a62      	ldr	r2, [pc, #392]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035dc:	e01c      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80035de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e2:	3308      	adds	r3, #8
 80035e4:	2100      	movs	r1, #0
 80035e6:	4618      	mov	r0, r3
 80035e8:	f001 fbe6 	bl	8004db8 <RCCEx_PLL2_Config>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80035f2:	e011      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80035f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035f8:	3328      	adds	r3, #40	@ 0x28
 80035fa:	2100      	movs	r1, #0
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 fc8d 	bl	8004f1c <RCCEx_PLL3_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003608:	e006      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003610:	e002      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003612:	bf00      	nop
 8003614:	e000      	b.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003616:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003618:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003620:	4b4f      	ldr	r3, [pc, #316]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003622:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003624:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8003628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800362c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800362e:	4a4c      	ldr	r2, [pc, #304]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003630:	430b      	orrs	r3, r1
 8003632:	6513      	str	r3, [r2, #80]	@ 0x50
 8003634:	e003      	b.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003636:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800363a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800363e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003646:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800364a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003654:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8003658:	460b      	mov	r3, r1
 800365a:	4313      	orrs	r3, r2
 800365c:	d053      	beq.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800365e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003662:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003666:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800366a:	d035      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800366c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003670:	d82e      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003672:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003676:	d031      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003678:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800367c:	d828      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800367e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003682:	d01a      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003684:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003688:	d822      	bhi.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003692:	d007      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003694:	e01c      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003696:	4b32      	ldr	r3, [pc, #200]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800369a:	4a31      	ldr	r2, [pc, #196]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800369c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036a2:	e01c      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036a8:	3308      	adds	r3, #8
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fb83 	bl	8004db8 <RCCEx_PLL2_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036b8:	e011      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036be:	3328      	adds	r3, #40	@ 0x28
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 fc2a 	bl	8004f1c <RCCEx_PLL3_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ce:	e006      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80036d6:	e002      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036d8:	bf00      	nop
 80036da:	e000      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10b      	bne.n	80036fe <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80036e6:	4b1e      	ldr	r3, [pc, #120]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036ea:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036f6:	4a1a      	ldr	r2, [pc, #104]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6593      	str	r3, [r2, #88]	@ 0x58
 80036fc:	e003      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003702:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800370a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800370e:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003712:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8003716:	2300      	movs	r3, #0
 8003718:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800371c:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003720:	460b      	mov	r3, r1
 8003722:	4313      	orrs	r3, r2
 8003724:	d056      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800372a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800372e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003732:	d038      	beq.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003734:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003738:	d831      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800373a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800373e:	d034      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003740:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003744:	d82b      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003746:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800374a:	d01d      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800374c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003750:	d825      	bhi.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003752:	2b00      	cmp	r3, #0
 8003754:	d006      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003756:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800375a:	d00a      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800375c:	e01f      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800375e:	bf00      	nop
 8003760:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003764:	4ba2      	ldr	r3, [pc, #648]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003768:	4aa1      	ldr	r2, [pc, #644]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800376a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800376e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003770:	e01c      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003776:	3308      	adds	r3, #8
 8003778:	2100      	movs	r1, #0
 800377a:	4618      	mov	r0, r3
 800377c:	f001 fb1c 	bl	8004db8 <RCCEx_PLL2_Config>
 8003780:	4603      	mov	r3, r0
 8003782:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003786:	e011      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800378c:	3328      	adds	r3, #40	@ 0x28
 800378e:	2100      	movs	r1, #0
 8003790:	4618      	mov	r0, r3
 8003792:	f001 fbc3 	bl	8004f1c <RCCEx_PLL3_Config>
 8003796:	4603      	mov	r3, r0
 8003798:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800379c:	e006      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a4:	e002      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037a6:	bf00      	nop
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10b      	bne.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037b4:	4b8e      	ldr	r3, [pc, #568]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037b8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80037c4:	4a8a      	ldr	r2, [pc, #552]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037c6:	430b      	orrs	r3, r1
 80037c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80037ca:	e003      	b.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80037e0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80037e4:	2300      	movs	r3, #0
 80037e6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80037ea:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80037ee:	460b      	mov	r3, r1
 80037f0:	4313      	orrs	r3, r2
 80037f2:	d03a      	beq.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80037f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037fa:	2b30      	cmp	r3, #48	@ 0x30
 80037fc:	d01f      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x416>
 80037fe:	2b30      	cmp	r3, #48	@ 0x30
 8003800:	d819      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003802:	2b20      	cmp	r3, #32
 8003804:	d00c      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003806:	2b20      	cmp	r3, #32
 8003808:	d815      	bhi.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d019      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800380e:	2b10      	cmp	r3, #16
 8003810:	d111      	bne.n	8003836 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003812:	4b77      	ldr	r3, [pc, #476]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003816:	4a76      	ldr	r2, [pc, #472]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003818:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800381e:	e011      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003824:	3308      	adds	r3, #8
 8003826:	2102      	movs	r1, #2
 8003828:	4618      	mov	r0, r3
 800382a:	f001 fac5 	bl	8004db8 <RCCEx_PLL2_Config>
 800382e:	4603      	mov	r3, r0
 8003830:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003834:	e006      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10a      	bne.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800384c:	4b68      	ldr	r3, [pc, #416]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800384e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003850:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800385a:	4a65      	ldr	r2, [pc, #404]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800385c:	430b      	orrs	r3, r1
 800385e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003860:	e003      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003862:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003866:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800386a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800386e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003872:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003876:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800387a:	2300      	movs	r3, #0
 800387c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003880:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003884:	460b      	mov	r3, r1
 8003886:	4313      	orrs	r3, r2
 8003888:	d051      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800388e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003890:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003894:	d035      	beq.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003896:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800389a:	d82e      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800389c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038a0:	d031      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038a2:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80038a6:	d828      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038ac:	d01a      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038b2:	d822      	bhi.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038bc:	d007      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80038be:	e01c      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c0:	4b4b      	ldr	r3, [pc, #300]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c4:	4a4a      	ldr	r2, [pc, #296]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038cc:	e01c      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038d2:	3308      	adds	r3, #8
 80038d4:	2100      	movs	r1, #0
 80038d6:	4618      	mov	r0, r3
 80038d8:	f001 fa6e 	bl	8004db8 <RCCEx_PLL2_Config>
 80038dc:	4603      	mov	r3, r0
 80038de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038e2:	e011      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038e8:	3328      	adds	r3, #40	@ 0x28
 80038ea:	2100      	movs	r1, #0
 80038ec:	4618      	mov	r0, r3
 80038ee:	f001 fb15 	bl	8004f1c <RCCEx_PLL3_Config>
 80038f2:	4603      	mov	r3, r0
 80038f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038f8:	e006      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003900:	e002      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003902:	bf00      	nop
 8003904:	e000      	b.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003906:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003908:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003910:	4b37      	ldr	r3, [pc, #220]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003914:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800391c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800391e:	4a34      	ldr	r2, [pc, #208]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003920:	430b      	orrs	r3, r1
 8003922:	6513      	str	r3, [r2, #80]	@ 0x50
 8003924:	e003      	b.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800392a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800392e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003936:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800393a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800393e:	2300      	movs	r3, #0
 8003940:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003944:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003948:	460b      	mov	r3, r1
 800394a:	4313      	orrs	r3, r2
 800394c:	d056      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800394e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003952:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003954:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003958:	d033      	beq.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800395a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800395e:	d82c      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003960:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003964:	d02f      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003966:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800396a:	d826      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 800396c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003970:	d02b      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003972:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003976:	d820      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003978:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800397c:	d012      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800397e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003982:	d81a      	bhi.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003984:	2b00      	cmp	r3, #0
 8003986:	d022      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003988:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800398c:	d115      	bne.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800398e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003992:	3308      	adds	r3, #8
 8003994:	2101      	movs	r1, #1
 8003996:	4618      	mov	r0, r3
 8003998:	f001 fa0e 	bl	8004db8 <RCCEx_PLL2_Config>
 800399c:	4603      	mov	r3, r0
 800399e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039a2:	e015      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039a8:	3328      	adds	r3, #40	@ 0x28
 80039aa:	2101      	movs	r1, #1
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 fab5 	bl	8004f1c <RCCEx_PLL3_Config>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039b8:	e00a      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039c0:	e006      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039c2:	bf00      	nop
 80039c4:	e004      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039c6:	bf00      	nop
 80039c8:	e002      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ca:	bf00      	nop
 80039cc:	e000      	b.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10d      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039d8:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039dc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80039e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039e4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039e6:	4a02      	ldr	r2, [pc, #8]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e8:	430b      	orrs	r3, r1
 80039ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80039ec:	e006      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039ee:	bf00      	nop
 80039f0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80039fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a04:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003a08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003a12:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	d055      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a28:	d033      	beq.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a2e:	d82c      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a34:	d02f      	beq.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a3a:	d826      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a3c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a40:	d02b      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003a46:	d820      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a4c:	d012      	beq.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a52:	d81a      	bhi.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d022      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a5c:	d115      	bne.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a62:	3308      	adds	r3, #8
 8003a64:	2101      	movs	r1, #1
 8003a66:	4618      	mov	r0, r3
 8003a68:	f001 f9a6 	bl	8004db8 <RCCEx_PLL2_Config>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a72:	e015      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a78:	3328      	adds	r3, #40	@ 0x28
 8003a7a:	2101      	movs	r1, #1
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f001 fa4d 	bl	8004f1c <RCCEx_PLL3_Config>
 8003a82:	4603      	mov	r3, r0
 8003a84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a88:	e00a      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a90:	e006      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a92:	bf00      	nop
 8003a94:	e004      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10b      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003aa8:	4ba3      	ldr	r3, [pc, #652]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aac:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ab8:	4a9f      	ldr	r2, [pc, #636]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6593      	str	r3, [r2, #88]	@ 0x58
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ac4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003ad4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d037      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af2:	d00e      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003af4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003af8:	d816      	bhi.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d018      	beq.n	8003b30 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003afe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b02:	d111      	bne.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b8c      	ldr	r3, [pc, #560]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a8b      	ldr	r2, [pc, #556]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b10:	e00f      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2101      	movs	r1, #1
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 f94c 	bl	8004db8 <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b26:	e004      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b2e:	e000      	b.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10a      	bne.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b3e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b48:	4a7b      	ldr	r2, [pc, #492]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b4a:	430b      	orrs	r3, r1
 8003b4c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b4e:	e003      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b60:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003b64:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b68:	2300      	movs	r3, #0
 8003b6a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003b6e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4313      	orrs	r3, r2
 8003b76:	d039      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d81c      	bhi.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003b82:	a201      	add	r2, pc, #4	@ (adr r2, 8003b88 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b88:	08003bc5 	.word	0x08003bc5
 8003b8c:	08003b99 	.word	0x08003b99
 8003b90:	08003ba7 	.word	0x08003ba7
 8003b94:	08003bc5 	.word	0x08003bc5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b98:	4b67      	ldr	r3, [pc, #412]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9c:	4a66      	ldr	r2, [pc, #408]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ba2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003ba4:	e00f      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003ba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003baa:	3308      	adds	r3, #8
 8003bac:	2102      	movs	r1, #2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f001 f902 	bl	8004db8 <RCCEx_PLL2_Config>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bba:	e004      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003bc2:	e000      	b.n	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003bc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d10a      	bne.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bce:	4b5a      	ldr	r3, [pc, #360]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bd2:	f023 0103 	bic.w	r1, r3, #3
 8003bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003bdc:	4a56      	ldr	r2, [pc, #344]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bde:	430b      	orrs	r3, r1
 8003be0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003be2:	e003      	b.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003bf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003c02:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003c06:	460b      	mov	r3, r1
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f000 809f 	beq.w	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0e:	4b4b      	ldr	r3, [pc, #300]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a4a      	ldr	r2, [pc, #296]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1a:	f7fd fa97 	bl	800114c <HAL_GetTick>
 8003c1e:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c22:	e00b      	b.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd fa92 	bl	800114c <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	2b64      	cmp	r3, #100	@ 0x64
 8003c32:	d903      	bls.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c34:	2303      	movs	r3, #3
 8003c36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c3a:	e005      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003d3c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d0ed      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d179      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c50:	4b39      	ldr	r3, [pc, #228]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c52:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c58:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c5c:	4053      	eors	r3, r2
 8003c5e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d015      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c66:	4b34      	ldr	r3, [pc, #208]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c6e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c72:	4b31      	ldr	r3, [pc, #196]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c76:	4a30      	ldr	r2, [pc, #192]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c82:	4a2d      	ldr	r2, [pc, #180]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c88:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c8a:	4a2b      	ldr	r2, [pc, #172]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003c90:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c96:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003c9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c9e:	d118      	bne.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fd fa54 	bl	800114c <HAL_GetTick>
 8003ca4:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ca8:	e00d      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003caa:	f7fd fa4f 	bl	800114c <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003cb4:	1ad2      	subs	r2, r2, r3
 8003cb6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003cba:	429a      	cmp	r2, r3
 8003cbc:	d903      	bls.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003cc4:	e005      	b.n	8003cd2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d0eb      	beq.n	8003caa <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d129      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cde:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ce2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ce6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cea:	d10e      	bne.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003cec:	4b12      	ldr	r3, [pc, #72]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003cfc:	091a      	lsrs	r2, r3, #4
 8003cfe:	4b10      	ldr	r3, [pc, #64]	@ (8003d40 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d00:	4013      	ands	r3, r2
 8003d02:	4a0d      	ldr	r2, [pc, #52]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d04:	430b      	orrs	r3, r1
 8003d06:	6113      	str	r3, [r2, #16]
 8003d08:	e005      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d0c:	691b      	ldr	r3, [r3, #16]
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d10:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003d14:	6113      	str	r3, [r2, #16]
 8003d16:	4b08      	ldr	r3, [pc, #32]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d18:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003d22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d26:	4a04      	ldr	r2, [pc, #16]	@ (8003d38 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d2c:	e00e      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003d36:	e009      	b.n	8003d4c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d38:	58024400 	.word	0x58024400
 8003d3c:	58024800 	.word	0x58024800
 8003d40:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d44:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f002 0301 	and.w	r3, r2, #1
 8003d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d62:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003d66:	460b      	mov	r3, r1
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	f000 8089 	beq.w	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d72:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d74:	2b28      	cmp	r3, #40	@ 0x28
 8003d76:	d86b      	bhi.n	8003e50 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d78:	a201      	add	r2, pc, #4	@ (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003e59 	.word	0x08003e59
 8003d84:	08003e51 	.word	0x08003e51
 8003d88:	08003e51 	.word	0x08003e51
 8003d8c:	08003e51 	.word	0x08003e51
 8003d90:	08003e51 	.word	0x08003e51
 8003d94:	08003e51 	.word	0x08003e51
 8003d98:	08003e51 	.word	0x08003e51
 8003d9c:	08003e51 	.word	0x08003e51
 8003da0:	08003e25 	.word	0x08003e25
 8003da4:	08003e51 	.word	0x08003e51
 8003da8:	08003e51 	.word	0x08003e51
 8003dac:	08003e51 	.word	0x08003e51
 8003db0:	08003e51 	.word	0x08003e51
 8003db4:	08003e51 	.word	0x08003e51
 8003db8:	08003e51 	.word	0x08003e51
 8003dbc:	08003e51 	.word	0x08003e51
 8003dc0:	08003e3b 	.word	0x08003e3b
 8003dc4:	08003e51 	.word	0x08003e51
 8003dc8:	08003e51 	.word	0x08003e51
 8003dcc:	08003e51 	.word	0x08003e51
 8003dd0:	08003e51 	.word	0x08003e51
 8003dd4:	08003e51 	.word	0x08003e51
 8003dd8:	08003e51 	.word	0x08003e51
 8003ddc:	08003e51 	.word	0x08003e51
 8003de0:	08003e59 	.word	0x08003e59
 8003de4:	08003e51 	.word	0x08003e51
 8003de8:	08003e51 	.word	0x08003e51
 8003dec:	08003e51 	.word	0x08003e51
 8003df0:	08003e51 	.word	0x08003e51
 8003df4:	08003e51 	.word	0x08003e51
 8003df8:	08003e51 	.word	0x08003e51
 8003dfc:	08003e51 	.word	0x08003e51
 8003e00:	08003e59 	.word	0x08003e59
 8003e04:	08003e51 	.word	0x08003e51
 8003e08:	08003e51 	.word	0x08003e51
 8003e0c:	08003e51 	.word	0x08003e51
 8003e10:	08003e51 	.word	0x08003e51
 8003e14:	08003e51 	.word	0x08003e51
 8003e18:	08003e51 	.word	0x08003e51
 8003e1c:	08003e51 	.word	0x08003e51
 8003e20:	08003e59 	.word	0x08003e59
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e28:	3308      	adds	r3, #8
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 ffc3 	bl	8004db8 <RCCEx_PLL2_Config>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e38:	e00f      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3e:	3328      	adds	r3, #40	@ 0x28
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f001 f86a 	bl	8004f1c <RCCEx_PLL3_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e4e:	e004      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e56:	e000      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e62:	4bbf      	ldr	r3, [pc, #764]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003e70:	4abb      	ldr	r2, [pc, #748]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e72:	430b      	orrs	r3, r1
 8003e74:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e76:	e003      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e88:	f002 0302 	and.w	r3, r2, #2
 8003e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e90:	2300      	movs	r3, #0
 8003e92:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003e96:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	d041      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ea4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003ea6:	2b05      	cmp	r3, #5
 8003ea8:	d824      	bhi.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003eaa:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eb0:	08003efd 	.word	0x08003efd
 8003eb4:	08003ec9 	.word	0x08003ec9
 8003eb8:	08003edf 	.word	0x08003edf
 8003ebc:	08003efd 	.word	0x08003efd
 8003ec0:	08003efd 	.word	0x08003efd
 8003ec4:	08003efd 	.word	0x08003efd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ecc:	3308      	adds	r3, #8
 8003ece:	2101      	movs	r1, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f000 ff71 	bl	8004db8 <RCCEx_PLL2_Config>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003edc:	e00f      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ee2:	3328      	adds	r3, #40	@ 0x28
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f001 f818 	bl	8004f1c <RCCEx_PLL3_Config>
 8003eec:	4603      	mov	r3, r0
 8003eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10a      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f06:	4b96      	ldr	r3, [pc, #600]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f0a:	f023 0107 	bic.w	r1, r3, #7
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003f14:	4a92      	ldr	r2, [pc, #584]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f16:	430b      	orrs	r3, r1
 8003f18:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f1a:	e003      	b.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f2c:	f002 0304 	and.w	r3, r2, #4
 8003f30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4313      	orrs	r3, r2
 8003f42:	d044      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f4c:	2b05      	cmp	r3, #5
 8003f4e:	d825      	bhi.n	8003f9c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f50:	a201      	add	r2, pc, #4	@ (adr r2, 8003f58 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f56:	bf00      	nop
 8003f58:	08003fa5 	.word	0x08003fa5
 8003f5c:	08003f71 	.word	0x08003f71
 8003f60:	08003f87 	.word	0x08003f87
 8003f64:	08003fa5 	.word	0x08003fa5
 8003f68:	08003fa5 	.word	0x08003fa5
 8003f6c:	08003fa5 	.word	0x08003fa5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f74:	3308      	adds	r3, #8
 8003f76:	2101      	movs	r1, #1
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 ff1d 	bl	8004db8 <RCCEx_PLL2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f84:	e00f      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f8a:	3328      	adds	r3, #40	@ 0x28
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 ffc4 	bl	8004f1c <RCCEx_PLL3_Config>
 8003f94:	4603      	mov	r3, r0
 8003f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f9a:	e004      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003fa2:	e000      	b.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d10b      	bne.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fae:	4b6c      	ldr	r3, [pc, #432]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fb2:	f023 0107 	bic.w	r1, r3, #7
 8003fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fbe:	4a68      	ldr	r2, [pc, #416]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fc4:	e003      	b.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f002 0320 	and.w	r3, r2, #32
 8003fda:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fe4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4313      	orrs	r3, r2
 8003fec:	d055      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ffa:	d033      	beq.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003ffc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004000:	d82c      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004006:	d02f      	beq.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d826      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800400e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004012:	d02b      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004014:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004018:	d820      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800401a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800401e:	d012      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004020:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004024:	d81a      	bhi.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004026:	2b00      	cmp	r3, #0
 8004028:	d022      	beq.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800402a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800402e:	d115      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004034:	3308      	adds	r3, #8
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f000 febd 	bl	8004db8 <RCCEx_PLL2_Config>
 800403e:	4603      	mov	r3, r0
 8004040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004044:	e015      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800404a:	3328      	adds	r3, #40	@ 0x28
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 ff64 	bl	8004f1c <RCCEx_PLL3_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800405a:	e00a      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004062:	e006      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004064:	bf00      	nop
 8004066:	e004      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004068:	bf00      	nop
 800406a:	e002      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800406c:	bf00      	nop
 800406e:	e000      	b.n	8004072 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10b      	bne.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800407a:	4b39      	ldr	r3, [pc, #228]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800407c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800408a:	4a35      	ldr	r2, [pc, #212]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800408c:	430b      	orrs	r3, r1
 800408e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004090:	e003      	b.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800409a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800409e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040a2:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80040a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80040aa:	2300      	movs	r3, #0
 80040ac:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80040b0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80040b4:	460b      	mov	r3, r1
 80040b6:	4313      	orrs	r3, r2
 80040b8:	d058      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040c2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040c6:	d033      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80040c8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80040cc:	d82c      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d2:	d02f      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80040d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d8:	d826      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040da:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040de:	d02b      	beq.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80040e0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80040e4:	d820      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040e6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040ea:	d012      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80040ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040f0:	d81a      	bhi.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d022      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80040f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040fa:	d115      	bne.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004100:	3308      	adds	r3, #8
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f000 fe57 	bl	8004db8 <RCCEx_PLL2_Config>
 800410a:	4603      	mov	r3, r0
 800410c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004110:	e015      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004116:	3328      	adds	r3, #40	@ 0x28
 8004118:	2102      	movs	r1, #2
 800411a:	4618      	mov	r0, r3
 800411c:	f000 fefe 	bl	8004f1c <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004126:	e00a      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800412e:	e006      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004130:	bf00      	nop
 8004132:	e004      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004134:	bf00      	nop
 8004136:	e002      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004138:	bf00      	nop
 800413a:	e000      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800413c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800413e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10e      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004146:	4b06      	ldr	r3, [pc, #24]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004152:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004156:	4a02      	ldr	r2, [pc, #8]	@ (8004160 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004158:	430b      	orrs	r3, r1
 800415a:	6593      	str	r3, [r2, #88]	@ 0x58
 800415c:	e006      	b.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800415e:	bf00      	nop
 8004160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004164:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004168:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800416c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004174:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004178:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004182:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004186:	460b      	mov	r3, r1
 8004188:	4313      	orrs	r3, r2
 800418a:	d055      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800418c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004190:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004194:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004198:	d033      	beq.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800419a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800419e:	d82c      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a4:	d02f      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041aa:	d826      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041ac:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041b0:	d02b      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80041b2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80041b6:	d820      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041bc:	d012      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80041be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80041c2:	d81a      	bhi.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d022      	beq.n	800420e <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80041c8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80041cc:	d115      	bne.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041d2:	3308      	adds	r3, #8
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fdee 	bl	8004db8 <RCCEx_PLL2_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041e2:	e015      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041e8:	3328      	adds	r3, #40	@ 0x28
 80041ea:	2102      	movs	r1, #2
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fe95 	bl	8004f1c <RCCEx_PLL3_Config>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80041f8:	e00a      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004200:	e006      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800420e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004210:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10b      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004218:	4ba1      	ldr	r3, [pc, #644]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800421a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800421c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004224:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004228:	4a9d      	ldr	r2, [pc, #628]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800422a:	430b      	orrs	r3, r1
 800422c:	6593      	str	r3, [r2, #88]	@ 0x58
 800422e:	e003      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004230:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004234:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004238:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800423c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004240:	f002 0308 	and.w	r3, r2, #8
 8004244:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004248:	2300      	movs	r3, #0
 800424a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800424e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004252:	460b      	mov	r3, r1
 8004254:	4313      	orrs	r3, r2
 8004256:	d01e      	beq.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004258:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800425c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004260:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004264:	d10c      	bne.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004266:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800426a:	3328      	adds	r3, #40	@ 0x28
 800426c:	2102      	movs	r1, #2
 800426e:	4618      	mov	r0, r3
 8004270:	f000 fe54 	bl	8004f1c <RCCEx_PLL3_Config>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004280:	4b87      	ldr	r3, [pc, #540]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004290:	4a83      	ldr	r2, [pc, #524]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004292:	430b      	orrs	r3, r1
 8004294:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800429a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429e:	f002 0310 	and.w	r3, r2, #16
 80042a2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042a6:	2300      	movs	r3, #0
 80042a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80042ac:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80042b0:	460b      	mov	r3, r1
 80042b2:	4313      	orrs	r3, r2
 80042b4:	d01e      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042c2:	d10c      	bne.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042c8:	3328      	adds	r3, #40	@ 0x28
 80042ca:	2102      	movs	r1, #2
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fe25 	bl	8004f1c <RCCEx_PLL3_Config>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d002      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042de:	4b70      	ldr	r3, [pc, #448]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80042e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80042ee:	4a6c      	ldr	r2, [pc, #432]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004300:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800430a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d03e      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004314:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004318:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800431c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004320:	d022      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004322:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004326:	d81b      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004330:	d00b      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004332:	e015      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004334:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004338:	3308      	adds	r3, #8
 800433a:	2100      	movs	r1, #0
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fd3b 	bl	8004db8 <RCCEx_PLL2_Config>
 8004342:	4603      	mov	r3, r0
 8004344:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004348:	e00f      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800434a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800434e:	3328      	adds	r3, #40	@ 0x28
 8004350:	2102      	movs	r1, #2
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fde2 	bl	8004f1c <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004372:	4b4b      	ldr	r3, [pc, #300]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004374:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004376:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800437a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800437e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004382:	4a47      	ldr	r2, [pc, #284]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004384:	430b      	orrs	r3, r1
 8004386:	6593      	str	r3, [r2, #88]	@ 0x58
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800438e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800439e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80043a0:	2300      	movs	r3, #0
 80043a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80043a4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d03b      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043ba:	d01f      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80043bc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80043c0:	d818      	bhi.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80043c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80043c6:	d003      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80043c8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043cc:	d007      	beq.n	80043de <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80043ce:	e011      	b.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043d0:	4b33      	ldr	r3, [pc, #204]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4a32      	ldr	r2, [pc, #200]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80043d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043dc:	e00f      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043e2:	3328      	adds	r3, #40	@ 0x28
 80043e4:	2101      	movs	r1, #1
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fd98 	bl	8004f1c <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80043f2:	e004      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80043fa:	e000      	b.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80043fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10b      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004406:	4b26      	ldr	r3, [pc, #152]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800440a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800440e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004416:	4a22      	ldr	r2, [pc, #136]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004418:	430b      	orrs	r3, r1
 800441a:	6553      	str	r3, [r2, #84]	@ 0x54
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800441e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004422:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004432:	673b      	str	r3, [r7, #112]	@ 0x70
 8004434:	2300      	movs	r3, #0
 8004436:	677b      	str	r3, [r7, #116]	@ 0x74
 8004438:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800443c:	460b      	mov	r3, r1
 800443e:	4313      	orrs	r3, r2
 8004440:	d034      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004446:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004448:	2b00      	cmp	r3, #0
 800444a:	d003      	beq.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800444c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004450:	d007      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004452:	e011      	b.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004454:	4b12      	ldr	r3, [pc, #72]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	4a11      	ldr	r2, [pc, #68]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800445e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004460:	e00e      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004466:	3308      	adds	r3, #8
 8004468:	2102      	movs	r1, #2
 800446a:	4618      	mov	r0, r3
 800446c:	f000 fca4 	bl	8004db8 <RCCEx_PLL2_Config>
 8004470:	4603      	mov	r3, r0
 8004472:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004476:	e003      	b.n	8004480 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800447e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10d      	bne.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004488:	4b05      	ldr	r3, [pc, #20]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800448a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800448c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004490:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004494:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004496:	4a02      	ldr	r2, [pc, #8]	@ (80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004498:	430b      	orrs	r3, r1
 800449a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800449c:	e006      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800449e:	bf00      	nop
 80044a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80044a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80044ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80044b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80044ba:	2300      	movs	r3, #0
 80044bc:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80044be:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d00c      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044cc:	3328      	adds	r3, #40	@ 0x28
 80044ce:	2102      	movs	r1, #2
 80044d0:	4618      	mov	r0, r3
 80044d2:	f000 fd23 	bl	8004f1c <RCCEx_PLL3_Config>
 80044d6:	4603      	mov	r3, r0
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d002      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ea:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80044ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80044f0:	2300      	movs	r3, #0
 80044f2:	667b      	str	r3, [r7, #100]	@ 0x64
 80044f4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80044f8:	460b      	mov	r3, r1
 80044fa:	4313      	orrs	r3, r2
 80044fc:	d038      	beq.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004506:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800450a:	d018      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800450c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004510:	d811      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004512:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004516:	d014      	beq.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800451c:	d80b      	bhi.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d011      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004526:	d106      	bne.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004528:	4bc3      	ldr	r3, [pc, #780]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	4ac2      	ldr	r2, [pc, #776]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800452e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004532:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004534:	e008      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800453c:	e004      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800453e:	bf00      	nop
 8004540:	e002      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004542:	bf00      	nop
 8004544:	e000      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004546:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004548:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800454c:	2b00      	cmp	r3, #0
 800454e:	d10b      	bne.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004550:	4bb9      	ldr	r3, [pc, #740]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004552:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004554:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004560:	4ab5      	ldr	r2, [pc, #724]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004562:	430b      	orrs	r3, r1
 8004564:	6553      	str	r3, [r2, #84]	@ 0x54
 8004566:	e003      	b.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004568:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800456c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800457c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800457e:	2300      	movs	r3, #0
 8004580:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004582:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004586:	460b      	mov	r3, r1
 8004588:	4313      	orrs	r3, r2
 800458a:	d009      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800458c:	4baa      	ldr	r3, [pc, #680]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800458e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004590:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004598:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800459a:	4aa7      	ldr	r2, [pc, #668]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800459c:	430b      	orrs	r3, r1
 800459e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80045a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80045ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80045ae:	2300      	movs	r3, #0
 80045b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80045b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80045b6:	460b      	mov	r3, r1
 80045b8:	4313      	orrs	r3, r2
 80045ba:	d00a      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045bc:	4b9e      	ldr	r3, [pc, #632]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80045cc:	4a9a      	ldr	r2, [pc, #616]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045ce:	430b      	orrs	r3, r1
 80045d0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045da:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80045de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045e0:	2300      	movs	r3, #0
 80045e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80045e8:	460b      	mov	r3, r1
 80045ea:	4313      	orrs	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045ee:	4b92      	ldr	r3, [pc, #584]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80045f2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80045f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045fc:	4a8e      	ldr	r2, [pc, #568]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80045fe:	430b      	orrs	r3, r1
 8004600:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800460e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004610:	2300      	movs	r3, #0
 8004612:	647b      	str	r3, [r7, #68]	@ 0x44
 8004614:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8004618:	460b      	mov	r3, r1
 800461a:	4313      	orrs	r3, r2
 800461c:	d00e      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800461e:	4b86      	ldr	r3, [pc, #536]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	4a85      	ldr	r2, [pc, #532]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004624:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8004628:	6113      	str	r3, [r2, #16]
 800462a:	4b83      	ldr	r3, [pc, #524]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800462c:	6919      	ldr	r1, [r3, #16]
 800462e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004632:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004636:	4a80      	ldr	r2, [pc, #512]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004638:	430b      	orrs	r3, r1
 800463a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800463c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8004648:	63bb      	str	r3, [r7, #56]	@ 0x38
 800464a:	2300      	movs	r3, #0
 800464c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800464e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004652:	460b      	mov	r3, r1
 8004654:	4313      	orrs	r3, r2
 8004656:	d009      	beq.n	800466c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004658:	4b77      	ldr	r3, [pc, #476]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800465a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004660:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004666:	4a74      	ldr	r2, [pc, #464]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004668:	430b      	orrs	r3, r1
 800466a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800466c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004678:	633b      	str	r3, [r7, #48]	@ 0x30
 800467a:	2300      	movs	r3, #0
 800467c:	637b      	str	r3, [r7, #52]	@ 0x34
 800467e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004682:	460b      	mov	r3, r1
 8004684:	4313      	orrs	r3, r2
 8004686:	d00a      	beq.n	800469e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004688:	4b6b      	ldr	r3, [pc, #428]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800468c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004694:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004698:	4a67      	ldr	r2, [pc, #412]	@ (8004838 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800469a:	430b      	orrs	r3, r1
 800469c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800469e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a6:	2100      	movs	r1, #0
 80046a8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80046b0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80046b4:	460b      	mov	r3, r1
 80046b6:	4313      	orrs	r3, r2
 80046b8:	d011      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046be:	3308      	adds	r3, #8
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f000 fb78 	bl	8004db8 <RCCEx_PLL2_Config>
 80046c8:	4603      	mov	r3, r0
 80046ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e6:	2100      	movs	r1, #0
 80046e8:	6239      	str	r1, [r7, #32]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80046f0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046f4:	460b      	mov	r3, r1
 80046f6:	4313      	orrs	r3, r2
 80046f8:	d011      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046fe:	3308      	adds	r3, #8
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f000 fb58 	bl	8004db8 <RCCEx_PLL2_Config>
 8004708:	4603      	mov	r3, r0
 800470a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800470e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800471a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800471e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004726:	2100      	movs	r1, #0
 8004728:	61b9      	str	r1, [r7, #24]
 800472a:	f003 0304 	and.w	r3, r3, #4
 800472e:	61fb      	str	r3, [r7, #28]
 8004730:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004734:	460b      	mov	r3, r1
 8004736:	4313      	orrs	r3, r2
 8004738:	d011      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800473a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800473e:	3308      	adds	r3, #8
 8004740:	2102      	movs	r1, #2
 8004742:	4618      	mov	r0, r3
 8004744:	f000 fb38 	bl	8004db8 <RCCEx_PLL2_Config>
 8004748:	4603      	mov	r3, r0
 800474a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800474e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004752:	2b00      	cmp	r3, #0
 8004754:	d003      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004756:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800475a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800475e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004766:	2100      	movs	r1, #0
 8004768:	6139      	str	r1, [r7, #16]
 800476a:	f003 0308 	and.w	r3, r3, #8
 800476e:	617b      	str	r3, [r7, #20]
 8004770:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004774:	460b      	mov	r3, r1
 8004776:	4313      	orrs	r3, r2
 8004778:	d011      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800477a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800477e:	3328      	adds	r3, #40	@ 0x28
 8004780:	2100      	movs	r1, #0
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fbca 	bl	8004f1c <RCCEx_PLL3_Config>
 8004788:	4603      	mov	r3, r0
 800478a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800478e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800479a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800479e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047a6:	2100      	movs	r1, #0
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	f003 0310 	and.w	r3, r3, #16
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80047b4:	460b      	mov	r3, r1
 80047b6:	4313      	orrs	r3, r2
 80047b8:	d011      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047be:	3328      	adds	r3, #40	@ 0x28
 80047c0:	2101      	movs	r1, #1
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fbaa 	bl	8004f1c <RCCEx_PLL3_Config>
 80047c8:	4603      	mov	r3, r0
 80047ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80047ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e6:	2100      	movs	r1, #0
 80047e8:	6039      	str	r1, [r7, #0]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	607b      	str	r3, [r7, #4]
 80047f0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047f4:	460b      	mov	r3, r1
 80047f6:	4313      	orrs	r3, r2
 80047f8:	d011      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047fe:	3328      	adds	r3, #40	@ 0x28
 8004800:	2102      	movs	r1, #2
 8004802:	4618      	mov	r0, r3
 8004804:	f000 fb8a 	bl	8004f1c <RCCEx_PLL3_Config>
 8004808:	4603      	mov	r3, r0
 800480a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800480e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004816:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800481a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800481e:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
}
 800482c:	4618      	mov	r0, r3
 800482e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004832:	46bd      	mov	sp, r7
 8004834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004838:	58024400 	.word	0x58024400

0800483c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004840:	f7fe fd96 	bl	8003370 <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b06      	ldr	r3, [pc, #24]	@ (8004860 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004848:	6a1b      	ldr	r3, [r3, #32]
 800484a:	091b      	lsrs	r3, r3, #4
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4904      	ldr	r1, [pc, #16]	@ (8004864 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	f003 031f 	and.w	r3, r3, #31
 8004858:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800485c:	4618      	mov	r0, r3
 800485e:	bd80      	pop	{r7, pc}
 8004860:	58024400 	.word	0x58024400
 8004864:	08007580 	.word	0x08007580

08004868 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004868:	b480      	push	{r7}
 800486a:	b089      	sub	sp, #36	@ 0x24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004870:	4ba1      	ldr	r3, [pc, #644]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800487a:	4b9f      	ldr	r3, [pc, #636]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800487c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800487e:	0b1b      	lsrs	r3, r3, #12
 8004880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004884:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004886:	4b9c      	ldr	r3, [pc, #624]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004892:	4b99      	ldr	r3, [pc, #612]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004896:	08db      	lsrs	r3, r3, #3
 8004898:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8111 	beq.w	8004ad8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80048b6:	69bb      	ldr	r3, [r7, #24]
 80048b8:	2b02      	cmp	r3, #2
 80048ba:	f000 8083 	beq.w	80049c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	f200 80a1 	bhi.w	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80048c6:	69bb      	ldr	r3, [r7, #24]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d003      	beq.n	80048d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d056      	beq.n	8004980 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80048d2:	e099      	b.n	8004a08 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048d4:	4b88      	ldr	r3, [pc, #544]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d02d      	beq.n	800493c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80048e0:	4b85      	ldr	r3, [pc, #532]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	08db      	lsrs	r3, r3, #3
 80048e6:	f003 0303 	and.w	r3, r3, #3
 80048ea:	4a84      	ldr	r2, [pc, #528]	@ (8004afc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80048ec:	fa22 f303 	lsr.w	r3, r2, r3
 80048f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	ee07 3a90 	vmov	s15, r3
 80048f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490a:	4b7b      	ldr	r3, [pc, #492]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800490c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004912:	ee07 3a90 	vmov	s15, r3
 8004916:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491a:	ed97 6a03 	vldr	s12, [r7, #12]
 800491e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004922:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004926:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800492e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004932:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004936:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800493a:	e087      	b.n	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004b04 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800494a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800494e:	4b6a      	ldr	r3, [pc, #424]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004950:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800495e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004962:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004966:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800496e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004972:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004976:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800497e:	e065      	b.n	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	ee07 3a90 	vmov	s15, r3
 8004986:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800498a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800498e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004992:	4b59      	ldr	r3, [pc, #356]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800499a:	ee07 3a90 	vmov	s15, r3
 800499e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80049a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049c2:	e043      	b.n	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004b0c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80049d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049d6:	4b48      	ldr	r3, [pc, #288]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049de:	ee07 3a90 	vmov	s15, r3
 80049e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80049ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80049fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a06:	e021      	b.n	8004a4c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	ee07 3a90 	vmov	s15, r3
 8004a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a12:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004b08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004a16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a1a:	4b37      	ldr	r3, [pc, #220]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a22:	ee07 3a90 	vmov	s15, r3
 8004a26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a2e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004b00 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004a32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a4a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004a4c:	4b2a      	ldr	r3, [pc, #168]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a50:	0a5b      	lsrs	r3, r3, #9
 8004a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a56:	ee07 3a90 	vmov	s15, r3
 8004a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a62:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a66:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a72:	ee17 2a90 	vmov	r2, s15
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a7e:	0c1b      	lsrs	r3, r3, #16
 8004a80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a84:	ee07 3a90 	vmov	s15, r3
 8004a88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a90:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004a94:	edd7 6a07 	vldr	s13, [r7, #28]
 8004a98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa0:	ee17 2a90 	vmov	r2, s15
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004aa8:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	0e1b      	lsrs	r3, r3, #24
 8004aae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ab2:	ee07 3a90 	vmov	s15, r3
 8004ab6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004abe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ac2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ac6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004aca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ace:	ee17 2a90 	vmov	r2, s15
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004ad6:	e008      	b.n	8004aea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	609a      	str	r2, [r3, #8]
}
 8004aea:	bf00      	nop
 8004aec:	3724      	adds	r7, #36	@ 0x24
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	58024400 	.word	0x58024400
 8004afc:	03d09000 	.word	0x03d09000
 8004b00:	46000000 	.word	0x46000000
 8004b04:	4c742400 	.word	0x4c742400
 8004b08:	4a742400 	.word	0x4a742400
 8004b0c:	4af42400 	.word	0x4af42400

08004b10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b089      	sub	sp, #36	@ 0x24
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b18:	4ba1      	ldr	r3, [pc, #644]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	f003 0303 	and.w	r3, r3, #3
 8004b20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004b22:	4b9f      	ldr	r3, [pc, #636]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b26:	0d1b      	lsrs	r3, r3, #20
 8004b28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004b2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b32:	0a1b      	lsrs	r3, r3, #8
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004b3a:	4b99      	ldr	r3, [pc, #612]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3e:	08db      	lsrs	r3, r3, #3
 8004b40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	fb02 f303 	mul.w	r3, r2, r3
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	f000 8111 	beq.w	8004d80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	f000 8083 	beq.w	8004c6c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	2b02      	cmp	r3, #2
 8004b6a:	f200 80a1 	bhi.w	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d056      	beq.n	8004c28 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004b7a:	e099      	b.n	8004cb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b7c:	4b88      	ldr	r3, [pc, #544]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d02d      	beq.n	8004be4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b88:	4b85      	ldr	r3, [pc, #532]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	08db      	lsrs	r3, r3, #3
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	4a84      	ldr	r2, [pc, #528]	@ (8004da4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004b94:	fa22 f303 	lsr.w	r3, r2, r3
 8004b98:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	ee07 3a90 	vmov	s15, r3
 8004ba0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb2:	4b7b      	ldr	r3, [pc, #492]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bba:	ee07 3a90 	vmov	s15, r3
 8004bbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bc6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bde:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004be2:	e087      	b.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	ee07 3a90 	vmov	s15, r3
 8004bea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004dac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004bf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bf6:	4b6a      	ldr	r3, [pc, #424]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bfe:	ee07 3a90 	vmov	s15, r3
 8004c02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c26:	e065      	b.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	ee07 3a90 	vmov	s15, r3
 8004c2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c32:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004c36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c3a:	4b59      	ldr	r3, [pc, #356]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c42:	ee07 3a90 	vmov	s15, r3
 8004c46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c4e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c6a:	e043      	b.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004c6c:	697b      	ldr	r3, [r7, #20]
 8004c6e:	ee07 3a90 	vmov	s15, r3
 8004c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c76:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004db4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004c7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c7e:	4b48      	ldr	r3, [pc, #288]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c86:	ee07 3a90 	vmov	s15, r3
 8004c8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c92:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004caa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cae:	e021      	b.n	8004cf4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	ee07 3a90 	vmov	s15, r3
 8004cb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004db0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004cbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cc2:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cca:	ee07 3a90 	vmov	s15, r3
 8004cce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004cd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cd6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004da8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004cda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ce2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004cf2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004cf4:	4b2a      	ldr	r3, [pc, #168]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf8:	0a5b      	lsrs	r3, r3, #9
 8004cfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cfe:	ee07 3a90 	vmov	s15, r3
 8004d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d1a:	ee17 2a90 	vmov	r2, s15
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004d22:	4b1f      	ldr	r3, [pc, #124]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	0c1b      	lsrs	r3, r3, #16
 8004d28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d2c:	ee07 3a90 	vmov	s15, r3
 8004d30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d48:	ee17 2a90 	vmov	r2, s15
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004d50:	4b13      	ldr	r3, [pc, #76]	@ (8004da0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d54:	0e1b      	lsrs	r3, r3, #24
 8004d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5a:	ee07 3a90 	vmov	s15, r3
 8004d5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d76:	ee17 2a90 	vmov	r2, s15
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004d7e:	e008      	b.n	8004d92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	609a      	str	r2, [r3, #8]
}
 8004d92:	bf00      	nop
 8004d94:	3724      	adds	r7, #36	@ 0x24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	58024400 	.word	0x58024400
 8004da4:	03d09000 	.word	0x03d09000
 8004da8:	46000000 	.word	0x46000000
 8004dac:	4c742400 	.word	0x4c742400
 8004db0:	4a742400 	.word	0x4a742400
 8004db4:	4af42400 	.word	0x4af42400

08004db8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc6:	4b53      	ldr	r3, [pc, #332]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dca:	f003 0303 	and.w	r3, r3, #3
 8004dce:	2b03      	cmp	r3, #3
 8004dd0:	d101      	bne.n	8004dd6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e099      	b.n	8004f0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004dd6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a4e      	ldr	r2, [pc, #312]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ddc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004de0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de2:	f7fc f9b3 	bl	800114c <HAL_GetTick>
 8004de6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004de8:	e008      	b.n	8004dfc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004dea:	f7fc f9af 	bl	800114c <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d901      	bls.n	8004dfc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e086      	b.n	8004f0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004dfc:	4b45      	ldr	r3, [pc, #276]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1f0      	bne.n	8004dea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004e08:	4b42      	ldr	r3, [pc, #264]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	031b      	lsls	r3, r3, #12
 8004e16:	493f      	ldr	r1, [pc, #252]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	3b01      	subs	r3, #1
 8004e22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	3b01      	subs	r3, #1
 8004e2c:	025b      	lsls	r3, r3, #9
 8004e2e:	b29b      	uxth	r3, r3
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	041b      	lsls	r3, r3, #16
 8004e3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	061b      	lsls	r3, r3, #24
 8004e48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e4c:	4931      	ldr	r1, [pc, #196]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004e52:	4b30      	ldr	r3, [pc, #192]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	492d      	ldr	r1, [pc, #180]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004e64:	4b2b      	ldr	r3, [pc, #172]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	f023 0220 	bic.w	r2, r3, #32
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	699b      	ldr	r3, [r3, #24]
 8004e70:	4928      	ldr	r1, [pc, #160]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004e76:	4b27      	ldr	r3, [pc, #156]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e7a:	4a26      	ldr	r2, [pc, #152]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e7c:	f023 0310 	bic.w	r3, r3, #16
 8004e80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004e82:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e86:	4b24      	ldr	r3, [pc, #144]	@ (8004f18 <RCCEx_PLL2_Config+0x160>)
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	69d2      	ldr	r2, [r2, #28]
 8004e8e:	00d2      	lsls	r2, r2, #3
 8004e90:	4920      	ldr	r1, [pc, #128]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e92:	4313      	orrs	r3, r2
 8004e94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004e96:	4b1f      	ldr	r3, [pc, #124]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004e9c:	f043 0310 	orr.w	r3, r3, #16
 8004ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d106      	bne.n	8004eb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eac:	4a19      	ldr	r2, [pc, #100]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004eae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004eb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eb4:	e00f      	b.n	8004ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d106      	bne.n	8004eca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ebc:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec0:	4a14      	ldr	r2, [pc, #80]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ec2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ec6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ec8:	e005      	b.n	8004ed6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004eca:	4b12      	ldr	r3, [pc, #72]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	4a11      	ldr	r2, [pc, #68]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ed0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004ed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004edc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004ee0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ee2:	f7fc f933 	bl	800114c <HAL_GetTick>
 8004ee6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ee8:	e008      	b.n	8004efc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004eea:	f7fc f92f 	bl	800114c <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e006      	b.n	8004f0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004efc:	4b05      	ldr	r3, [pc, #20]	@ (8004f14 <RCCEx_PLL2_Config+0x15c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d0f0      	beq.n	8004eea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3710      	adds	r7, #16
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	58024400 	.word	0x58024400
 8004f18:	ffff0007 	.word	0xffff0007

08004f1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f26:	2300      	movs	r3, #0
 8004f28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004f2a:	4b53      	ldr	r3, [pc, #332]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2e:	f003 0303 	and.w	r3, r3, #3
 8004f32:	2b03      	cmp	r3, #3
 8004f34:	d101      	bne.n	8004f3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e099      	b.n	800506e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004f3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a4e      	ldr	r2, [pc, #312]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f46:	f7fc f901 	bl	800114c <HAL_GetTick>
 8004f4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f4c:	e008      	b.n	8004f60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f4e:	f7fc f8fd 	bl	800114c <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	2b02      	cmp	r3, #2
 8004f5a:	d901      	bls.n	8004f60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e086      	b.n	800506e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004f60:	4b45      	ldr	r3, [pc, #276]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004f6c:	4b42      	ldr	r3, [pc, #264]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	051b      	lsls	r3, r3, #20
 8004f7a:	493f      	ldr	r1, [pc, #252]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	3b01      	subs	r3, #1
 8004f86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	025b      	lsls	r3, r3, #9
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	041b      	lsls	r3, r3, #16
 8004f9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	3b01      	subs	r3, #1
 8004faa:	061b      	lsls	r3, r3, #24
 8004fac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004fb0:	4931      	ldr	r1, [pc, #196]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004fb6:	4b30      	ldr	r3, [pc, #192]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	492d      	ldr	r1, [pc, #180]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004fc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fcc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	4928      	ldr	r1, [pc, #160]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004fda:	4b27      	ldr	r3, [pc, #156]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fde:	4a26      	ldr	r2, [pc, #152]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004fe6:	4b24      	ldr	r3, [pc, #144]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004fe8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fea:	4b24      	ldr	r3, [pc, #144]	@ (800507c <RCCEx_PLL3_Config+0x160>)
 8004fec:	4013      	ands	r3, r2
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	69d2      	ldr	r2, [r2, #28]
 8004ff2:	00d2      	lsls	r2, r2, #3
 8004ff4:	4920      	ldr	r1, [pc, #128]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8004ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005000:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d106      	bne.n	800501a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800500c:	4b1a      	ldr	r3, [pc, #104]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 800500e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005010:	4a19      	ldr	r2, [pc, #100]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005012:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005016:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005018:	e00f      	b.n	800503a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d106      	bne.n	800502e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005020:	4b15      	ldr	r3, [pc, #84]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005024:	4a14      	ldr	r2, [pc, #80]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005026:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800502a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800502c:	e005      	b.n	800503a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800502e:	4b12      	ldr	r3, [pc, #72]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005032:	4a11      	ldr	r2, [pc, #68]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005034:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005038:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800503a:	4b0f      	ldr	r3, [pc, #60]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a0e      	ldr	r2, [pc, #56]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005044:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005046:	f7fc f881 	bl	800114c <HAL_GetTick>
 800504a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800504c:	e008      	b.n	8005060 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800504e:	f7fc f87d 	bl	800114c <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	2b02      	cmp	r3, #2
 800505a:	d901      	bls.n	8005060 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e006      	b.n	800506e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005060:	4b05      	ldr	r3, [pc, #20]	@ (8005078 <RCCEx_PLL3_Config+0x15c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005068:	2b00      	cmp	r3, #0
 800506a:	d0f0      	beq.n	800504e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	58024400 	.word	0x58024400
 800507c:	ffff0007 	.word	0xffff0007

08005080 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b082      	sub	sp, #8
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d101      	bne.n	8005092 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e042      	b.n	8005118 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005098:	2b00      	cmp	r3, #0
 800509a:	d106      	bne.n	80050aa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7fb ff1b 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2224      	movs	r2, #36	@ 0x24
 80050ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0201 	bic.w	r2, r2, #1
 80050c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d002      	beq.n	80050d0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f001 fa14 	bl	80064f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 fca9 	bl	8005a28 <UART_SetConfig>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e01b      	b.n	8005118 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685a      	ldr	r2, [r3, #4]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0201 	orr.w	r2, r2, #1
 800510e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f001 fa93 	bl	800663c <UART_CheckIdleState>
 8005116:	4603      	mov	r3, r0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b08a      	sub	sp, #40	@ 0x28
 8005124:	af02      	add	r7, sp, #8
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	603b      	str	r3, [r7, #0]
 800512c:	4613      	mov	r3, r2
 800512e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005136:	2b20      	cmp	r3, #32
 8005138:	d17b      	bne.n	8005232 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d002      	beq.n	8005146 <HAL_UART_Transmit+0x26>
 8005140:	88fb      	ldrh	r3, [r7, #6]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e074      	b.n	8005234 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2221      	movs	r2, #33	@ 0x21
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800515a:	f7fb fff7 	bl	800114c <HAL_GetTick>
 800515e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	88fa      	ldrh	r2, [r7, #6]
 8005164:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	88fa      	ldrh	r2, [r7, #6]
 800516c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	689b      	ldr	r3, [r3, #8]
 8005174:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005178:	d108      	bne.n	800518c <HAL_UART_Transmit+0x6c>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d104      	bne.n	800518c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	61bb      	str	r3, [r7, #24]
 800518a:	e003      	b.n	8005194 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005194:	e030      	b.n	80051f8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2200      	movs	r2, #0
 800519e:	2180      	movs	r1, #128	@ 0x80
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f001 faf5 	bl	8006790 <UART_WaitOnFlagUntilTimeout>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d005      	beq.n	80051b8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80051b4:	2303      	movs	r3, #3
 80051b6:	e03d      	b.n	8005234 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80051b8:	69fb      	ldr	r3, [r7, #28]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10b      	bne.n	80051d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051be:	69bb      	ldr	r3, [r7, #24]
 80051c0:	881b      	ldrh	r3, [r3, #0]
 80051c2:	461a      	mov	r2, r3
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051cc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80051ce:	69bb      	ldr	r3, [r7, #24]
 80051d0:	3302      	adds	r3, #2
 80051d2:	61bb      	str	r3, [r7, #24]
 80051d4:	e007      	b.n	80051e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80051e0:	69fb      	ldr	r3, [r7, #28]
 80051e2:	3301      	adds	r3, #1
 80051e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80051fe:	b29b      	uxth	r3, r3
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1c8      	bne.n	8005196 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	2200      	movs	r2, #0
 800520c:	2140      	movs	r1, #64	@ 0x40
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f001 fabe 	bl	8006790 <UART_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2220      	movs	r2, #32
 800521e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e006      	b.n	8005234 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	e000      	b.n	8005234 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005232:	2302      	movs	r3, #2
  }
}
 8005234:	4618      	mov	r0, r3
 8005236:	3720      	adds	r7, #32
 8005238:	46bd      	mov	sp, r7
 800523a:	bd80      	pop	{r7, pc}

0800523c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b0ba      	sub	sp, #232	@ 0xe8
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	69db      	ldr	r3, [r3, #28]
 800524a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005262:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005266:	f640 030f 	movw	r3, #2063	@ 0x80f
 800526a:	4013      	ands	r3, r2
 800526c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005270:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11b      	bne.n	80052b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527c:	f003 0320 	and.w	r3, r3, #32
 8005280:	2b00      	cmp	r3, #0
 8005282:	d015      	beq.n	80052b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005288:	f003 0320 	and.w	r3, r3, #32
 800528c:	2b00      	cmp	r3, #0
 800528e:	d105      	bne.n	800529c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005294:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d009      	beq.n	80052b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f000 8393 	beq.w	80059cc <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	4798      	blx	r3
      }
      return;
 80052ae:	e38d      	b.n	80059cc <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80052b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	f000 8123 	beq.w	8005500 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80052ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052be:	4b8d      	ldr	r3, [pc, #564]	@ (80054f4 <HAL_UART_IRQHandler+0x2b8>)
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d106      	bne.n	80052d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80052c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80052ca:	4b8b      	ldr	r3, [pc, #556]	@ (80054f8 <HAL_UART_IRQHandler+0x2bc>)
 80052cc:	4013      	ands	r3, r2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	f000 8116 	beq.w	8005500 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <HAL_UART_IRQHandler+0xc8>
 80052e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2201      	movs	r2, #1
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f043 0201 	orr.w	r2, r3, #1
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d011      	beq.n	8005334 <HAL_UART_IRQHandler+0xf8>
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2202      	movs	r2, #2
 8005322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532a:	f043 0204 	orr.w	r2, r3, #4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005338:	f003 0304 	and.w	r3, r3, #4
 800533c:	2b00      	cmp	r3, #0
 800533e:	d011      	beq.n	8005364 <HAL_UART_IRQHandler+0x128>
 8005340:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00b      	beq.n	8005364 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	2204      	movs	r2, #4
 8005352:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535a:	f043 0202 	orr.w	r2, r3, #2
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005364:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d017      	beq.n	80053a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005374:	f003 0320 	and.w	r3, r3, #32
 8005378:	2b00      	cmp	r3, #0
 800537a:	d105      	bne.n	8005388 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800537c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005380:	4b5c      	ldr	r3, [pc, #368]	@ (80054f4 <HAL_UART_IRQHandler+0x2b8>)
 8005382:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00b      	beq.n	80053a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2208      	movs	r2, #8
 800538e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005396:	f043 0208 	orr.w	r2, r3, #8
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80053a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d012      	beq.n	80053d2 <HAL_UART_IRQHandler+0x196>
 80053ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d00c      	beq.n	80053d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80053c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053c8:	f043 0220 	orr.w	r2, r3, #32
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053d8:	2b00      	cmp	r3, #0
 80053da:	f000 82f9 	beq.w	80059d0 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d013      	beq.n	8005412 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d105      	bne.n	8005402 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d007      	beq.n	8005412 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005418:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005426:	2b40      	cmp	r3, #64	@ 0x40
 8005428:	d005      	beq.n	8005436 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800542a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800542e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005432:	2b00      	cmp	r3, #0
 8005434:	d054      	beq.n	80054e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f001 fa18 	bl	800686c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005446:	2b40      	cmp	r3, #64	@ 0x40
 8005448:	d146      	bne.n	80054d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	3308      	adds	r3, #8
 8005450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005460:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005464:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005468:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	3308      	adds	r3, #8
 8005472:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005476:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800547a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005482:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005486:	e841 2300 	strex	r3, r2, [r1]
 800548a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800548e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1d9      	bne.n	800544a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549c:	2b00      	cmp	r3, #0
 800549e:	d017      	beq.n	80054d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a6:	4a15      	ldr	r2, [pc, #84]	@ (80054fc <HAL_UART_IRQHandler+0x2c0>)
 80054a8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fc fb3d 	bl	8001b30 <HAL_DMA_Abort_IT>
 80054b6:	4603      	mov	r3, r0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d019      	beq.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80054ca:	4610      	mov	r0, r2
 80054cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ce:	e00f      	b.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 fa93 	bl	80059fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054d6:	e00b      	b.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f000 fa8f 	bl	80059fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054de:	e007      	b.n	80054f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f000 fa8b 	bl	80059fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80054ee:	e26f      	b.n	80059d0 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054f0:	bf00      	nop
    return;
 80054f2:	e26d      	b.n	80059d0 <HAL_UART_IRQHandler+0x794>
 80054f4:	10000001 	.word	0x10000001
 80054f8:	04000120 	.word	0x04000120
 80054fc:	08006939 	.word	0x08006939

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005504:	2b01      	cmp	r3, #1
 8005506:	f040 8203 	bne.w	8005910 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800550a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800550e:	f003 0310 	and.w	r3, r3, #16
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 81fc 	beq.w	8005910 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800551c:	f003 0310 	and.w	r3, r3, #16
 8005520:	2b00      	cmp	r3, #0
 8005522:	f000 81f5 	beq.w	8005910 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2210      	movs	r2, #16
 800552c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689b      	ldr	r3, [r3, #8]
 8005534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005538:	2b40      	cmp	r3, #64	@ 0x40
 800553a:	f040 816d 	bne.w	8005818 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4aa4      	ldr	r2, [pc, #656]	@ (80057d8 <HAL_UART_IRQHandler+0x59c>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d068      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4aa1      	ldr	r2, [pc, #644]	@ (80057dc <HAL_UART_IRQHandler+0x5a0>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d061      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a9f      	ldr	r2, [pc, #636]	@ (80057e0 <HAL_UART_IRQHandler+0x5a4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d05a      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a9c      	ldr	r2, [pc, #624]	@ (80057e4 <HAL_UART_IRQHandler+0x5a8>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d053      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a9a      	ldr	r2, [pc, #616]	@ (80057e8 <HAL_UART_IRQHandler+0x5ac>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d04c      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a97      	ldr	r2, [pc, #604]	@ (80057ec <HAL_UART_IRQHandler+0x5b0>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d045      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a95      	ldr	r2, [pc, #596]	@ (80057f0 <HAL_UART_IRQHandler+0x5b4>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d03e      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a92      	ldr	r2, [pc, #584]	@ (80057f4 <HAL_UART_IRQHandler+0x5b8>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d037      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a90      	ldr	r2, [pc, #576]	@ (80057f8 <HAL_UART_IRQHandler+0x5bc>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d030      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a8d      	ldr	r2, [pc, #564]	@ (80057fc <HAL_UART_IRQHandler+0x5c0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d029      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a8b      	ldr	r2, [pc, #556]	@ (8005800 <HAL_UART_IRQHandler+0x5c4>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d022      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a88      	ldr	r2, [pc, #544]	@ (8005804 <HAL_UART_IRQHandler+0x5c8>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01b      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a86      	ldr	r2, [pc, #536]	@ (8005808 <HAL_UART_IRQHandler+0x5cc>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d014      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a83      	ldr	r2, [pc, #524]	@ (800580c <HAL_UART_IRQHandler+0x5d0>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d00d      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a81      	ldr	r2, [pc, #516]	@ (8005810 <HAL_UART_IRQHandler+0x5d4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d006      	beq.n	800561e <HAL_UART_IRQHandler+0x3e2>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a7e      	ldr	r2, [pc, #504]	@ (8005814 <HAL_UART_IRQHandler+0x5d8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d106      	bne.n	800562c <HAL_UART_IRQHandler+0x3f0>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	b29b      	uxth	r3, r3
 800562a:	e005      	b.n	8005638 <HAL_UART_IRQHandler+0x3fc>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	b29b      	uxth	r3, r3
 8005638:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800563c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005640:	2b00      	cmp	r3, #0
 8005642:	f000 80ad 	beq.w	80057a0 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800564c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005650:	429a      	cmp	r2, r3
 8005652:	f080 80a5 	bcs.w	80057a0 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800565c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800566c:	f000 8087 	beq.w	800577e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800567c:	e853 3f00 	ldrex	r3, [r3]
 8005680:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005684:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005688:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800568c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	461a      	mov	r2, r3
 8005696:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800569a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800569e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80056a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80056b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d1da      	bne.n	8005670 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	3308      	adds	r3, #8
 80056c0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80056ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056cc:	f023 0301 	bic.w	r3, r3, #1
 80056d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	3308      	adds	r3, #8
 80056da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056de:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e1      	bne.n	80056ba <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005706:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005708:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800570c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	3308      	adds	r3, #8
 8005716:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800571a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800571c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005720:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005722:	e841 2300 	strex	r3, r2, [r1]
 8005726:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005728:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1e3      	bne.n	80056f6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800574a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800574c:	f023 0310 	bic.w	r3, r3, #16
 8005750:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800575e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005760:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005764:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800576c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e4      	bne.n	800573c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005778:	4618      	mov	r0, r3
 800577a:	f7fb febb 	bl	80014f4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2202      	movs	r2, #2
 8005782:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005790:	b29b      	uxth	r3, r3
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f000 f939 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800579e:	e119      	b.n	80059d4 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057aa:	429a      	cmp	r2, r3
 80057ac:	f040 8112 	bne.w	80059d4 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80057b6:	69db      	ldr	r3, [r3, #28]
 80057b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057bc:	f040 810a 	bne.w	80059d4 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 f91e 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
      return;
 80057d4:	e0fe      	b.n	80059d4 <HAL_UART_IRQHandler+0x798>
 80057d6:	bf00      	nop
 80057d8:	40020010 	.word	0x40020010
 80057dc:	40020028 	.word	0x40020028
 80057e0:	40020040 	.word	0x40020040
 80057e4:	40020058 	.word	0x40020058
 80057e8:	40020070 	.word	0x40020070
 80057ec:	40020088 	.word	0x40020088
 80057f0:	400200a0 	.word	0x400200a0
 80057f4:	400200b8 	.word	0x400200b8
 80057f8:	40020410 	.word	0x40020410
 80057fc:	40020428 	.word	0x40020428
 8005800:	40020440 	.word	0x40020440
 8005804:	40020458 	.word	0x40020458
 8005808:	40020470 	.word	0x40020470
 800580c:	40020488 	.word	0x40020488
 8005810:	400204a0 	.word	0x400204a0
 8005814:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005824:	b29b      	uxth	r3, r3
 8005826:	1ad3      	subs	r3, r2, r3
 8005828:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005832:	b29b      	uxth	r3, r3
 8005834:	2b00      	cmp	r3, #0
 8005836:	f000 80cf 	beq.w	80059d8 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800583a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800583e:	2b00      	cmp	r3, #0
 8005840:	f000 80ca 	beq.w	80059d8 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584c:	e853 3f00 	ldrex	r3, [r3]
 8005850:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005852:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005854:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005858:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	461a      	mov	r2, r3
 8005862:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005866:	647b      	str	r3, [r7, #68]	@ 0x44
 8005868:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800586c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005874:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e4      	bne.n	8005844 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	3308      	adds	r3, #8
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	e853 3f00 	ldrex	r3, [r3]
 8005888:	623b      	str	r3, [r7, #32]
   return(result);
 800588a:	6a3a      	ldr	r2, [r7, #32]
 800588c:	4b55      	ldr	r3, [pc, #340]	@ (80059e4 <HAL_UART_IRQHandler+0x7a8>)
 800588e:	4013      	ands	r3, r2
 8005890:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	3308      	adds	r3, #8
 800589a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800589e:	633a      	str	r2, [r7, #48]	@ 0x30
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80058a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a6:	e841 2300 	strex	r3, r2, [r1]
 80058aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80058ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d1e3      	bne.n	800587a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2220      	movs	r2, #32
 80058b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0310 	bic.w	r3, r3, #16
 80058da:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	461a      	mov	r2, r3
 80058e4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80058e8:	61fb      	str	r3, [r7, #28]
 80058ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ec:	69b9      	ldr	r1, [r7, #24]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	e841 2300 	strex	r3, r2, [r1]
 80058f4:	617b      	str	r3, [r7, #20]
   return(result);
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1e4      	bne.n	80058c6 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005902:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005906:	4619      	mov	r1, r3
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f881 	bl	8005a10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800590e:	e063      	b.n	80059d8 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00e      	beq.n	800593a <HAL_UART_IRQHandler+0x6fe>
 800591c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005920:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005924:	2b00      	cmp	r3, #0
 8005926:	d008      	beq.n	800593a <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005930:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005932:	6878      	ldr	r0, [r7, #4]
 8005934:	f001 f83d 	bl	80069b2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005938:	e051      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800593e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005942:	2b00      	cmp	r3, #0
 8005944:	d014      	beq.n	8005970 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800594a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800594e:	2b00      	cmp	r3, #0
 8005950:	d105      	bne.n	800595e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800595a:	2b00      	cmp	r3, #0
 800595c:	d008      	beq.n	8005970 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005962:	2b00      	cmp	r3, #0
 8005964:	d03a      	beq.n	80059dc <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4798      	blx	r3
    }
    return;
 800596e:	e035      	b.n	80059dc <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005978:	2b00      	cmp	r3, #0
 800597a:	d009      	beq.n	8005990 <HAL_UART_IRQHandler+0x754>
 800597c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8005988:	6878      	ldr	r0, [r7, #4]
 800598a:	f000 ffe7 	bl	800695c <UART_EndTransmit_IT>
    return;
 800598e:	e026      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d009      	beq.n	80059b0 <HAL_UART_IRQHandler+0x774>
 800599c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d003      	beq.n	80059b0 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	f001 f816 	bl	80069da <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ae:	e016      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80059b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d010      	beq.n	80059de <HAL_UART_IRQHandler+0x7a2>
 80059bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da0c      	bge.n	80059de <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fffe 	bl	80069c6 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80059ca:	e008      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
      return;
 80059cc:	bf00      	nop
 80059ce:	e006      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
    return;
 80059d0:	bf00      	nop
 80059d2:	e004      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
      return;
 80059d4:	bf00      	nop
 80059d6:	e002      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
      return;
 80059d8:	bf00      	nop
 80059da:	e000      	b.n	80059de <HAL_UART_IRQHandler+0x7a2>
    return;
 80059dc:	bf00      	nop
  }
}
 80059de:	37e8      	adds	r7, #232	@ 0xe8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	effffffe 	.word	0xeffffffe

080059e8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a1c:	bf00      	nop
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a2c:	b092      	sub	sp, #72	@ 0x48
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	431a      	orrs	r2, r3
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	695b      	ldr	r3, [r3, #20]
 8005a46:	431a      	orrs	r2, r3
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	69db      	ldr	r3, [r3, #28]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4bbe      	ldr	r3, [pc, #760]	@ (8005d50 <UART_SetConfig+0x328>)
 8005a58:	4013      	ands	r3, r2
 8005a5a:	697a      	ldr	r2, [r7, #20]
 8005a5c:	6812      	ldr	r2, [r2, #0]
 8005a5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a60:	430b      	orrs	r3, r1
 8005a62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4ab3      	ldr	r2, [pc, #716]	@ (8005d54 <UART_SetConfig+0x32c>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a90:	4313      	orrs	r3, r2
 8005a92:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	4baf      	ldr	r3, [pc, #700]	@ (8005d58 <UART_SetConfig+0x330>)
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	6812      	ldr	r2, [r2, #0]
 8005aa2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005aa4:	430b      	orrs	r3, r1
 8005aa6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005aae:	f023 010f 	bic.w	r1, r3, #15
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	430a      	orrs	r2, r1
 8005abc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4aa6      	ldr	r2, [pc, #664]	@ (8005d5c <UART_SetConfig+0x334>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d177      	bne.n	8005bb8 <UART_SetConfig+0x190>
 8005ac8:	4ba5      	ldr	r3, [pc, #660]	@ (8005d60 <UART_SetConfig+0x338>)
 8005aca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005acc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ad0:	2b28      	cmp	r3, #40	@ 0x28
 8005ad2:	d86d      	bhi.n	8005bb0 <UART_SetConfig+0x188>
 8005ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <UART_SetConfig+0xb4>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b81 	.word	0x08005b81
 8005ae0:	08005bb1 	.word	0x08005bb1
 8005ae4:	08005bb1 	.word	0x08005bb1
 8005ae8:	08005bb1 	.word	0x08005bb1
 8005aec:	08005bb1 	.word	0x08005bb1
 8005af0:	08005bb1 	.word	0x08005bb1
 8005af4:	08005bb1 	.word	0x08005bb1
 8005af8:	08005bb1 	.word	0x08005bb1
 8005afc:	08005b89 	.word	0x08005b89
 8005b00:	08005bb1 	.word	0x08005bb1
 8005b04:	08005bb1 	.word	0x08005bb1
 8005b08:	08005bb1 	.word	0x08005bb1
 8005b0c:	08005bb1 	.word	0x08005bb1
 8005b10:	08005bb1 	.word	0x08005bb1
 8005b14:	08005bb1 	.word	0x08005bb1
 8005b18:	08005bb1 	.word	0x08005bb1
 8005b1c:	08005b91 	.word	0x08005b91
 8005b20:	08005bb1 	.word	0x08005bb1
 8005b24:	08005bb1 	.word	0x08005bb1
 8005b28:	08005bb1 	.word	0x08005bb1
 8005b2c:	08005bb1 	.word	0x08005bb1
 8005b30:	08005bb1 	.word	0x08005bb1
 8005b34:	08005bb1 	.word	0x08005bb1
 8005b38:	08005bb1 	.word	0x08005bb1
 8005b3c:	08005b99 	.word	0x08005b99
 8005b40:	08005bb1 	.word	0x08005bb1
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005bb1 	.word	0x08005bb1
 8005b4c:	08005bb1 	.word	0x08005bb1
 8005b50:	08005bb1 	.word	0x08005bb1
 8005b54:	08005bb1 	.word	0x08005bb1
 8005b58:	08005bb1 	.word	0x08005bb1
 8005b5c:	08005ba1 	.word	0x08005ba1
 8005b60:	08005bb1 	.word	0x08005bb1
 8005b64:	08005bb1 	.word	0x08005bb1
 8005b68:	08005bb1 	.word	0x08005bb1
 8005b6c:	08005bb1 	.word	0x08005bb1
 8005b70:	08005bb1 	.word	0x08005bb1
 8005b74:	08005bb1 	.word	0x08005bb1
 8005b78:	08005bb1 	.word	0x08005bb1
 8005b7c:	08005ba9 	.word	0x08005ba9
 8005b80:	2301      	movs	r3, #1
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e222      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e21e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005b90:	2308      	movs	r3, #8
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e21a      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005b98:	2310      	movs	r3, #16
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e216      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ba0:	2320      	movs	r3, #32
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e212      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ba8:	2340      	movs	r3, #64	@ 0x40
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e20e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005bb0:	2380      	movs	r3, #128	@ 0x80
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e20a      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	4a69      	ldr	r2, [pc, #420]	@ (8005d64 <UART_SetConfig+0x33c>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d130      	bne.n	8005c24 <UART_SetConfig+0x1fc>
 8005bc2:	4b67      	ldr	r3, [pc, #412]	@ (8005d60 <UART_SetConfig+0x338>)
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	2b05      	cmp	r3, #5
 8005bcc:	d826      	bhi.n	8005c1c <UART_SetConfig+0x1f4>
 8005bce:	a201      	add	r2, pc, #4	@ (adr r2, 8005bd4 <UART_SetConfig+0x1ac>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005bed 	.word	0x08005bed
 8005bd8:	08005bf5 	.word	0x08005bf5
 8005bdc:	08005bfd 	.word	0x08005bfd
 8005be0:	08005c05 	.word	0x08005c05
 8005be4:	08005c0d 	.word	0x08005c0d
 8005be8:	08005c15 	.word	0x08005c15
 8005bec:	2300      	movs	r3, #0
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e1ec      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005bf4:	2304      	movs	r3, #4
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e1e8      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005bfc:	2308      	movs	r3, #8
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e1e4      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c04:	2310      	movs	r3, #16
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e1e0      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c0c:	2320      	movs	r3, #32
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e1dc      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c14:	2340      	movs	r3, #64	@ 0x40
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e1d8      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c1c:	2380      	movs	r3, #128	@ 0x80
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e1d4      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a4f      	ldr	r2, [pc, #316]	@ (8005d68 <UART_SetConfig+0x340>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d130      	bne.n	8005c90 <UART_SetConfig+0x268>
 8005c2e:	4b4c      	ldr	r3, [pc, #304]	@ (8005d60 <UART_SetConfig+0x338>)
 8005c30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c32:	f003 0307 	and.w	r3, r3, #7
 8005c36:	2b05      	cmp	r3, #5
 8005c38:	d826      	bhi.n	8005c88 <UART_SetConfig+0x260>
 8005c3a:	a201      	add	r2, pc, #4	@ (adr r2, 8005c40 <UART_SetConfig+0x218>)
 8005c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c40:	08005c59 	.word	0x08005c59
 8005c44:	08005c61 	.word	0x08005c61
 8005c48:	08005c69 	.word	0x08005c69
 8005c4c:	08005c71 	.word	0x08005c71
 8005c50:	08005c79 	.word	0x08005c79
 8005c54:	08005c81 	.word	0x08005c81
 8005c58:	2300      	movs	r3, #0
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e1b6      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c60:	2304      	movs	r3, #4
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e1b2      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c68:	2308      	movs	r3, #8
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e1ae      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c70:	2310      	movs	r3, #16
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e1aa      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c78:	2320      	movs	r3, #32
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e1a6      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c80:	2340      	movs	r3, #64	@ 0x40
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e1a2      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c88:	2380      	movs	r3, #128	@ 0x80
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e19e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a35      	ldr	r2, [pc, #212]	@ (8005d6c <UART_SetConfig+0x344>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d130      	bne.n	8005cfc <UART_SetConfig+0x2d4>
 8005c9a:	4b31      	ldr	r3, [pc, #196]	@ (8005d60 <UART_SetConfig+0x338>)
 8005c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c9e:	f003 0307 	and.w	r3, r3, #7
 8005ca2:	2b05      	cmp	r3, #5
 8005ca4:	d826      	bhi.n	8005cf4 <UART_SetConfig+0x2cc>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <UART_SetConfig+0x284>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cc5 	.word	0x08005cc5
 8005cb0:	08005ccd 	.word	0x08005ccd
 8005cb4:	08005cd5 	.word	0x08005cd5
 8005cb8:	08005cdd 	.word	0x08005cdd
 8005cbc:	08005ce5 	.word	0x08005ce5
 8005cc0:	08005ced 	.word	0x08005ced
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cca:	e180      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ccc:	2304      	movs	r3, #4
 8005cce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cd2:	e17c      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005cd4:	2308      	movs	r3, #8
 8005cd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cda:	e178      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005cdc:	2310      	movs	r3, #16
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e174      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ce4:	2320      	movs	r3, #32
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e170      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005cec:	2340      	movs	r3, #64	@ 0x40
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e16c      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e168      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a1b      	ldr	r2, [pc, #108]	@ (8005d70 <UART_SetConfig+0x348>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d142      	bne.n	8005d8c <UART_SetConfig+0x364>
 8005d06:	4b16      	ldr	r3, [pc, #88]	@ (8005d60 <UART_SetConfig+0x338>)
 8005d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	2b05      	cmp	r3, #5
 8005d10:	d838      	bhi.n	8005d84 <UART_SetConfig+0x35c>
 8005d12:	a201      	add	r2, pc, #4	@ (adr r2, 8005d18 <UART_SetConfig+0x2f0>)
 8005d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d18:	08005d31 	.word	0x08005d31
 8005d1c:	08005d39 	.word	0x08005d39
 8005d20:	08005d41 	.word	0x08005d41
 8005d24:	08005d49 	.word	0x08005d49
 8005d28:	08005d75 	.word	0x08005d75
 8005d2c:	08005d7d 	.word	0x08005d7d
 8005d30:	2300      	movs	r3, #0
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e14a      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d38:	2304      	movs	r3, #4
 8005d3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d3e:	e146      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d40:	2308      	movs	r3, #8
 8005d42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d46:	e142      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d48:	2310      	movs	r3, #16
 8005d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d4e:	e13e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d50:	cfff69f3 	.word	0xcfff69f3
 8005d54:	58000c00 	.word	0x58000c00
 8005d58:	11fff4ff 	.word	0x11fff4ff
 8005d5c:	40011000 	.word	0x40011000
 8005d60:	58024400 	.word	0x58024400
 8005d64:	40004400 	.word	0x40004400
 8005d68:	40004800 	.word	0x40004800
 8005d6c:	40004c00 	.word	0x40004c00
 8005d70:	40005000 	.word	0x40005000
 8005d74:	2320      	movs	r3, #32
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e128      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d7c:	2340      	movs	r3, #64	@ 0x40
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e124      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d84:	2380      	movs	r3, #128	@ 0x80
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e120      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4acb      	ldr	r2, [pc, #812]	@ (80060c0 <UART_SetConfig+0x698>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d176      	bne.n	8005e84 <UART_SetConfig+0x45c>
 8005d96:	4bcb      	ldr	r3, [pc, #812]	@ (80060c4 <UART_SetConfig+0x69c>)
 8005d98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d9e:	2b28      	cmp	r3, #40	@ 0x28
 8005da0:	d86c      	bhi.n	8005e7c <UART_SetConfig+0x454>
 8005da2:	a201      	add	r2, pc, #4	@ (adr r2, 8005da8 <UART_SetConfig+0x380>)
 8005da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da8:	08005e4d 	.word	0x08005e4d
 8005dac:	08005e7d 	.word	0x08005e7d
 8005db0:	08005e7d 	.word	0x08005e7d
 8005db4:	08005e7d 	.word	0x08005e7d
 8005db8:	08005e7d 	.word	0x08005e7d
 8005dbc:	08005e7d 	.word	0x08005e7d
 8005dc0:	08005e7d 	.word	0x08005e7d
 8005dc4:	08005e7d 	.word	0x08005e7d
 8005dc8:	08005e55 	.word	0x08005e55
 8005dcc:	08005e7d 	.word	0x08005e7d
 8005dd0:	08005e7d 	.word	0x08005e7d
 8005dd4:	08005e7d 	.word	0x08005e7d
 8005dd8:	08005e7d 	.word	0x08005e7d
 8005ddc:	08005e7d 	.word	0x08005e7d
 8005de0:	08005e7d 	.word	0x08005e7d
 8005de4:	08005e7d 	.word	0x08005e7d
 8005de8:	08005e5d 	.word	0x08005e5d
 8005dec:	08005e7d 	.word	0x08005e7d
 8005df0:	08005e7d 	.word	0x08005e7d
 8005df4:	08005e7d 	.word	0x08005e7d
 8005df8:	08005e7d 	.word	0x08005e7d
 8005dfc:	08005e7d 	.word	0x08005e7d
 8005e00:	08005e7d 	.word	0x08005e7d
 8005e04:	08005e7d 	.word	0x08005e7d
 8005e08:	08005e65 	.word	0x08005e65
 8005e0c:	08005e7d 	.word	0x08005e7d
 8005e10:	08005e7d 	.word	0x08005e7d
 8005e14:	08005e7d 	.word	0x08005e7d
 8005e18:	08005e7d 	.word	0x08005e7d
 8005e1c:	08005e7d 	.word	0x08005e7d
 8005e20:	08005e7d 	.word	0x08005e7d
 8005e24:	08005e7d 	.word	0x08005e7d
 8005e28:	08005e6d 	.word	0x08005e6d
 8005e2c:	08005e7d 	.word	0x08005e7d
 8005e30:	08005e7d 	.word	0x08005e7d
 8005e34:	08005e7d 	.word	0x08005e7d
 8005e38:	08005e7d 	.word	0x08005e7d
 8005e3c:	08005e7d 	.word	0x08005e7d
 8005e40:	08005e7d 	.word	0x08005e7d
 8005e44:	08005e7d 	.word	0x08005e7d
 8005e48:	08005e75 	.word	0x08005e75
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e0bc      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e54:	2304      	movs	r3, #4
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e0b8      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e5c:	2308      	movs	r3, #8
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e0b4      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e64:	2310      	movs	r3, #16
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e0b0      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e6c:	2320      	movs	r3, #32
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e0ac      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e74:	2340      	movs	r3, #64	@ 0x40
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e0a8      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e7c:	2380      	movs	r3, #128	@ 0x80
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e0a4      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a8f      	ldr	r2, [pc, #572]	@ (80060c8 <UART_SetConfig+0x6a0>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d130      	bne.n	8005ef0 <UART_SetConfig+0x4c8>
 8005e8e:	4b8d      	ldr	r3, [pc, #564]	@ (80060c4 <UART_SetConfig+0x69c>)
 8005e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e92:	f003 0307 	and.w	r3, r3, #7
 8005e96:	2b05      	cmp	r3, #5
 8005e98:	d826      	bhi.n	8005ee8 <UART_SetConfig+0x4c0>
 8005e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <UART_SetConfig+0x478>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005eb9 	.word	0x08005eb9
 8005ea4:	08005ec1 	.word	0x08005ec1
 8005ea8:	08005ec9 	.word	0x08005ec9
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005ed9 	.word	0x08005ed9
 8005eb4:	08005ee1 	.word	0x08005ee1
 8005eb8:	2300      	movs	r3, #0
 8005eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ebe:	e086      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ec0:	2304      	movs	r3, #4
 8005ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ec6:	e082      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ec8:	2308      	movs	r3, #8
 8005eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ece:	e07e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e07a      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ed8:	2320      	movs	r3, #32
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e076      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ee0:	2340      	movs	r3, #64	@ 0x40
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e072      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ee8:	2380      	movs	r3, #128	@ 0x80
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e06e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005ef0:	697b      	ldr	r3, [r7, #20]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a75      	ldr	r2, [pc, #468]	@ (80060cc <UART_SetConfig+0x6a4>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d130      	bne.n	8005f5c <UART_SetConfig+0x534>
 8005efa:	4b72      	ldr	r3, [pc, #456]	@ (80060c4 <UART_SetConfig+0x69c>)
 8005efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005efe:	f003 0307 	and.w	r3, r3, #7
 8005f02:	2b05      	cmp	r3, #5
 8005f04:	d826      	bhi.n	8005f54 <UART_SetConfig+0x52c>
 8005f06:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <UART_SetConfig+0x4e4>)
 8005f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0c:	08005f25 	.word	0x08005f25
 8005f10:	08005f2d 	.word	0x08005f2d
 8005f14:	08005f35 	.word	0x08005f35
 8005f18:	08005f3d 	.word	0x08005f3d
 8005f1c:	08005f45 	.word	0x08005f45
 8005f20:	08005f4d 	.word	0x08005f4d
 8005f24:	2300      	movs	r3, #0
 8005f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f2a:	e050      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f2c:	2304      	movs	r3, #4
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e04c      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f34:	2308      	movs	r3, #8
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e048      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f3c:	2310      	movs	r3, #16
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e044      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f44:	2320      	movs	r3, #32
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e040      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f4c:	2340      	movs	r3, #64	@ 0x40
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e03c      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f54:	2380      	movs	r3, #128	@ 0x80
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e038      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a5b      	ldr	r2, [pc, #364]	@ (80060d0 <UART_SetConfig+0x6a8>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d130      	bne.n	8005fc8 <UART_SetConfig+0x5a0>
 8005f66:	4b57      	ldr	r3, [pc, #348]	@ (80060c4 <UART_SetConfig+0x69c>)
 8005f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f6a:	f003 0307 	and.w	r3, r3, #7
 8005f6e:	2b05      	cmp	r3, #5
 8005f70:	d826      	bhi.n	8005fc0 <UART_SetConfig+0x598>
 8005f72:	a201      	add	r2, pc, #4	@ (adr r2, 8005f78 <UART_SetConfig+0x550>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f91 	.word	0x08005f91
 8005f7c:	08005f99 	.word	0x08005f99
 8005f80:	08005fa1 	.word	0x08005fa1
 8005f84:	08005fa9 	.word	0x08005fa9
 8005f88:	08005fb1 	.word	0x08005fb1
 8005f8c:	08005fb9 	.word	0x08005fb9
 8005f90:	2302      	movs	r3, #2
 8005f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f96:	e01a      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005f98:	2304      	movs	r3, #4
 8005f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f9e:	e016      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005fa0:	2308      	movs	r3, #8
 8005fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fa6:	e012      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005fa8:	2310      	movs	r3, #16
 8005faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fae:	e00e      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005fb0:	2320      	movs	r3, #32
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fb6:	e00a      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005fb8:	2340      	movs	r3, #64	@ 0x40
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fbe:	e006      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005fc0:	2380      	movs	r3, #128	@ 0x80
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fc6:	e002      	b.n	8005fce <UART_SetConfig+0x5a6>
 8005fc8:	2380      	movs	r3, #128	@ 0x80
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a3f      	ldr	r2, [pc, #252]	@ (80060d0 <UART_SetConfig+0x6a8>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	f040 80f8 	bne.w	80061ca <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fda:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005fde:	2b20      	cmp	r3, #32
 8005fe0:	dc46      	bgt.n	8006070 <UART_SetConfig+0x648>
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	f2c0 8082 	blt.w	80060ec <UART_SetConfig+0x6c4>
 8005fe8:	3b02      	subs	r3, #2
 8005fea:	2b1e      	cmp	r3, #30
 8005fec:	d87e      	bhi.n	80060ec <UART_SetConfig+0x6c4>
 8005fee:	a201      	add	r2, pc, #4	@ (adr r2, 8005ff4 <UART_SetConfig+0x5cc>)
 8005ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff4:	08006077 	.word	0x08006077
 8005ff8:	080060ed 	.word	0x080060ed
 8005ffc:	0800607f 	.word	0x0800607f
 8006000:	080060ed 	.word	0x080060ed
 8006004:	080060ed 	.word	0x080060ed
 8006008:	080060ed 	.word	0x080060ed
 800600c:	0800608f 	.word	0x0800608f
 8006010:	080060ed 	.word	0x080060ed
 8006014:	080060ed 	.word	0x080060ed
 8006018:	080060ed 	.word	0x080060ed
 800601c:	080060ed 	.word	0x080060ed
 8006020:	080060ed 	.word	0x080060ed
 8006024:	080060ed 	.word	0x080060ed
 8006028:	080060ed 	.word	0x080060ed
 800602c:	0800609f 	.word	0x0800609f
 8006030:	080060ed 	.word	0x080060ed
 8006034:	080060ed 	.word	0x080060ed
 8006038:	080060ed 	.word	0x080060ed
 800603c:	080060ed 	.word	0x080060ed
 8006040:	080060ed 	.word	0x080060ed
 8006044:	080060ed 	.word	0x080060ed
 8006048:	080060ed 	.word	0x080060ed
 800604c:	080060ed 	.word	0x080060ed
 8006050:	080060ed 	.word	0x080060ed
 8006054:	080060ed 	.word	0x080060ed
 8006058:	080060ed 	.word	0x080060ed
 800605c:	080060ed 	.word	0x080060ed
 8006060:	080060ed 	.word	0x080060ed
 8006064:	080060ed 	.word	0x080060ed
 8006068:	080060ed 	.word	0x080060ed
 800606c:	080060df 	.word	0x080060df
 8006070:	2b40      	cmp	r3, #64	@ 0x40
 8006072:	d037      	beq.n	80060e4 <UART_SetConfig+0x6bc>
 8006074:	e03a      	b.n	80060ec <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006076:	f7fe fbe1 	bl	800483c <HAL_RCCEx_GetD3PCLK1Freq>
 800607a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800607c:	e03c      	b.n	80060f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800607e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fbf0 	bl	8004868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800608c:	e034      	b.n	80060f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800608e:	f107 0318 	add.w	r3, r7, #24
 8006092:	4618      	mov	r0, r3
 8006094:	f7fe fd3c 	bl	8004b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800609c:	e02c      	b.n	80060f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800609e:	4b09      	ldr	r3, [pc, #36]	@ (80060c4 <UART_SetConfig+0x69c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d016      	beq.n	80060d8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060aa:	4b06      	ldr	r3, [pc, #24]	@ (80060c4 <UART_SetConfig+0x69c>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	08db      	lsrs	r3, r3, #3
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	4a07      	ldr	r2, [pc, #28]	@ (80060d4 <UART_SetConfig+0x6ac>)
 80060b6:	fa22 f303 	lsr.w	r3, r2, r3
 80060ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060bc:	e01c      	b.n	80060f8 <UART_SetConfig+0x6d0>
 80060be:	bf00      	nop
 80060c0:	40011400 	.word	0x40011400
 80060c4:	58024400 	.word	0x58024400
 80060c8:	40007800 	.word	0x40007800
 80060cc:	40007c00 	.word	0x40007c00
 80060d0:	58000c00 	.word	0x58000c00
 80060d4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060d8:	4b9d      	ldr	r3, [pc, #628]	@ (8006350 <UART_SetConfig+0x928>)
 80060da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060dc:	e00c      	b.n	80060f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060de:	4b9d      	ldr	r3, [pc, #628]	@ (8006354 <UART_SetConfig+0x92c>)
 80060e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060e2:	e009      	b.n	80060f8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80060e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80060ea:	e005      	b.n	80060f8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80060f6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	f000 81de 	beq.w	80064bc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006104:	4a94      	ldr	r2, [pc, #592]	@ (8006358 <UART_SetConfig+0x930>)
 8006106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800610a:	461a      	mov	r2, r3
 800610c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800610e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006112:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	005b      	lsls	r3, r3, #1
 800611c:	4413      	add	r3, r2
 800611e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006120:	429a      	cmp	r2, r3
 8006122:	d305      	bcc.n	8006130 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800612a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800612c:	429a      	cmp	r2, r3
 800612e:	d903      	bls.n	8006138 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006136:	e1c1      	b.n	80064bc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006138:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800613a:	2200      	movs	r2, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	60fa      	str	r2, [r7, #12]
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006144:	4a84      	ldr	r2, [pc, #528]	@ (8006358 <UART_SetConfig+0x930>)
 8006146:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800614a:	b29b      	uxth	r3, r3
 800614c:	2200      	movs	r2, #0
 800614e:	603b      	str	r3, [r7, #0]
 8006150:	607a      	str	r2, [r7, #4]
 8006152:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006156:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800615a:	f7fa f8bd 	bl	80002d8 <__aeabi_uldivmod>
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4610      	mov	r0, r2
 8006164:	4619      	mov	r1, r3
 8006166:	f04f 0200 	mov.w	r2, #0
 800616a:	f04f 0300 	mov.w	r3, #0
 800616e:	020b      	lsls	r3, r1, #8
 8006170:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006174:	0202      	lsls	r2, r0, #8
 8006176:	6979      	ldr	r1, [r7, #20]
 8006178:	6849      	ldr	r1, [r1, #4]
 800617a:	0849      	lsrs	r1, r1, #1
 800617c:	2000      	movs	r0, #0
 800617e:	460c      	mov	r4, r1
 8006180:	4605      	mov	r5, r0
 8006182:	eb12 0804 	adds.w	r8, r2, r4
 8006186:	eb43 0905 	adc.w	r9, r3, r5
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	469a      	mov	sl, r3
 8006192:	4693      	mov	fp, r2
 8006194:	4652      	mov	r2, sl
 8006196:	465b      	mov	r3, fp
 8006198:	4640      	mov	r0, r8
 800619a:	4649      	mov	r1, r9
 800619c:	f7fa f89c 	bl	80002d8 <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4613      	mov	r3, r2
 80061a6:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061aa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80061ae:	d308      	bcc.n	80061c2 <UART_SetConfig+0x79a>
 80061b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80061b6:	d204      	bcs.n	80061c2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80061be:	60da      	str	r2, [r3, #12]
 80061c0:	e17c      	b.n	80064bc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80061c8:	e178      	b.n	80064bc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	69db      	ldr	r3, [r3, #28]
 80061ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061d2:	f040 80c5 	bne.w	8006360 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061d6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80061da:	2b20      	cmp	r3, #32
 80061dc:	dc48      	bgt.n	8006270 <UART_SetConfig+0x848>
 80061de:	2b00      	cmp	r3, #0
 80061e0:	db7b      	blt.n	80062da <UART_SetConfig+0x8b2>
 80061e2:	2b20      	cmp	r3, #32
 80061e4:	d879      	bhi.n	80062da <UART_SetConfig+0x8b2>
 80061e6:	a201      	add	r2, pc, #4	@ (adr r2, 80061ec <UART_SetConfig+0x7c4>)
 80061e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061ec:	08006277 	.word	0x08006277
 80061f0:	0800627f 	.word	0x0800627f
 80061f4:	080062db 	.word	0x080062db
 80061f8:	080062db 	.word	0x080062db
 80061fc:	08006287 	.word	0x08006287
 8006200:	080062db 	.word	0x080062db
 8006204:	080062db 	.word	0x080062db
 8006208:	080062db 	.word	0x080062db
 800620c:	08006297 	.word	0x08006297
 8006210:	080062db 	.word	0x080062db
 8006214:	080062db 	.word	0x080062db
 8006218:	080062db 	.word	0x080062db
 800621c:	080062db 	.word	0x080062db
 8006220:	080062db 	.word	0x080062db
 8006224:	080062db 	.word	0x080062db
 8006228:	080062db 	.word	0x080062db
 800622c:	080062a7 	.word	0x080062a7
 8006230:	080062db 	.word	0x080062db
 8006234:	080062db 	.word	0x080062db
 8006238:	080062db 	.word	0x080062db
 800623c:	080062db 	.word	0x080062db
 8006240:	080062db 	.word	0x080062db
 8006244:	080062db 	.word	0x080062db
 8006248:	080062db 	.word	0x080062db
 800624c:	080062db 	.word	0x080062db
 8006250:	080062db 	.word	0x080062db
 8006254:	080062db 	.word	0x080062db
 8006258:	080062db 	.word	0x080062db
 800625c:	080062db 	.word	0x080062db
 8006260:	080062db 	.word	0x080062db
 8006264:	080062db 	.word	0x080062db
 8006268:	080062db 	.word	0x080062db
 800626c:	080062cd 	.word	0x080062cd
 8006270:	2b40      	cmp	r3, #64	@ 0x40
 8006272:	d02e      	beq.n	80062d2 <UART_SetConfig+0x8aa>
 8006274:	e031      	b.n	80062da <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006276:	f7fd f8ab 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 800627a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800627c:	e033      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800627e:	f7fd f8bd 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 8006282:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006284:	e02f      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006286:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800628a:	4618      	mov	r0, r3
 800628c:	f7fe faec 	bl	8004868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006292:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006294:	e027      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006296:	f107 0318 	add.w	r3, r7, #24
 800629a:	4618      	mov	r0, r3
 800629c:	f7fe fc38 	bl	8004b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062a4:	e01f      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062a6:	4b2d      	ldr	r3, [pc, #180]	@ (800635c <UART_SetConfig+0x934>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 0320 	and.w	r3, r3, #32
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d009      	beq.n	80062c6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062b2:	4b2a      	ldr	r3, [pc, #168]	@ (800635c <UART_SetConfig+0x934>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	08db      	lsrs	r3, r3, #3
 80062b8:	f003 0303 	and.w	r3, r3, #3
 80062bc:	4a24      	ldr	r2, [pc, #144]	@ (8006350 <UART_SetConfig+0x928>)
 80062be:	fa22 f303 	lsr.w	r3, r2, r3
 80062c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062c4:	e00f      	b.n	80062e6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062c6:	4b22      	ldr	r3, [pc, #136]	@ (8006350 <UART_SetConfig+0x928>)
 80062c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062ca:	e00c      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062cc:	4b21      	ldr	r3, [pc, #132]	@ (8006354 <UART_SetConfig+0x92c>)
 80062ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d0:	e009      	b.n	80062e6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80062d8:	e005      	b.n	80062e6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062da:	2300      	movs	r3, #0
 80062dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80062e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	f000 80e7 	beq.w	80064bc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f2:	4a19      	ldr	r2, [pc, #100]	@ (8006358 <UART_SetConfig+0x930>)
 80062f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062f8:	461a      	mov	r2, r3
 80062fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8006300:	005a      	lsls	r2, r3, #1
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	085b      	lsrs	r3, r3, #1
 8006308:	441a      	add	r2, r3
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	685b      	ldr	r3, [r3, #4]
 800630e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006312:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006314:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006316:	2b0f      	cmp	r3, #15
 8006318:	d916      	bls.n	8006348 <UART_SetConfig+0x920>
 800631a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800631c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006320:	d212      	bcs.n	8006348 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006322:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006324:	b29b      	uxth	r3, r3
 8006326:	f023 030f 	bic.w	r3, r3, #15
 800632a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800632c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800632e:	085b      	lsrs	r3, r3, #1
 8006330:	b29b      	uxth	r3, r3
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	b29a      	uxth	r2, r3
 8006338:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800633a:	4313      	orrs	r3, r2
 800633c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006344:	60da      	str	r2, [r3, #12]
 8006346:	e0b9      	b.n	80064bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800634e:	e0b5      	b.n	80064bc <UART_SetConfig+0xa94>
 8006350:	03d09000 	.word	0x03d09000
 8006354:	003d0900 	.word	0x003d0900
 8006358:	08007590 	.word	0x08007590
 800635c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006360:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006364:	2b20      	cmp	r3, #32
 8006366:	dc49      	bgt.n	80063fc <UART_SetConfig+0x9d4>
 8006368:	2b00      	cmp	r3, #0
 800636a:	db7c      	blt.n	8006466 <UART_SetConfig+0xa3e>
 800636c:	2b20      	cmp	r3, #32
 800636e:	d87a      	bhi.n	8006466 <UART_SetConfig+0xa3e>
 8006370:	a201      	add	r2, pc, #4	@ (adr r2, 8006378 <UART_SetConfig+0x950>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	08006403 	.word	0x08006403
 800637c:	0800640b 	.word	0x0800640b
 8006380:	08006467 	.word	0x08006467
 8006384:	08006467 	.word	0x08006467
 8006388:	08006413 	.word	0x08006413
 800638c:	08006467 	.word	0x08006467
 8006390:	08006467 	.word	0x08006467
 8006394:	08006467 	.word	0x08006467
 8006398:	08006423 	.word	0x08006423
 800639c:	08006467 	.word	0x08006467
 80063a0:	08006467 	.word	0x08006467
 80063a4:	08006467 	.word	0x08006467
 80063a8:	08006467 	.word	0x08006467
 80063ac:	08006467 	.word	0x08006467
 80063b0:	08006467 	.word	0x08006467
 80063b4:	08006467 	.word	0x08006467
 80063b8:	08006433 	.word	0x08006433
 80063bc:	08006467 	.word	0x08006467
 80063c0:	08006467 	.word	0x08006467
 80063c4:	08006467 	.word	0x08006467
 80063c8:	08006467 	.word	0x08006467
 80063cc:	08006467 	.word	0x08006467
 80063d0:	08006467 	.word	0x08006467
 80063d4:	08006467 	.word	0x08006467
 80063d8:	08006467 	.word	0x08006467
 80063dc:	08006467 	.word	0x08006467
 80063e0:	08006467 	.word	0x08006467
 80063e4:	08006467 	.word	0x08006467
 80063e8:	08006467 	.word	0x08006467
 80063ec:	08006467 	.word	0x08006467
 80063f0:	08006467 	.word	0x08006467
 80063f4:	08006467 	.word	0x08006467
 80063f8:	08006459 	.word	0x08006459
 80063fc:	2b40      	cmp	r3, #64	@ 0x40
 80063fe:	d02e      	beq.n	800645e <UART_SetConfig+0xa36>
 8006400:	e031      	b.n	8006466 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006402:	f7fc ffe5 	bl	80033d0 <HAL_RCC_GetPCLK1Freq>
 8006406:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006408:	e033      	b.n	8006472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800640a:	f7fc fff7 	bl	80033fc <HAL_RCC_GetPCLK2Freq>
 800640e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006410:	e02f      	b.n	8006472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006416:	4618      	mov	r0, r3
 8006418:	f7fe fa26 	bl	8004868 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800641c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006420:	e027      	b.n	8006472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006422:	f107 0318 	add.w	r3, r7, #24
 8006426:	4618      	mov	r0, r3
 8006428:	f7fe fb72 	bl	8004b10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006430:	e01f      	b.n	8006472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006432:	4b2d      	ldr	r3, [pc, #180]	@ (80064e8 <UART_SetConfig+0xac0>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0320 	and.w	r3, r3, #32
 800643a:	2b00      	cmp	r3, #0
 800643c:	d009      	beq.n	8006452 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800643e:	4b2a      	ldr	r3, [pc, #168]	@ (80064e8 <UART_SetConfig+0xac0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	08db      	lsrs	r3, r3, #3
 8006444:	f003 0303 	and.w	r3, r3, #3
 8006448:	4a28      	ldr	r2, [pc, #160]	@ (80064ec <UART_SetConfig+0xac4>)
 800644a:	fa22 f303 	lsr.w	r3, r2, r3
 800644e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006450:	e00f      	b.n	8006472 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006452:	4b26      	ldr	r3, [pc, #152]	@ (80064ec <UART_SetConfig+0xac4>)
 8006454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006456:	e00c      	b.n	8006472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006458:	4b25      	ldr	r3, [pc, #148]	@ (80064f0 <UART_SetConfig+0xac8>)
 800645a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800645c:	e009      	b.n	8006472 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800645e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006464:	e005      	b.n	8006472 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006466:	2300      	movs	r3, #0
 8006468:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006470:	bf00      	nop
    }

    if (pclk != 0U)
 8006472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006474:	2b00      	cmp	r3, #0
 8006476:	d021      	beq.n	80064bc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647c:	4a1d      	ldr	r2, [pc, #116]	@ (80064f4 <UART_SetConfig+0xacc>)
 800647e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006482:	461a      	mov	r2, r3
 8006484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006486:	fbb3 f2f2 	udiv	r2, r3, r2
 800648a:	697b      	ldr	r3, [r7, #20]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	441a      	add	r2, r3
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	fbb2 f3f3 	udiv	r3, r2, r3
 800649a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d909      	bls.n	80064b6 <UART_SetConfig+0xa8e>
 80064a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064a8:	d205      	bcs.n	80064b6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	b29a      	uxth	r2, r3
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	60da      	str	r2, [r3, #12]
 80064b4:	e002      	b.n	80064bc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	2201      	movs	r2, #1
 80064c0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	2200      	movs	r2, #0
 80064d0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	2200      	movs	r2, #0
 80064d6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80064d8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80064dc:	4618      	mov	r0, r3
 80064de:	3748      	adds	r7, #72	@ 0x48
 80064e0:	46bd      	mov	sp, r7
 80064e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e6:	bf00      	nop
 80064e8:	58024400 	.word	0x58024400
 80064ec:	03d09000 	.word	0x03d09000
 80064f0:	003d0900 	.word	0x003d0900
 80064f4:	08007590 	.word	0x08007590

080064f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006504:	f003 0308 	and.w	r3, r3, #8
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	430a      	orrs	r2, r1
 8006520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00a      	beq.n	8006544 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	430a      	orrs	r2, r1
 8006542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d00a      	beq.n	8006566 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	430a      	orrs	r2, r1
 8006564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800656a:	f003 0304 	and.w	r3, r3, #4
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00a      	beq.n	8006588 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	430a      	orrs	r2, r1
 8006586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658c:	f003 0310 	and.w	r3, r3, #16
 8006590:	2b00      	cmp	r3, #0
 8006592:	d00a      	beq.n	80065aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	430a      	orrs	r2, r1
 80065a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00a      	beq.n	80065cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	430a      	orrs	r2, r1
 80065ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01a      	beq.n	800660e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	430a      	orrs	r2, r1
 80065ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80065f6:	d10a      	bne.n	800660e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b098      	sub	sp, #96	@ 0x60
 8006640:	af02      	add	r7, sp, #8
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800664c:	f7fa fd7e 	bl	800114c <HAL_GetTick>
 8006650:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0308 	and.w	r3, r3, #8
 800665c:	2b08      	cmp	r3, #8
 800665e:	d12f      	bne.n	80066c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006660:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006664:	9300      	str	r3, [sp, #0]
 8006666:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006668:	2200      	movs	r2, #0
 800666a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f88e 	bl	8006790 <UART_WaitOnFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d022      	beq.n	80066c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006682:	e853 3f00 	ldrex	r3, [r3]
 8006686:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800668e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	461a      	mov	r2, r3
 8006696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006698:	647b      	str	r3, [r7, #68]	@ 0x44
 800669a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800669e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e6      	bne.n	800667a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066bc:	2303      	movs	r3, #3
 80066be:	e063      	b.n	8006788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 0304 	and.w	r3, r3, #4
 80066ca:	2b04      	cmp	r3, #4
 80066cc:	d149      	bne.n	8006762 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80066d2:	9300      	str	r3, [sp, #0]
 80066d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80066d6:	2200      	movs	r2, #0
 80066d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f857 	bl	8006790 <UART_WaitOnFlagUntilTimeout>
 80066e2:	4603      	mov	r3, r0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d03c      	beq.n	8006762 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066f0:	e853 3f00 	ldrex	r3, [r3]
 80066f4:	623b      	str	r3, [r7, #32]
   return(result);
 80066f6:	6a3b      	ldr	r3, [r7, #32]
 80066f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	461a      	mov	r2, r3
 8006704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006706:	633b      	str	r3, [r7, #48]	@ 0x30
 8006708:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800670a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800670c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800670e:	e841 2300 	strex	r3, r2, [r1]
 8006712:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1e6      	bne.n	80066e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3308      	adds	r3, #8
 8006720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	60fb      	str	r3, [r7, #12]
   return(result);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f023 0301 	bic.w	r3, r3, #1
 8006730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3308      	adds	r3, #8
 8006738:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800673a:	61fa      	str	r2, [r7, #28]
 800673c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673e:	69b9      	ldr	r1, [r7, #24]
 8006740:	69fa      	ldr	r2, [r7, #28]
 8006742:	e841 2300 	strex	r3, r2, [r1]
 8006746:	617b      	str	r3, [r7, #20]
   return(result);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d1e5      	bne.n	800671a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e012      	b.n	8006788 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2220      	movs	r2, #32
 8006766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006786:	2300      	movs	r3, #0
}
 8006788:	4618      	mov	r0, r3
 800678a:	3758      	adds	r7, #88	@ 0x58
 800678c:	46bd      	mov	sp, r7
 800678e:	bd80      	pop	{r7, pc}

08006790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b084      	sub	sp, #16
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a0:	e04f      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067a2:	69bb      	ldr	r3, [r7, #24]
 80067a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a8:	d04b      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067aa:	f7fa fccf 	bl	800114c <HAL_GetTick>
 80067ae:	4602      	mov	r2, r0
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d302      	bcc.n	80067c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067ba:	69bb      	ldr	r3, [r7, #24]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e04e      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d037      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b80      	cmp	r3, #128	@ 0x80
 80067d6:	d034      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb2>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	2b40      	cmp	r3, #64	@ 0x40
 80067dc:	d031      	beq.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	69db      	ldr	r3, [r3, #28]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d110      	bne.n	800680e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	2208      	movs	r2, #8
 80067f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 f839 	bl	800686c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2208      	movs	r2, #8
 80067fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2200      	movs	r2, #0
 8006806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e029      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	69db      	ldr	r3, [r3, #28]
 8006814:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006818:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800681c:	d111      	bne.n	8006842 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006828:	68f8      	ldr	r0, [r7, #12]
 800682a:	f000 f81f 	bl	800686c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2220      	movs	r2, #32
 8006832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e00f      	b.n	8006862 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69da      	ldr	r2, [r3, #28]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d0a0      	beq.n	80067a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
	...

0800686c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800686c:	b480      	push	{r7}
 800686e:	b095      	sub	sp, #84	@ 0x54
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800687c:	e853 3f00 	ldrex	r3, [r3]
 8006880:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006882:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006884:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006888:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	461a      	mov	r2, r3
 8006890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006892:	643b      	str	r3, [r7, #64]	@ 0x40
 8006894:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006896:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006898:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800689a:	e841 2300 	strex	r3, r2, [r1]
 800689e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d1e6      	bne.n	8006874 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3308      	adds	r3, #8
 80068ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	e853 3f00 	ldrex	r3, [r3]
 80068b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b6:	69fa      	ldr	r2, [r7, #28]
 80068b8:	4b1e      	ldr	r3, [pc, #120]	@ (8006934 <UART_EndRxTransfer+0xc8>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	3308      	adds	r3, #8
 80068c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80068cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80068ce:	e841 2300 	strex	r3, r2, [r1]
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80068d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d1e5      	bne.n	80068a6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d118      	bne.n	8006914 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f023 0310 	bic.w	r3, r3, #16
 80068f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	461a      	mov	r2, r3
 80068fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006900:	61bb      	str	r3, [r7, #24]
 8006902:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006904:	6979      	ldr	r1, [r7, #20]
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	e841 2300 	strex	r3, r2, [r1]
 800690c:	613b      	str	r3, [r7, #16]
   return(result);
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d1e6      	bne.n	80068e2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006928:	bf00      	nop
 800692a:	3754      	adds	r7, #84	@ 0x54
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr
 8006934:	effffffe 	.word	0xeffffffe

08006938 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b084      	sub	sp, #16
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006944:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	2200      	movs	r2, #0
 800694a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800694e:	68f8      	ldr	r0, [r7, #12]
 8006950:	f7ff f854 	bl	80059fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006954:	bf00      	nop
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b088      	sub	sp, #32
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	60bb      	str	r3, [r7, #8]
   return(result);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006978:	61fb      	str	r3, [r7, #28]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	61bb      	str	r3, [r7, #24]
 8006984:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	6979      	ldr	r1, [r7, #20]
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	e841 2300 	strex	r3, r2, [r1]
 800698e:	613b      	str	r3, [r7, #16]
   return(result);
 8006990:	693b      	ldr	r3, [r7, #16]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d1e6      	bne.n	8006964 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	2220      	movs	r2, #32
 800699a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f7ff f81f 	bl	80059e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069aa:	bf00      	nop
 80069ac:	3720      	adds	r7, #32
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b083      	sub	sp, #12
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069ba:	bf00      	nop
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b083      	sub	sp, #12
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069ce:	bf00      	nop
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069e2:	bf00      	nop
 80069e4:	370c      	adds	r7, #12
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d101      	bne.n	8006a04 <HAL_UARTEx_DisableFifoMode+0x16>
 8006a00:	2302      	movs	r3, #2
 8006a02:	e027      	b.n	8006a54 <HAL_UARTEx_DisableFifoMode+0x66>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2224      	movs	r2, #36	@ 0x24
 8006a10:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f022 0201 	bic.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a32:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3714      	adds	r7, #20
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr

08006a60 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e02d      	b.n	8006ad4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	@ 0x24
 8006a84:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	430a      	orrs	r2, r1
 8006ab2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f000 f84f 	bl	8006b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d101      	bne.n	8006af4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006af0:	2302      	movs	r3, #2
 8006af2:	e02d      	b.n	8006b50 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2224      	movs	r2, #36	@ 0x24
 8006b00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f022 0201 	bic.w	r2, r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	430a      	orrs	r2, r1
 8006b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f811 	bl	8006b58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2220      	movs	r2, #32
 8006b42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b085      	sub	sp, #20
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d108      	bne.n	8006b7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2201      	movs	r2, #1
 8006b6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b78:	e031      	b.n	8006bde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b7a:	2310      	movs	r3, #16
 8006b7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b7e:	2310      	movs	r3, #16
 8006b80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	0e5b      	lsrs	r3, r3, #25
 8006b8a:	b2db      	uxtb	r3, r3
 8006b8c:	f003 0307 	and.w	r3, r3, #7
 8006b90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	0f5b      	lsrs	r3, r3, #29
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	f003 0307 	and.w	r3, r3, #7
 8006ba0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ba2:	7bbb      	ldrb	r3, [r7, #14]
 8006ba4:	7b3a      	ldrb	r2, [r7, #12]
 8006ba6:	4911      	ldr	r1, [pc, #68]	@ (8006bec <UARTEx_SetNbDataToProcess+0x94>)
 8006ba8:	5c8a      	ldrb	r2, [r1, r2]
 8006baa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bae:	7b3a      	ldrb	r2, [r7, #12]
 8006bb0:	490f      	ldr	r1, [pc, #60]	@ (8006bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bb8:	b29a      	uxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	7b7a      	ldrb	r2, [r7, #13]
 8006bc4:	4909      	ldr	r1, [pc, #36]	@ (8006bec <UARTEx_SetNbDataToProcess+0x94>)
 8006bc6:	5c8a      	ldrb	r2, [r1, r2]
 8006bc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bcc:	7b7a      	ldrb	r2, [r7, #13]
 8006bce:	4908      	ldr	r1, [pc, #32]	@ (8006bf0 <UARTEx_SetNbDataToProcess+0x98>)
 8006bd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bd6:	b29a      	uxth	r2, r3
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006bde:	bf00      	nop
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	080075a8 	.word	0x080075a8
 8006bf0:	080075b0 	.word	0x080075b0

08006bf4 <std>:
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	4604      	mov	r4, r0
 8006bfa:	e9c0 3300 	strd	r3, r3, [r0]
 8006bfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006c02:	6083      	str	r3, [r0, #8]
 8006c04:	8181      	strh	r1, [r0, #12]
 8006c06:	6643      	str	r3, [r0, #100]	@ 0x64
 8006c08:	81c2      	strh	r2, [r0, #14]
 8006c0a:	6183      	str	r3, [r0, #24]
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	2208      	movs	r2, #8
 8006c10:	305c      	adds	r0, #92	@ 0x5c
 8006c12:	f000 f9e7 	bl	8006fe4 <memset>
 8006c16:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <std+0x58>)
 8006c18:	6263      	str	r3, [r4, #36]	@ 0x24
 8006c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006c50 <std+0x5c>)
 8006c1c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c54 <std+0x60>)
 8006c20:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006c22:	4b0d      	ldr	r3, [pc, #52]	@ (8006c58 <std+0x64>)
 8006c24:	6323      	str	r3, [r4, #48]	@ 0x30
 8006c26:	4b0d      	ldr	r3, [pc, #52]	@ (8006c5c <std+0x68>)
 8006c28:	6224      	str	r4, [r4, #32]
 8006c2a:	429c      	cmp	r4, r3
 8006c2c:	d006      	beq.n	8006c3c <std+0x48>
 8006c2e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006c32:	4294      	cmp	r4, r2
 8006c34:	d002      	beq.n	8006c3c <std+0x48>
 8006c36:	33d0      	adds	r3, #208	@ 0xd0
 8006c38:	429c      	cmp	r4, r3
 8006c3a:	d105      	bne.n	8006c48 <std+0x54>
 8006c3c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f000 ba46 	b.w	80070d4 <__retarget_lock_init_recursive>
 8006c48:	bd10      	pop	{r4, pc}
 8006c4a:	bf00      	nop
 8006c4c:	08006e35 	.word	0x08006e35
 8006c50:	08006e57 	.word	0x08006e57
 8006c54:	08006e8f 	.word	0x08006e8f
 8006c58:	08006eb3 	.word	0x08006eb3
 8006c5c:	24000128 	.word	0x24000128

08006c60 <stdio_exit_handler>:
 8006c60:	4a02      	ldr	r2, [pc, #8]	@ (8006c6c <stdio_exit_handler+0xc>)
 8006c62:	4903      	ldr	r1, [pc, #12]	@ (8006c70 <stdio_exit_handler+0x10>)
 8006c64:	4803      	ldr	r0, [pc, #12]	@ (8006c74 <stdio_exit_handler+0x14>)
 8006c66:	f000 b869 	b.w	8006d3c <_fwalk_sglue>
 8006c6a:	bf00      	nop
 8006c6c:	24000014 	.word	0x24000014
 8006c70:	080073d5 	.word	0x080073d5
 8006c74:	24000024 	.word	0x24000024

08006c78 <cleanup_stdio>:
 8006c78:	6841      	ldr	r1, [r0, #4]
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	@ (8006cac <cleanup_stdio+0x34>)
 8006c7c:	4299      	cmp	r1, r3
 8006c7e:	b510      	push	{r4, lr}
 8006c80:	4604      	mov	r4, r0
 8006c82:	d001      	beq.n	8006c88 <cleanup_stdio+0x10>
 8006c84:	f000 fba6 	bl	80073d4 <_fflush_r>
 8006c88:	68a1      	ldr	r1, [r4, #8]
 8006c8a:	4b09      	ldr	r3, [pc, #36]	@ (8006cb0 <cleanup_stdio+0x38>)
 8006c8c:	4299      	cmp	r1, r3
 8006c8e:	d002      	beq.n	8006c96 <cleanup_stdio+0x1e>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 fb9f 	bl	80073d4 <_fflush_r>
 8006c96:	68e1      	ldr	r1, [r4, #12]
 8006c98:	4b06      	ldr	r3, [pc, #24]	@ (8006cb4 <cleanup_stdio+0x3c>)
 8006c9a:	4299      	cmp	r1, r3
 8006c9c:	d004      	beq.n	8006ca8 <cleanup_stdio+0x30>
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca4:	f000 bb96 	b.w	80073d4 <_fflush_r>
 8006ca8:	bd10      	pop	{r4, pc}
 8006caa:	bf00      	nop
 8006cac:	24000128 	.word	0x24000128
 8006cb0:	24000190 	.word	0x24000190
 8006cb4:	240001f8 	.word	0x240001f8

08006cb8 <global_stdio_init.part.0>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce8 <global_stdio_init.part.0+0x30>)
 8006cbc:	4c0b      	ldr	r4, [pc, #44]	@ (8006cec <global_stdio_init.part.0+0x34>)
 8006cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8006cf0 <global_stdio_init.part.0+0x38>)
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	2104      	movs	r1, #4
 8006cc8:	f7ff ff94 	bl	8006bf4 <std>
 8006ccc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	2109      	movs	r1, #9
 8006cd4:	f7ff ff8e 	bl	8006bf4 <std>
 8006cd8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006cdc:	2202      	movs	r2, #2
 8006cde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce2:	2112      	movs	r1, #18
 8006ce4:	f7ff bf86 	b.w	8006bf4 <std>
 8006ce8:	24000260 	.word	0x24000260
 8006cec:	24000128 	.word	0x24000128
 8006cf0:	08006c61 	.word	0x08006c61

08006cf4 <__sfp_lock_acquire>:
 8006cf4:	4801      	ldr	r0, [pc, #4]	@ (8006cfc <__sfp_lock_acquire+0x8>)
 8006cf6:	f000 b9ee 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 8006cfa:	bf00      	nop
 8006cfc:	24000269 	.word	0x24000269

08006d00 <__sfp_lock_release>:
 8006d00:	4801      	ldr	r0, [pc, #4]	@ (8006d08 <__sfp_lock_release+0x8>)
 8006d02:	f000 b9e9 	b.w	80070d8 <__retarget_lock_release_recursive>
 8006d06:	bf00      	nop
 8006d08:	24000269 	.word	0x24000269

08006d0c <__sinit>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	4604      	mov	r4, r0
 8006d10:	f7ff fff0 	bl	8006cf4 <__sfp_lock_acquire>
 8006d14:	6a23      	ldr	r3, [r4, #32]
 8006d16:	b11b      	cbz	r3, 8006d20 <__sinit+0x14>
 8006d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d1c:	f7ff bff0 	b.w	8006d00 <__sfp_lock_release>
 8006d20:	4b04      	ldr	r3, [pc, #16]	@ (8006d34 <__sinit+0x28>)
 8006d22:	6223      	str	r3, [r4, #32]
 8006d24:	4b04      	ldr	r3, [pc, #16]	@ (8006d38 <__sinit+0x2c>)
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f5      	bne.n	8006d18 <__sinit+0xc>
 8006d2c:	f7ff ffc4 	bl	8006cb8 <global_stdio_init.part.0>
 8006d30:	e7f2      	b.n	8006d18 <__sinit+0xc>
 8006d32:	bf00      	nop
 8006d34:	08006c79 	.word	0x08006c79
 8006d38:	24000260 	.word	0x24000260

08006d3c <_fwalk_sglue>:
 8006d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d40:	4607      	mov	r7, r0
 8006d42:	4688      	mov	r8, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	2600      	movs	r6, #0
 8006d48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d4c:	f1b9 0901 	subs.w	r9, r9, #1
 8006d50:	d505      	bpl.n	8006d5e <_fwalk_sglue+0x22>
 8006d52:	6824      	ldr	r4, [r4, #0]
 8006d54:	2c00      	cmp	r4, #0
 8006d56:	d1f7      	bne.n	8006d48 <_fwalk_sglue+0xc>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d5e:	89ab      	ldrh	r3, [r5, #12]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d907      	bls.n	8006d74 <_fwalk_sglue+0x38>
 8006d64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d68:	3301      	adds	r3, #1
 8006d6a:	d003      	beq.n	8006d74 <_fwalk_sglue+0x38>
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	4638      	mov	r0, r7
 8006d70:	47c0      	blx	r8
 8006d72:	4306      	orrs	r6, r0
 8006d74:	3568      	adds	r5, #104	@ 0x68
 8006d76:	e7e9      	b.n	8006d4c <_fwalk_sglue+0x10>

08006d78 <_puts_r>:
 8006d78:	6a03      	ldr	r3, [r0, #32]
 8006d7a:	b570      	push	{r4, r5, r6, lr}
 8006d7c:	6884      	ldr	r4, [r0, #8]
 8006d7e:	4605      	mov	r5, r0
 8006d80:	460e      	mov	r6, r1
 8006d82:	b90b      	cbnz	r3, 8006d88 <_puts_r+0x10>
 8006d84:	f7ff ffc2 	bl	8006d0c <__sinit>
 8006d88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d8a:	07db      	lsls	r3, r3, #31
 8006d8c:	d405      	bmi.n	8006d9a <_puts_r+0x22>
 8006d8e:	89a3      	ldrh	r3, [r4, #12]
 8006d90:	0598      	lsls	r0, r3, #22
 8006d92:	d402      	bmi.n	8006d9a <_puts_r+0x22>
 8006d94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d96:	f000 f99e 	bl	80070d6 <__retarget_lock_acquire_recursive>
 8006d9a:	89a3      	ldrh	r3, [r4, #12]
 8006d9c:	0719      	lsls	r1, r3, #28
 8006d9e:	d502      	bpl.n	8006da6 <_puts_r+0x2e>
 8006da0:	6923      	ldr	r3, [r4, #16]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d135      	bne.n	8006e12 <_puts_r+0x9a>
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	f000 f8c5 	bl	8006f38 <__swsetup_r>
 8006dae:	b380      	cbz	r0, 8006e12 <_puts_r+0x9a>
 8006db0:	f04f 35ff 	mov.w	r5, #4294967295
 8006db4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006db6:	07da      	lsls	r2, r3, #31
 8006db8:	d405      	bmi.n	8006dc6 <_puts_r+0x4e>
 8006dba:	89a3      	ldrh	r3, [r4, #12]
 8006dbc:	059b      	lsls	r3, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_puts_r+0x4e>
 8006dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006dc2:	f000 f989 	bl	80070d8 <__retarget_lock_release_recursive>
 8006dc6:	4628      	mov	r0, r5
 8006dc8:	bd70      	pop	{r4, r5, r6, pc}
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	da04      	bge.n	8006dd8 <_puts_r+0x60>
 8006dce:	69a2      	ldr	r2, [r4, #24]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	dc17      	bgt.n	8006e04 <_puts_r+0x8c>
 8006dd4:	290a      	cmp	r1, #10
 8006dd6:	d015      	beq.n	8006e04 <_puts_r+0x8c>
 8006dd8:	6823      	ldr	r3, [r4, #0]
 8006dda:	1c5a      	adds	r2, r3, #1
 8006ddc:	6022      	str	r2, [r4, #0]
 8006dde:	7019      	strb	r1, [r3, #0]
 8006de0:	68a3      	ldr	r3, [r4, #8]
 8006de2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006de6:	3b01      	subs	r3, #1
 8006de8:	60a3      	str	r3, [r4, #8]
 8006dea:	2900      	cmp	r1, #0
 8006dec:	d1ed      	bne.n	8006dca <_puts_r+0x52>
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	da11      	bge.n	8006e16 <_puts_r+0x9e>
 8006df2:	4622      	mov	r2, r4
 8006df4:	210a      	movs	r1, #10
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 f85f 	bl	8006eba <__swbuf_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d0d7      	beq.n	8006db0 <_puts_r+0x38>
 8006e00:	250a      	movs	r5, #10
 8006e02:	e7d7      	b.n	8006db4 <_puts_r+0x3c>
 8006e04:	4622      	mov	r2, r4
 8006e06:	4628      	mov	r0, r5
 8006e08:	f000 f857 	bl	8006eba <__swbuf_r>
 8006e0c:	3001      	adds	r0, #1
 8006e0e:	d1e7      	bne.n	8006de0 <_puts_r+0x68>
 8006e10:	e7ce      	b.n	8006db0 <_puts_r+0x38>
 8006e12:	3e01      	subs	r6, #1
 8006e14:	e7e4      	b.n	8006de0 <_puts_r+0x68>
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	1c5a      	adds	r2, r3, #1
 8006e1a:	6022      	str	r2, [r4, #0]
 8006e1c:	220a      	movs	r2, #10
 8006e1e:	701a      	strb	r2, [r3, #0]
 8006e20:	e7ee      	b.n	8006e00 <_puts_r+0x88>
	...

08006e24 <puts>:
 8006e24:	4b02      	ldr	r3, [pc, #8]	@ (8006e30 <puts+0xc>)
 8006e26:	4601      	mov	r1, r0
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f7ff bfa5 	b.w	8006d78 <_puts_r>
 8006e2e:	bf00      	nop
 8006e30:	24000020 	.word	0x24000020

08006e34 <__sread>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	460c      	mov	r4, r1
 8006e38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e3c:	f000 f8fc 	bl	8007038 <_read_r>
 8006e40:	2800      	cmp	r0, #0
 8006e42:	bfab      	itete	ge
 8006e44:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006e46:	89a3      	ldrhlt	r3, [r4, #12]
 8006e48:	181b      	addge	r3, r3, r0
 8006e4a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006e4e:	bfac      	ite	ge
 8006e50:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006e52:	81a3      	strhlt	r3, [r4, #12]
 8006e54:	bd10      	pop	{r4, pc}

08006e56 <__swrite>:
 8006e56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e5a:	461f      	mov	r7, r3
 8006e5c:	898b      	ldrh	r3, [r1, #12]
 8006e5e:	05db      	lsls	r3, r3, #23
 8006e60:	4605      	mov	r5, r0
 8006e62:	460c      	mov	r4, r1
 8006e64:	4616      	mov	r6, r2
 8006e66:	d505      	bpl.n	8006e74 <__swrite+0x1e>
 8006e68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f000 f8d0 	bl	8007014 <_lseek_r>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e7a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	4632      	mov	r2, r6
 8006e82:	463b      	mov	r3, r7
 8006e84:	4628      	mov	r0, r5
 8006e86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8a:	f000 b8e7 	b.w	800705c <_write_r>

08006e8e <__sseek>:
 8006e8e:	b510      	push	{r4, lr}
 8006e90:	460c      	mov	r4, r1
 8006e92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e96:	f000 f8bd 	bl	8007014 <_lseek_r>
 8006e9a:	1c43      	adds	r3, r0, #1
 8006e9c:	89a3      	ldrh	r3, [r4, #12]
 8006e9e:	bf15      	itete	ne
 8006ea0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006ea2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006ea6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006eaa:	81a3      	strheq	r3, [r4, #12]
 8006eac:	bf18      	it	ne
 8006eae:	81a3      	strhne	r3, [r4, #12]
 8006eb0:	bd10      	pop	{r4, pc}

08006eb2 <__sclose>:
 8006eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eb6:	f000 b89d 	b.w	8006ff4 <_close_r>

08006eba <__swbuf_r>:
 8006eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ebc:	460e      	mov	r6, r1
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	4605      	mov	r5, r0
 8006ec2:	b118      	cbz	r0, 8006ecc <__swbuf_r+0x12>
 8006ec4:	6a03      	ldr	r3, [r0, #32]
 8006ec6:	b90b      	cbnz	r3, 8006ecc <__swbuf_r+0x12>
 8006ec8:	f7ff ff20 	bl	8006d0c <__sinit>
 8006ecc:	69a3      	ldr	r3, [r4, #24]
 8006ece:	60a3      	str	r3, [r4, #8]
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	071a      	lsls	r2, r3, #28
 8006ed4:	d501      	bpl.n	8006eda <__swbuf_r+0x20>
 8006ed6:	6923      	ldr	r3, [r4, #16]
 8006ed8:	b943      	cbnz	r3, 8006eec <__swbuf_r+0x32>
 8006eda:	4621      	mov	r1, r4
 8006edc:	4628      	mov	r0, r5
 8006ede:	f000 f82b 	bl	8006f38 <__swsetup_r>
 8006ee2:	b118      	cbz	r0, 8006eec <__swbuf_r+0x32>
 8006ee4:	f04f 37ff 	mov.w	r7, #4294967295
 8006ee8:	4638      	mov	r0, r7
 8006eea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	6922      	ldr	r2, [r4, #16]
 8006ef0:	1a98      	subs	r0, r3, r2
 8006ef2:	6963      	ldr	r3, [r4, #20]
 8006ef4:	b2f6      	uxtb	r6, r6
 8006ef6:	4283      	cmp	r3, r0
 8006ef8:	4637      	mov	r7, r6
 8006efa:	dc05      	bgt.n	8006f08 <__swbuf_r+0x4e>
 8006efc:	4621      	mov	r1, r4
 8006efe:	4628      	mov	r0, r5
 8006f00:	f000 fa68 	bl	80073d4 <_fflush_r>
 8006f04:	2800      	cmp	r0, #0
 8006f06:	d1ed      	bne.n	8006ee4 <__swbuf_r+0x2a>
 8006f08:	68a3      	ldr	r3, [r4, #8]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	60a3      	str	r3, [r4, #8]
 8006f0e:	6823      	ldr	r3, [r4, #0]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	6022      	str	r2, [r4, #0]
 8006f14:	701e      	strb	r6, [r3, #0]
 8006f16:	6962      	ldr	r2, [r4, #20]
 8006f18:	1c43      	adds	r3, r0, #1
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d004      	beq.n	8006f28 <__swbuf_r+0x6e>
 8006f1e:	89a3      	ldrh	r3, [r4, #12]
 8006f20:	07db      	lsls	r3, r3, #31
 8006f22:	d5e1      	bpl.n	8006ee8 <__swbuf_r+0x2e>
 8006f24:	2e0a      	cmp	r6, #10
 8006f26:	d1df      	bne.n	8006ee8 <__swbuf_r+0x2e>
 8006f28:	4621      	mov	r1, r4
 8006f2a:	4628      	mov	r0, r5
 8006f2c:	f000 fa52 	bl	80073d4 <_fflush_r>
 8006f30:	2800      	cmp	r0, #0
 8006f32:	d0d9      	beq.n	8006ee8 <__swbuf_r+0x2e>
 8006f34:	e7d6      	b.n	8006ee4 <__swbuf_r+0x2a>
	...

08006f38 <__swsetup_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	4b29      	ldr	r3, [pc, #164]	@ (8006fe0 <__swsetup_r+0xa8>)
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	6818      	ldr	r0, [r3, #0]
 8006f40:	460c      	mov	r4, r1
 8006f42:	b118      	cbz	r0, 8006f4c <__swsetup_r+0x14>
 8006f44:	6a03      	ldr	r3, [r0, #32]
 8006f46:	b90b      	cbnz	r3, 8006f4c <__swsetup_r+0x14>
 8006f48:	f7ff fee0 	bl	8006d0c <__sinit>
 8006f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f50:	0719      	lsls	r1, r3, #28
 8006f52:	d422      	bmi.n	8006f9a <__swsetup_r+0x62>
 8006f54:	06da      	lsls	r2, r3, #27
 8006f56:	d407      	bmi.n	8006f68 <__swsetup_r+0x30>
 8006f58:	2209      	movs	r2, #9
 8006f5a:	602a      	str	r2, [r5, #0]
 8006f5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f60:	81a3      	strh	r3, [r4, #12]
 8006f62:	f04f 30ff 	mov.w	r0, #4294967295
 8006f66:	e033      	b.n	8006fd0 <__swsetup_r+0x98>
 8006f68:	0758      	lsls	r0, r3, #29
 8006f6a:	d512      	bpl.n	8006f92 <__swsetup_r+0x5a>
 8006f6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f6e:	b141      	cbz	r1, 8006f82 <__swsetup_r+0x4a>
 8006f70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f74:	4299      	cmp	r1, r3
 8006f76:	d002      	beq.n	8006f7e <__swsetup_r+0x46>
 8006f78:	4628      	mov	r0, r5
 8006f7a:	f000 f8af 	bl	80070dc <_free_r>
 8006f7e:	2300      	movs	r3, #0
 8006f80:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f82:	89a3      	ldrh	r3, [r4, #12]
 8006f84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f88:	81a3      	strh	r3, [r4, #12]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	6063      	str	r3, [r4, #4]
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	6023      	str	r3, [r4, #0]
 8006f92:	89a3      	ldrh	r3, [r4, #12]
 8006f94:	f043 0308 	orr.w	r3, r3, #8
 8006f98:	81a3      	strh	r3, [r4, #12]
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	b94b      	cbnz	r3, 8006fb2 <__swsetup_r+0x7a>
 8006f9e:	89a3      	ldrh	r3, [r4, #12]
 8006fa0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006fa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006fa8:	d003      	beq.n	8006fb2 <__swsetup_r+0x7a>
 8006faa:	4621      	mov	r1, r4
 8006fac:	4628      	mov	r0, r5
 8006fae:	f000 fa5f 	bl	8007470 <__smakebuf_r>
 8006fb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fb6:	f013 0201 	ands.w	r2, r3, #1
 8006fba:	d00a      	beq.n	8006fd2 <__swsetup_r+0x9a>
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	60a2      	str	r2, [r4, #8]
 8006fc0:	6962      	ldr	r2, [r4, #20]
 8006fc2:	4252      	negs	r2, r2
 8006fc4:	61a2      	str	r2, [r4, #24]
 8006fc6:	6922      	ldr	r2, [r4, #16]
 8006fc8:	b942      	cbnz	r2, 8006fdc <__swsetup_r+0xa4>
 8006fca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006fce:	d1c5      	bne.n	8006f5c <__swsetup_r+0x24>
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
 8006fd2:	0799      	lsls	r1, r3, #30
 8006fd4:	bf58      	it	pl
 8006fd6:	6962      	ldrpl	r2, [r4, #20]
 8006fd8:	60a2      	str	r2, [r4, #8]
 8006fda:	e7f4      	b.n	8006fc6 <__swsetup_r+0x8e>
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7f7      	b.n	8006fd0 <__swsetup_r+0x98>
 8006fe0:	24000020 	.word	0x24000020

08006fe4 <memset>:
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d100      	bne.n	8006fee <memset+0xa>
 8006fec:	4770      	bx	lr
 8006fee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff2:	e7f9      	b.n	8006fe8 <memset+0x4>

08006ff4 <_close_r>:
 8006ff4:	b538      	push	{r3, r4, r5, lr}
 8006ff6:	4d06      	ldr	r5, [pc, #24]	@ (8007010 <_close_r+0x1c>)
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	4608      	mov	r0, r1
 8006ffe:	602b      	str	r3, [r5, #0]
 8007000:	f7f9 fdff 	bl	8000c02 <_close>
 8007004:	1c43      	adds	r3, r0, #1
 8007006:	d102      	bne.n	800700e <_close_r+0x1a>
 8007008:	682b      	ldr	r3, [r5, #0]
 800700a:	b103      	cbz	r3, 800700e <_close_r+0x1a>
 800700c:	6023      	str	r3, [r4, #0]
 800700e:	bd38      	pop	{r3, r4, r5, pc}
 8007010:	24000264 	.word	0x24000264

08007014 <_lseek_r>:
 8007014:	b538      	push	{r3, r4, r5, lr}
 8007016:	4d07      	ldr	r5, [pc, #28]	@ (8007034 <_lseek_r+0x20>)
 8007018:	4604      	mov	r4, r0
 800701a:	4608      	mov	r0, r1
 800701c:	4611      	mov	r1, r2
 800701e:	2200      	movs	r2, #0
 8007020:	602a      	str	r2, [r5, #0]
 8007022:	461a      	mov	r2, r3
 8007024:	f7f9 fe14 	bl	8000c50 <_lseek>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_lseek_r+0x1e>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_lseek_r+0x1e>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	24000264 	.word	0x24000264

08007038 <_read_r>:
 8007038:	b538      	push	{r3, r4, r5, lr}
 800703a:	4d07      	ldr	r5, [pc, #28]	@ (8007058 <_read_r+0x20>)
 800703c:	4604      	mov	r4, r0
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	2200      	movs	r2, #0
 8007044:	602a      	str	r2, [r5, #0]
 8007046:	461a      	mov	r2, r3
 8007048:	f7f9 fda2 	bl	8000b90 <_read>
 800704c:	1c43      	adds	r3, r0, #1
 800704e:	d102      	bne.n	8007056 <_read_r+0x1e>
 8007050:	682b      	ldr	r3, [r5, #0]
 8007052:	b103      	cbz	r3, 8007056 <_read_r+0x1e>
 8007054:	6023      	str	r3, [r4, #0]
 8007056:	bd38      	pop	{r3, r4, r5, pc}
 8007058:	24000264 	.word	0x24000264

0800705c <_write_r>:
 800705c:	b538      	push	{r3, r4, r5, lr}
 800705e:	4d07      	ldr	r5, [pc, #28]	@ (800707c <_write_r+0x20>)
 8007060:	4604      	mov	r4, r0
 8007062:	4608      	mov	r0, r1
 8007064:	4611      	mov	r1, r2
 8007066:	2200      	movs	r2, #0
 8007068:	602a      	str	r2, [r5, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	f7f9 fdad 	bl	8000bca <_write>
 8007070:	1c43      	adds	r3, r0, #1
 8007072:	d102      	bne.n	800707a <_write_r+0x1e>
 8007074:	682b      	ldr	r3, [r5, #0]
 8007076:	b103      	cbz	r3, 800707a <_write_r+0x1e>
 8007078:	6023      	str	r3, [r4, #0]
 800707a:	bd38      	pop	{r3, r4, r5, pc}
 800707c:	24000264 	.word	0x24000264

08007080 <__errno>:
 8007080:	4b01      	ldr	r3, [pc, #4]	@ (8007088 <__errno+0x8>)
 8007082:	6818      	ldr	r0, [r3, #0]
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop
 8007088:	24000020 	.word	0x24000020

0800708c <__libc_init_array>:
 800708c:	b570      	push	{r4, r5, r6, lr}
 800708e:	4d0d      	ldr	r5, [pc, #52]	@ (80070c4 <__libc_init_array+0x38>)
 8007090:	4c0d      	ldr	r4, [pc, #52]	@ (80070c8 <__libc_init_array+0x3c>)
 8007092:	1b64      	subs	r4, r4, r5
 8007094:	10a4      	asrs	r4, r4, #2
 8007096:	2600      	movs	r6, #0
 8007098:	42a6      	cmp	r6, r4
 800709a:	d109      	bne.n	80070b0 <__libc_init_array+0x24>
 800709c:	4d0b      	ldr	r5, [pc, #44]	@ (80070cc <__libc_init_array+0x40>)
 800709e:	4c0c      	ldr	r4, [pc, #48]	@ (80070d0 <__libc_init_array+0x44>)
 80070a0:	f000 fa54 	bl	800754c <_init>
 80070a4:	1b64      	subs	r4, r4, r5
 80070a6:	10a4      	asrs	r4, r4, #2
 80070a8:	2600      	movs	r6, #0
 80070aa:	42a6      	cmp	r6, r4
 80070ac:	d105      	bne.n	80070ba <__libc_init_array+0x2e>
 80070ae:	bd70      	pop	{r4, r5, r6, pc}
 80070b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80070b4:	4798      	blx	r3
 80070b6:	3601      	adds	r6, #1
 80070b8:	e7ee      	b.n	8007098 <__libc_init_array+0xc>
 80070ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80070be:	4798      	blx	r3
 80070c0:	3601      	adds	r6, #1
 80070c2:	e7f2      	b.n	80070aa <__libc_init_array+0x1e>
 80070c4:	080075c0 	.word	0x080075c0
 80070c8:	080075c0 	.word	0x080075c0
 80070cc:	080075c0 	.word	0x080075c0
 80070d0:	080075c4 	.word	0x080075c4

080070d4 <__retarget_lock_init_recursive>:
 80070d4:	4770      	bx	lr

080070d6 <__retarget_lock_acquire_recursive>:
 80070d6:	4770      	bx	lr

080070d8 <__retarget_lock_release_recursive>:
 80070d8:	4770      	bx	lr
	...

080070dc <_free_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4605      	mov	r5, r0
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d041      	beq.n	8007168 <_free_r+0x8c>
 80070e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070e8:	1f0c      	subs	r4, r1, #4
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	bfb8      	it	lt
 80070ee:	18e4      	addlt	r4, r4, r3
 80070f0:	f000 f8e0 	bl	80072b4 <__malloc_lock>
 80070f4:	4a1d      	ldr	r2, [pc, #116]	@ (800716c <_free_r+0x90>)
 80070f6:	6813      	ldr	r3, [r2, #0]
 80070f8:	b933      	cbnz	r3, 8007108 <_free_r+0x2c>
 80070fa:	6063      	str	r3, [r4, #4]
 80070fc:	6014      	str	r4, [r2, #0]
 80070fe:	4628      	mov	r0, r5
 8007100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007104:	f000 b8dc 	b.w	80072c0 <__malloc_unlock>
 8007108:	42a3      	cmp	r3, r4
 800710a:	d908      	bls.n	800711e <_free_r+0x42>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	1821      	adds	r1, r4, r0
 8007110:	428b      	cmp	r3, r1
 8007112:	bf01      	itttt	eq
 8007114:	6819      	ldreq	r1, [r3, #0]
 8007116:	685b      	ldreq	r3, [r3, #4]
 8007118:	1809      	addeq	r1, r1, r0
 800711a:	6021      	streq	r1, [r4, #0]
 800711c:	e7ed      	b.n	80070fa <_free_r+0x1e>
 800711e:	461a      	mov	r2, r3
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	b10b      	cbz	r3, 8007128 <_free_r+0x4c>
 8007124:	42a3      	cmp	r3, r4
 8007126:	d9fa      	bls.n	800711e <_free_r+0x42>
 8007128:	6811      	ldr	r1, [r2, #0]
 800712a:	1850      	adds	r0, r2, r1
 800712c:	42a0      	cmp	r0, r4
 800712e:	d10b      	bne.n	8007148 <_free_r+0x6c>
 8007130:	6820      	ldr	r0, [r4, #0]
 8007132:	4401      	add	r1, r0
 8007134:	1850      	adds	r0, r2, r1
 8007136:	4283      	cmp	r3, r0
 8007138:	6011      	str	r1, [r2, #0]
 800713a:	d1e0      	bne.n	80070fe <_free_r+0x22>
 800713c:	6818      	ldr	r0, [r3, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	6053      	str	r3, [r2, #4]
 8007142:	4408      	add	r0, r1
 8007144:	6010      	str	r0, [r2, #0]
 8007146:	e7da      	b.n	80070fe <_free_r+0x22>
 8007148:	d902      	bls.n	8007150 <_free_r+0x74>
 800714a:	230c      	movs	r3, #12
 800714c:	602b      	str	r3, [r5, #0]
 800714e:	e7d6      	b.n	80070fe <_free_r+0x22>
 8007150:	6820      	ldr	r0, [r4, #0]
 8007152:	1821      	adds	r1, r4, r0
 8007154:	428b      	cmp	r3, r1
 8007156:	bf04      	itt	eq
 8007158:	6819      	ldreq	r1, [r3, #0]
 800715a:	685b      	ldreq	r3, [r3, #4]
 800715c:	6063      	str	r3, [r4, #4]
 800715e:	bf04      	itt	eq
 8007160:	1809      	addeq	r1, r1, r0
 8007162:	6021      	streq	r1, [r4, #0]
 8007164:	6054      	str	r4, [r2, #4]
 8007166:	e7ca      	b.n	80070fe <_free_r+0x22>
 8007168:	bd38      	pop	{r3, r4, r5, pc}
 800716a:	bf00      	nop
 800716c:	24000270 	.word	0x24000270

08007170 <sbrk_aligned>:
 8007170:	b570      	push	{r4, r5, r6, lr}
 8007172:	4e0f      	ldr	r6, [pc, #60]	@ (80071b0 <sbrk_aligned+0x40>)
 8007174:	460c      	mov	r4, r1
 8007176:	6831      	ldr	r1, [r6, #0]
 8007178:	4605      	mov	r5, r0
 800717a:	b911      	cbnz	r1, 8007182 <sbrk_aligned+0x12>
 800717c:	f000 f9d6 	bl	800752c <_sbrk_r>
 8007180:	6030      	str	r0, [r6, #0]
 8007182:	4621      	mov	r1, r4
 8007184:	4628      	mov	r0, r5
 8007186:	f000 f9d1 	bl	800752c <_sbrk_r>
 800718a:	1c43      	adds	r3, r0, #1
 800718c:	d103      	bne.n	8007196 <sbrk_aligned+0x26>
 800718e:	f04f 34ff 	mov.w	r4, #4294967295
 8007192:	4620      	mov	r0, r4
 8007194:	bd70      	pop	{r4, r5, r6, pc}
 8007196:	1cc4      	adds	r4, r0, #3
 8007198:	f024 0403 	bic.w	r4, r4, #3
 800719c:	42a0      	cmp	r0, r4
 800719e:	d0f8      	beq.n	8007192 <sbrk_aligned+0x22>
 80071a0:	1a21      	subs	r1, r4, r0
 80071a2:	4628      	mov	r0, r5
 80071a4:	f000 f9c2 	bl	800752c <_sbrk_r>
 80071a8:	3001      	adds	r0, #1
 80071aa:	d1f2      	bne.n	8007192 <sbrk_aligned+0x22>
 80071ac:	e7ef      	b.n	800718e <sbrk_aligned+0x1e>
 80071ae:	bf00      	nop
 80071b0:	2400026c 	.word	0x2400026c

080071b4 <_malloc_r>:
 80071b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b8:	1ccd      	adds	r5, r1, #3
 80071ba:	f025 0503 	bic.w	r5, r5, #3
 80071be:	3508      	adds	r5, #8
 80071c0:	2d0c      	cmp	r5, #12
 80071c2:	bf38      	it	cc
 80071c4:	250c      	movcc	r5, #12
 80071c6:	2d00      	cmp	r5, #0
 80071c8:	4606      	mov	r6, r0
 80071ca:	db01      	blt.n	80071d0 <_malloc_r+0x1c>
 80071cc:	42a9      	cmp	r1, r5
 80071ce:	d904      	bls.n	80071da <_malloc_r+0x26>
 80071d0:	230c      	movs	r3, #12
 80071d2:	6033      	str	r3, [r6, #0]
 80071d4:	2000      	movs	r0, #0
 80071d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80072b0 <_malloc_r+0xfc>
 80071de:	f000 f869 	bl	80072b4 <__malloc_lock>
 80071e2:	f8d8 3000 	ldr.w	r3, [r8]
 80071e6:	461c      	mov	r4, r3
 80071e8:	bb44      	cbnz	r4, 800723c <_malloc_r+0x88>
 80071ea:	4629      	mov	r1, r5
 80071ec:	4630      	mov	r0, r6
 80071ee:	f7ff ffbf 	bl	8007170 <sbrk_aligned>
 80071f2:	1c43      	adds	r3, r0, #1
 80071f4:	4604      	mov	r4, r0
 80071f6:	d158      	bne.n	80072aa <_malloc_r+0xf6>
 80071f8:	f8d8 4000 	ldr.w	r4, [r8]
 80071fc:	4627      	mov	r7, r4
 80071fe:	2f00      	cmp	r7, #0
 8007200:	d143      	bne.n	800728a <_malloc_r+0xd6>
 8007202:	2c00      	cmp	r4, #0
 8007204:	d04b      	beq.n	800729e <_malloc_r+0xea>
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	4639      	mov	r1, r7
 800720a:	4630      	mov	r0, r6
 800720c:	eb04 0903 	add.w	r9, r4, r3
 8007210:	f000 f98c 	bl	800752c <_sbrk_r>
 8007214:	4581      	cmp	r9, r0
 8007216:	d142      	bne.n	800729e <_malloc_r+0xea>
 8007218:	6821      	ldr	r1, [r4, #0]
 800721a:	1a6d      	subs	r5, r5, r1
 800721c:	4629      	mov	r1, r5
 800721e:	4630      	mov	r0, r6
 8007220:	f7ff ffa6 	bl	8007170 <sbrk_aligned>
 8007224:	3001      	adds	r0, #1
 8007226:	d03a      	beq.n	800729e <_malloc_r+0xea>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	442b      	add	r3, r5
 800722c:	6023      	str	r3, [r4, #0]
 800722e:	f8d8 3000 	ldr.w	r3, [r8]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	bb62      	cbnz	r2, 8007290 <_malloc_r+0xdc>
 8007236:	f8c8 7000 	str.w	r7, [r8]
 800723a:	e00f      	b.n	800725c <_malloc_r+0xa8>
 800723c:	6822      	ldr	r2, [r4, #0]
 800723e:	1b52      	subs	r2, r2, r5
 8007240:	d420      	bmi.n	8007284 <_malloc_r+0xd0>
 8007242:	2a0b      	cmp	r2, #11
 8007244:	d917      	bls.n	8007276 <_malloc_r+0xc2>
 8007246:	1961      	adds	r1, r4, r5
 8007248:	42a3      	cmp	r3, r4
 800724a:	6025      	str	r5, [r4, #0]
 800724c:	bf18      	it	ne
 800724e:	6059      	strne	r1, [r3, #4]
 8007250:	6863      	ldr	r3, [r4, #4]
 8007252:	bf08      	it	eq
 8007254:	f8c8 1000 	streq.w	r1, [r8]
 8007258:	5162      	str	r2, [r4, r5]
 800725a:	604b      	str	r3, [r1, #4]
 800725c:	4630      	mov	r0, r6
 800725e:	f000 f82f 	bl	80072c0 <__malloc_unlock>
 8007262:	f104 000b 	add.w	r0, r4, #11
 8007266:	1d23      	adds	r3, r4, #4
 8007268:	f020 0007 	bic.w	r0, r0, #7
 800726c:	1ac2      	subs	r2, r0, r3
 800726e:	bf1c      	itt	ne
 8007270:	1a1b      	subne	r3, r3, r0
 8007272:	50a3      	strne	r3, [r4, r2]
 8007274:	e7af      	b.n	80071d6 <_malloc_r+0x22>
 8007276:	6862      	ldr	r2, [r4, #4]
 8007278:	42a3      	cmp	r3, r4
 800727a:	bf0c      	ite	eq
 800727c:	f8c8 2000 	streq.w	r2, [r8]
 8007280:	605a      	strne	r2, [r3, #4]
 8007282:	e7eb      	b.n	800725c <_malloc_r+0xa8>
 8007284:	4623      	mov	r3, r4
 8007286:	6864      	ldr	r4, [r4, #4]
 8007288:	e7ae      	b.n	80071e8 <_malloc_r+0x34>
 800728a:	463c      	mov	r4, r7
 800728c:	687f      	ldr	r7, [r7, #4]
 800728e:	e7b6      	b.n	80071fe <_malloc_r+0x4a>
 8007290:	461a      	mov	r2, r3
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	42a3      	cmp	r3, r4
 8007296:	d1fb      	bne.n	8007290 <_malloc_r+0xdc>
 8007298:	2300      	movs	r3, #0
 800729a:	6053      	str	r3, [r2, #4]
 800729c:	e7de      	b.n	800725c <_malloc_r+0xa8>
 800729e:	230c      	movs	r3, #12
 80072a0:	6033      	str	r3, [r6, #0]
 80072a2:	4630      	mov	r0, r6
 80072a4:	f000 f80c 	bl	80072c0 <__malloc_unlock>
 80072a8:	e794      	b.n	80071d4 <_malloc_r+0x20>
 80072aa:	6005      	str	r5, [r0, #0]
 80072ac:	e7d6      	b.n	800725c <_malloc_r+0xa8>
 80072ae:	bf00      	nop
 80072b0:	24000270 	.word	0x24000270

080072b4 <__malloc_lock>:
 80072b4:	4801      	ldr	r0, [pc, #4]	@ (80072bc <__malloc_lock+0x8>)
 80072b6:	f7ff bf0e 	b.w	80070d6 <__retarget_lock_acquire_recursive>
 80072ba:	bf00      	nop
 80072bc:	24000268 	.word	0x24000268

080072c0 <__malloc_unlock>:
 80072c0:	4801      	ldr	r0, [pc, #4]	@ (80072c8 <__malloc_unlock+0x8>)
 80072c2:	f7ff bf09 	b.w	80070d8 <__retarget_lock_release_recursive>
 80072c6:	bf00      	nop
 80072c8:	24000268 	.word	0x24000268

080072cc <__sflush_r>:
 80072cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80072d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072d4:	0716      	lsls	r6, r2, #28
 80072d6:	4605      	mov	r5, r0
 80072d8:	460c      	mov	r4, r1
 80072da:	d454      	bmi.n	8007386 <__sflush_r+0xba>
 80072dc:	684b      	ldr	r3, [r1, #4]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	dc02      	bgt.n	80072e8 <__sflush_r+0x1c>
 80072e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	dd48      	ble.n	800737a <__sflush_r+0xae>
 80072e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80072ea:	2e00      	cmp	r6, #0
 80072ec:	d045      	beq.n	800737a <__sflush_r+0xae>
 80072ee:	2300      	movs	r3, #0
 80072f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80072f4:	682f      	ldr	r7, [r5, #0]
 80072f6:	6a21      	ldr	r1, [r4, #32]
 80072f8:	602b      	str	r3, [r5, #0]
 80072fa:	d030      	beq.n	800735e <__sflush_r+0x92>
 80072fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80072fe:	89a3      	ldrh	r3, [r4, #12]
 8007300:	0759      	lsls	r1, r3, #29
 8007302:	d505      	bpl.n	8007310 <__sflush_r+0x44>
 8007304:	6863      	ldr	r3, [r4, #4]
 8007306:	1ad2      	subs	r2, r2, r3
 8007308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800730a:	b10b      	cbz	r3, 8007310 <__sflush_r+0x44>
 800730c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	2300      	movs	r3, #0
 8007312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007314:	6a21      	ldr	r1, [r4, #32]
 8007316:	4628      	mov	r0, r5
 8007318:	47b0      	blx	r6
 800731a:	1c43      	adds	r3, r0, #1
 800731c:	89a3      	ldrh	r3, [r4, #12]
 800731e:	d106      	bne.n	800732e <__sflush_r+0x62>
 8007320:	6829      	ldr	r1, [r5, #0]
 8007322:	291d      	cmp	r1, #29
 8007324:	d82b      	bhi.n	800737e <__sflush_r+0xb2>
 8007326:	4a2a      	ldr	r2, [pc, #168]	@ (80073d0 <__sflush_r+0x104>)
 8007328:	40ca      	lsrs	r2, r1
 800732a:	07d6      	lsls	r6, r2, #31
 800732c:	d527      	bpl.n	800737e <__sflush_r+0xb2>
 800732e:	2200      	movs	r2, #0
 8007330:	6062      	str	r2, [r4, #4]
 8007332:	04d9      	lsls	r1, r3, #19
 8007334:	6922      	ldr	r2, [r4, #16]
 8007336:	6022      	str	r2, [r4, #0]
 8007338:	d504      	bpl.n	8007344 <__sflush_r+0x78>
 800733a:	1c42      	adds	r2, r0, #1
 800733c:	d101      	bne.n	8007342 <__sflush_r+0x76>
 800733e:	682b      	ldr	r3, [r5, #0]
 8007340:	b903      	cbnz	r3, 8007344 <__sflush_r+0x78>
 8007342:	6560      	str	r0, [r4, #84]	@ 0x54
 8007344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007346:	602f      	str	r7, [r5, #0]
 8007348:	b1b9      	cbz	r1, 800737a <__sflush_r+0xae>
 800734a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800734e:	4299      	cmp	r1, r3
 8007350:	d002      	beq.n	8007358 <__sflush_r+0x8c>
 8007352:	4628      	mov	r0, r5
 8007354:	f7ff fec2 	bl	80070dc <_free_r>
 8007358:	2300      	movs	r3, #0
 800735a:	6363      	str	r3, [r4, #52]	@ 0x34
 800735c:	e00d      	b.n	800737a <__sflush_r+0xae>
 800735e:	2301      	movs	r3, #1
 8007360:	4628      	mov	r0, r5
 8007362:	47b0      	blx	r6
 8007364:	4602      	mov	r2, r0
 8007366:	1c50      	adds	r0, r2, #1
 8007368:	d1c9      	bne.n	80072fe <__sflush_r+0x32>
 800736a:	682b      	ldr	r3, [r5, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d0c6      	beq.n	80072fe <__sflush_r+0x32>
 8007370:	2b1d      	cmp	r3, #29
 8007372:	d001      	beq.n	8007378 <__sflush_r+0xac>
 8007374:	2b16      	cmp	r3, #22
 8007376:	d11e      	bne.n	80073b6 <__sflush_r+0xea>
 8007378:	602f      	str	r7, [r5, #0]
 800737a:	2000      	movs	r0, #0
 800737c:	e022      	b.n	80073c4 <__sflush_r+0xf8>
 800737e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007382:	b21b      	sxth	r3, r3
 8007384:	e01b      	b.n	80073be <__sflush_r+0xf2>
 8007386:	690f      	ldr	r7, [r1, #16]
 8007388:	2f00      	cmp	r7, #0
 800738a:	d0f6      	beq.n	800737a <__sflush_r+0xae>
 800738c:	0793      	lsls	r3, r2, #30
 800738e:	680e      	ldr	r6, [r1, #0]
 8007390:	bf08      	it	eq
 8007392:	694b      	ldreq	r3, [r1, #20]
 8007394:	600f      	str	r7, [r1, #0]
 8007396:	bf18      	it	ne
 8007398:	2300      	movne	r3, #0
 800739a:	eba6 0807 	sub.w	r8, r6, r7
 800739e:	608b      	str	r3, [r1, #8]
 80073a0:	f1b8 0f00 	cmp.w	r8, #0
 80073a4:	dde9      	ble.n	800737a <__sflush_r+0xae>
 80073a6:	6a21      	ldr	r1, [r4, #32]
 80073a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80073aa:	4643      	mov	r3, r8
 80073ac:	463a      	mov	r2, r7
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b0      	blx	r6
 80073b2:	2800      	cmp	r0, #0
 80073b4:	dc08      	bgt.n	80073c8 <__sflush_r+0xfc>
 80073b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073be:	81a3      	strh	r3, [r4, #12]
 80073c0:	f04f 30ff 	mov.w	r0, #4294967295
 80073c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073c8:	4407      	add	r7, r0
 80073ca:	eba8 0800 	sub.w	r8, r8, r0
 80073ce:	e7e7      	b.n	80073a0 <__sflush_r+0xd4>
 80073d0:	20400001 	.word	0x20400001

080073d4 <_fflush_r>:
 80073d4:	b538      	push	{r3, r4, r5, lr}
 80073d6:	690b      	ldr	r3, [r1, #16]
 80073d8:	4605      	mov	r5, r0
 80073da:	460c      	mov	r4, r1
 80073dc:	b913      	cbnz	r3, 80073e4 <_fflush_r+0x10>
 80073de:	2500      	movs	r5, #0
 80073e0:	4628      	mov	r0, r5
 80073e2:	bd38      	pop	{r3, r4, r5, pc}
 80073e4:	b118      	cbz	r0, 80073ee <_fflush_r+0x1a>
 80073e6:	6a03      	ldr	r3, [r0, #32]
 80073e8:	b90b      	cbnz	r3, 80073ee <_fflush_r+0x1a>
 80073ea:	f7ff fc8f 	bl	8006d0c <__sinit>
 80073ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d0f3      	beq.n	80073de <_fflush_r+0xa>
 80073f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80073f8:	07d0      	lsls	r0, r2, #31
 80073fa:	d404      	bmi.n	8007406 <_fflush_r+0x32>
 80073fc:	0599      	lsls	r1, r3, #22
 80073fe:	d402      	bmi.n	8007406 <_fflush_r+0x32>
 8007400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007402:	f7ff fe68 	bl	80070d6 <__retarget_lock_acquire_recursive>
 8007406:	4628      	mov	r0, r5
 8007408:	4621      	mov	r1, r4
 800740a:	f7ff ff5f 	bl	80072cc <__sflush_r>
 800740e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007410:	07da      	lsls	r2, r3, #31
 8007412:	4605      	mov	r5, r0
 8007414:	d4e4      	bmi.n	80073e0 <_fflush_r+0xc>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	059b      	lsls	r3, r3, #22
 800741a:	d4e1      	bmi.n	80073e0 <_fflush_r+0xc>
 800741c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800741e:	f7ff fe5b 	bl	80070d8 <__retarget_lock_release_recursive>
 8007422:	e7dd      	b.n	80073e0 <_fflush_r+0xc>

08007424 <__swhatbuf_r>:
 8007424:	b570      	push	{r4, r5, r6, lr}
 8007426:	460c      	mov	r4, r1
 8007428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800742c:	2900      	cmp	r1, #0
 800742e:	b096      	sub	sp, #88	@ 0x58
 8007430:	4615      	mov	r5, r2
 8007432:	461e      	mov	r6, r3
 8007434:	da0d      	bge.n	8007452 <__swhatbuf_r+0x2e>
 8007436:	89a3      	ldrh	r3, [r4, #12]
 8007438:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800743c:	f04f 0100 	mov.w	r1, #0
 8007440:	bf14      	ite	ne
 8007442:	2340      	movne	r3, #64	@ 0x40
 8007444:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007448:	2000      	movs	r0, #0
 800744a:	6031      	str	r1, [r6, #0]
 800744c:	602b      	str	r3, [r5, #0]
 800744e:	b016      	add	sp, #88	@ 0x58
 8007450:	bd70      	pop	{r4, r5, r6, pc}
 8007452:	466a      	mov	r2, sp
 8007454:	f000 f848 	bl	80074e8 <_fstat_r>
 8007458:	2800      	cmp	r0, #0
 800745a:	dbec      	blt.n	8007436 <__swhatbuf_r+0x12>
 800745c:	9901      	ldr	r1, [sp, #4]
 800745e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007462:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007466:	4259      	negs	r1, r3
 8007468:	4159      	adcs	r1, r3
 800746a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800746e:	e7eb      	b.n	8007448 <__swhatbuf_r+0x24>

08007470 <__smakebuf_r>:
 8007470:	898b      	ldrh	r3, [r1, #12]
 8007472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007474:	079d      	lsls	r5, r3, #30
 8007476:	4606      	mov	r6, r0
 8007478:	460c      	mov	r4, r1
 800747a:	d507      	bpl.n	800748c <__smakebuf_r+0x1c>
 800747c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007480:	6023      	str	r3, [r4, #0]
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	2301      	movs	r3, #1
 8007486:	6163      	str	r3, [r4, #20]
 8007488:	b003      	add	sp, #12
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800748c:	ab01      	add	r3, sp, #4
 800748e:	466a      	mov	r2, sp
 8007490:	f7ff ffc8 	bl	8007424 <__swhatbuf_r>
 8007494:	9f00      	ldr	r7, [sp, #0]
 8007496:	4605      	mov	r5, r0
 8007498:	4639      	mov	r1, r7
 800749a:	4630      	mov	r0, r6
 800749c:	f7ff fe8a 	bl	80071b4 <_malloc_r>
 80074a0:	b948      	cbnz	r0, 80074b6 <__smakebuf_r+0x46>
 80074a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a6:	059a      	lsls	r2, r3, #22
 80074a8:	d4ee      	bmi.n	8007488 <__smakebuf_r+0x18>
 80074aa:	f023 0303 	bic.w	r3, r3, #3
 80074ae:	f043 0302 	orr.w	r3, r3, #2
 80074b2:	81a3      	strh	r3, [r4, #12]
 80074b4:	e7e2      	b.n	800747c <__smakebuf_r+0xc>
 80074b6:	89a3      	ldrh	r3, [r4, #12]
 80074b8:	6020      	str	r0, [r4, #0]
 80074ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074be:	81a3      	strh	r3, [r4, #12]
 80074c0:	9b01      	ldr	r3, [sp, #4]
 80074c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80074c6:	b15b      	cbz	r3, 80074e0 <__smakebuf_r+0x70>
 80074c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f81d 	bl	800750c <_isatty_r>
 80074d2:	b128      	cbz	r0, 80074e0 <__smakebuf_r+0x70>
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	f023 0303 	bic.w	r3, r3, #3
 80074da:	f043 0301 	orr.w	r3, r3, #1
 80074de:	81a3      	strh	r3, [r4, #12]
 80074e0:	89a3      	ldrh	r3, [r4, #12]
 80074e2:	431d      	orrs	r5, r3
 80074e4:	81a5      	strh	r5, [r4, #12]
 80074e6:	e7cf      	b.n	8007488 <__smakebuf_r+0x18>

080074e8 <_fstat_r>:
 80074e8:	b538      	push	{r3, r4, r5, lr}
 80074ea:	4d07      	ldr	r5, [pc, #28]	@ (8007508 <_fstat_r+0x20>)
 80074ec:	2300      	movs	r3, #0
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	602b      	str	r3, [r5, #0]
 80074f6:	f7f9 fb90 	bl	8000c1a <_fstat>
 80074fa:	1c43      	adds	r3, r0, #1
 80074fc:	d102      	bne.n	8007504 <_fstat_r+0x1c>
 80074fe:	682b      	ldr	r3, [r5, #0]
 8007500:	b103      	cbz	r3, 8007504 <_fstat_r+0x1c>
 8007502:	6023      	str	r3, [r4, #0]
 8007504:	bd38      	pop	{r3, r4, r5, pc}
 8007506:	bf00      	nop
 8007508:	24000264 	.word	0x24000264

0800750c <_isatty_r>:
 800750c:	b538      	push	{r3, r4, r5, lr}
 800750e:	4d06      	ldr	r5, [pc, #24]	@ (8007528 <_isatty_r+0x1c>)
 8007510:	2300      	movs	r3, #0
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	602b      	str	r3, [r5, #0]
 8007518:	f7f9 fb8f 	bl	8000c3a <_isatty>
 800751c:	1c43      	adds	r3, r0, #1
 800751e:	d102      	bne.n	8007526 <_isatty_r+0x1a>
 8007520:	682b      	ldr	r3, [r5, #0]
 8007522:	b103      	cbz	r3, 8007526 <_isatty_r+0x1a>
 8007524:	6023      	str	r3, [r4, #0]
 8007526:	bd38      	pop	{r3, r4, r5, pc}
 8007528:	24000264 	.word	0x24000264

0800752c <_sbrk_r>:
 800752c:	b538      	push	{r3, r4, r5, lr}
 800752e:	4d06      	ldr	r5, [pc, #24]	@ (8007548 <_sbrk_r+0x1c>)
 8007530:	2300      	movs	r3, #0
 8007532:	4604      	mov	r4, r0
 8007534:	4608      	mov	r0, r1
 8007536:	602b      	str	r3, [r5, #0]
 8007538:	f7f9 fb98 	bl	8000c6c <_sbrk>
 800753c:	1c43      	adds	r3, r0, #1
 800753e:	d102      	bne.n	8007546 <_sbrk_r+0x1a>
 8007540:	682b      	ldr	r3, [r5, #0]
 8007542:	b103      	cbz	r3, 8007546 <_sbrk_r+0x1a>
 8007544:	6023      	str	r3, [r4, #0]
 8007546:	bd38      	pop	{r3, r4, r5, pc}
 8007548:	24000264 	.word	0x24000264

0800754c <_init>:
 800754c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800754e:	bf00      	nop
 8007550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007552:	bc08      	pop	{r3}
 8007554:	469e      	mov	lr, r3
 8007556:	4770      	bx	lr

08007558 <_fini>:
 8007558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800755a:	bf00      	nop
 800755c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800755e:	bc08      	pop	{r3}
 8007560:	469e      	mov	lr, r3
 8007562:	4770      	bx	lr
