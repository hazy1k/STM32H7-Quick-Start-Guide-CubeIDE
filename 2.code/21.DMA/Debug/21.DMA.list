
21.DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a0  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08008838  08008838  00009838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080088ac  080088ac  000098ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080088b4  080088b4  000098b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080088b8  080088b8  000098b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080088bc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000013f0  24000010  080088cc  0000a010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24001400  080088cc  0000a400  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000a010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013855  00000000  00000000  0000a03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a6d  00000000  00000000  0001d893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be0  00000000  00000000  00020300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000905  00000000  00000000  00020ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003779f  00000000  00000000  000217e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00016819  00000000  00000000  00058f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00159ccd  00000000  00000000  0006f79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001c946a  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e74  00000000  00000000  001c94b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005a  00000000  00000000  001cc324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08008820 	.word	0x08008820

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08008820 	.word	0x08008820

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_uldivmod>:
 80002e8:	b953      	cbnz	r3, 8000300 <__aeabi_uldivmod+0x18>
 80002ea:	b94a      	cbnz	r2, 8000300 <__aeabi_uldivmod+0x18>
 80002ec:	2900      	cmp	r1, #0
 80002ee:	bf08      	it	eq
 80002f0:	2800      	cmpeq	r0, #0
 80002f2:	bf1c      	itt	ne
 80002f4:	f04f 31ff 	movne.w	r1, #4294967295
 80002f8:	f04f 30ff 	movne.w	r0, #4294967295
 80002fc:	f000 b988 	b.w	8000610 <__aeabi_idiv0>
 8000300:	f1ad 0c08 	sub.w	ip, sp, #8
 8000304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000308:	f000 f806 	bl	8000318 <__udivmoddi4>
 800030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000314:	b004      	add	sp, #16
 8000316:	4770      	bx	lr

08000318 <__udivmoddi4>:
 8000318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800031c:	9d08      	ldr	r5, [sp, #32]
 800031e:	468e      	mov	lr, r1
 8000320:	4604      	mov	r4, r0
 8000322:	4688      	mov	r8, r1
 8000324:	2b00      	cmp	r3, #0
 8000326:	d14a      	bne.n	80003be <__udivmoddi4+0xa6>
 8000328:	428a      	cmp	r2, r1
 800032a:	4617      	mov	r7, r2
 800032c:	d962      	bls.n	80003f4 <__udivmoddi4+0xdc>
 800032e:	fab2 f682 	clz	r6, r2
 8000332:	b14e      	cbz	r6, 8000348 <__udivmoddi4+0x30>
 8000334:	f1c6 0320 	rsb	r3, r6, #32
 8000338:	fa01 f806 	lsl.w	r8, r1, r6
 800033c:	fa20 f303 	lsr.w	r3, r0, r3
 8000340:	40b7      	lsls	r7, r6
 8000342:	ea43 0808 	orr.w	r8, r3, r8
 8000346:	40b4      	lsls	r4, r6
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	fa1f fc87 	uxth.w	ip, r7
 8000350:	fbb8 f1fe 	udiv	r1, r8, lr
 8000354:	0c23      	lsrs	r3, r4, #16
 8000356:	fb0e 8811 	mls	r8, lr, r1, r8
 800035a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800035e:	fb01 f20c 	mul.w	r2, r1, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d909      	bls.n	800037a <__udivmoddi4+0x62>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f101 30ff 	add.w	r0, r1, #4294967295
 800036c:	f080 80ea 	bcs.w	8000544 <__udivmoddi4+0x22c>
 8000370:	429a      	cmp	r2, r3
 8000372:	f240 80e7 	bls.w	8000544 <__udivmoddi4+0x22c>
 8000376:	3902      	subs	r1, #2
 8000378:	443b      	add	r3, r7
 800037a:	1a9a      	subs	r2, r3, r2
 800037c:	b2a3      	uxth	r3, r4
 800037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000382:	fb0e 2210 	mls	r2, lr, r0, r2
 8000386:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800038a:	fb00 fc0c 	mul.w	ip, r0, ip
 800038e:	459c      	cmp	ip, r3
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x8e>
 8000392:	18fb      	adds	r3, r7, r3
 8000394:	f100 32ff 	add.w	r2, r0, #4294967295
 8000398:	f080 80d6 	bcs.w	8000548 <__udivmoddi4+0x230>
 800039c:	459c      	cmp	ip, r3
 800039e:	f240 80d3 	bls.w	8000548 <__udivmoddi4+0x230>
 80003a2:	443b      	add	r3, r7
 80003a4:	3802      	subs	r0, #2
 80003a6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003aa:	eba3 030c 	sub.w	r3, r3, ip
 80003ae:	2100      	movs	r1, #0
 80003b0:	b11d      	cbz	r5, 80003ba <__udivmoddi4+0xa2>
 80003b2:	40f3      	lsrs	r3, r6
 80003b4:	2200      	movs	r2, #0
 80003b6:	e9c5 3200 	strd	r3, r2, [r5]
 80003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003be:	428b      	cmp	r3, r1
 80003c0:	d905      	bls.n	80003ce <__udivmoddi4+0xb6>
 80003c2:	b10d      	cbz	r5, 80003c8 <__udivmoddi4+0xb0>
 80003c4:	e9c5 0100 	strd	r0, r1, [r5]
 80003c8:	2100      	movs	r1, #0
 80003ca:	4608      	mov	r0, r1
 80003cc:	e7f5      	b.n	80003ba <__udivmoddi4+0xa2>
 80003ce:	fab3 f183 	clz	r1, r3
 80003d2:	2900      	cmp	r1, #0
 80003d4:	d146      	bne.n	8000464 <__udivmoddi4+0x14c>
 80003d6:	4573      	cmp	r3, lr
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xc8>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 8105 	bhi.w	80005ea <__udivmoddi4+0x2d2>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4690      	mov	r8, r2
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0e5      	beq.n	80003ba <__udivmoddi4+0xa2>
 80003ee:	e9c5 4800 	strd	r4, r8, [r5]
 80003f2:	e7e2      	b.n	80003ba <__udivmoddi4+0xa2>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f000 8090 	beq.w	800051a <__udivmoddi4+0x202>
 80003fa:	fab2 f682 	clz	r6, r2
 80003fe:	2e00      	cmp	r6, #0
 8000400:	f040 80a4 	bne.w	800054c <__udivmoddi4+0x234>
 8000404:	1a8a      	subs	r2, r1, r2
 8000406:	0c03      	lsrs	r3, r0, #16
 8000408:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800040c:	b280      	uxth	r0, r0
 800040e:	b2bc      	uxth	r4, r7
 8000410:	2101      	movs	r1, #1
 8000412:	fbb2 fcfe 	udiv	ip, r2, lr
 8000416:	fb0e 221c 	mls	r2, lr, ip, r2
 800041a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800041e:	fb04 f20c 	mul.w	r2, r4, ip
 8000422:	429a      	cmp	r2, r3
 8000424:	d907      	bls.n	8000436 <__udivmoddi4+0x11e>
 8000426:	18fb      	adds	r3, r7, r3
 8000428:	f10c 38ff 	add.w	r8, ip, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x11c>
 800042e:	429a      	cmp	r2, r3
 8000430:	f200 80e0 	bhi.w	80005f4 <__udivmoddi4+0x2dc>
 8000434:	46c4      	mov	ip, r8
 8000436:	1a9b      	subs	r3, r3, r2
 8000438:	fbb3 f2fe 	udiv	r2, r3, lr
 800043c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000440:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000444:	fb02 f404 	mul.w	r4, r2, r4
 8000448:	429c      	cmp	r4, r3
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x144>
 800044c:	18fb      	adds	r3, r7, r3
 800044e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x142>
 8000454:	429c      	cmp	r4, r3
 8000456:	f200 80ca 	bhi.w	80005ee <__udivmoddi4+0x2d6>
 800045a:	4602      	mov	r2, r0
 800045c:	1b1b      	subs	r3, r3, r4
 800045e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000462:	e7a5      	b.n	80003b0 <__udivmoddi4+0x98>
 8000464:	f1c1 0620 	rsb	r6, r1, #32
 8000468:	408b      	lsls	r3, r1
 800046a:	fa22 f706 	lsr.w	r7, r2, r6
 800046e:	431f      	orrs	r7, r3
 8000470:	fa0e f401 	lsl.w	r4, lr, r1
 8000474:	fa20 f306 	lsr.w	r3, r0, r6
 8000478:	fa2e fe06 	lsr.w	lr, lr, r6
 800047c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000480:	4323      	orrs	r3, r4
 8000482:	fa00 f801 	lsl.w	r8, r0, r1
 8000486:	fa1f fc87 	uxth.w	ip, r7
 800048a:	fbbe f0f9 	udiv	r0, lr, r9
 800048e:	0c1c      	lsrs	r4, r3, #16
 8000490:	fb09 ee10 	mls	lr, r9, r0, lr
 8000494:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000498:	fb00 fe0c 	mul.w	lr, r0, ip
 800049c:	45a6      	cmp	lr, r4
 800049e:	fa02 f201 	lsl.w	r2, r2, r1
 80004a2:	d909      	bls.n	80004b8 <__udivmoddi4+0x1a0>
 80004a4:	193c      	adds	r4, r7, r4
 80004a6:	f100 3aff 	add.w	sl, r0, #4294967295
 80004aa:	f080 809c 	bcs.w	80005e6 <__udivmoddi4+0x2ce>
 80004ae:	45a6      	cmp	lr, r4
 80004b0:	f240 8099 	bls.w	80005e6 <__udivmoddi4+0x2ce>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	eba4 040e 	sub.w	r4, r4, lr
 80004bc:	fa1f fe83 	uxth.w	lr, r3
 80004c0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c4:	fb09 4413 	mls	r4, r9, r3, r4
 80004c8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004cc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004d0:	45a4      	cmp	ip, r4
 80004d2:	d908      	bls.n	80004e6 <__udivmoddi4+0x1ce>
 80004d4:	193c      	adds	r4, r7, r4
 80004d6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004da:	f080 8082 	bcs.w	80005e2 <__udivmoddi4+0x2ca>
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d97f      	bls.n	80005e2 <__udivmoddi4+0x2ca>
 80004e2:	3b02      	subs	r3, #2
 80004e4:	443c      	add	r4, r7
 80004e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004ea:	eba4 040c 	sub.w	r4, r4, ip
 80004ee:	fba0 ec02 	umull	lr, ip, r0, r2
 80004f2:	4564      	cmp	r4, ip
 80004f4:	4673      	mov	r3, lr
 80004f6:	46e1      	mov	r9, ip
 80004f8:	d362      	bcc.n	80005c0 <__udivmoddi4+0x2a8>
 80004fa:	d05f      	beq.n	80005bc <__udivmoddi4+0x2a4>
 80004fc:	b15d      	cbz	r5, 8000516 <__udivmoddi4+0x1fe>
 80004fe:	ebb8 0203 	subs.w	r2, r8, r3
 8000502:	eb64 0409 	sbc.w	r4, r4, r9
 8000506:	fa04 f606 	lsl.w	r6, r4, r6
 800050a:	fa22 f301 	lsr.w	r3, r2, r1
 800050e:	431e      	orrs	r6, r3
 8000510:	40cc      	lsrs	r4, r1
 8000512:	e9c5 6400 	strd	r6, r4, [r5]
 8000516:	2100      	movs	r1, #0
 8000518:	e74f      	b.n	80003ba <__udivmoddi4+0xa2>
 800051a:	fbb1 fcf2 	udiv	ip, r1, r2
 800051e:	0c01      	lsrs	r1, r0, #16
 8000520:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000524:	b280      	uxth	r0, r0
 8000526:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800052a:	463b      	mov	r3, r7
 800052c:	4638      	mov	r0, r7
 800052e:	463c      	mov	r4, r7
 8000530:	46b8      	mov	r8, r7
 8000532:	46be      	mov	lr, r7
 8000534:	2620      	movs	r6, #32
 8000536:	fbb1 f1f7 	udiv	r1, r1, r7
 800053a:	eba2 0208 	sub.w	r2, r2, r8
 800053e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000542:	e766      	b.n	8000412 <__udivmoddi4+0xfa>
 8000544:	4601      	mov	r1, r0
 8000546:	e718      	b.n	800037a <__udivmoddi4+0x62>
 8000548:	4610      	mov	r0, r2
 800054a:	e72c      	b.n	80003a6 <__udivmoddi4+0x8e>
 800054c:	f1c6 0220 	rsb	r2, r6, #32
 8000550:	fa2e f302 	lsr.w	r3, lr, r2
 8000554:	40b7      	lsls	r7, r6
 8000556:	40b1      	lsls	r1, r6
 8000558:	fa20 f202 	lsr.w	r2, r0, r2
 800055c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000560:	430a      	orrs	r2, r1
 8000562:	fbb3 f8fe 	udiv	r8, r3, lr
 8000566:	b2bc      	uxth	r4, r7
 8000568:	fb0e 3318 	mls	r3, lr, r8, r3
 800056c:	0c11      	lsrs	r1, r2, #16
 800056e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000572:	fb08 f904 	mul.w	r9, r8, r4
 8000576:	40b0      	lsls	r0, r6
 8000578:	4589      	cmp	r9, r1
 800057a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800057e:	b280      	uxth	r0, r0
 8000580:	d93e      	bls.n	8000600 <__udivmoddi4+0x2e8>
 8000582:	1879      	adds	r1, r7, r1
 8000584:	f108 3cff 	add.w	ip, r8, #4294967295
 8000588:	d201      	bcs.n	800058e <__udivmoddi4+0x276>
 800058a:	4589      	cmp	r9, r1
 800058c:	d81f      	bhi.n	80005ce <__udivmoddi4+0x2b6>
 800058e:	eba1 0109 	sub.w	r1, r1, r9
 8000592:	fbb1 f9fe 	udiv	r9, r1, lr
 8000596:	fb09 f804 	mul.w	r8, r9, r4
 800059a:	fb0e 1119 	mls	r1, lr, r9, r1
 800059e:	b292      	uxth	r2, r2
 80005a0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a4:	4542      	cmp	r2, r8
 80005a6:	d229      	bcs.n	80005fc <__udivmoddi4+0x2e4>
 80005a8:	18ba      	adds	r2, r7, r2
 80005aa:	f109 31ff 	add.w	r1, r9, #4294967295
 80005ae:	d2c4      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b0:	4542      	cmp	r2, r8
 80005b2:	d2c2      	bcs.n	800053a <__udivmoddi4+0x222>
 80005b4:	f1a9 0102 	sub.w	r1, r9, #2
 80005b8:	443a      	add	r2, r7
 80005ba:	e7be      	b.n	800053a <__udivmoddi4+0x222>
 80005bc:	45f0      	cmp	r8, lr
 80005be:	d29d      	bcs.n	80004fc <__udivmoddi4+0x1e4>
 80005c0:	ebbe 0302 	subs.w	r3, lr, r2
 80005c4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005c8:	3801      	subs	r0, #1
 80005ca:	46e1      	mov	r9, ip
 80005cc:	e796      	b.n	80004fc <__udivmoddi4+0x1e4>
 80005ce:	eba7 0909 	sub.w	r9, r7, r9
 80005d2:	4449      	add	r1, r9
 80005d4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005d8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005dc:	fb09 f804 	mul.w	r8, r9, r4
 80005e0:	e7db      	b.n	800059a <__udivmoddi4+0x282>
 80005e2:	4673      	mov	r3, lr
 80005e4:	e77f      	b.n	80004e6 <__udivmoddi4+0x1ce>
 80005e6:	4650      	mov	r0, sl
 80005e8:	e766      	b.n	80004b8 <__udivmoddi4+0x1a0>
 80005ea:	4608      	mov	r0, r1
 80005ec:	e6fd      	b.n	80003ea <__udivmoddi4+0xd2>
 80005ee:	443b      	add	r3, r7
 80005f0:	3a02      	subs	r2, #2
 80005f2:	e733      	b.n	800045c <__udivmoddi4+0x144>
 80005f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005f8:	443b      	add	r3, r7
 80005fa:	e71c      	b.n	8000436 <__udivmoddi4+0x11e>
 80005fc:	4649      	mov	r1, r9
 80005fe:	e79c      	b.n	800053a <__udivmoddi4+0x222>
 8000600:	eba1 0109 	sub.w	r1, r1, r9
 8000604:	46c4      	mov	ip, r8
 8000606:	fbb1 f9fe 	udiv	r9, r1, lr
 800060a:	fb09 f804 	mul.w	r8, r9, r4
 800060e:	e7c4      	b.n	800059a <__udivmoddi4+0x282>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <MX_BEEP_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_BEEP_GPIO_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061a:	1d3b      	adds	r3, r7, #4
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <MX_BEEP_GPIO_Init+0x60>)
 800062a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800062e:	4a11      	ldr	r2, [pc, #68]	@ (8000674 <MX_BEEP_GPIO_Init+0x60>)
 8000630:	f043 0310 	orr.w	r3, r3, #16
 8000634:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000638:	4b0e      	ldr	r3, [pc, #56]	@ (8000674 <MX_BEEP_GPIO_Init+0x60>)
 800063a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800063e:	f003 0310 	and.w	r3, r3, #16
 8000642:	603b      	str	r3, [r7, #0]
 8000644:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BEEP_GPIO_Port, BEEP_Pin, GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	2110      	movs	r1, #16
 800064a:	480b      	ldr	r0, [pc, #44]	@ (8000678 <MX_BEEP_GPIO_Init+0x64>)
 800064c:	f003 fc8c 	bl	8003f68 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BEEP_Pin */
  GPIO_InitStruct.Pin = BEEP_Pin;
 8000650:	2310      	movs	r3, #16
 8000652:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000654:	2301      	movs	r3, #1
 8000656:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000660:	1d3b      	adds	r3, r7, #4
 8000662:	4619      	mov	r1, r3
 8000664:	4804      	ldr	r0, [pc, #16]	@ (8000678 <MX_BEEP_GPIO_Init+0x64>)
 8000666:	f003 facf 	bl	8003c08 <HAL_GPIO_Init>
}
 800066a:	bf00      	nop
 800066c:	3718      	adds	r7, #24
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	58024400 	.word	0x58024400
 8000678:	58021000 	.word	0x58021000

0800067c <MX_KEY_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_KEY_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	1d3b      	adds	r3, r7, #4
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
 800068a:	609a      	str	r2, [r3, #8]
 800068c:	60da      	str	r2, [r3, #12]
 800068e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000690:	4b14      	ldr	r3, [pc, #80]	@ (80006e4 <MX_KEY_GPIO_Init+0x68>)
 8000692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000696:	4a13      	ldr	r2, [pc, #76]	@ (80006e4 <MX_KEY_GPIO_Init+0x68>)
 8000698:	f043 0301 	orr.w	r3, r3, #1
 800069c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80006a0:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <MX_KEY_GPIO_Init+0x68>)
 80006a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	603b      	str	r3, [r7, #0]
 80006ac:	683b      	ldr	r3, [r7, #0]
  /*Configure GPIO pin : WK_UP_Pin */
  GPIO_InitStruct.Pin = WK_UP_Pin;
 80006ae:	2301      	movs	r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b6:	2302      	movs	r3, #2
 80006b8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(WK_UP_GPIO_Port, &GPIO_InitStruct);
 80006ba:	1d3b      	adds	r3, r7, #4
 80006bc:	4619      	mov	r1, r3
 80006be:	480a      	ldr	r0, [pc, #40]	@ (80006e8 <MX_KEY_GPIO_Init+0x6c>)
 80006c0:	f003 faa2 	bl	8003c08 <HAL_GPIO_Init>
  /*Configure GPIO pins : KEY0_Pin KEY1_Pin */
  GPIO_InitStruct.Pin = KEY0_Pin|KEY1_Pin;
 80006c4:	f248 0302 	movw	r3, #32770	@ 0x8002
 80006c8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d2:	1d3b      	adds	r3, r7, #4
 80006d4:	4619      	mov	r1, r3
 80006d6:	4804      	ldr	r0, [pc, #16]	@ (80006e8 <MX_KEY_GPIO_Init+0x6c>)
 80006d8:	f003 fa96 	bl	8003c08 <HAL_GPIO_Init>
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	58024400 	.word	0x58024400
 80006e8:	58020000 	.word	0x58020000

080006ec <MX_LED_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_LED_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 030c 	add.w	r3, r7, #12
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000702:	4b24      	ldr	r3, [pc, #144]	@ (8000794 <MX_LED_GPIO_Init+0xa8>)
 8000704:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000708:	4a22      	ldr	r2, [pc, #136]	@ (8000794 <MX_LED_GPIO_Init+0xa8>)
 800070a:	f043 0310 	orr.w	r3, r3, #16
 800070e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000712:	4b20      	ldr	r3, [pc, #128]	@ (8000794 <MX_LED_GPIO_Init+0xa8>)
 8000714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000720:	4b1c      	ldr	r3, [pc, #112]	@ (8000794 <MX_LED_GPIO_Init+0xa8>)
 8000722:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000726:	4a1b      	ldr	r2, [pc, #108]	@ (8000794 <MX_LED_GPIO_Init+0xa8>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000730:	4b18      	ldr	r3, [pc, #96]	@ (8000794 <MX_LED_GPIO_Init+0xa8>)
 8000732:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000736:	f003 0302 	and.w	r3, r3, #2
 800073a:	607b      	str	r3, [r7, #4]
 800073c:	687b      	ldr	r3, [r7, #4]
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED1_Pin|LED2_Pin, GPIO_PIN_SET);
 800073e:	2201      	movs	r2, #1
 8000740:	2160      	movs	r1, #96	@ 0x60
 8000742:	4815      	ldr	r0, [pc, #84]	@ (8000798 <MX_LED_GPIO_Init+0xac>)
 8000744:	f003 fc10 	bl	8003f68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED0_GPIO_Port, LED0_Pin, GPIO_PIN_SET);
 8000748:	2201      	movs	r2, #1
 800074a:	2110      	movs	r1, #16
 800074c:	4813      	ldr	r0, [pc, #76]	@ (800079c <MX_LED_GPIO_Init+0xb0>)
 800074e:	f003 fc0b 	bl	8003f68 <HAL_GPIO_WritePin>
  /*Configure GPIO pins : LED1_Pin LED2_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000752:	2360      	movs	r3, #96	@ 0x60
 8000754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	480b      	ldr	r0, [pc, #44]	@ (8000798 <MX_LED_GPIO_Init+0xac>)
 800076a:	f003 fa4d 	bl	8003c08 <HAL_GPIO_Init>
  /*Configure GPIO pin : LED0_Pin */
  GPIO_InitStruct.Pin = LED0_Pin;
 800076e:	2310      	movs	r3, #16
 8000770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000772:	2301      	movs	r3, #1
 8000774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED0_GPIO_Port, &GPIO_InitStruct);
 800077e:	f107 030c 	add.w	r3, r7, #12
 8000782:	4619      	mov	r1, r3
 8000784:	4805      	ldr	r0, [pc, #20]	@ (800079c <MX_LED_GPIO_Init+0xb0>)
 8000786:	f003 fa3f 	bl	8003c08 <HAL_GPIO_Init>
}
 800078a:	bf00      	nop
 800078c:	3720      	adds	r7, #32
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58024400 	.word	0x58024400
 8000798:	58021000 	.word	0x58021000
 800079c:	58020400 	.word	0x58020400

080007a0 <EXTI0_IRQHandler>:
	HAL_SuspendTick(); // 暂停滴答时钟
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI); // 进入睡眠模式
}

void EXTI0_IRQHandler(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	HAL_GPIO_EXTI_IRQHandler(WK_UP_Pin);
 80007a4:	2001      	movs	r0, #1
 80007a6:	f003 fbf8 	bl	8003f9a <HAL_GPIO_EXTI_IRQHandler>
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}

080007ae <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b083      	sub	sp, #12
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	4603      	mov	r3, r0
 80007b6:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == WK_UP_Pin)
	{

	}
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr

080007c4 <bsp_init>:
#include "bsp_init.h"

void bsp_init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
	MX_LED_GPIO_Init();
 80007c8:	f7ff ff90 	bl	80006ec <MX_LED_GPIO_Init>
	MX_BEEP_GPIO_Init();
 80007cc:	f7ff ff22 	bl	8000614 <MX_BEEP_GPIO_Init>
	MX_KEY_GPIO_Init();
 80007d0:	f7ff ff54 	bl	800067c <MX_KEY_GPIO_Init>
	// MX_EXTI_GPIO_Init();
	// MX_USART1_UART_Init();
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <MX_DMA_Init>:

DMA_HandleTypeDef dma_handle;
extern UART_HandleTypeDef huart1;

void MX_DMA_Init(DMA_Stream_TypeDef *dma_stream_handle, uint32_t ch)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
 80007e0:	6039      	str	r1, [r7, #0]
  // 启用DMA时钟
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e2:	4b59      	ldr	r3, [pc, #356]	@ (8000948 <MX_DMA_Init+0x170>)
 80007e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007e8:	4a57      	ldr	r2, [pc, #348]	@ (8000948 <MX_DMA_Init+0x170>)
 80007ea:	f043 0302 	orr.w	r3, r3, #2
 80007ee:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007f2:	4b55      	ldr	r3, [pc, #340]	@ (8000948 <MX_DMA_Init+0x170>)
 80007f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007f8:	f003 0302 	and.w	r3, r3, #2
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

  // 初始化DMA句柄
  dma_handle.Instance = dma_stream_handle;
 8000800:	4a52      	ldr	r2, [pc, #328]	@ (800094c <MX_DMA_Init+0x174>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6013      	str	r3, [r2, #0]
  dma_handle.Init.Request = ch;
 8000806:	4a51      	ldr	r2, [pc, #324]	@ (800094c <MX_DMA_Init+0x174>)
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	6053      	str	r3, [r2, #4]
  dma_handle.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800080c:	4b4f      	ldr	r3, [pc, #316]	@ (800094c <MX_DMA_Init+0x174>)
 800080e:	2240      	movs	r2, #64	@ 0x40
 8000810:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc = DMA_PINC_DISABLE;
 8000812:	4b4e      	ldr	r3, [pc, #312]	@ (800094c <MX_DMA_Init+0x174>)
 8000814:	2200      	movs	r2, #0
 8000816:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc = DMA_MINC_ENABLE;
 8000818:	4b4c      	ldr	r3, [pc, #304]	@ (800094c <MX_DMA_Init+0x174>)
 800081a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800081e:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000820:	4b4a      	ldr	r3, [pc, #296]	@ (800094c <MX_DMA_Init+0x174>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000826:	4b49      	ldr	r3, [pc, #292]	@ (800094c <MX_DMA_Init+0x174>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode = DMA_NORMAL;
 800082c:	4b47      	ldr	r3, [pc, #284]	@ (800094c <MX_DMA_Init+0x174>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000832:	4b46      	ldr	r3, [pc, #280]	@ (800094c <MX_DMA_Init+0x174>)
 8000834:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000838:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800083a:	4b44      	ldr	r3, [pc, #272]	@ (800094c <MX_DMA_Init+0x174>)
 800083c:	2200      	movs	r2, #0
 800083e:	625a      	str	r2, [r3, #36]	@ 0x24
  dma_handle.Init.MemBurst = DMA_MBURST_SINGLE;
 8000840:	4b42      	ldr	r3, [pc, #264]	@ (800094c <MX_DMA_Init+0x174>)
 8000842:	2200      	movs	r2, #0
 8000844:	62da      	str	r2, [r3, #44]	@ 0x2c
  dma_handle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000846:	4b41      	ldr	r3, [pc, #260]	@ (800094c <MX_DMA_Init+0x174>)
 8000848:	2200      	movs	r2, #0
 800084a:	631a      	str	r2, [r3, #48]	@ 0x30

  // 初始化DMA
  HAL_DMA_DeInit(&dma_handle);
 800084c:	483f      	ldr	r0, [pc, #252]	@ (800094c <MX_DMA_Init+0x174>)
 800084e:	f001 f95b 	bl	8001b08 <HAL_DMA_DeInit>
  if (HAL_DMA_Init(&dma_handle) != HAL_OK)
 8000852:	483e      	ldr	r0, [pc, #248]	@ (800094c <MX_DMA_Init+0x174>)
 8000854:	f000 fdfc 	bl	8001450 <HAL_DMA_Init>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_DMA_Init+0x8a>
  {
    Error_Handler();
 800085e:	f000 f9c5 	bl	8000bec <Error_Handler>
  }

  // 链接DMA到USART
  __HAL_LINKDMA(&huart1, hdmatx, dma_handle);
 8000862:	4b3b      	ldr	r3, [pc, #236]	@ (8000950 <MX_DMA_Init+0x178>)
 8000864:	4a39      	ldr	r2, [pc, #228]	@ (800094c <MX_DMA_Init+0x174>)
 8000866:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000868:	4b38      	ldr	r3, [pc, #224]	@ (800094c <MX_DMA_Init+0x174>)
 800086a:	4a39      	ldr	r2, [pc, #228]	@ (8000950 <MX_DMA_Init+0x178>)
 800086c:	639a      	str	r2, [r3, #56]	@ 0x38

  // 启用DMA传输完成中断
  __HAL_DMA_ENABLE_IT(&dma_handle, DMA_IT_TC);
 800086e:	4b37      	ldr	r3, [pc, #220]	@ (800094c <MX_DMA_Init+0x174>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a38      	ldr	r2, [pc, #224]	@ (8000954 <MX_DMA_Init+0x17c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d04a      	beq.n	800090e <MX_DMA_Init+0x136>
 8000878:	4b34      	ldr	r3, [pc, #208]	@ (800094c <MX_DMA_Init+0x174>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a36      	ldr	r2, [pc, #216]	@ (8000958 <MX_DMA_Init+0x180>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d045      	beq.n	800090e <MX_DMA_Init+0x136>
 8000882:	4b32      	ldr	r3, [pc, #200]	@ (800094c <MX_DMA_Init+0x174>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a35      	ldr	r2, [pc, #212]	@ (800095c <MX_DMA_Init+0x184>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d040      	beq.n	800090e <MX_DMA_Init+0x136>
 800088c:	4b2f      	ldr	r3, [pc, #188]	@ (800094c <MX_DMA_Init+0x174>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a33      	ldr	r2, [pc, #204]	@ (8000960 <MX_DMA_Init+0x188>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d03b      	beq.n	800090e <MX_DMA_Init+0x136>
 8000896:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_DMA_Init+0x174>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a32      	ldr	r2, [pc, #200]	@ (8000964 <MX_DMA_Init+0x18c>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d036      	beq.n	800090e <MX_DMA_Init+0x136>
 80008a0:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_DMA_Init+0x174>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a30      	ldr	r2, [pc, #192]	@ (8000968 <MX_DMA_Init+0x190>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d031      	beq.n	800090e <MX_DMA_Init+0x136>
 80008aa:	4b28      	ldr	r3, [pc, #160]	@ (800094c <MX_DMA_Init+0x174>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4a2f      	ldr	r2, [pc, #188]	@ (800096c <MX_DMA_Init+0x194>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d02c      	beq.n	800090e <MX_DMA_Init+0x136>
 80008b4:	4b25      	ldr	r3, [pc, #148]	@ (800094c <MX_DMA_Init+0x174>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a2d      	ldr	r2, [pc, #180]	@ (8000970 <MX_DMA_Init+0x198>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d027      	beq.n	800090e <MX_DMA_Init+0x136>
 80008be:	4b23      	ldr	r3, [pc, #140]	@ (800094c <MX_DMA_Init+0x174>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a2c      	ldr	r2, [pc, #176]	@ (8000974 <MX_DMA_Init+0x19c>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d022      	beq.n	800090e <MX_DMA_Init+0x136>
 80008c8:	4b20      	ldr	r3, [pc, #128]	@ (800094c <MX_DMA_Init+0x174>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000978 <MX_DMA_Init+0x1a0>)
 80008ce:	4293      	cmp	r3, r2
 80008d0:	d01d      	beq.n	800090e <MX_DMA_Init+0x136>
 80008d2:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_DMA_Init+0x174>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a29      	ldr	r2, [pc, #164]	@ (800097c <MX_DMA_Init+0x1a4>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d018      	beq.n	800090e <MX_DMA_Init+0x136>
 80008dc:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_DMA_Init+0x174>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a27      	ldr	r2, [pc, #156]	@ (8000980 <MX_DMA_Init+0x1a8>)
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d013      	beq.n	800090e <MX_DMA_Init+0x136>
 80008e6:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_DMA_Init+0x174>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a26      	ldr	r2, [pc, #152]	@ (8000984 <MX_DMA_Init+0x1ac>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d00e      	beq.n	800090e <MX_DMA_Init+0x136>
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_DMA_Init+0x174>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	4a24      	ldr	r2, [pc, #144]	@ (8000988 <MX_DMA_Init+0x1b0>)
 80008f6:	4293      	cmp	r3, r2
 80008f8:	d009      	beq.n	800090e <MX_DMA_Init+0x136>
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <MX_DMA_Init+0x174>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	4a23      	ldr	r2, [pc, #140]	@ (800098c <MX_DMA_Init+0x1b4>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d004      	beq.n	800090e <MX_DMA_Init+0x136>
 8000904:	4b11      	ldr	r3, [pc, #68]	@ (800094c <MX_DMA_Init+0x174>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a21      	ldr	r2, [pc, #132]	@ (8000990 <MX_DMA_Init+0x1b8>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d108      	bne.n	8000920 <MX_DMA_Init+0x148>
 800090e:	4b0f      	ldr	r3, [pc, #60]	@ (800094c <MX_DMA_Init+0x174>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	681a      	ldr	r2, [r3, #0]
 8000914:	4b0d      	ldr	r3, [pc, #52]	@ (800094c <MX_DMA_Init+0x174>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	f042 0210 	orr.w	r2, r2, #16
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	e007      	b.n	8000930 <MX_DMA_Init+0x158>
 8000920:	4b0a      	ldr	r3, [pc, #40]	@ (800094c <MX_DMA_Init+0x174>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	@ (800094c <MX_DMA_Init+0x174>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0202 	orr.w	r2, r2, #2
 800092e:	601a      	str	r2, [r3, #0]

  // 设置DMA中断优先级并启用
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2046      	movs	r0, #70	@ 0x46
 8000936:	f000 fcde 	bl	80012f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800093a:	2046      	movs	r0, #70	@ 0x46
 800093c:	f000 fcf5 	bl	800132a <HAL_NVIC_EnableIRQ>
}
 8000940:	bf00      	nop
 8000942:	3710      	adds	r7, #16
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	58024400 	.word	0x58024400
 800094c:	2400002c 	.word	0x2400002c
 8000950:	24001368 	.word	0x24001368
 8000954:	40020010 	.word	0x40020010
 8000958:	40020028 	.word	0x40020028
 800095c:	40020040 	.word	0x40020040
 8000960:	40020058 	.word	0x40020058
 8000964:	40020070 	.word	0x40020070
 8000968:	40020088 	.word	0x40020088
 800096c:	400200a0 	.word	0x400200a0
 8000970:	400200b8 	.word	0x400200b8
 8000974:	40020410 	.word	0x40020410
 8000978:	40020428 	.word	0x40020428
 800097c:	40020440 	.word	0x40020440
 8000980:	40020458 	.word	0x40020458
 8000984:	40020470 	.word	0x40020470
 8000988:	40020488 	.word	0x40020488
 800098c:	400204a0 	.word	0x400204a0
 8000990:	400204b8 	.word	0x400204b8

08000994 <HAL_UART_TxCpltCallback>:
// 全局变量，用于标记DMA传输完成
volatile uint8_t dma_transfer_complete = 0;

// DMA传输完成回调函数
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  if(huart->Instance == USART1)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a07      	ldr	r2, [pc, #28]	@ (80009c0 <HAL_UART_TxCpltCallback+0x2c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d107      	bne.n	80009b6 <HAL_UART_TxCpltCallback+0x22>
  {
    dma_transfer_complete = 1;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <HAL_UART_TxCpltCallback+0x30>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LED_BLUE_Port, LED_BLUE_Pin, RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2110      	movs	r1, #16
 80009b0:	4805      	ldr	r0, [pc, #20]	@ (80009c8 <HAL_UART_TxCpltCallback+0x34>)
 80009b2:	f003 fad9 	bl	8003f68 <HAL_GPIO_WritePin>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	40011000 	.word	0x40011000
 80009c4:	24001364 	.word	0x24001364
 80009c8:	58020400 	.word	0x58020400

080009cc <UART_SendString>:

// 自定义发送字符串函数，替代printf
void UART_SendString(UART_HandleTypeDef *huart, const char *str)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
 80009d6:	6838      	ldr	r0, [r7, #0]
 80009d8:	f7ff fc7e 	bl	80002d8 <strlen>
 80009dc:	4603      	mov	r3, r0
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f006 f98e 	bl	8006d08 <HAL_UART_Transmit>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <main>:

int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
    uint8_t key_value = 0;
 80009fa:	2300      	movs	r3, #0
 80009fc:	713b      	strb	r3, [r7, #4]
    uint8_t i, k;
    uint16_t len;
    uint8_t mask = 0;
 80009fe:	2300      	movs	r3, #0
 8000a00:	717b      	strb	r3, [r7, #5]

    MPU_Config();
 8000a02:	f000 f8c7 	bl	8000b94 <MPU_Config>
    HAL_Init();
 8000a06:	f000 fafd 	bl	8001004 <HAL_Init>
    SystemClock_Config();
 8000a0a:	f000 f847 	bl	8000a9c <SystemClock_Config>
    bsp_init();
 8000a0e:	f7ff fed9 	bl	80007c4 <bsp_init>
    MX_USART1_UART_Init();
 8000a12:	f000 fa15 	bl	8000e40 <MX_USART1_UART_Init>
    UART_SendString(&huart1, "USART1 Init\r\n");
 8000a16:	491b      	ldr	r1, [pc, #108]	@ (8000a84 <main+0x90>)
 8000a18:	481b      	ldr	r0, [pc, #108]	@ (8000a88 <main+0x94>)
 8000a1a:	f7ff ffd7 	bl	80009cc <UART_SendString>
    MX_DMA_Init(DMA2_Stream7, DMA_REQUEST_USART1_TX);
 8000a1e:	212a      	movs	r1, #42	@ 0x2a
 8000a20:	481a      	ldr	r0, [pc, #104]	@ (8000a8c <main+0x98>)
 8000a22:	f7ff fed9 	bl	80007d8 <MX_DMA_Init>
    UART_SendString(&huart1, "DMA Init\r\n");
 8000a26:	491a      	ldr	r1, [pc, #104]	@ (8000a90 <main+0x9c>)
 8000a28:	4817      	ldr	r0, [pc, #92]	@ (8000a88 <main+0x94>)
 8000a2a:	f7ff ffcf 	bl	80009cc <UART_SendString>

    // 填充发送缓冲区
    len = sizeof(DMA_TO_SEND);
 8000a2e:	2316      	movs	r3, #22
 8000a30:	807b      	strh	r3, [r7, #2]
    k = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < SEND_BUF_SIZE; i++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	71bb      	strb	r3, [r7, #6]
    {
        if (k >= len)
 8000a3a:	79fb      	ldrb	r3, [r7, #7]
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	887a      	ldrh	r2, [r7, #2]
 8000a40:	429a      	cmp	r2, r3
 8000a42:	d812      	bhi.n	8000a6a <main+0x76>
        {
            if (mask)
 8000a44:	797b      	ldrb	r3, [r7, #5]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d008      	beq.n	8000a5c <main+0x68>
            {
                send_buf[i] = 0x0a; // 换行符
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	4a11      	ldr	r2, [pc, #68]	@ (8000a94 <main+0xa0>)
 8000a4e:	210a      	movs	r1, #10
 8000a50:	54d1      	strb	r1, [r2, r3]
                k = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	71fb      	strb	r3, [r7, #7]
                mask = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	717b      	strb	r3, [r7, #5]
 8000a5a:	e00f      	b.n	8000a7c <main+0x88>
            }
            else
            {
                send_buf[i] = 0x0d; // 回车符
 8000a5c:	79bb      	ldrb	r3, [r7, #6]
 8000a5e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a94 <main+0xa0>)
 8000a60:	210d      	movs	r1, #13
 8000a62:	54d1      	strb	r1, [r2, r3]
                mask = 1;
 8000a64:	2301      	movs	r3, #1
 8000a66:	717b      	strb	r3, [r7, #5]
 8000a68:	e008      	b.n	8000a7c <main+0x88>
            }
        }
        else
        {
            send_buf[i] = DMA_TO_SEND[k];
 8000a6a:	79fa      	ldrb	r2, [r7, #7]
 8000a6c:	79bb      	ldrb	r3, [r7, #6]
 8000a6e:	490a      	ldr	r1, [pc, #40]	@ (8000a98 <main+0xa4>)
 8000a70:	5c89      	ldrb	r1, [r1, r2]
 8000a72:	4a08      	ldr	r2, [pc, #32]	@ (8000a94 <main+0xa0>)
 8000a74:	54d1      	strb	r1, [r2, r3]
            k++;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	3301      	adds	r3, #1
 8000a7a:	71fb      	strb	r3, [r7, #7]
    for (i = 0; i < SEND_BUF_SIZE; i++)
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	71bb      	strb	r3, [r7, #6]
        if (k >= len)
 8000a82:	e7da      	b.n	8000a3a <main+0x46>
 8000a84:	08008838 	.word	0x08008838
 8000a88:	24001368 	.word	0x24001368
 8000a8c:	400204b8 	.word	0x400204b8
 8000a90:	08008848 	.word	0x08008848
 8000a94:	240000a4 	.word	0x240000a4
 8000a98:	08008854 	.word	0x08008854

08000a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b09c      	sub	sp, #112	@ 0x70
 8000aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aa6:	224c      	movs	r2, #76	@ 0x4c
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f007 fe8c 	bl	80087c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f007 fe86 	bl	80087c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000abc:	2002      	movs	r0, #2
 8000abe:	f003 fa87 	bl	8003fd0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
 8000ac6:	4b31      	ldr	r3, [pc, #196]	@ (8000b8c <SystemClock_Config+0xf0>)
 8000ac8:	699b      	ldr	r3, [r3, #24]
 8000aca:	4a30      	ldr	r2, [pc, #192]	@ (8000b8c <SystemClock_Config+0xf0>)
 8000acc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ad0:	6193      	str	r3, [r2, #24]
 8000ad2:	4b2e      	ldr	r3, [pc, #184]	@ (8000b8c <SystemClock_Config+0xf0>)
 8000ad4:	699b      	ldr	r3, [r3, #24]
 8000ad6:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ada:	603b      	str	r3, [r7, #0]
 8000adc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <SystemClock_Config+0xf4>)
 8000ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae0:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <SystemClock_Config+0xf4>)
 8000ae2:	f043 0301 	orr.w	r3, r3, #1
 8000ae6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ae8:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <SystemClock_Config+0xf4>)
 8000aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aec:	f003 0301 	and.w	r3, r3, #1
 8000af0:	603b      	str	r3, [r7, #0]
 8000af2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000af4:	bf00      	nop
 8000af6:	4b25      	ldr	r3, [pc, #148]	@ (8000b8c <SystemClock_Config+0xf0>)
 8000af8:	699b      	ldr	r3, [r3, #24]
 8000afa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000afe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b02:	d1f8      	bne.n	8000af6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b04:	2321      	movs	r3, #33	@ 0x21
 8000b06:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b12:	2302      	movs	r3, #2
 8000b14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	2302      	movs	r3, #2
 8000b18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 240;
 8000b1e:	23f0      	movs	r3, #240	@ 0xf0
 8000b20:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b22:	2302      	movs	r3, #2
 8000b24:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b26:	2302      	movs	r3, #2
 8000b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b2e:	2308      	movs	r3, #8
 8000b30:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f003 fa80 	bl	8004044 <HAL_RCC_OscConfig>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d001      	beq.n	8000b4e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000b4a:	f000 f84f 	bl	8000bec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b4e:	233f      	movs	r3, #63	@ 0x3f
 8000b50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b52:	2303      	movs	r3, #3
 8000b54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b5e:	2340      	movs	r3, #64	@ 0x40
 8000b60:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b62:	2340      	movs	r3, #64	@ 0x40
 8000b64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6c:	2340      	movs	r3, #64	@ 0x40
 8000b6e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b70:	1d3b      	adds	r3, r7, #4
 8000b72:	2104      	movs	r1, #4
 8000b74:	4618      	mov	r0, r3
 8000b76:	f003 febf 	bl	80048f8 <HAL_RCC_ClockConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000b80:	f000 f834 	bl	8000bec <Error_Handler>
  }
}
 8000b84:	bf00      	nop
 8000b86:	3770      	adds	r7, #112	@ 0x70
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	58024800 	.word	0x58024800
 8000b90:	58000400 	.word	0x58000400

08000b94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ba6:	f000 fbdb 	bl	8001360 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000baa:	2301      	movs	r3, #1
 8000bac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000bb6:	231f      	movs	r3, #31
 8000bb8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000bba:	2387      	movs	r3, #135	@ 0x87
 8000bbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f000 fbf9 	bl	80013d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000bde:	2004      	movs	r0, #4
 8000be0:	f000 fbd6 	bl	8001390 <HAL_MPU_Enable>

}
 8000be4:	bf00      	nop
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bf0:	b672      	cpsid	i
}
 8000bf2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <Error_Handler+0x8>

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c04:	4a08      	ldr	r2, [pc, #32]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c06:	f043 0302 	orr.w	r3, r3, #2
 8000c0a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c0e:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <HAL_MspInit+0x30>)
 8000c10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c14:	f003 0302 	and.w	r3, r3, #2
 8000c18:	607b      	str	r3, [r7, #4]
 8000c1a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	58024400 	.word	0x58024400

08000c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <NMI_Handler+0x4>

08000c34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <HardFault_Handler+0x4>

08000c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <MemManage_Handler+0x4>

08000c44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <BusFault_Handler+0x4>

08000c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <UsageFault_Handler+0x4>

08000c54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr

08000c62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c62:	b480      	push	{r7}
 8000c64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr

08000c70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c82:	f000 fa31 	bl	80010e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXTI_KEY1_Pin);
 8000c8e:	2002      	movs	r0, #2
 8000c90:	f003 f983 	bl	8003f9a <HAL_GPIO_EXTI_IRQHandler>
  //if(HAL_GPIO_ReadPin(EXTI_KEY1_GPIO_Port, EXTI_KEY1_Pin) == GPIO_PIN_RESET)
  //{
	//	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_4);
  //}
  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}

08000c98 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&dma_handle);
 8000c9c:	4802      	ldr	r0, [pc, #8]	@ (8000ca8 <DMA2_Stream7_IRQHandler+0x10>)
 8000c9e:	f001 fe4d 	bl	800293c <HAL_DMA_IRQHandler>
}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	2400002c 	.word	0x2400002c

08000cac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000cb0:	4802      	ldr	r0, [pc, #8]	@ (8000cbc <USART1_IRQHandler+0x10>)
 8000cb2:	f006 f8b7 	bl	8006e24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	24001368 	.word	0x24001368

08000cc0 <DMAMUX1_OVR_IRQHandler>:

/**
  * @brief This function handles DMAMUX1 overrun interrupt.
  */
void DMAMUX1_OVR_IRQHandler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DMAMUX1_OVR_IRQn 0 */
  /* USER CODE BEGIN DMAMUX1_OVR_IRQn 1 */

  /* USER CODE END DMAMUX1_OVR_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
	...

08000cd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b43      	ldr	r3, [pc, #268]	@ (8000de4 <SystemInit+0x114>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000cda:	4a42      	ldr	r2, [pc, #264]	@ (8000de4 <SystemInit+0x114>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ce4:	4b40      	ldr	r3, [pc, #256]	@ (8000de8 <SystemInit+0x118>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 030f 	and.w	r3, r3, #15
 8000cec:	2b06      	cmp	r3, #6
 8000cee:	d807      	bhi.n	8000d00 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8000de8 <SystemInit+0x118>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f023 030f 	bic.w	r3, r3, #15
 8000cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8000de8 <SystemInit+0x118>)
 8000cfa:	f043 0307 	orr.w	r3, r3, #7
 8000cfe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000d00:	4b3a      	ldr	r3, [pc, #232]	@ (8000dec <SystemInit+0x11c>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a39      	ldr	r2, [pc, #228]	@ (8000dec <SystemInit+0x11c>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d0c:	4b37      	ldr	r3, [pc, #220]	@ (8000dec <SystemInit+0x11c>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000d12:	4b36      	ldr	r3, [pc, #216]	@ (8000dec <SystemInit+0x11c>)
 8000d14:	681a      	ldr	r2, [r3, #0]
 8000d16:	4935      	ldr	r1, [pc, #212]	@ (8000dec <SystemInit+0x11c>)
 8000d18:	4b35      	ldr	r3, [pc, #212]	@ (8000df0 <SystemInit+0x120>)
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d1e:	4b32      	ldr	r3, [pc, #200]	@ (8000de8 <SystemInit+0x118>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d007      	beq.n	8000d3a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8000de8 <SystemInit+0x118>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f023 030f 	bic.w	r3, r3, #15
 8000d32:	4a2d      	ldr	r2, [pc, #180]	@ (8000de8 <SystemInit+0x118>)
 8000d34:	f043 0307 	orr.w	r3, r3, #7
 8000d38:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000d3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000dec <SystemInit+0x11c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <SystemInit+0x11c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000d46:	4b29      	ldr	r3, [pc, #164]	@ (8000dec <SystemInit+0x11c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000d4c:	4b27      	ldr	r3, [pc, #156]	@ (8000dec <SystemInit+0x11c>)
 8000d4e:	4a29      	ldr	r2, [pc, #164]	@ (8000df4 <SystemInit+0x124>)
 8000d50:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000d52:	4b26      	ldr	r3, [pc, #152]	@ (8000dec <SystemInit+0x11c>)
 8000d54:	4a28      	ldr	r2, [pc, #160]	@ (8000df8 <SystemInit+0x128>)
 8000d56:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000d58:	4b24      	ldr	r3, [pc, #144]	@ (8000dec <SystemInit+0x11c>)
 8000d5a:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <SystemInit+0x12c>)
 8000d5c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000d5e:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <SystemInit+0x11c>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000d64:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <SystemInit+0x11c>)
 8000d66:	4a25      	ldr	r2, [pc, #148]	@ (8000dfc <SystemInit+0x12c>)
 8000d68:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	@ (8000dec <SystemInit+0x11c>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000d70:	4b1e      	ldr	r3, [pc, #120]	@ (8000dec <SystemInit+0x11c>)
 8000d72:	4a22      	ldr	r2, [pc, #136]	@ (8000dfc <SystemInit+0x12c>)
 8000d74:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000d76:	4b1d      	ldr	r3, [pc, #116]	@ (8000dec <SystemInit+0x11c>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dec <SystemInit+0x11c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a1a      	ldr	r2, [pc, #104]	@ (8000dec <SystemInit+0x11c>)
 8000d82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d86:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000d88:	4b18      	ldr	r3, [pc, #96]	@ (8000dec <SystemInit+0x11c>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e00 <SystemInit+0x130>)
 8000d90:	681a      	ldr	r2, [r3, #0]
 8000d92:	4b1c      	ldr	r3, [pc, #112]	@ (8000e04 <SystemInit+0x134>)
 8000d94:	4013      	ands	r3, r2
 8000d96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000d9a:	d202      	bcs.n	8000da2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	@ (8000e08 <SystemInit+0x138>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000da2:	4b12      	ldr	r3, [pc, #72]	@ (8000dec <SystemInit+0x11c>)
 8000da4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000da8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d113      	bne.n	8000dd8 <SystemInit+0x108>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000db0:	4b0e      	ldr	r3, [pc, #56]	@ (8000dec <SystemInit+0x11c>)
 8000db2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000db6:	4a0d      	ldr	r2, [pc, #52]	@ (8000dec <SystemInit+0x11c>)
 8000db8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000dbc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000dc0:	4b12      	ldr	r3, [pc, #72]	@ (8000e0c <SystemInit+0x13c>)
 8000dc2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000dc6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <SystemInit+0x11c>)
 8000dca:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000dce:	4a07      	ldr	r2, [pc, #28]	@ (8000dec <SystemInit+0x11c>)
 8000dd0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000dd4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	e000ed00 	.word	0xe000ed00
 8000de8:	52002000 	.word	0x52002000
 8000dec:	58024400 	.word	0x58024400
 8000df0:	eaf6ed7f 	.word	0xeaf6ed7f
 8000df4:	02020200 	.word	0x02020200
 8000df8:	01ff0000 	.word	0x01ff0000
 8000dfc:	01010280 	.word	0x01010280
 8000e00:	5c001000 	.word	0x5c001000
 8000e04:	ffff0000 	.word	0xffff0000
 8000e08:	51008108 	.word	0x51008108
 8000e0c:	52004000 	.word	0x52004000

08000e10 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8000e14:	4b09      	ldr	r3, [pc, #36]	@ (8000e3c <ExitRun0Mode+0x2c>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	4a08      	ldr	r2, [pc, #32]	@ (8000e3c <ExitRun0Mode+0x2c>)
 8000e1a:	f043 0302 	orr.w	r3, r3, #2
 8000e1e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000e20:	bf00      	nop
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <ExitRun0Mode+0x2c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d0f9      	beq.n	8000e22 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000e2e:	bf00      	nop
 8000e30:	bf00      	nop
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	58024800 	.word	0x58024800

08000e40 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e44:	4b22      	ldr	r3, [pc, #136]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e46:	4a23      	ldr	r2, [pc, #140]	@ (8000ed4 <MX_USART1_UART_Init+0x94>)
 8000e48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e52:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e66:	220c      	movs	r2, #12
 8000e68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e70:	4b17      	ldr	r3, [pc, #92]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e76:	4b16      	ldr	r3, [pc, #88]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e82:	4b13      	ldr	r3, [pc, #76]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e88:	4811      	ldr	r0, [pc, #68]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e8a:	f005 feed 	bl	8006c68 <HAL_UART_Init>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000e94:	f7ff feaa 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e98:	2100      	movs	r1, #0
 8000e9a:	480d      	ldr	r0, [pc, #52]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000e9c:	f007 fbca 	bl	8008634 <HAL_UARTEx_SetTxFifoThreshold>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ea6:	f7ff fea1 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4808      	ldr	r0, [pc, #32]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000eae:	f007 fbff 	bl	80086b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000eb8:	f7ff fe98 	bl	8000bec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_USART1_UART_Init+0x90>)
 8000ebe:	f007 fb80 	bl	80085c2 <HAL_UARTEx_DisableFifoMode>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000ec8:	f7ff fe90 	bl	8000bec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ecc:	bf00      	nop
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	24001368 	.word	0x24001368
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b0ba      	sub	sp, #232	@ 0xe8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee0:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]
 8000eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	22c0      	movs	r2, #192	@ 0xc0
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fc65 	bl	80087c8 <memset>
  if(uartHandle->Instance==USART1)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <HAL_UART_MspInit+0xc8>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d146      	bne.n	8000f96 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f08:	f04f 0201 	mov.w	r2, #1
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000f14:	2300      	movs	r3, #0
 8000f16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f1a:	f107 0310 	add.w	r3, r7, #16
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f004 f876 	bl	8005010 <HAL_RCCEx_PeriphCLKConfig>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f2a:	f7ff fe5f 	bl	8000bec <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f30:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f34:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f36:	f043 0310 	orr.w	r3, r3, #16
 8000f3a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f3e:	4b19      	ldr	r3, [pc, #100]	@ (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f40:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f44:	f003 0310 	and.w	r3, r3, #16
 8000f48:	60fb      	str	r3, [r7, #12]
 8000f4a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4c:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f52:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f5c:	4b11      	ldr	r3, [pc, #68]	@ (8000fa4 <HAL_UART_MspInit+0xcc>)
 8000f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f62:	f003 0301 	and.w	r3, r3, #1
 8000f66:	60bb      	str	r3, [r7, #8]
 8000f68:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	2302      	movs	r3, #2
 8000f74:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	2301      	movs	r3, #1
 8000f7a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000f8e:	4619      	mov	r1, r3
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <HAL_UART_MspInit+0xd0>)
 8000f92:	f002 fe39 	bl	8003c08 <HAL_GPIO_Init>
    //HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	37e8      	adds	r7, #232	@ 0xe8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40011000 	.word	0x40011000
 8000fa4:	58024400 	.word	0x58024400
 8000fa8:	58020000 	.word	0x58020000

08000fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000fe8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000fb0:	f7ff ff2e 	bl	8000e10 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fb4:	f7ff fe8c 	bl	8000cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fba:	490d      	ldr	r1, [pc, #52]	@ (8000ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc0:	e002      	b.n	8000fc8 <LoopCopyDataInit>

08000fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc6:	3304      	adds	r3, #4

08000fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fcc:	d3f9      	bcc.n	8000fc2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd4:	e001      	b.n	8000fda <LoopFillZerobss>

08000fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd8:	3204      	adds	r2, #4

08000fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fdc:	d3fb      	bcc.n	8000fd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fde:	f007 fbfb 	bl	80087d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fd07 	bl	80009f4 <main>
  bx  lr
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fe8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000fec:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ff0:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000ff4:	080088bc 	.word	0x080088bc
  ldr r2, =_sbss
 8000ff8:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ffc:	24001400 	.word	0x24001400

08001000 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC3_IRQHandler>
	...

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800100a:	2003      	movs	r0, #3
 800100c:	f000 f968 	bl	80012e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001010:	f003 fe28 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8001014:	4602      	mov	r2, r0
 8001016:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_Init+0x68>)
 8001018:	699b      	ldr	r3, [r3, #24]
 800101a:	0a1b      	lsrs	r3, r3, #8
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	4913      	ldr	r1, [pc, #76]	@ (8001070 <HAL_Init+0x6c>)
 8001022:	5ccb      	ldrb	r3, [r1, r3]
 8001024:	f003 031f 	and.w	r3, r3, #31
 8001028:	fa22 f303 	lsr.w	r3, r2, r3
 800102c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800102e:	4b0f      	ldr	r3, [pc, #60]	@ (800106c <HAL_Init+0x68>)
 8001030:	699b      	ldr	r3, [r3, #24]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	4a0e      	ldr	r2, [pc, #56]	@ (8001070 <HAL_Init+0x6c>)
 8001038:	5cd3      	ldrb	r3, [r2, r3]
 800103a:	f003 031f 	and.w	r3, r3, #31
 800103e:	687a      	ldr	r2, [r7, #4]
 8001040:	fa22 f303 	lsr.w	r3, r2, r3
 8001044:	4a0b      	ldr	r2, [pc, #44]	@ (8001074 <HAL_Init+0x70>)
 8001046:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001048:	4a0b      	ldr	r2, [pc, #44]	@ (8001078 <HAL_Init+0x74>)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800104e:	200f      	movs	r0, #15
 8001050:	f000 f814 	bl	800107c <HAL_InitTick>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	e002      	b.n	8001064 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800105e:	f7ff fdcb 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	4618      	mov	r0, r3
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	58024400 	.word	0x58024400
 8001070:	0800886c 	.word	0x0800886c
 8001074:	24000004 	.word	0x24000004
 8001078:	24000000 	.word	0x24000000

0800107c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001084:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <HAL_InitTick+0x60>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d101      	bne.n	8001090 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e021      	b.n	80010d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <HAL_InitTick+0x64>)
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	4b11      	ldr	r3, [pc, #68]	@ (80010dc <HAL_InitTick+0x60>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	4619      	mov	r1, r3
 800109a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
 80010a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a6:	4618      	mov	r0, r3
 80010a8:	f000 f94d 	bl	8001346 <HAL_SYSTICK_Config>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e00e      	b.n	80010d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2b0f      	cmp	r3, #15
 80010ba:	d80a      	bhi.n	80010d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010bc:	2200      	movs	r2, #0
 80010be:	6879      	ldr	r1, [r7, #4]
 80010c0:	f04f 30ff 	mov.w	r0, #4294967295
 80010c4:	f000 f917 	bl	80012f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c8:	4a06      	ldr	r2, [pc, #24]	@ (80010e4 <HAL_InitTick+0x68>)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ce:	2300      	movs	r3, #0
 80010d0:	e000      	b.n	80010d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3708      	adds	r7, #8
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	2400000c 	.word	0x2400000c
 80010e0:	24000000 	.word	0x24000000
 80010e4:	24000008 	.word	0x24000008

080010e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010ec:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x20>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b06      	ldr	r3, [pc, #24]	@ (800110c <HAL_IncTick+0x24>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4413      	add	r3, r2
 80010f8:	4a04      	ldr	r2, [pc, #16]	@ (800110c <HAL_IncTick+0x24>)
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	2400000c 	.word	0x2400000c
 800110c:	240013fc 	.word	0x240013fc

08001110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  return uwTick;
 8001114:	4b03      	ldr	r3, [pc, #12]	@ (8001124 <HAL_GetTick+0x14>)
 8001116:	681b      	ldr	r3, [r3, #0]
}
 8001118:	4618      	mov	r0, r3
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	240013fc 	.word	0x240013fc

08001128 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <HAL_GetREVID+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	0c1b      	lsrs	r3, r3, #16
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	5c001000 	.word	0x5c001000

08001140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b480      	push	{r7}
 8001142:	b085      	sub	sp, #20
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	f003 0307 	and.w	r3, r3, #7
 800114e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001150:	4b0b      	ldr	r3, [pc, #44]	@ (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001156:	68ba      	ldr	r2, [r7, #8]
 8001158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800115c:	4013      	ands	r3, r2
 800115e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <__NVIC_SetPriorityGrouping+0x44>)
 800116a:	4313      	orrs	r3, r2
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	@ (8001180 <__NVIC_SetPriorityGrouping+0x40>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	05fa0000 	.word	0x05fa0000

08001188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800118c:	4b04      	ldr	r3, [pc, #16]	@ (80011a0 <__NVIC_GetPriorityGrouping+0x18>)
 800118e:	68db      	ldr	r3, [r3, #12]
 8001190:	0a1b      	lsrs	r3, r3, #8
 8001192:	f003 0307 	and.w	r3, r3, #7
}
 8001196:	4618      	mov	r0, r3
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00

080011a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	db0b      	blt.n	80011ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b6:	88fb      	ldrh	r3, [r7, #6]
 80011b8:	f003 021f 	and.w	r2, r3, #31
 80011bc:	4907      	ldr	r1, [pc, #28]	@ (80011dc <__NVIC_EnableIRQ+0x38>)
 80011be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	2001      	movs	r0, #1
 80011c6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	e000e100 	.word	0xe000e100

080011e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	4603      	mov	r3, r0
 80011e8:	6039      	str	r1, [r7, #0]
 80011ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	db0a      	blt.n	800120a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	b2da      	uxtb	r2, r3
 80011f8:	490c      	ldr	r1, [pc, #48]	@ (800122c <__NVIC_SetPriority+0x4c>)
 80011fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011fe:	0112      	lsls	r2, r2, #4
 8001200:	b2d2      	uxtb	r2, r2
 8001202:	440b      	add	r3, r1
 8001204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001208:	e00a      	b.n	8001220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	b2da      	uxtb	r2, r3
 800120e:	4908      	ldr	r1, [pc, #32]	@ (8001230 <__NVIC_SetPriority+0x50>)
 8001210:	88fb      	ldrh	r3, [r7, #6]
 8001212:	f003 030f 	and.w	r3, r3, #15
 8001216:	3b04      	subs	r3, #4
 8001218:	0112      	lsls	r2, r2, #4
 800121a:	b2d2      	uxtb	r2, r2
 800121c:	440b      	add	r3, r1
 800121e:	761a      	strb	r2, [r3, #24]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000e100 	.word	0xe000e100
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	@ 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	60f8      	str	r0, [r7, #12]
 800123c:	60b9      	str	r1, [r7, #8]
 800123e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	f1c3 0307 	rsb	r3, r3, #7
 800124e:	2b04      	cmp	r3, #4
 8001250:	bf28      	it	cs
 8001252:	2304      	movcs	r3, #4
 8001254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3304      	adds	r3, #4
 800125a:	2b06      	cmp	r3, #6
 800125c:	d902      	bls.n	8001264 <NVIC_EncodePriority+0x30>
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	3b03      	subs	r3, #3
 8001262:	e000      	b.n	8001266 <NVIC_EncodePriority+0x32>
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001268:	f04f 32ff 	mov.w	r2, #4294967295
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43da      	mvns	r2, r3
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	401a      	ands	r2, r3
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800127c:	f04f 31ff 	mov.w	r1, #4294967295
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	fa01 f303 	lsl.w	r3, r1, r3
 8001286:	43d9      	mvns	r1, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	4313      	orrs	r3, r2
         );
}
 800128e:	4618      	mov	r0, r3
 8001290:	3724      	adds	r7, #36	@ 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012ac:	d301      	bcc.n	80012b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ae:	2301      	movs	r3, #1
 80012b0:	e00f      	b.n	80012d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012b2:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <SysTick_Config+0x40>)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012ba:	210f      	movs	r1, #15
 80012bc:	f04f 30ff 	mov.w	r0, #4294967295
 80012c0:	f7ff ff8e 	bl	80011e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c4:	4b05      	ldr	r3, [pc, #20]	@ (80012dc <SysTick_Config+0x40>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ca:	4b04      	ldr	r3, [pc, #16]	@ (80012dc <SysTick_Config+0x40>)
 80012cc:	2207      	movs	r2, #7
 80012ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	e000e010 	.word	0xe000e010

080012e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff29 	bl	8001140 <__NVIC_SetPriorityGrouping>
}
 80012ee:	bf00      	nop
 80012f0:	3708      	adds	r7, #8
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	b086      	sub	sp, #24
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	4603      	mov	r3, r0
 80012fe:	60b9      	str	r1, [r7, #8]
 8001300:	607a      	str	r2, [r7, #4]
 8001302:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff40 	bl	8001188 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff90 	bl	8001234 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5f 	bl	80011e0 <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff33 	bl	80011a4 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa4 	bl	800129c <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001364:	f3bf 8f5f 	dmb	sy
}
 8001368:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800136a:	4b07      	ldr	r3, [pc, #28]	@ (8001388 <HAL_MPU_Disable+0x28>)
 800136c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136e:	4a06      	ldr	r2, [pc, #24]	@ (8001388 <HAL_MPU_Disable+0x28>)
 8001370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001374:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001376:	4b05      	ldr	r3, [pc, #20]	@ (800138c <HAL_MPU_Disable+0x2c>)
 8001378:	2200      	movs	r2, #0
 800137a:	605a      	str	r2, [r3, #4]
}
 800137c:	bf00      	nop
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop
 8001388:	e000ed00 	.word	0xe000ed00
 800138c:	e000ed90 	.word	0xe000ed90

08001390 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001398:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_MPU_Enable+0x38>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80013a2:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <HAL_MPU_Enable+0x3c>)
 80013a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013a6:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <HAL_MPU_Enable+0x3c>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80013ae:	f3bf 8f4f 	dsb	sy
}
 80013b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80013b4:	f3bf 8f6f 	isb	sy
}
 80013b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000ed90 	.word	0xe000ed90
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	785a      	ldrb	r2, [r3, #1]
 80013dc:	4b1b      	ldr	r3, [pc, #108]	@ (800144c <HAL_MPU_ConfigRegion+0x7c>)
 80013de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80013e0:	4b1a      	ldr	r3, [pc, #104]	@ (800144c <HAL_MPU_ConfigRegion+0x7c>)
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	4a19      	ldr	r2, [pc, #100]	@ (800144c <HAL_MPU_ConfigRegion+0x7c>)
 80013e6:	f023 0301 	bic.w	r3, r3, #1
 80013ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80013ec:	4a17      	ldr	r2, [pc, #92]	@ (800144c <HAL_MPU_ConfigRegion+0x7c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	7b1b      	ldrb	r3, [r3, #12]
 80013f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	7adb      	ldrb	r3, [r3, #11]
 80013fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	7a9b      	ldrb	r3, [r3, #10]
 8001406:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	7b5b      	ldrb	r3, [r3, #13]
 800140e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001410:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7b9b      	ldrb	r3, [r3, #14]
 8001416:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001418:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	7bdb      	ldrb	r3, [r3, #15]
 800141e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001420:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	7a5b      	ldrb	r3, [r3, #9]
 8001426:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	7a1b      	ldrb	r3, [r3, #8]
 800142e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001430:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001438:	4a04      	ldr	r2, [pc, #16]	@ (800144c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800143a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800143c:	6113      	str	r3, [r2, #16]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	e000ed90 	.word	0xe000ed90

08001450 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001458:	f7ff fe5a 	bl	8001110 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e316      	b.n	8001a96 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a66      	ldr	r2, [pc, #408]	@ (8001608 <HAL_DMA_Init+0x1b8>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d04a      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a65      	ldr	r2, [pc, #404]	@ (800160c <HAL_DMA_Init+0x1bc>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d045      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a63      	ldr	r2, [pc, #396]	@ (8001610 <HAL_DMA_Init+0x1c0>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d040      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a62      	ldr	r2, [pc, #392]	@ (8001614 <HAL_DMA_Init+0x1c4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d03b      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a60      	ldr	r2, [pc, #384]	@ (8001618 <HAL_DMA_Init+0x1c8>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d036      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a5f      	ldr	r2, [pc, #380]	@ (800161c <HAL_DMA_Init+0x1cc>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d031      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a5d      	ldr	r2, [pc, #372]	@ (8001620 <HAL_DMA_Init+0x1d0>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d02c      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001624 <HAL_DMA_Init+0x1d4>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d027      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a5a      	ldr	r2, [pc, #360]	@ (8001628 <HAL_DMA_Init+0x1d8>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d022      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a59      	ldr	r2, [pc, #356]	@ (800162c <HAL_DMA_Init+0x1dc>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d01d      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a57      	ldr	r2, [pc, #348]	@ (8001630 <HAL_DMA_Init+0x1e0>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d018      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a56      	ldr	r2, [pc, #344]	@ (8001634 <HAL_DMA_Init+0x1e4>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d013      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a54      	ldr	r2, [pc, #336]	@ (8001638 <HAL_DMA_Init+0x1e8>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00e      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a53      	ldr	r2, [pc, #332]	@ (800163c <HAL_DMA_Init+0x1ec>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d009      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4a51      	ldr	r2, [pc, #324]	@ (8001640 <HAL_DMA_Init+0x1f0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d004      	beq.n	8001508 <HAL_DMA_Init+0xb8>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a50      	ldr	r2, [pc, #320]	@ (8001644 <HAL_DMA_Init+0x1f4>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d101      	bne.n	800150c <HAL_DMA_Init+0xbc>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_DMA_Init+0xbe>
 800150c:	2300      	movs	r3, #0
 800150e:	2b00      	cmp	r3, #0
 8001510:	f000 813b 	beq.w	800178a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2202      	movs	r2, #2
 8001518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a37      	ldr	r2, [pc, #220]	@ (8001608 <HAL_DMA_Init+0x1b8>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d04a      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a36      	ldr	r2, [pc, #216]	@ (800160c <HAL_DMA_Init+0x1bc>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d045      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a34      	ldr	r2, [pc, #208]	@ (8001610 <HAL_DMA_Init+0x1c0>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d040      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a33      	ldr	r2, [pc, #204]	@ (8001614 <HAL_DMA_Init+0x1c4>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d03b      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a31      	ldr	r2, [pc, #196]	@ (8001618 <HAL_DMA_Init+0x1c8>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d036      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a30      	ldr	r2, [pc, #192]	@ (800161c <HAL_DMA_Init+0x1cc>)
 800155c:	4293      	cmp	r3, r2
 800155e:	d031      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a2e      	ldr	r2, [pc, #184]	@ (8001620 <HAL_DMA_Init+0x1d0>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d02c      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a2d      	ldr	r2, [pc, #180]	@ (8001624 <HAL_DMA_Init+0x1d4>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d027      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a2b      	ldr	r2, [pc, #172]	@ (8001628 <HAL_DMA_Init+0x1d8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d022      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a2a      	ldr	r2, [pc, #168]	@ (800162c <HAL_DMA_Init+0x1dc>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d01d      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <HAL_DMA_Init+0x1e0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d018      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a27      	ldr	r2, [pc, #156]	@ (8001634 <HAL_DMA_Init+0x1e4>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d013      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a25      	ldr	r2, [pc, #148]	@ (8001638 <HAL_DMA_Init+0x1e8>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00e      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a24      	ldr	r2, [pc, #144]	@ (800163c <HAL_DMA_Init+0x1ec>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d009      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a22      	ldr	r2, [pc, #136]	@ (8001640 <HAL_DMA_Init+0x1f0>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d004      	beq.n	80015c4 <HAL_DMA_Init+0x174>
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a21      	ldr	r2, [pc, #132]	@ (8001644 <HAL_DMA_Init+0x1f4>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d108      	bne.n	80015d6 <HAL_DMA_Init+0x186>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0201 	bic.w	r2, r2, #1
 80015d2:	601a      	str	r2, [r3, #0]
 80015d4:	e007      	b.n	80015e6 <HAL_DMA_Init+0x196>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 0201 	bic.w	r2, r2, #1
 80015e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80015e6:	e02f      	b.n	8001648 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015e8:	f7ff fd92 	bl	8001110 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b05      	cmp	r3, #5
 80015f4:	d928      	bls.n	8001648 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2220      	movs	r2, #32
 80015fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2203      	movs	r2, #3
 8001600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e246      	b.n	8001a96 <HAL_DMA_Init+0x646>
 8001608:	40020010 	.word	0x40020010
 800160c:	40020028 	.word	0x40020028
 8001610:	40020040 	.word	0x40020040
 8001614:	40020058 	.word	0x40020058
 8001618:	40020070 	.word	0x40020070
 800161c:	40020088 	.word	0x40020088
 8001620:	400200a0 	.word	0x400200a0
 8001624:	400200b8 	.word	0x400200b8
 8001628:	40020410 	.word	0x40020410
 800162c:	40020428 	.word	0x40020428
 8001630:	40020440 	.word	0x40020440
 8001634:	40020458 	.word	0x40020458
 8001638:	40020470 	.word	0x40020470
 800163c:	40020488 	.word	0x40020488
 8001640:	400204a0 	.word	0x400204a0
 8001644:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1c8      	bne.n	80015e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800165e:	697a      	ldr	r2, [r7, #20]
 8001660:	4b83      	ldr	r3, [pc, #524]	@ (8001870 <HAL_DMA_Init+0x420>)
 8001662:	4013      	ands	r3, r2
 8001664:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800166e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800167a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001686:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800168e:	697a      	ldr	r2, [r7, #20]
 8001690:	4313      	orrs	r3, r2
 8001692:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001698:	2b04      	cmp	r3, #4
 800169a:	d107      	bne.n	80016ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a4:	4313      	orrs	r3, r2
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80016ac:	4b71      	ldr	r3, [pc, #452]	@ (8001874 <HAL_DMA_Init+0x424>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	4b71      	ldr	r3, [pc, #452]	@ (8001878 <HAL_DMA_Init+0x428>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80016b8:	d328      	bcc.n	800170c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b28      	cmp	r3, #40	@ 0x28
 80016c0:	d903      	bls.n	80016ca <HAL_DMA_Init+0x27a>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80016c8:	d917      	bls.n	80016fa <HAL_DMA_Init+0x2aa>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80016d0:	d903      	bls.n	80016da <HAL_DMA_Init+0x28a>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	2b42      	cmp	r3, #66	@ 0x42
 80016d8:	d90f      	bls.n	80016fa <HAL_DMA_Init+0x2aa>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	2b46      	cmp	r3, #70	@ 0x46
 80016e0:	d903      	bls.n	80016ea <HAL_DMA_Init+0x29a>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b48      	cmp	r3, #72	@ 0x48
 80016e8:	d907      	bls.n	80016fa <HAL_DMA_Init+0x2aa>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80016f0:	d905      	bls.n	80016fe <HAL_DMA_Init+0x2ae>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b52      	cmp	r3, #82	@ 0x52
 80016f8:	d801      	bhi.n	80016fe <HAL_DMA_Init+0x2ae>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e000      	b.n	8001700 <HAL_DMA_Init+0x2b0>
 80016fe:	2300      	movs	r3, #0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800170a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	695b      	ldr	r3, [r3, #20]
 800171a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f023 0307 	bic.w	r3, r3, #7
 8001722:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	2b04      	cmp	r3, #4
 8001734:	d117      	bne.n	8001766 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4313      	orrs	r3, r2
 800173e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001744:	2b00      	cmp	r3, #0
 8001746:	d00e      	beq.n	8001766 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f002 f8d3 	bl	80038f4 <DMA_CheckFifoParam>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d008      	beq.n	8001766 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2240      	movs	r2, #64	@ 0x40
 8001758:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e197      	b.n	8001a96 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	f002 f80e 	bl	8003790 <DMA_CalcBaseAndBitshift>
 8001774:	4603      	mov	r3, r0
 8001776:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800177c:	f003 031f 	and.w	r3, r3, #31
 8001780:	223f      	movs	r2, #63	@ 0x3f
 8001782:	409a      	lsls	r2, r3
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
 8001788:	e0cd      	b.n	8001926 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a3b      	ldr	r2, [pc, #236]	@ (800187c <HAL_DMA_Init+0x42c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d022      	beq.n	80017da <HAL_DMA_Init+0x38a>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a39      	ldr	r2, [pc, #228]	@ (8001880 <HAL_DMA_Init+0x430>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d01d      	beq.n	80017da <HAL_DMA_Init+0x38a>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a38      	ldr	r2, [pc, #224]	@ (8001884 <HAL_DMA_Init+0x434>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d018      	beq.n	80017da <HAL_DMA_Init+0x38a>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a36      	ldr	r2, [pc, #216]	@ (8001888 <HAL_DMA_Init+0x438>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d013      	beq.n	80017da <HAL_DMA_Init+0x38a>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a35      	ldr	r2, [pc, #212]	@ (800188c <HAL_DMA_Init+0x43c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d00e      	beq.n	80017da <HAL_DMA_Init+0x38a>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a33      	ldr	r2, [pc, #204]	@ (8001890 <HAL_DMA_Init+0x440>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d009      	beq.n	80017da <HAL_DMA_Init+0x38a>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a32      	ldr	r2, [pc, #200]	@ (8001894 <HAL_DMA_Init+0x444>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d004      	beq.n	80017da <HAL_DMA_Init+0x38a>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a30      	ldr	r2, [pc, #192]	@ (8001898 <HAL_DMA_Init+0x448>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_DMA_Init+0x38e>
 80017da:	2301      	movs	r3, #1
 80017dc:	e000      	b.n	80017e0 <HAL_DMA_Init+0x390>
 80017de:	2300      	movs	r3, #0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 8097 	beq.w	8001914 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a24      	ldr	r2, [pc, #144]	@ (800187c <HAL_DMA_Init+0x42c>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d021      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a22      	ldr	r2, [pc, #136]	@ (8001880 <HAL_DMA_Init+0x430>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d01c      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a21      	ldr	r2, [pc, #132]	@ (8001884 <HAL_DMA_Init+0x434>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d017      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a1f      	ldr	r2, [pc, #124]	@ (8001888 <HAL_DMA_Init+0x438>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d012      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a1e      	ldr	r2, [pc, #120]	@ (800188c <HAL_DMA_Init+0x43c>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d00d      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a1c      	ldr	r2, [pc, #112]	@ (8001890 <HAL_DMA_Init+0x440>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d008      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a1b      	ldr	r2, [pc, #108]	@ (8001894 <HAL_DMA_Init+0x444>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d003      	beq.n	8001834 <HAL_DMA_Init+0x3e4>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a19      	ldr	r2, [pc, #100]	@ (8001898 <HAL_DMA_Init+0x448>)
 8001832:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2202      	movs	r2, #2
 8001838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800184c:	697a      	ldr	r2, [r7, #20]
 800184e:	4b13      	ldr	r3, [pc, #76]	@ (800189c <HAL_DMA_Init+0x44c>)
 8001850:	4013      	ands	r3, r2
 8001852:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2b40      	cmp	r3, #64	@ 0x40
 800185a:	d021      	beq.n	80018a0 <HAL_DMA_Init+0x450>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	2b80      	cmp	r3, #128	@ 0x80
 8001862:	d102      	bne.n	800186a <HAL_DMA_Init+0x41a>
 8001864:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001868:	e01b      	b.n	80018a2 <HAL_DMA_Init+0x452>
 800186a:	2300      	movs	r3, #0
 800186c:	e019      	b.n	80018a2 <HAL_DMA_Init+0x452>
 800186e:	bf00      	nop
 8001870:	fe10803f 	.word	0xfe10803f
 8001874:	5c001000 	.word	0x5c001000
 8001878:	ffff0000 	.word	0xffff0000
 800187c:	58025408 	.word	0x58025408
 8001880:	5802541c 	.word	0x5802541c
 8001884:	58025430 	.word	0x58025430
 8001888:	58025444 	.word	0x58025444
 800188c:	58025458 	.word	0x58025458
 8001890:	5802546c 	.word	0x5802546c
 8001894:	58025480 	.word	0x58025480
 8001898:	58025494 	.word	0x58025494
 800189c:	fffe000f 	.word	0xfffe000f
 80018a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68d2      	ldr	r2, [r2, #12]
 80018a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	691b      	ldr	r3, [r3, #16]
 80018ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80018b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80018b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80018c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80018c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6a1b      	ldr	r3, [r3, #32]
 80018ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80018d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80018d2:	697a      	ldr	r2, [r7, #20]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	697a      	ldr	r2, [r7, #20]
 80018de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	4b6e      	ldr	r3, [pc, #440]	@ (8001aa0 <HAL_DMA_Init+0x650>)
 80018e8:	4413      	add	r3, r2
 80018ea:	4a6e      	ldr	r2, [pc, #440]	@ (8001aa4 <HAL_DMA_Init+0x654>)
 80018ec:	fba2 2303 	umull	r2, r3, r2, r3
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	009a      	lsls	r2, r3, #2
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f001 ff49 	bl	8003790 <DMA_CalcBaseAndBitshift>
 80018fe:	4603      	mov	r3, r0
 8001900:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001906:	f003 031f 	and.w	r3, r3, #31
 800190a:	2201      	movs	r2, #1
 800190c:	409a      	lsls	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	605a      	str	r2, [r3, #4]
 8001912:	e008      	b.n	8001926 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2240      	movs	r2, #64	@ 0x40
 8001918:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2203      	movs	r2, #3
 800191e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e0b7      	b.n	8001a96 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5f      	ldr	r2, [pc, #380]	@ (8001aa8 <HAL_DMA_Init+0x658>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d072      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a5d      	ldr	r2, [pc, #372]	@ (8001aac <HAL_DMA_Init+0x65c>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d06d      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a5c      	ldr	r2, [pc, #368]	@ (8001ab0 <HAL_DMA_Init+0x660>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d068      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a5a      	ldr	r2, [pc, #360]	@ (8001ab4 <HAL_DMA_Init+0x664>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d063      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a59      	ldr	r2, [pc, #356]	@ (8001ab8 <HAL_DMA_Init+0x668>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d05e      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a57      	ldr	r2, [pc, #348]	@ (8001abc <HAL_DMA_Init+0x66c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d059      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a56      	ldr	r2, [pc, #344]	@ (8001ac0 <HAL_DMA_Init+0x670>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d054      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a54      	ldr	r2, [pc, #336]	@ (8001ac4 <HAL_DMA_Init+0x674>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d04f      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a53      	ldr	r2, [pc, #332]	@ (8001ac8 <HAL_DMA_Init+0x678>)
 800197c:	4293      	cmp	r3, r2
 800197e:	d04a      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a51      	ldr	r2, [pc, #324]	@ (8001acc <HAL_DMA_Init+0x67c>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d045      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <HAL_DMA_Init+0x680>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d040      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a4e      	ldr	r2, [pc, #312]	@ (8001ad4 <HAL_DMA_Init+0x684>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d03b      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad8 <HAL_DMA_Init+0x688>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d036      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a4b      	ldr	r2, [pc, #300]	@ (8001adc <HAL_DMA_Init+0x68c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d031      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a4a      	ldr	r2, [pc, #296]	@ (8001ae0 <HAL_DMA_Init+0x690>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d02c      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a48      	ldr	r2, [pc, #288]	@ (8001ae4 <HAL_DMA_Init+0x694>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d027      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a47      	ldr	r2, [pc, #284]	@ (8001ae8 <HAL_DMA_Init+0x698>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d022      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a45      	ldr	r2, [pc, #276]	@ (8001aec <HAL_DMA_Init+0x69c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d01d      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a44      	ldr	r2, [pc, #272]	@ (8001af0 <HAL_DMA_Init+0x6a0>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d018      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a42      	ldr	r2, [pc, #264]	@ (8001af4 <HAL_DMA_Init+0x6a4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d013      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a41      	ldr	r2, [pc, #260]	@ (8001af8 <HAL_DMA_Init+0x6a8>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d00e      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a3f      	ldr	r2, [pc, #252]	@ (8001afc <HAL_DMA_Init+0x6ac>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a3e      	ldr	r2, [pc, #248]	@ (8001b00 <HAL_DMA_Init+0x6b0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d004      	beq.n	8001a16 <HAL_DMA_Init+0x5c6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a3c      	ldr	r2, [pc, #240]	@ (8001b04 <HAL_DMA_Init+0x6b4>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d101      	bne.n	8001a1a <HAL_DMA_Init+0x5ca>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_DMA_Init+0x5cc>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d032      	beq.n	8001a86 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f001 ffe3 	bl	80039ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b80      	cmp	r3, #128	@ 0x80
 8001a2c:	d102      	bne.n	8001a34 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3c:	b2d2      	uxtb	r2, r2
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001a48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d010      	beq.n	8001a74 <HAL_DMA_Init+0x624>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d80c      	bhi.n	8001a74 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f002 f860 	bl	8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	e008      	b.n	8001a86 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001a94:	2300      	movs	r3, #0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	a7fdabf8 	.word	0xa7fdabf8
 8001aa4:	cccccccd 	.word	0xcccccccd
 8001aa8:	40020010 	.word	0x40020010
 8001aac:	40020028 	.word	0x40020028
 8001ab0:	40020040 	.word	0x40020040
 8001ab4:	40020058 	.word	0x40020058
 8001ab8:	40020070 	.word	0x40020070
 8001abc:	40020088 	.word	0x40020088
 8001ac0:	400200a0 	.word	0x400200a0
 8001ac4:	400200b8 	.word	0x400200b8
 8001ac8:	40020410 	.word	0x40020410
 8001acc:	40020428 	.word	0x40020428
 8001ad0:	40020440 	.word	0x40020440
 8001ad4:	40020458 	.word	0x40020458
 8001ad8:	40020470 	.word	0x40020470
 8001adc:	40020488 	.word	0x40020488
 8001ae0:	400204a0 	.word	0x400204a0
 8001ae4:	400204b8 	.word	0x400204b8
 8001ae8:	58025408 	.word	0x58025408
 8001aec:	5802541c 	.word	0x5802541c
 8001af0:	58025430 	.word	0x58025430
 8001af4:	58025444 	.word	0x58025444
 8001af8:	58025458 	.word	0x58025458
 8001afc:	5802546c 	.word	0x5802546c
 8001b00:	58025480 	.word	0x58025480
 8001b04:	58025494 	.word	0x58025494

08001b08 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e1a8      	b.n	8001e6c <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a82      	ldr	r2, [pc, #520]	@ (8001d28 <HAL_DMA_DeInit+0x220>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d04a      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a80      	ldr	r2, [pc, #512]	@ (8001d2c <HAL_DMA_DeInit+0x224>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d045      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a7f      	ldr	r2, [pc, #508]	@ (8001d30 <HAL_DMA_DeInit+0x228>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d040      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7d      	ldr	r2, [pc, #500]	@ (8001d34 <HAL_DMA_DeInit+0x22c>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d03b      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7c      	ldr	r2, [pc, #496]	@ (8001d38 <HAL_DMA_DeInit+0x230>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d036      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a7a      	ldr	r2, [pc, #488]	@ (8001d3c <HAL_DMA_DeInit+0x234>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d031      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a79      	ldr	r2, [pc, #484]	@ (8001d40 <HAL_DMA_DeInit+0x238>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d02c      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a77      	ldr	r2, [pc, #476]	@ (8001d44 <HAL_DMA_DeInit+0x23c>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d027      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a76      	ldr	r2, [pc, #472]	@ (8001d48 <HAL_DMA_DeInit+0x240>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d022      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a74      	ldr	r2, [pc, #464]	@ (8001d4c <HAL_DMA_DeInit+0x244>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d01d      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a73      	ldr	r2, [pc, #460]	@ (8001d50 <HAL_DMA_DeInit+0x248>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d018      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a71      	ldr	r2, [pc, #452]	@ (8001d54 <HAL_DMA_DeInit+0x24c>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d013      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a70      	ldr	r2, [pc, #448]	@ (8001d58 <HAL_DMA_DeInit+0x250>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00e      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8001d5c <HAL_DMA_DeInit+0x254>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d009      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a6d      	ldr	r2, [pc, #436]	@ (8001d60 <HAL_DMA_DeInit+0x258>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d004      	beq.n	8001bba <HAL_DMA_DeInit+0xb2>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a6b      	ldr	r2, [pc, #428]	@ (8001d64 <HAL_DMA_DeInit+0x25c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d108      	bne.n	8001bcc <HAL_DMA_DeInit+0xc4>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0201 	bic.w	r2, r2, #1
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	e007      	b.n	8001bdc <HAL_DMA_DeInit+0xd4>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a51      	ldr	r2, [pc, #324]	@ (8001d28 <HAL_DMA_DeInit+0x220>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d04a      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a50      	ldr	r2, [pc, #320]	@ (8001d2c <HAL_DMA_DeInit+0x224>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d045      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d30 <HAL_DMA_DeInit+0x228>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d040      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a4d      	ldr	r2, [pc, #308]	@ (8001d34 <HAL_DMA_DeInit+0x22c>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d03b      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	@ (8001d38 <HAL_DMA_DeInit+0x230>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d036      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a4a      	ldr	r2, [pc, #296]	@ (8001d3c <HAL_DMA_DeInit+0x234>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d031      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a48      	ldr	r2, [pc, #288]	@ (8001d40 <HAL_DMA_DeInit+0x238>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d02c      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4a47      	ldr	r2, [pc, #284]	@ (8001d44 <HAL_DMA_DeInit+0x23c>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d027      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a45      	ldr	r2, [pc, #276]	@ (8001d48 <HAL_DMA_DeInit+0x240>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d022      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a44      	ldr	r2, [pc, #272]	@ (8001d4c <HAL_DMA_DeInit+0x244>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d01d      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a42      	ldr	r2, [pc, #264]	@ (8001d50 <HAL_DMA_DeInit+0x248>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d018      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a41      	ldr	r2, [pc, #260]	@ (8001d54 <HAL_DMA_DeInit+0x24c>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a3f      	ldr	r2, [pc, #252]	@ (8001d58 <HAL_DMA_DeInit+0x250>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d00e      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a3e      	ldr	r2, [pc, #248]	@ (8001d5c <HAL_DMA_DeInit+0x254>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d009      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d60 <HAL_DMA_DeInit+0x258>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d004      	beq.n	8001c7c <HAL_DMA_DeInit+0x174>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a3b      	ldr	r2, [pc, #236]	@ (8001d64 <HAL_DMA_DeInit+0x25c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d101      	bne.n	8001c80 <HAL_DMA_DeInit+0x178>
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e000      	b.n	8001c82 <HAL_DMA_DeInit+0x17a>
 8001c80:	2300      	movs	r3, #0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d025      	beq.n	8001cd2 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2221      	movs	r2, #33	@ 0x21
 8001cb4:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f001 fd6a 	bl	8003790 <DMA_CalcBaseAndBitshift>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	223f      	movs	r2, #63	@ 0x3f
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	609a      	str	r2, [r3, #8]
 8001cd0:	e081      	b.n	8001dd6 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a24      	ldr	r2, [pc, #144]	@ (8001d68 <HAL_DMA_DeInit+0x260>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d022      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	@ (8001d6c <HAL_DMA_DeInit+0x264>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d01d      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <HAL_DMA_DeInit+0x268>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d018      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	@ (8001d74 <HAL_DMA_DeInit+0x26c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d013      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8001d78 <HAL_DMA_DeInit+0x270>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	@ (8001d7c <HAL_DMA_DeInit+0x274>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d009      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	@ (8001d80 <HAL_DMA_DeInit+0x278>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d004      	beq.n	8001d22 <HAL_DMA_DeInit+0x21a>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	@ (8001d84 <HAL_DMA_DeInit+0x27c>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d132      	bne.n	8001d88 <HAL_DMA_DeInit+0x280>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e031      	b.n	8001d8a <HAL_DMA_DeInit+0x282>
 8001d26:	bf00      	nop
 8001d28:	40020010 	.word	0x40020010
 8001d2c:	40020028 	.word	0x40020028
 8001d30:	40020040 	.word	0x40020040
 8001d34:	40020058 	.word	0x40020058
 8001d38:	40020070 	.word	0x40020070
 8001d3c:	40020088 	.word	0x40020088
 8001d40:	400200a0 	.word	0x400200a0
 8001d44:	400200b8 	.word	0x400200b8
 8001d48:	40020410 	.word	0x40020410
 8001d4c:	40020428 	.word	0x40020428
 8001d50:	40020440 	.word	0x40020440
 8001d54:	40020458 	.word	0x40020458
 8001d58:	40020470 	.word	0x40020470
 8001d5c:	40020488 	.word	0x40020488
 8001d60:	400204a0 	.word	0x400204a0
 8001d64:	400204b8 	.word	0x400204b8
 8001d68:	58025408 	.word	0x58025408
 8001d6c:	5802541c 	.word	0x5802541c
 8001d70:	58025430 	.word	0x58025430
 8001d74:	58025444 	.word	0x58025444
 8001d78:	58025458 	.word	0x58025458
 8001d7c:	5802546c 	.word	0x5802546c
 8001d80:	58025480 	.word	0x58025480
 8001d84:	58025494 	.word	0x58025494
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d021      	beq.n	8001dd2 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2200      	movs	r2, #0
 8001db4:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f001 fcea 	bl	8003790 <DMA_CalcBaseAndBitshift>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc4:	f003 031f 	and.w	r3, r3, #31
 8001dc8:	2201      	movs	r2, #1
 8001dca:	409a      	lsls	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
 8001dd0:	e001      	b.n	8001dd6 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e04a      	b.n	8001e6c <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f001 fe08 	bl	80039ec <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d008      	beq.n	8001df6 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001df4:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00f      	beq.n	8001e1e <HAL_DMA_DeInit+0x316>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	2b08      	cmp	r3, #8
 8001e04:	d80b      	bhi.n	8001e1e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f001 fe8a 	bl	8003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001e1c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b086      	sub	sp, #24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e7c:	f7ff f948 	bl	8001110 <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e2dc      	b.n	8002446 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d008      	beq.n	8001eaa <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2280      	movs	r2, #128	@ 0x80
 8001e9c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e2cd      	b.n	8002446 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a76      	ldr	r2, [pc, #472]	@ (8002088 <HAL_DMA_Abort+0x214>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d04a      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a74      	ldr	r2, [pc, #464]	@ (800208c <HAL_DMA_Abort+0x218>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d045      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a73      	ldr	r2, [pc, #460]	@ (8002090 <HAL_DMA_Abort+0x21c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d040      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a71      	ldr	r2, [pc, #452]	@ (8002094 <HAL_DMA_Abort+0x220>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d03b      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a70      	ldr	r2, [pc, #448]	@ (8002098 <HAL_DMA_Abort+0x224>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d036      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800209c <HAL_DMA_Abort+0x228>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d031      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a6d      	ldr	r2, [pc, #436]	@ (80020a0 <HAL_DMA_Abort+0x22c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d02c      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a6b      	ldr	r2, [pc, #428]	@ (80020a4 <HAL_DMA_Abort+0x230>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d027      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6a      	ldr	r2, [pc, #424]	@ (80020a8 <HAL_DMA_Abort+0x234>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d022      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a68      	ldr	r2, [pc, #416]	@ (80020ac <HAL_DMA_Abort+0x238>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d01d      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a67      	ldr	r2, [pc, #412]	@ (80020b0 <HAL_DMA_Abort+0x23c>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d018      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a65      	ldr	r2, [pc, #404]	@ (80020b4 <HAL_DMA_Abort+0x240>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d013      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a64      	ldr	r2, [pc, #400]	@ (80020b8 <HAL_DMA_Abort+0x244>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d00e      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a62      	ldr	r2, [pc, #392]	@ (80020bc <HAL_DMA_Abort+0x248>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d009      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a61      	ldr	r2, [pc, #388]	@ (80020c0 <HAL_DMA_Abort+0x24c>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d004      	beq.n	8001f4a <HAL_DMA_Abort+0xd6>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a5f      	ldr	r2, [pc, #380]	@ (80020c4 <HAL_DMA_Abort+0x250>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d101      	bne.n	8001f4e <HAL_DMA_Abort+0xda>
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e000      	b.n	8001f50 <HAL_DMA_Abort+0xdc>
 8001f4e:	2300      	movs	r3, #0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 021e 	bic.w	r2, r2, #30
 8001f62:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001f72:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	617b      	str	r3, [r7, #20]
 8001f7a:	e00a      	b.n	8001f92 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 020e 	bic.w	r2, r2, #14
 8001f8a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a3c      	ldr	r2, [pc, #240]	@ (8002088 <HAL_DMA_Abort+0x214>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d072      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800208c <HAL_DMA_Abort+0x218>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d06d      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a39      	ldr	r2, [pc, #228]	@ (8002090 <HAL_DMA_Abort+0x21c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d068      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a37      	ldr	r2, [pc, #220]	@ (8002094 <HAL_DMA_Abort+0x220>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d063      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a36      	ldr	r2, [pc, #216]	@ (8002098 <HAL_DMA_Abort+0x224>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d05e      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a34      	ldr	r2, [pc, #208]	@ (800209c <HAL_DMA_Abort+0x228>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d059      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a33      	ldr	r2, [pc, #204]	@ (80020a0 <HAL_DMA_Abort+0x22c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d054      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a31      	ldr	r2, [pc, #196]	@ (80020a4 <HAL_DMA_Abort+0x230>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d04f      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a30      	ldr	r2, [pc, #192]	@ (80020a8 <HAL_DMA_Abort+0x234>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d04a      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2e      	ldr	r2, [pc, #184]	@ (80020ac <HAL_DMA_Abort+0x238>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d045      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a2d      	ldr	r2, [pc, #180]	@ (80020b0 <HAL_DMA_Abort+0x23c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d040      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a2b      	ldr	r2, [pc, #172]	@ (80020b4 <HAL_DMA_Abort+0x240>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d03b      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a2a      	ldr	r2, [pc, #168]	@ (80020b8 <HAL_DMA_Abort+0x244>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d036      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a28      	ldr	r2, [pc, #160]	@ (80020bc <HAL_DMA_Abort+0x248>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d031      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a27      	ldr	r2, [pc, #156]	@ (80020c0 <HAL_DMA_Abort+0x24c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d02c      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a25      	ldr	r2, [pc, #148]	@ (80020c4 <HAL_DMA_Abort+0x250>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d027      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a24      	ldr	r2, [pc, #144]	@ (80020c8 <HAL_DMA_Abort+0x254>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a22      	ldr	r2, [pc, #136]	@ (80020cc <HAL_DMA_Abort+0x258>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01d      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_DMA_Abort+0x25c>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d018      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a1f      	ldr	r2, [pc, #124]	@ (80020d4 <HAL_DMA_Abort+0x260>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a1e      	ldr	r2, [pc, #120]	@ (80020d8 <HAL_DMA_Abort+0x264>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00e      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1c      	ldr	r2, [pc, #112]	@ (80020dc <HAL_DMA_Abort+0x268>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a1b      	ldr	r2, [pc, #108]	@ (80020e0 <HAL_DMA_Abort+0x26c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_DMA_Abort+0x20e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a19      	ldr	r2, [pc, #100]	@ (80020e4 <HAL_DMA_Abort+0x270>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d132      	bne.n	80020e8 <HAL_DMA_Abort+0x274>
 8002082:	2301      	movs	r3, #1
 8002084:	e031      	b.n	80020ea <HAL_DMA_Abort+0x276>
 8002086:	bf00      	nop
 8002088:	40020010 	.word	0x40020010
 800208c:	40020028 	.word	0x40020028
 8002090:	40020040 	.word	0x40020040
 8002094:	40020058 	.word	0x40020058
 8002098:	40020070 	.word	0x40020070
 800209c:	40020088 	.word	0x40020088
 80020a0:	400200a0 	.word	0x400200a0
 80020a4:	400200b8 	.word	0x400200b8
 80020a8:	40020410 	.word	0x40020410
 80020ac:	40020428 	.word	0x40020428
 80020b0:	40020440 	.word	0x40020440
 80020b4:	40020458 	.word	0x40020458
 80020b8:	40020470 	.word	0x40020470
 80020bc:	40020488 	.word	0x40020488
 80020c0:	400204a0 	.word	0x400204a0
 80020c4:	400204b8 	.word	0x400204b8
 80020c8:	58025408 	.word	0x58025408
 80020cc:	5802541c 	.word	0x5802541c
 80020d0:	58025430 	.word	0x58025430
 80020d4:	58025444 	.word	0x58025444
 80020d8:	58025458 	.word	0x58025458
 80020dc:	5802546c 	.word	0x5802546c
 80020e0:	58025480 	.word	0x58025480
 80020e4:	58025494 	.word	0x58025494
 80020e8:	2300      	movs	r3, #0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d007      	beq.n	80020fe <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a6d      	ldr	r2, [pc, #436]	@ (80022b8 <HAL_DMA_Abort+0x444>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d04a      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a6b      	ldr	r2, [pc, #428]	@ (80022bc <HAL_DMA_Abort+0x448>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d045      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a6a      	ldr	r2, [pc, #424]	@ (80022c0 <HAL_DMA_Abort+0x44c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d040      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a68      	ldr	r2, [pc, #416]	@ (80022c4 <HAL_DMA_Abort+0x450>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d03b      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a67      	ldr	r2, [pc, #412]	@ (80022c8 <HAL_DMA_Abort+0x454>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d036      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_DMA_Abort+0x458>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d031      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a64      	ldr	r2, [pc, #400]	@ (80022d0 <HAL_DMA_Abort+0x45c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d02c      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a62      	ldr	r2, [pc, #392]	@ (80022d4 <HAL_DMA_Abort+0x460>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d027      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a61      	ldr	r2, [pc, #388]	@ (80022d8 <HAL_DMA_Abort+0x464>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d022      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a5f      	ldr	r2, [pc, #380]	@ (80022dc <HAL_DMA_Abort+0x468>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01d      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a5e      	ldr	r2, [pc, #376]	@ (80022e0 <HAL_DMA_Abort+0x46c>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d018      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a5c      	ldr	r2, [pc, #368]	@ (80022e4 <HAL_DMA_Abort+0x470>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d013      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a5b      	ldr	r2, [pc, #364]	@ (80022e8 <HAL_DMA_Abort+0x474>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00e      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a59      	ldr	r2, [pc, #356]	@ (80022ec <HAL_DMA_Abort+0x478>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d009      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a58      	ldr	r2, [pc, #352]	@ (80022f0 <HAL_DMA_Abort+0x47c>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d004      	beq.n	800219e <HAL_DMA_Abort+0x32a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a56      	ldr	r2, [pc, #344]	@ (80022f4 <HAL_DMA_Abort+0x480>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d108      	bne.n	80021b0 <HAL_DMA_Abort+0x33c>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f022 0201 	bic.w	r2, r2, #1
 80021ac:	601a      	str	r2, [r3, #0]
 80021ae:	e007      	b.n	80021c0 <HAL_DMA_Abort+0x34c>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0201 	bic.w	r2, r2, #1
 80021be:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021c0:	e013      	b.n	80021ea <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021c2:	f7fe ffa5 	bl	8001110 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d90c      	bls.n	80021ea <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2220      	movs	r2, #32
 80021d4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2203      	movs	r2, #3
 80021da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e12d      	b.n	8002446 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0301 	and.w	r3, r3, #1
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1e5      	bne.n	80021c2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a2f      	ldr	r2, [pc, #188]	@ (80022b8 <HAL_DMA_Abort+0x444>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d04a      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <HAL_DMA_Abort+0x448>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d045      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a2c      	ldr	r2, [pc, #176]	@ (80022c0 <HAL_DMA_Abort+0x44c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d040      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a2a      	ldr	r2, [pc, #168]	@ (80022c4 <HAL_DMA_Abort+0x450>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d03b      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a29      	ldr	r2, [pc, #164]	@ (80022c8 <HAL_DMA_Abort+0x454>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d036      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a27      	ldr	r2, [pc, #156]	@ (80022cc <HAL_DMA_Abort+0x458>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d031      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a26      	ldr	r2, [pc, #152]	@ (80022d0 <HAL_DMA_Abort+0x45c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d02c      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <HAL_DMA_Abort+0x460>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d027      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a23      	ldr	r2, [pc, #140]	@ (80022d8 <HAL_DMA_Abort+0x464>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d022      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a21      	ldr	r2, [pc, #132]	@ (80022dc <HAL_DMA_Abort+0x468>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d01d      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a20      	ldr	r2, [pc, #128]	@ (80022e0 <HAL_DMA_Abort+0x46c>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d018      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1e      	ldr	r2, [pc, #120]	@ (80022e4 <HAL_DMA_Abort+0x470>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a1d      	ldr	r2, [pc, #116]	@ (80022e8 <HAL_DMA_Abort+0x474>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d00e      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a1b      	ldr	r2, [pc, #108]	@ (80022ec <HAL_DMA_Abort+0x478>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d009      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <HAL_DMA_Abort+0x47c>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d004      	beq.n	8002296 <HAL_DMA_Abort+0x422>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <HAL_DMA_Abort+0x480>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d101      	bne.n	800229a <HAL_DMA_Abort+0x426>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_DMA_Abort+0x428>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d02b      	beq.n	80022f8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	223f      	movs	r2, #63	@ 0x3f
 80022b0:	409a      	lsls	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	609a      	str	r2, [r3, #8]
 80022b6:	e02a      	b.n	800230e <HAL_DMA_Abort+0x49a>
 80022b8:	40020010 	.word	0x40020010
 80022bc:	40020028 	.word	0x40020028
 80022c0:	40020040 	.word	0x40020040
 80022c4:	40020058 	.word	0x40020058
 80022c8:	40020070 	.word	0x40020070
 80022cc:	40020088 	.word	0x40020088
 80022d0:	400200a0 	.word	0x400200a0
 80022d4:	400200b8 	.word	0x400200b8
 80022d8:	40020410 	.word	0x40020410
 80022dc:	40020428 	.word	0x40020428
 80022e0:	40020440 	.word	0x40020440
 80022e4:	40020458 	.word	0x40020458
 80022e8:	40020470 	.word	0x40020470
 80022ec:	40020488 	.word	0x40020488
 80022f0:	400204a0 	.word	0x400204a0
 80022f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002302:	f003 031f 	and.w	r3, r3, #31
 8002306:	2201      	movs	r2, #1
 8002308:	409a      	lsls	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4f      	ldr	r2, [pc, #316]	@ (8002450 <HAL_DMA_Abort+0x5dc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d072      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a4d      	ldr	r2, [pc, #308]	@ (8002454 <HAL_DMA_Abort+0x5e0>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d06d      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a4c      	ldr	r2, [pc, #304]	@ (8002458 <HAL_DMA_Abort+0x5e4>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d068      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4a      	ldr	r2, [pc, #296]	@ (800245c <HAL_DMA_Abort+0x5e8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d063      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a49      	ldr	r2, [pc, #292]	@ (8002460 <HAL_DMA_Abort+0x5ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d05e      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a47      	ldr	r2, [pc, #284]	@ (8002464 <HAL_DMA_Abort+0x5f0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d059      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a46      	ldr	r2, [pc, #280]	@ (8002468 <HAL_DMA_Abort+0x5f4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d054      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a44      	ldr	r2, [pc, #272]	@ (800246c <HAL_DMA_Abort+0x5f8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d04f      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a43      	ldr	r2, [pc, #268]	@ (8002470 <HAL_DMA_Abort+0x5fc>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d04a      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a41      	ldr	r2, [pc, #260]	@ (8002474 <HAL_DMA_Abort+0x600>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d045      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a40      	ldr	r2, [pc, #256]	@ (8002478 <HAL_DMA_Abort+0x604>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d040      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a3e      	ldr	r2, [pc, #248]	@ (800247c <HAL_DMA_Abort+0x608>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d03b      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3d      	ldr	r2, [pc, #244]	@ (8002480 <HAL_DMA_Abort+0x60c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d036      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a3b      	ldr	r2, [pc, #236]	@ (8002484 <HAL_DMA_Abort+0x610>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d031      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a3a      	ldr	r2, [pc, #232]	@ (8002488 <HAL_DMA_Abort+0x614>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d02c      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a38      	ldr	r2, [pc, #224]	@ (800248c <HAL_DMA_Abort+0x618>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d027      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a37      	ldr	r2, [pc, #220]	@ (8002490 <HAL_DMA_Abort+0x61c>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d022      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a35      	ldr	r2, [pc, #212]	@ (8002494 <HAL_DMA_Abort+0x620>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d01d      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a34      	ldr	r2, [pc, #208]	@ (8002498 <HAL_DMA_Abort+0x624>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d018      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a32      	ldr	r2, [pc, #200]	@ (800249c <HAL_DMA_Abort+0x628>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d013      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a31      	ldr	r2, [pc, #196]	@ (80024a0 <HAL_DMA_Abort+0x62c>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d00e      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a2f      	ldr	r2, [pc, #188]	@ (80024a4 <HAL_DMA_Abort+0x630>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d009      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a2e      	ldr	r2, [pc, #184]	@ (80024a8 <HAL_DMA_Abort+0x634>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d004      	beq.n	80023fe <HAL_DMA_Abort+0x58a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2c      	ldr	r2, [pc, #176]	@ (80024ac <HAL_DMA_Abort+0x638>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d101      	bne.n	8002402 <HAL_DMA_Abort+0x58e>
 80023fe:	2301      	movs	r3, #1
 8002400:	e000      	b.n	8002404 <HAL_DMA_Abort+0x590>
 8002402:	2300      	movs	r3, #0
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002410:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00c      	beq.n	8002434 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002424:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002428:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002432:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	3718      	adds	r7, #24
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40020010 	.word	0x40020010
 8002454:	40020028 	.word	0x40020028
 8002458:	40020040 	.word	0x40020040
 800245c:	40020058 	.word	0x40020058
 8002460:	40020070 	.word	0x40020070
 8002464:	40020088 	.word	0x40020088
 8002468:	400200a0 	.word	0x400200a0
 800246c:	400200b8 	.word	0x400200b8
 8002470:	40020410 	.word	0x40020410
 8002474:	40020428 	.word	0x40020428
 8002478:	40020440 	.word	0x40020440
 800247c:	40020458 	.word	0x40020458
 8002480:	40020470 	.word	0x40020470
 8002484:	40020488 	.word	0x40020488
 8002488:	400204a0 	.word	0x400204a0
 800248c:	400204b8 	.word	0x400204b8
 8002490:	58025408 	.word	0x58025408
 8002494:	5802541c 	.word	0x5802541c
 8002498:	58025430 	.word	0x58025430
 800249c:	58025444 	.word	0x58025444
 80024a0:	58025458 	.word	0x58025458
 80024a4:	5802546c 	.word	0x5802546c
 80024a8:	58025480 	.word	0x58025480
 80024ac:	58025494 	.word	0x58025494

080024b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e237      	b.n	8002932 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2280      	movs	r2, #128	@ 0x80
 80024d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e22c      	b.n	8002932 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a5c      	ldr	r2, [pc, #368]	@ (8002650 <HAL_DMA_Abort_IT+0x1a0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d04a      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a5b      	ldr	r2, [pc, #364]	@ (8002654 <HAL_DMA_Abort_IT+0x1a4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d045      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a59      	ldr	r2, [pc, #356]	@ (8002658 <HAL_DMA_Abort_IT+0x1a8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d040      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a58      	ldr	r2, [pc, #352]	@ (800265c <HAL_DMA_Abort_IT+0x1ac>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d03b      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a56      	ldr	r2, [pc, #344]	@ (8002660 <HAL_DMA_Abort_IT+0x1b0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d036      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a55      	ldr	r2, [pc, #340]	@ (8002664 <HAL_DMA_Abort_IT+0x1b4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d031      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a53      	ldr	r2, [pc, #332]	@ (8002668 <HAL_DMA_Abort_IT+0x1b8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d02c      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a52      	ldr	r2, [pc, #328]	@ (800266c <HAL_DMA_Abort_IT+0x1bc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d027      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a50      	ldr	r2, [pc, #320]	@ (8002670 <HAL_DMA_Abort_IT+0x1c0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d022      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a4f      	ldr	r2, [pc, #316]	@ (8002674 <HAL_DMA_Abort_IT+0x1c4>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d01d      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a4d      	ldr	r2, [pc, #308]	@ (8002678 <HAL_DMA_Abort_IT+0x1c8>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d018      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a4c      	ldr	r2, [pc, #304]	@ (800267c <HAL_DMA_Abort_IT+0x1cc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d013      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a4a      	ldr	r2, [pc, #296]	@ (8002680 <HAL_DMA_Abort_IT+0x1d0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d00e      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a49      	ldr	r2, [pc, #292]	@ (8002684 <HAL_DMA_Abort_IT+0x1d4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a47      	ldr	r2, [pc, #284]	@ (8002688 <HAL_DMA_Abort_IT+0x1d8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d004      	beq.n	8002578 <HAL_DMA_Abort_IT+0xc8>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a46      	ldr	r2, [pc, #280]	@ (800268c <HAL_DMA_Abort_IT+0x1dc>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d101      	bne.n	800257c <HAL_DMA_Abort_IT+0xcc>
 8002578:	2301      	movs	r3, #1
 800257a:	e000      	b.n	800257e <HAL_DMA_Abort_IT+0xce>
 800257c:	2300      	movs	r3, #0
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 8086 	beq.w	8002690 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2204      	movs	r2, #4
 8002588:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a2f      	ldr	r2, [pc, #188]	@ (8002650 <HAL_DMA_Abort_IT+0x1a0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04a      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a2e      	ldr	r2, [pc, #184]	@ (8002654 <HAL_DMA_Abort_IT+0x1a4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d045      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002658 <HAL_DMA_Abort_IT+0x1a8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d040      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a2b      	ldr	r2, [pc, #172]	@ (800265c <HAL_DMA_Abort_IT+0x1ac>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d03b      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a29      	ldr	r2, [pc, #164]	@ (8002660 <HAL_DMA_Abort_IT+0x1b0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d036      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a28      	ldr	r2, [pc, #160]	@ (8002664 <HAL_DMA_Abort_IT+0x1b4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d031      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a26      	ldr	r2, [pc, #152]	@ (8002668 <HAL_DMA_Abort_IT+0x1b8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02c      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a25      	ldr	r2, [pc, #148]	@ (800266c <HAL_DMA_Abort_IT+0x1bc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d027      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a23      	ldr	r2, [pc, #140]	@ (8002670 <HAL_DMA_Abort_IT+0x1c0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d022      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <HAL_DMA_Abort_IT+0x1c4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d01d      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a20      	ldr	r2, [pc, #128]	@ (8002678 <HAL_DMA_Abort_IT+0x1c8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d018      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <HAL_DMA_Abort_IT+0x1cc>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a1d      	ldr	r2, [pc, #116]	@ (8002680 <HAL_DMA_Abort_IT+0x1d0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a1c      	ldr	r2, [pc, #112]	@ (8002684 <HAL_DMA_Abort_IT+0x1d4>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1a      	ldr	r2, [pc, #104]	@ (8002688 <HAL_DMA_Abort_IT+0x1d8>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_DMA_Abort_IT+0x17c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a19      	ldr	r2, [pc, #100]	@ (800268c <HAL_DMA_Abort_IT+0x1dc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d108      	bne.n	800263e <HAL_DMA_Abort_IT+0x18e>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0201 	bic.w	r2, r2, #1
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	e178      	b.n	8002930 <HAL_DMA_Abort_IT+0x480>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]
 800264e:	e16f      	b.n	8002930 <HAL_DMA_Abort_IT+0x480>
 8002650:	40020010 	.word	0x40020010
 8002654:	40020028 	.word	0x40020028
 8002658:	40020040 	.word	0x40020040
 800265c:	40020058 	.word	0x40020058
 8002660:	40020070 	.word	0x40020070
 8002664:	40020088 	.word	0x40020088
 8002668:	400200a0 	.word	0x400200a0
 800266c:	400200b8 	.word	0x400200b8
 8002670:	40020410 	.word	0x40020410
 8002674:	40020428 	.word	0x40020428
 8002678:	40020440 	.word	0x40020440
 800267c:	40020458 	.word	0x40020458
 8002680:	40020470 	.word	0x40020470
 8002684:	40020488 	.word	0x40020488
 8002688:	400204a0 	.word	0x400204a0
 800268c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020e 	bic.w	r2, r2, #14
 800269e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a6c      	ldr	r2, [pc, #432]	@ (8002858 <HAL_DMA_Abort_IT+0x3a8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d04a      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6b      	ldr	r2, [pc, #428]	@ (800285c <HAL_DMA_Abort_IT+0x3ac>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d045      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a69      	ldr	r2, [pc, #420]	@ (8002860 <HAL_DMA_Abort_IT+0x3b0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d040      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a68      	ldr	r2, [pc, #416]	@ (8002864 <HAL_DMA_Abort_IT+0x3b4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d03b      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a66      	ldr	r2, [pc, #408]	@ (8002868 <HAL_DMA_Abort_IT+0x3b8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d036      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a65      	ldr	r2, [pc, #404]	@ (800286c <HAL_DMA_Abort_IT+0x3bc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d031      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a63      	ldr	r2, [pc, #396]	@ (8002870 <HAL_DMA_Abort_IT+0x3c0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d02c      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a62      	ldr	r2, [pc, #392]	@ (8002874 <HAL_DMA_Abort_IT+0x3c4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d027      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a60      	ldr	r2, [pc, #384]	@ (8002878 <HAL_DMA_Abort_IT+0x3c8>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d022      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a5f      	ldr	r2, [pc, #380]	@ (800287c <HAL_DMA_Abort_IT+0x3cc>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d01d      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a5d      	ldr	r2, [pc, #372]	@ (8002880 <HAL_DMA_Abort_IT+0x3d0>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d018      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a5c      	ldr	r2, [pc, #368]	@ (8002884 <HAL_DMA_Abort_IT+0x3d4>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d013      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a5a      	ldr	r2, [pc, #360]	@ (8002888 <HAL_DMA_Abort_IT+0x3d8>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d00e      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a59      	ldr	r2, [pc, #356]	@ (800288c <HAL_DMA_Abort_IT+0x3dc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d009      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a57      	ldr	r2, [pc, #348]	@ (8002890 <HAL_DMA_Abort_IT+0x3e0>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d004      	beq.n	8002740 <HAL_DMA_Abort_IT+0x290>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a56      	ldr	r2, [pc, #344]	@ (8002894 <HAL_DMA_Abort_IT+0x3e4>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d108      	bne.n	8002752 <HAL_DMA_Abort_IT+0x2a2>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 0201 	bic.w	r2, r2, #1
 800274e:	601a      	str	r2, [r3, #0]
 8002750:	e007      	b.n	8002762 <HAL_DMA_Abort_IT+0x2b2>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a3c      	ldr	r2, [pc, #240]	@ (8002858 <HAL_DMA_Abort_IT+0x3a8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d072      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a3a      	ldr	r2, [pc, #232]	@ (800285c <HAL_DMA_Abort_IT+0x3ac>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d06d      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a39      	ldr	r2, [pc, #228]	@ (8002860 <HAL_DMA_Abort_IT+0x3b0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d068      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a37      	ldr	r2, [pc, #220]	@ (8002864 <HAL_DMA_Abort_IT+0x3b4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d063      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a36      	ldr	r2, [pc, #216]	@ (8002868 <HAL_DMA_Abort_IT+0x3b8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d05e      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a34      	ldr	r2, [pc, #208]	@ (800286c <HAL_DMA_Abort_IT+0x3bc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d059      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a33      	ldr	r2, [pc, #204]	@ (8002870 <HAL_DMA_Abort_IT+0x3c0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d054      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a31      	ldr	r2, [pc, #196]	@ (8002874 <HAL_DMA_Abort_IT+0x3c4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d04f      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a30      	ldr	r2, [pc, #192]	@ (8002878 <HAL_DMA_Abort_IT+0x3c8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04a      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a2e      	ldr	r2, [pc, #184]	@ (800287c <HAL_DMA_Abort_IT+0x3cc>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d045      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002880 <HAL_DMA_Abort_IT+0x3d0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d040      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002884 <HAL_DMA_Abort_IT+0x3d4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d03b      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a2a      	ldr	r2, [pc, #168]	@ (8002888 <HAL_DMA_Abort_IT+0x3d8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a28      	ldr	r2, [pc, #160]	@ (800288c <HAL_DMA_Abort_IT+0x3dc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d031      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a27      	ldr	r2, [pc, #156]	@ (8002890 <HAL_DMA_Abort_IT+0x3e0>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d02c      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a25      	ldr	r2, [pc, #148]	@ (8002894 <HAL_DMA_Abort_IT+0x3e4>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d027      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a24      	ldr	r2, [pc, #144]	@ (8002898 <HAL_DMA_Abort_IT+0x3e8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d022      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a22      	ldr	r2, [pc, #136]	@ (800289c <HAL_DMA_Abort_IT+0x3ec>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d01d      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a21      	ldr	r2, [pc, #132]	@ (80028a0 <HAL_DMA_Abort_IT+0x3f0>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d018      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1f      	ldr	r2, [pc, #124]	@ (80028a4 <HAL_DMA_Abort_IT+0x3f4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a1e      	ldr	r2, [pc, #120]	@ (80028a8 <HAL_DMA_Abort_IT+0x3f8>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d00e      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a1c      	ldr	r2, [pc, #112]	@ (80028ac <HAL_DMA_Abort_IT+0x3fc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d009      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a1b      	ldr	r2, [pc, #108]	@ (80028b0 <HAL_DMA_Abort_IT+0x400>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d004      	beq.n	8002852 <HAL_DMA_Abort_IT+0x3a2>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a19      	ldr	r2, [pc, #100]	@ (80028b4 <HAL_DMA_Abort_IT+0x404>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d132      	bne.n	80028b8 <HAL_DMA_Abort_IT+0x408>
 8002852:	2301      	movs	r3, #1
 8002854:	e031      	b.n	80028ba <HAL_DMA_Abort_IT+0x40a>
 8002856:	bf00      	nop
 8002858:	40020010 	.word	0x40020010
 800285c:	40020028 	.word	0x40020028
 8002860:	40020040 	.word	0x40020040
 8002864:	40020058 	.word	0x40020058
 8002868:	40020070 	.word	0x40020070
 800286c:	40020088 	.word	0x40020088
 8002870:	400200a0 	.word	0x400200a0
 8002874:	400200b8 	.word	0x400200b8
 8002878:	40020410 	.word	0x40020410
 800287c:	40020428 	.word	0x40020428
 8002880:	40020440 	.word	0x40020440
 8002884:	40020458 	.word	0x40020458
 8002888:	40020470 	.word	0x40020470
 800288c:	40020488 	.word	0x40020488
 8002890:	400204a0 	.word	0x400204a0
 8002894:	400204b8 	.word	0x400204b8
 8002898:	58025408 	.word	0x58025408
 800289c:	5802541c 	.word	0x5802541c
 80028a0:	58025430 	.word	0x58025430
 80028a4:	58025444 	.word	0x58025444
 80028a8:	58025458 	.word	0x58025458
 80028ac:	5802546c 	.word	0x5802546c
 80028b0:	58025480 	.word	0x58025480
 80028b4:	58025494 	.word	0x58025494
 80028b8:	2300      	movs	r3, #0
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d028      	beq.n	8002910 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028cc:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028d2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028d8:	f003 031f 	and.w	r3, r3, #31
 80028dc:	2201      	movs	r2, #1
 80028de:	409a      	lsls	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028ec:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00c      	beq.n	8002910 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002904:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800290e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2200      	movs	r2, #0
 800291c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002924:	2b00      	cmp	r3, #0
 8002926:	d003      	beq.n	8002930 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002948:	4b67      	ldr	r3, [pc, #412]	@ (8002ae8 <HAL_DMA_IRQHandler+0x1ac>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a67      	ldr	r2, [pc, #412]	@ (8002aec <HAL_DMA_IRQHandler+0x1b0>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002960:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a5f      	ldr	r2, [pc, #380]	@ (8002af0 <HAL_DMA_IRQHandler+0x1b4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d04a      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a5d      	ldr	r2, [pc, #372]	@ (8002af4 <HAL_DMA_IRQHandler+0x1b8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d045      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a5c      	ldr	r2, [pc, #368]	@ (8002af8 <HAL_DMA_IRQHandler+0x1bc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d040      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a5a      	ldr	r2, [pc, #360]	@ (8002afc <HAL_DMA_IRQHandler+0x1c0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d03b      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a59      	ldr	r2, [pc, #356]	@ (8002b00 <HAL_DMA_IRQHandler+0x1c4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d036      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a57      	ldr	r2, [pc, #348]	@ (8002b04 <HAL_DMA_IRQHandler+0x1c8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d031      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a56      	ldr	r2, [pc, #344]	@ (8002b08 <HAL_DMA_IRQHandler+0x1cc>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d02c      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a54      	ldr	r2, [pc, #336]	@ (8002b0c <HAL_DMA_IRQHandler+0x1d0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d027      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a53      	ldr	r2, [pc, #332]	@ (8002b10 <HAL_DMA_IRQHandler+0x1d4>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d022      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a51      	ldr	r2, [pc, #324]	@ (8002b14 <HAL_DMA_IRQHandler+0x1d8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d01d      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a50      	ldr	r2, [pc, #320]	@ (8002b18 <HAL_DMA_IRQHandler+0x1dc>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d018      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b1c <HAL_DMA_IRQHandler+0x1e0>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d013      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a4d      	ldr	r2, [pc, #308]	@ (8002b20 <HAL_DMA_IRQHandler+0x1e4>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a4b      	ldr	r2, [pc, #300]	@ (8002b24 <HAL_DMA_IRQHandler+0x1e8>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d009      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a4a      	ldr	r2, [pc, #296]	@ (8002b28 <HAL_DMA_IRQHandler+0x1ec>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_DMA_IRQHandler+0xd2>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a48      	ldr	r2, [pc, #288]	@ (8002b2c <HAL_DMA_IRQHandler+0x1f0>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d101      	bne.n	8002a12 <HAL_DMA_IRQHandler+0xd6>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e000      	b.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
 8002a12:	2300      	movs	r3, #0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 842b 	beq.w	8003270 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	2208      	movs	r2, #8
 8002a24:	409a      	lsls	r2, r3
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f000 80a2 	beq.w	8002b74 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a2e      	ldr	r2, [pc, #184]	@ (8002af0 <HAL_DMA_IRQHandler+0x1b4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d04a      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2d      	ldr	r2, [pc, #180]	@ (8002af4 <HAL_DMA_IRQHandler+0x1b8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d045      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a2b      	ldr	r2, [pc, #172]	@ (8002af8 <HAL_DMA_IRQHandler+0x1bc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d040      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a2a      	ldr	r2, [pc, #168]	@ (8002afc <HAL_DMA_IRQHandler+0x1c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d03b      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a28      	ldr	r2, [pc, #160]	@ (8002b00 <HAL_DMA_IRQHandler+0x1c4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d036      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a27      	ldr	r2, [pc, #156]	@ (8002b04 <HAL_DMA_IRQHandler+0x1c8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d031      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a25      	ldr	r2, [pc, #148]	@ (8002b08 <HAL_DMA_IRQHandler+0x1cc>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d02c      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a24      	ldr	r2, [pc, #144]	@ (8002b0c <HAL_DMA_IRQHandler+0x1d0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d027      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a22      	ldr	r2, [pc, #136]	@ (8002b10 <HAL_DMA_IRQHandler+0x1d4>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d022      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a21      	ldr	r2, [pc, #132]	@ (8002b14 <HAL_DMA_IRQHandler+0x1d8>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d01d      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1f      	ldr	r2, [pc, #124]	@ (8002b18 <HAL_DMA_IRQHandler+0x1dc>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d018      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8002b1c <HAL_DMA_IRQHandler+0x1e0>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d013      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a1c      	ldr	r2, [pc, #112]	@ (8002b20 <HAL_DMA_IRQHandler+0x1e4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d00e      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a1b      	ldr	r2, [pc, #108]	@ (8002b24 <HAL_DMA_IRQHandler+0x1e8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d009      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a19      	ldr	r2, [pc, #100]	@ (8002b28 <HAL_DMA_IRQHandler+0x1ec>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d004      	beq.n	8002ad0 <HAL_DMA_IRQHandler+0x194>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_DMA_IRQHandler+0x1f0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d12f      	bne.n	8002b30 <HAL_DMA_IRQHandler+0x1f4>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0304 	and.w	r3, r3, #4
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	bf14      	ite	ne
 8002ade:	2301      	movne	r3, #1
 8002ae0:	2300      	moveq	r3, #0
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	e02e      	b.n	8002b44 <HAL_DMA_IRQHandler+0x208>
 8002ae6:	bf00      	nop
 8002ae8:	24000000 	.word	0x24000000
 8002aec:	1b4e81b5 	.word	0x1b4e81b5
 8002af0:	40020010 	.word	0x40020010
 8002af4:	40020028 	.word	0x40020028
 8002af8:	40020040 	.word	0x40020040
 8002afc:	40020058 	.word	0x40020058
 8002b00:	40020070 	.word	0x40020070
 8002b04:	40020088 	.word	0x40020088
 8002b08:	400200a0 	.word	0x400200a0
 8002b0c:	400200b8 	.word	0x400200b8
 8002b10:	40020410 	.word	0x40020410
 8002b14:	40020428 	.word	0x40020428
 8002b18:	40020440 	.word	0x40020440
 8002b1c:	40020458 	.word	0x40020458
 8002b20:	40020470 	.word	0x40020470
 8002b24:	40020488 	.word	0x40020488
 8002b28:	400204a0 	.word	0x400204a0
 8002b2c:	400204b8 	.word	0x400204b8
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf14      	ite	ne
 8002b3e:	2301      	movne	r3, #1
 8002b40:	2300      	moveq	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d015      	beq.n	8002b74 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0204 	bic.w	r2, r2, #4
 8002b56:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	2208      	movs	r2, #8
 8002b62:	409a      	lsls	r2, r3
 8002b64:	6a3b      	ldr	r3, [r7, #32]
 8002b66:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b6c:	f043 0201 	orr.w	r2, r3, #1
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	f003 031f 	and.w	r3, r3, #31
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06e      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a69      	ldr	r2, [pc, #420]	@ (8002d34 <HAL_DMA_IRQHandler+0x3f8>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d04a      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a67      	ldr	r2, [pc, #412]	@ (8002d38 <HAL_DMA_IRQHandler+0x3fc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d045      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a66      	ldr	r2, [pc, #408]	@ (8002d3c <HAL_DMA_IRQHandler+0x400>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d040      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a64      	ldr	r2, [pc, #400]	@ (8002d40 <HAL_DMA_IRQHandler+0x404>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d03b      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a63      	ldr	r2, [pc, #396]	@ (8002d44 <HAL_DMA_IRQHandler+0x408>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d036      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a61      	ldr	r2, [pc, #388]	@ (8002d48 <HAL_DMA_IRQHandler+0x40c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d031      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a60      	ldr	r2, [pc, #384]	@ (8002d4c <HAL_DMA_IRQHandler+0x410>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d02c      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5e      	ldr	r2, [pc, #376]	@ (8002d50 <HAL_DMA_IRQHandler+0x414>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d027      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5d      	ldr	r2, [pc, #372]	@ (8002d54 <HAL_DMA_IRQHandler+0x418>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d022      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5b      	ldr	r2, [pc, #364]	@ (8002d58 <HAL_DMA_IRQHandler+0x41c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d01d      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8002d5c <HAL_DMA_IRQHandler+0x420>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d018      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a58      	ldr	r2, [pc, #352]	@ (8002d60 <HAL_DMA_IRQHandler+0x424>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d013      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a57      	ldr	r2, [pc, #348]	@ (8002d64 <HAL_DMA_IRQHandler+0x428>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00e      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a55      	ldr	r2, [pc, #340]	@ (8002d68 <HAL_DMA_IRQHandler+0x42c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d009      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a54      	ldr	r2, [pc, #336]	@ (8002d6c <HAL_DMA_IRQHandler+0x430>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d004      	beq.n	8002c2a <HAL_DMA_IRQHandler+0x2ee>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a52      	ldr	r2, [pc, #328]	@ (8002d70 <HAL_DMA_IRQHandler+0x434>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d10a      	bne.n	8002c40 <HAL_DMA_IRQHandler+0x304>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695b      	ldr	r3, [r3, #20]
 8002c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf14      	ite	ne
 8002c38:	2301      	movne	r3, #1
 8002c3a:	2300      	moveq	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e003      	b.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2300      	movs	r3, #0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00d      	beq.n	8002c68 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c50:	f003 031f 	and.w	r3, r3, #31
 8002c54:	2201      	movs	r2, #1
 8002c56:	409a      	lsls	r2, r3
 8002c58:	6a3b      	ldr	r3, [r7, #32]
 8002c5a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c60:	f043 0202 	orr.w	r2, r3, #2
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2204      	movs	r2, #4
 8002c72:	409a      	lsls	r2, r3
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	4013      	ands	r3, r2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f000 808f 	beq.w	8002d9c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a2c      	ldr	r2, [pc, #176]	@ (8002d34 <HAL_DMA_IRQHandler+0x3f8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2a      	ldr	r2, [pc, #168]	@ (8002d38 <HAL_DMA_IRQHandler+0x3fc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a29      	ldr	r2, [pc, #164]	@ (8002d3c <HAL_DMA_IRQHandler+0x400>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <HAL_DMA_IRQHandler+0x404>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <HAL_DMA_IRQHandler+0x408>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a24      	ldr	r2, [pc, #144]	@ (8002d48 <HAL_DMA_IRQHandler+0x40c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a23      	ldr	r2, [pc, #140]	@ (8002d4c <HAL_DMA_IRQHandler+0x410>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a21      	ldr	r2, [pc, #132]	@ (8002d50 <HAL_DMA_IRQHandler+0x414>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a20      	ldr	r2, [pc, #128]	@ (8002d54 <HAL_DMA_IRQHandler+0x418>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a1e      	ldr	r2, [pc, #120]	@ (8002d58 <HAL_DMA_IRQHandler+0x41c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d5c <HAL_DMA_IRQHandler+0x420>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8002d60 <HAL_DMA_IRQHandler+0x424>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1a      	ldr	r2, [pc, #104]	@ (8002d64 <HAL_DMA_IRQHandler+0x428>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a18      	ldr	r2, [pc, #96]	@ (8002d68 <HAL_DMA_IRQHandler+0x42c>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a17      	ldr	r2, [pc, #92]	@ (8002d6c <HAL_DMA_IRQHandler+0x430>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x3e2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a15      	ldr	r2, [pc, #84]	@ (8002d70 <HAL_DMA_IRQHandler+0x434>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d12a      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x438>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	bf14      	ite	ne
 8002d2c:	2301      	movne	r3, #1
 8002d2e:	2300      	moveq	r3, #0
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	e023      	b.n	8002d7c <HAL_DMA_IRQHandler+0x440>
 8002d34:	40020010 	.word	0x40020010
 8002d38:	40020028 	.word	0x40020028
 8002d3c:	40020040 	.word	0x40020040
 8002d40:	40020058 	.word	0x40020058
 8002d44:	40020070 	.word	0x40020070
 8002d48:	40020088 	.word	0x40020088
 8002d4c:	400200a0 	.word	0x400200a0
 8002d50:	400200b8 	.word	0x400200b8
 8002d54:	40020410 	.word	0x40020410
 8002d58:	40020428 	.word	0x40020428
 8002d5c:	40020440 	.word	0x40020440
 8002d60:	40020458 	.word	0x40020458
 8002d64:	40020470 	.word	0x40020470
 8002d68:	40020488 	.word	0x40020488
 8002d6c:	400204a0 	.word	0x400204a0
 8002d70:	400204b8 	.word	0x400204b8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2204      	movs	r2, #4
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f043 0204 	orr.w	r2, r3, #4
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2210      	movs	r2, #16
 8002da6:	409a      	lsls	r2, r3
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 80a6 	beq.w	8002efe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a85      	ldr	r2, [pc, #532]	@ (8002fcc <HAL_DMA_IRQHandler+0x690>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d04a      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a83      	ldr	r2, [pc, #524]	@ (8002fd0 <HAL_DMA_IRQHandler+0x694>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d045      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a82      	ldr	r2, [pc, #520]	@ (8002fd4 <HAL_DMA_IRQHandler+0x698>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d040      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a80      	ldr	r2, [pc, #512]	@ (8002fd8 <HAL_DMA_IRQHandler+0x69c>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d03b      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a7f      	ldr	r2, [pc, #508]	@ (8002fdc <HAL_DMA_IRQHandler+0x6a0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d036      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a7d      	ldr	r2, [pc, #500]	@ (8002fe0 <HAL_DMA_IRQHandler+0x6a4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d031      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe4 <HAL_DMA_IRQHandler+0x6a8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d02c      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a7a      	ldr	r2, [pc, #488]	@ (8002fe8 <HAL_DMA_IRQHandler+0x6ac>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d027      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a79      	ldr	r2, [pc, #484]	@ (8002fec <HAL_DMA_IRQHandler+0x6b0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a77      	ldr	r2, [pc, #476]	@ (8002ff0 <HAL_DMA_IRQHandler+0x6b4>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d01d      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a76      	ldr	r2, [pc, #472]	@ (8002ff4 <HAL_DMA_IRQHandler+0x6b8>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a74      	ldr	r2, [pc, #464]	@ (8002ff8 <HAL_DMA_IRQHandler+0x6bc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a73      	ldr	r2, [pc, #460]	@ (8002ffc <HAL_DMA_IRQHandler+0x6c0>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a71      	ldr	r2, [pc, #452]	@ (8003000 <HAL_DMA_IRQHandler+0x6c4>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a70      	ldr	r2, [pc, #448]	@ (8003004 <HAL_DMA_IRQHandler+0x6c8>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x516>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6e      	ldr	r2, [pc, #440]	@ (8003008 <HAL_DMA_IRQHandler+0x6cc>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d10a      	bne.n	8002e68 <HAL_DMA_IRQHandler+0x52c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0308 	and.w	r3, r3, #8
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e009      	b.n	8002e7c <HAL_DMA_IRQHandler+0x540>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0304 	and.w	r3, r3, #4
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d03e      	beq.n	8002efe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e84:	f003 031f 	and.w	r3, r3, #31
 8002e88:	2210      	movs	r2, #16
 8002e8a:	409a      	lsls	r2, r3
 8002e8c:	6a3b      	ldr	r3, [r7, #32]
 8002e8e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d018      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d108      	bne.n	8002ebe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d024      	beq.n	8002efe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	4798      	blx	r3
 8002ebc:	e01f      	b.n	8002efe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d01b      	beq.n	8002efe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	e016      	b.n	8002efe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0208 	bic.w	r2, r2, #8
 8002eec:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	f003 031f 	and.w	r3, r3, #31
 8002f06:	2220      	movs	r2, #32
 8002f08:	409a      	lsls	r2, r3
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 8110 	beq.w	8003134 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a2c      	ldr	r2, [pc, #176]	@ (8002fcc <HAL_DMA_IRQHandler+0x690>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d04a      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a2b      	ldr	r2, [pc, #172]	@ (8002fd0 <HAL_DMA_IRQHandler+0x694>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d045      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a29      	ldr	r2, [pc, #164]	@ (8002fd4 <HAL_DMA_IRQHandler+0x698>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d040      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a28      	ldr	r2, [pc, #160]	@ (8002fd8 <HAL_DMA_IRQHandler+0x69c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d03b      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a26      	ldr	r2, [pc, #152]	@ (8002fdc <HAL_DMA_IRQHandler+0x6a0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d036      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	@ (8002fe0 <HAL_DMA_IRQHandler+0x6a4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d031      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a23      	ldr	r2, [pc, #140]	@ (8002fe4 <HAL_DMA_IRQHandler+0x6a8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d02c      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a22      	ldr	r2, [pc, #136]	@ (8002fe8 <HAL_DMA_IRQHandler+0x6ac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d027      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a20      	ldr	r2, [pc, #128]	@ (8002fec <HAL_DMA_IRQHandler+0x6b0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d022      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a1f      	ldr	r2, [pc, #124]	@ (8002ff0 <HAL_DMA_IRQHandler+0x6b4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d01d      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff4 <HAL_DMA_IRQHandler+0x6b8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d018      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1c      	ldr	r2, [pc, #112]	@ (8002ff8 <HAL_DMA_IRQHandler+0x6bc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a1a      	ldr	r2, [pc, #104]	@ (8002ffc <HAL_DMA_IRQHandler+0x6c0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00e      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a19      	ldr	r2, [pc, #100]	@ (8003000 <HAL_DMA_IRQHandler+0x6c4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d009      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a17      	ldr	r2, [pc, #92]	@ (8003004 <HAL_DMA_IRQHandler+0x6c8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d004      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x678>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a16      	ldr	r2, [pc, #88]	@ (8003008 <HAL_DMA_IRQHandler+0x6cc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d12b      	bne.n	800300c <HAL_DMA_IRQHandler+0x6d0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0310 	and.w	r3, r3, #16
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf14      	ite	ne
 8002fc2:	2301      	movne	r3, #1
 8002fc4:	2300      	moveq	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	e02a      	b.n	8003020 <HAL_DMA_IRQHandler+0x6e4>
 8002fca:	bf00      	nop
 8002fcc:	40020010 	.word	0x40020010
 8002fd0:	40020028 	.word	0x40020028
 8002fd4:	40020040 	.word	0x40020040
 8002fd8:	40020058 	.word	0x40020058
 8002fdc:	40020070 	.word	0x40020070
 8002fe0:	40020088 	.word	0x40020088
 8002fe4:	400200a0 	.word	0x400200a0
 8002fe8:	400200b8 	.word	0x400200b8
 8002fec:	40020410 	.word	0x40020410
 8002ff0:	40020428 	.word	0x40020428
 8002ff4:	40020440 	.word	0x40020440
 8002ff8:	40020458 	.word	0x40020458
 8002ffc:	40020470 	.word	0x40020470
 8003000:	40020488 	.word	0x40020488
 8003004:	400204a0 	.word	0x400204a0
 8003008:	400204b8 	.word	0x400204b8
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf14      	ite	ne
 800301a:	2301      	movne	r3, #1
 800301c:	2300      	moveq	r3, #0
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 8087 	beq.w	8003134 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800302a:	f003 031f 	and.w	r3, r3, #31
 800302e:	2220      	movs	r2, #32
 8003030:	409a      	lsls	r2, r3
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b04      	cmp	r3, #4
 8003040:	d139      	bne.n	80030b6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f022 0216 	bic.w	r2, r2, #22
 8003050:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003060:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_DMA_IRQHandler+0x736>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800306e:	2b00      	cmp	r3, #0
 8003070:	d007      	beq.n	8003082 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0208 	bic.w	r2, r2, #8
 8003080:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003086:	f003 031f 	and.w	r3, r3, #31
 800308a:	223f      	movs	r2, #63	@ 0x3f
 800308c:	409a      	lsls	r2, r3
 800308e:	6a3b      	ldr	r3, [r7, #32]
 8003090:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2201      	movs	r2, #1
 8003096:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 834a 	beq.w	8003740 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	4798      	blx	r3
          }
          return;
 80030b4:	e344      	b.n	8003740 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d018      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d108      	bne.n	80030e4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d02c      	beq.n	8003134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	4798      	blx	r3
 80030e2:	e027      	b.n	8003134 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d023      	beq.n	8003134 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	4798      	blx	r3
 80030f4:	e01e      	b.n	8003134 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d10f      	bne.n	8003124 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 0210 	bic.w	r2, r2, #16
 8003112:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 8306 	beq.w	800374a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003142:	f003 0301 	and.w	r3, r3, #1
 8003146:	2b00      	cmp	r3, #0
 8003148:	f000 8088 	beq.w	800325c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2204      	movs	r2, #4
 8003150:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a7a      	ldr	r2, [pc, #488]	@ (8003344 <HAL_DMA_IRQHandler+0xa08>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d04a      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a79      	ldr	r2, [pc, #484]	@ (8003348 <HAL_DMA_IRQHandler+0xa0c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d045      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a77      	ldr	r2, [pc, #476]	@ (800334c <HAL_DMA_IRQHandler+0xa10>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d040      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a76      	ldr	r2, [pc, #472]	@ (8003350 <HAL_DMA_IRQHandler+0xa14>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d03b      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a74      	ldr	r2, [pc, #464]	@ (8003354 <HAL_DMA_IRQHandler+0xa18>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d036      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a73      	ldr	r2, [pc, #460]	@ (8003358 <HAL_DMA_IRQHandler+0xa1c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d031      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a71      	ldr	r2, [pc, #452]	@ (800335c <HAL_DMA_IRQHandler+0xa20>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d02c      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a70      	ldr	r2, [pc, #448]	@ (8003360 <HAL_DMA_IRQHandler+0xa24>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d027      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a6e      	ldr	r2, [pc, #440]	@ (8003364 <HAL_DMA_IRQHandler+0xa28>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d022      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a6d      	ldr	r2, [pc, #436]	@ (8003368 <HAL_DMA_IRQHandler+0xa2c>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d01d      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a6b      	ldr	r2, [pc, #428]	@ (800336c <HAL_DMA_IRQHandler+0xa30>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d018      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a6a      	ldr	r2, [pc, #424]	@ (8003370 <HAL_DMA_IRQHandler+0xa34>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a68      	ldr	r2, [pc, #416]	@ (8003374 <HAL_DMA_IRQHandler+0xa38>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d00e      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a67      	ldr	r2, [pc, #412]	@ (8003378 <HAL_DMA_IRQHandler+0xa3c>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d009      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a65      	ldr	r2, [pc, #404]	@ (800337c <HAL_DMA_IRQHandler+0xa40>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <HAL_DMA_IRQHandler+0x8b8>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a64      	ldr	r2, [pc, #400]	@ (8003380 <HAL_DMA_IRQHandler+0xa44>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d108      	bne.n	8003206 <HAL_DMA_IRQHandler+0x8ca>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0201 	bic.w	r2, r2, #1
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	e007      	b.n	8003216 <HAL_DMA_IRQHandler+0x8da>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f022 0201 	bic.w	r2, r2, #1
 8003214:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	3301      	adds	r3, #1
 800321a:	60fb      	str	r3, [r7, #12]
 800321c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321e:	429a      	cmp	r2, r3
 8003220:	d307      	bcc.n	8003232 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f2      	bne.n	8003216 <HAL_DMA_IRQHandler+0x8da>
 8003230:	e000      	b.n	8003234 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003232:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0301 	and.w	r3, r3, #1
 800323e:	2b00      	cmp	r3, #0
 8003240:	d004      	beq.n	800324c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2203      	movs	r2, #3
 8003246:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800324a:	e003      	b.n	8003254 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 8272 	beq.w	800374a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800326a:	6878      	ldr	r0, [r7, #4]
 800326c:	4798      	blx	r3
 800326e:	e26c      	b.n	800374a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a43      	ldr	r2, [pc, #268]	@ (8003384 <HAL_DMA_IRQHandler+0xa48>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d022      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a42      	ldr	r2, [pc, #264]	@ (8003388 <HAL_DMA_IRQHandler+0xa4c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d01d      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a40      	ldr	r2, [pc, #256]	@ (800338c <HAL_DMA_IRQHandler+0xa50>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d018      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a3f      	ldr	r2, [pc, #252]	@ (8003390 <HAL_DMA_IRQHandler+0xa54>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d013      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a3d      	ldr	r2, [pc, #244]	@ (8003394 <HAL_DMA_IRQHandler+0xa58>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d00e      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a3c      	ldr	r2, [pc, #240]	@ (8003398 <HAL_DMA_IRQHandler+0xa5c>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d009      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3a      	ldr	r2, [pc, #232]	@ (800339c <HAL_DMA_IRQHandler+0xa60>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_DMA_IRQHandler+0x984>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a39      	ldr	r2, [pc, #228]	@ (80033a0 <HAL_DMA_IRQHandler+0xa64>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_DMA_IRQHandler+0x988>
 80032c0:	2301      	movs	r3, #1
 80032c2:	e000      	b.n	80032c6 <HAL_DMA_IRQHandler+0x98a>
 80032c4:	2300      	movs	r3, #0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f000 823f 	beq.w	800374a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	2204      	movs	r2, #4
 80032de:	409a      	lsls	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80cd 	beq.w	8003484 <HAL_DMA_IRQHandler+0xb48>
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	f003 0304 	and.w	r3, r3, #4
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 80c7 	beq.w	8003484 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032fa:	f003 031f 	and.w	r3, r3, #31
 80032fe:	2204      	movs	r2, #4
 8003300:	409a      	lsls	r2, r3
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d049      	beq.n	80033a4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d109      	bne.n	800332e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800331e:	2b00      	cmp	r3, #0
 8003320:	f000 8210 	beq.w	8003744 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800332c:	e20a      	b.n	8003744 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8206 	beq.w	8003744 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003340:	e200      	b.n	8003744 <HAL_DMA_IRQHandler+0xe08>
 8003342:	bf00      	nop
 8003344:	40020010 	.word	0x40020010
 8003348:	40020028 	.word	0x40020028
 800334c:	40020040 	.word	0x40020040
 8003350:	40020058 	.word	0x40020058
 8003354:	40020070 	.word	0x40020070
 8003358:	40020088 	.word	0x40020088
 800335c:	400200a0 	.word	0x400200a0
 8003360:	400200b8 	.word	0x400200b8
 8003364:	40020410 	.word	0x40020410
 8003368:	40020428 	.word	0x40020428
 800336c:	40020440 	.word	0x40020440
 8003370:	40020458 	.word	0x40020458
 8003374:	40020470 	.word	0x40020470
 8003378:	40020488 	.word	0x40020488
 800337c:	400204a0 	.word	0x400204a0
 8003380:	400204b8 	.word	0x400204b8
 8003384:	58025408 	.word	0x58025408
 8003388:	5802541c 	.word	0x5802541c
 800338c:	58025430 	.word	0x58025430
 8003390:	58025444 	.word	0x58025444
 8003394:	58025458 	.word	0x58025458
 8003398:	5802546c 	.word	0x5802546c
 800339c:	58025480 	.word	0x58025480
 80033a0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f003 0320 	and.w	r3, r3, #32
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d160      	bne.n	8003470 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7f      	ldr	r2, [pc, #508]	@ (80035b0 <HAL_DMA_IRQHandler+0xc74>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d04a      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a7d      	ldr	r2, [pc, #500]	@ (80035b4 <HAL_DMA_IRQHandler+0xc78>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d045      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a7c      	ldr	r2, [pc, #496]	@ (80035b8 <HAL_DMA_IRQHandler+0xc7c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d040      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a7a      	ldr	r2, [pc, #488]	@ (80035bc <HAL_DMA_IRQHandler+0xc80>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d03b      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a79      	ldr	r2, [pc, #484]	@ (80035c0 <HAL_DMA_IRQHandler+0xc84>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d036      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a77      	ldr	r2, [pc, #476]	@ (80035c4 <HAL_DMA_IRQHandler+0xc88>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d031      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a76      	ldr	r2, [pc, #472]	@ (80035c8 <HAL_DMA_IRQHandler+0xc8c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d02c      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a74      	ldr	r2, [pc, #464]	@ (80035cc <HAL_DMA_IRQHandler+0xc90>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d027      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a73      	ldr	r2, [pc, #460]	@ (80035d0 <HAL_DMA_IRQHandler+0xc94>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d022      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a71      	ldr	r2, [pc, #452]	@ (80035d4 <HAL_DMA_IRQHandler+0xc98>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d01d      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a70      	ldr	r2, [pc, #448]	@ (80035d8 <HAL_DMA_IRQHandler+0xc9c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d018      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a6e      	ldr	r2, [pc, #440]	@ (80035dc <HAL_DMA_IRQHandler+0xca0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a6d      	ldr	r2, [pc, #436]	@ (80035e0 <HAL_DMA_IRQHandler+0xca4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d00e      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a6b      	ldr	r2, [pc, #428]	@ (80035e4 <HAL_DMA_IRQHandler+0xca8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a6a      	ldr	r2, [pc, #424]	@ (80035e8 <HAL_DMA_IRQHandler+0xcac>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_DMA_IRQHandler+0xb12>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a68      	ldr	r2, [pc, #416]	@ (80035ec <HAL_DMA_IRQHandler+0xcb0>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <HAL_DMA_IRQHandler+0xb24>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 0208 	bic.w	r2, r2, #8
 800345c:	601a      	str	r2, [r3, #0]
 800345e:	e007      	b.n	8003470 <HAL_DMA_IRQHandler+0xb34>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f022 0204 	bic.w	r2, r2, #4
 800346e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003474:	2b00      	cmp	r3, #0
 8003476:	f000 8165 	beq.w	8003744 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003482:	e15f      	b.n	8003744 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003488:	f003 031f 	and.w	r3, r3, #31
 800348c:	2202      	movs	r2, #2
 800348e:	409a      	lsls	r2, r3
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	4013      	ands	r3, r2
 8003494:	2b00      	cmp	r3, #0
 8003496:	f000 80c5 	beq.w	8003624 <HAL_DMA_IRQHandler+0xce8>
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	f000 80bf 	beq.w	8003624 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2202      	movs	r2, #2
 80034b0:	409a      	lsls	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d018      	beq.n	80034f2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d109      	bne.n	80034de <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 813a 	beq.w	8003748 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034dc:	e134      	b.n	8003748 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f000 8130 	beq.w	8003748 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034f0:	e12a      	b.n	8003748 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	f003 0320 	and.w	r3, r3, #32
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 8089 	bne.w	8003610 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a2b      	ldr	r2, [pc, #172]	@ (80035b0 <HAL_DMA_IRQHandler+0xc74>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d04a      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a29      	ldr	r2, [pc, #164]	@ (80035b4 <HAL_DMA_IRQHandler+0xc78>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d045      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a28      	ldr	r2, [pc, #160]	@ (80035b8 <HAL_DMA_IRQHandler+0xc7c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d040      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a26      	ldr	r2, [pc, #152]	@ (80035bc <HAL_DMA_IRQHandler+0xc80>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d03b      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a25      	ldr	r2, [pc, #148]	@ (80035c0 <HAL_DMA_IRQHandler+0xc84>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d036      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a23      	ldr	r2, [pc, #140]	@ (80035c4 <HAL_DMA_IRQHandler+0xc88>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d031      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a22      	ldr	r2, [pc, #136]	@ (80035c8 <HAL_DMA_IRQHandler+0xc8c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d02c      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a20      	ldr	r2, [pc, #128]	@ (80035cc <HAL_DMA_IRQHandler+0xc90>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d027      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a1f      	ldr	r2, [pc, #124]	@ (80035d0 <HAL_DMA_IRQHandler+0xc94>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d022      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a1d      	ldr	r2, [pc, #116]	@ (80035d4 <HAL_DMA_IRQHandler+0xc98>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d01d      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1c      	ldr	r2, [pc, #112]	@ (80035d8 <HAL_DMA_IRQHandler+0xc9c>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d018      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a1a      	ldr	r2, [pc, #104]	@ (80035dc <HAL_DMA_IRQHandler+0xca0>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d013      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a19      	ldr	r2, [pc, #100]	@ (80035e0 <HAL_DMA_IRQHandler+0xca4>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d00e      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a17      	ldr	r2, [pc, #92]	@ (80035e4 <HAL_DMA_IRQHandler+0xca8>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d009      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a16      	ldr	r2, [pc, #88]	@ (80035e8 <HAL_DMA_IRQHandler+0xcac>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d004      	beq.n	800359e <HAL_DMA_IRQHandler+0xc62>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a14      	ldr	r2, [pc, #80]	@ (80035ec <HAL_DMA_IRQHandler+0xcb0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d128      	bne.n	80035f0 <HAL_DMA_IRQHandler+0xcb4>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0214 	bic.w	r2, r2, #20
 80035ac:	601a      	str	r2, [r3, #0]
 80035ae:	e027      	b.n	8003600 <HAL_DMA_IRQHandler+0xcc4>
 80035b0:	40020010 	.word	0x40020010
 80035b4:	40020028 	.word	0x40020028
 80035b8:	40020040 	.word	0x40020040
 80035bc:	40020058 	.word	0x40020058
 80035c0:	40020070 	.word	0x40020070
 80035c4:	40020088 	.word	0x40020088
 80035c8:	400200a0 	.word	0x400200a0
 80035cc:	400200b8 	.word	0x400200b8
 80035d0:	40020410 	.word	0x40020410
 80035d4:	40020428 	.word	0x40020428
 80035d8:	40020440 	.word	0x40020440
 80035dc:	40020458 	.word	0x40020458
 80035e0:	40020470 	.word	0x40020470
 80035e4:	40020488 	.word	0x40020488
 80035e8:	400204a0 	.word	0x400204a0
 80035ec:	400204b8 	.word	0x400204b8
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 020a 	bic.w	r2, r2, #10
 80035fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 8097 	beq.w	8003748 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003622:	e091      	b.n	8003748 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003628:	f003 031f 	and.w	r3, r3, #31
 800362c:	2208      	movs	r2, #8
 800362e:	409a      	lsls	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	4013      	ands	r3, r2
 8003634:	2b00      	cmp	r3, #0
 8003636:	f000 8088 	beq.w	800374a <HAL_DMA_IRQHandler+0xe0e>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0308 	and.w	r3, r3, #8
 8003640:	2b00      	cmp	r3, #0
 8003642:	f000 8082 	beq.w	800374a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a41      	ldr	r2, [pc, #260]	@ (8003750 <HAL_DMA_IRQHandler+0xe14>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d04a      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_DMA_IRQHandler+0xe18>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d045      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a3e      	ldr	r2, [pc, #248]	@ (8003758 <HAL_DMA_IRQHandler+0xe1c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d040      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a3c      	ldr	r2, [pc, #240]	@ (800375c <HAL_DMA_IRQHandler+0xe20>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d03b      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a3b      	ldr	r2, [pc, #236]	@ (8003760 <HAL_DMA_IRQHandler+0xe24>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d036      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a39      	ldr	r2, [pc, #228]	@ (8003764 <HAL_DMA_IRQHandler+0xe28>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d031      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a38      	ldr	r2, [pc, #224]	@ (8003768 <HAL_DMA_IRQHandler+0xe2c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d02c      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a36      	ldr	r2, [pc, #216]	@ (800376c <HAL_DMA_IRQHandler+0xe30>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d027      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a35      	ldr	r2, [pc, #212]	@ (8003770 <HAL_DMA_IRQHandler+0xe34>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d022      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a33      	ldr	r2, [pc, #204]	@ (8003774 <HAL_DMA_IRQHandler+0xe38>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01d      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a32      	ldr	r2, [pc, #200]	@ (8003778 <HAL_DMA_IRQHandler+0xe3c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d018      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a30      	ldr	r2, [pc, #192]	@ (800377c <HAL_DMA_IRQHandler+0xe40>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d013      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a2f      	ldr	r2, [pc, #188]	@ (8003780 <HAL_DMA_IRQHandler+0xe44>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00e      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a2d      	ldr	r2, [pc, #180]	@ (8003784 <HAL_DMA_IRQHandler+0xe48>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d009      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003788 <HAL_DMA_IRQHandler+0xe4c>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_DMA_IRQHandler+0xdaa>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a2a      	ldr	r2, [pc, #168]	@ (800378c <HAL_DMA_IRQHandler+0xe50>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d108      	bne.n	80036f8 <HAL_DMA_IRQHandler+0xdbc>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 021c 	bic.w	r2, r2, #28
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e007      	b.n	8003708 <HAL_DMA_IRQHandler+0xdcc>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	681a      	ldr	r2, [r3, #0]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 020e 	bic.w	r2, r2, #14
 8003706:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800370c:	f003 031f 	and.w	r3, r3, #31
 8003710:	2201      	movs	r2, #1
 8003712:	409a      	lsls	r2, r3
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	4798      	blx	r3
 800373e:	e004      	b.n	800374a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003740:	bf00      	nop
 8003742:	e002      	b.n	800374a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003744:	bf00      	nop
 8003746:	e000      	b.n	800374a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003748:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800374a:	3728      	adds	r7, #40	@ 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40020010 	.word	0x40020010
 8003754:	40020028 	.word	0x40020028
 8003758:	40020040 	.word	0x40020040
 800375c:	40020058 	.word	0x40020058
 8003760:	40020070 	.word	0x40020070
 8003764:	40020088 	.word	0x40020088
 8003768:	400200a0 	.word	0x400200a0
 800376c:	400200b8 	.word	0x400200b8
 8003770:	40020410 	.word	0x40020410
 8003774:	40020428 	.word	0x40020428
 8003778:	40020440 	.word	0x40020440
 800377c:	40020458 	.word	0x40020458
 8003780:	40020470 	.word	0x40020470
 8003784:	40020488 	.word	0x40020488
 8003788:	400204a0 	.word	0x400204a0
 800378c:	400204b8 	.word	0x400204b8

08003790 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a42      	ldr	r2, [pc, #264]	@ (80038a8 <DMA_CalcBaseAndBitshift+0x118>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d04a      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a41      	ldr	r2, [pc, #260]	@ (80038ac <DMA_CalcBaseAndBitshift+0x11c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d045      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a3f      	ldr	r2, [pc, #252]	@ (80038b0 <DMA_CalcBaseAndBitshift+0x120>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d040      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3e      	ldr	r2, [pc, #248]	@ (80038b4 <DMA_CalcBaseAndBitshift+0x124>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d03b      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a3c      	ldr	r2, [pc, #240]	@ (80038b8 <DMA_CalcBaseAndBitshift+0x128>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d036      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a3b      	ldr	r2, [pc, #236]	@ (80038bc <DMA_CalcBaseAndBitshift+0x12c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d031      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a39      	ldr	r2, [pc, #228]	@ (80038c0 <DMA_CalcBaseAndBitshift+0x130>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d02c      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a38      	ldr	r2, [pc, #224]	@ (80038c4 <DMA_CalcBaseAndBitshift+0x134>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d027      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a36      	ldr	r2, [pc, #216]	@ (80038c8 <DMA_CalcBaseAndBitshift+0x138>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d022      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a35      	ldr	r2, [pc, #212]	@ (80038cc <DMA_CalcBaseAndBitshift+0x13c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d01d      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a33      	ldr	r2, [pc, #204]	@ (80038d0 <DMA_CalcBaseAndBitshift+0x140>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d018      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a32      	ldr	r2, [pc, #200]	@ (80038d4 <DMA_CalcBaseAndBitshift+0x144>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d013      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a30      	ldr	r2, [pc, #192]	@ (80038d8 <DMA_CalcBaseAndBitshift+0x148>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00e      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a2f      	ldr	r2, [pc, #188]	@ (80038dc <DMA_CalcBaseAndBitshift+0x14c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d009      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2d      	ldr	r2, [pc, #180]	@ (80038e0 <DMA_CalcBaseAndBitshift+0x150>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <DMA_CalcBaseAndBitshift+0xa8>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2c      	ldr	r2, [pc, #176]	@ (80038e4 <DMA_CalcBaseAndBitshift+0x154>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <DMA_CalcBaseAndBitshift+0xac>
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <DMA_CalcBaseAndBitshift+0xae>
 800383c:	2300      	movs	r3, #0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d024      	beq.n	800388c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	b2db      	uxtb	r3, r3
 8003848:	3b10      	subs	r3, #16
 800384a:	4a27      	ldr	r2, [pc, #156]	@ (80038e8 <DMA_CalcBaseAndBitshift+0x158>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	091b      	lsrs	r3, r3, #4
 8003852:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	4a24      	ldr	r2, [pc, #144]	@ (80038ec <DMA_CalcBaseAndBitshift+0x15c>)
 800385c:	5cd3      	ldrb	r3, [r2, r3]
 800385e:	461a      	mov	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d908      	bls.n	800387c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	4b1f      	ldr	r3, [pc, #124]	@ (80038f0 <DMA_CalcBaseAndBitshift+0x160>)
 8003872:	4013      	ands	r3, r2
 8003874:	1d1a      	adds	r2, r3, #4
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	659a      	str	r2, [r3, #88]	@ 0x58
 800387a:	e00d      	b.n	8003898 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	4b1b      	ldr	r3, [pc, #108]	@ (80038f0 <DMA_CalcBaseAndBitshift+0x160>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6593      	str	r3, [r2, #88]	@ 0x58
 800388a:	e005      	b.n	8003898 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	40020010 	.word	0x40020010
 80038ac:	40020028 	.word	0x40020028
 80038b0:	40020040 	.word	0x40020040
 80038b4:	40020058 	.word	0x40020058
 80038b8:	40020070 	.word	0x40020070
 80038bc:	40020088 	.word	0x40020088
 80038c0:	400200a0 	.word	0x400200a0
 80038c4:	400200b8 	.word	0x400200b8
 80038c8:	40020410 	.word	0x40020410
 80038cc:	40020428 	.word	0x40020428
 80038d0:	40020440 	.word	0x40020440
 80038d4:	40020458 	.word	0x40020458
 80038d8:	40020470 	.word	0x40020470
 80038dc:	40020488 	.word	0x40020488
 80038e0:	400204a0 	.word	0x400204a0
 80038e4:	400204b8 	.word	0x400204b8
 80038e8:	aaaaaaab 	.word	0xaaaaaaab
 80038ec:	0800887c 	.word	0x0800887c
 80038f0:	fffffc00 	.word	0xfffffc00

080038f4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 80038f4:	b480      	push	{r7}
 80038f6:	b085      	sub	sp, #20
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d120      	bne.n	800394a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390c:	2b03      	cmp	r3, #3
 800390e:	d858      	bhi.n	80039c2 <DMA_CheckFifoParam+0xce>
 8003910:	a201      	add	r2, pc, #4	@ (adr r2, 8003918 <DMA_CheckFifoParam+0x24>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003929 	.word	0x08003929
 800391c:	0800393b 	.word	0x0800393b
 8003920:	08003929 	.word	0x08003929
 8003924:	080039c3 	.word	0x080039c3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d048      	beq.n	80039c6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003938:	e045      	b.n	80039c6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003942:	d142      	bne.n	80039ca <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003948:	e03f      	b.n	80039ca <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003952:	d123      	bne.n	800399c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	2b03      	cmp	r3, #3
 800395a:	d838      	bhi.n	80039ce <DMA_CheckFifoParam+0xda>
 800395c:	a201      	add	r2, pc, #4	@ (adr r2, 8003964 <DMA_CheckFifoParam+0x70>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003975 	.word	0x08003975
 8003968:	0800397b 	.word	0x0800397b
 800396c:	08003975 	.word	0x08003975
 8003970:	0800398d 	.word	0x0800398d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	73fb      	strb	r3, [r7, #15]
        break;
 8003978:	e030      	b.n	80039dc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800397e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d025      	beq.n	80039d2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800398a:	e022      	b.n	80039d2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003990:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003994:	d11f      	bne.n	80039d6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800399a:	e01c      	b.n	80039d6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d902      	bls.n	80039aa <DMA_CheckFifoParam+0xb6>
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d003      	beq.n	80039b0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80039a8:	e018      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	73fb      	strb	r3, [r7, #15]
        break;
 80039ae:	e015      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00e      	beq.n	80039da <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
    break;
 80039c0:	e00b      	b.n	80039da <DMA_CheckFifoParam+0xe6>
        break;
 80039c2:	bf00      	nop
 80039c4:	e00a      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        break;
 80039c6:	bf00      	nop
 80039c8:	e008      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        break;
 80039ca:	bf00      	nop
 80039cc:	e006      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        break;
 80039ce:	bf00      	nop
 80039d0:	e004      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        break;
 80039d2:	bf00      	nop
 80039d4:	e002      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
        break;
 80039d6:	bf00      	nop
 80039d8:	e000      	b.n	80039dc <DMA_CheckFifoParam+0xe8>
    break;
 80039da:	bf00      	nop
    }
  }

  return status;
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3714      	adds	r7, #20
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr
 80039ea:	bf00      	nop

080039ec <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a38      	ldr	r2, [pc, #224]	@ (8003ae0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d022      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a36      	ldr	r2, [pc, #216]	@ (8003ae4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d01d      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a35      	ldr	r2, [pc, #212]	@ (8003ae8 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d018      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a33      	ldr	r2, [pc, #204]	@ (8003aec <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d013      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a32      	ldr	r2, [pc, #200]	@ (8003af0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d00e      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a30      	ldr	r2, [pc, #192]	@ (8003af4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d009      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a2f      	ldr	r2, [pc, #188]	@ (8003af8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d004      	beq.n	8003a4a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a2d      	ldr	r2, [pc, #180]	@ (8003afc <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e000      	b.n	8003a50 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01a      	beq.n	8003a8a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	3b08      	subs	r3, #8
 8003a5c:	4a28      	ldr	r2, [pc, #160]	@ (8003b00 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	091b      	lsrs	r3, r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	4b26      	ldr	r3, [pc, #152]	@ (8003b04 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a6a:	4413      	add	r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	461a      	mov	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	4a24      	ldr	r2, [pc, #144]	@ (8003b08 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a78:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	f003 031f 	and.w	r3, r3, #31
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a88:	e024      	b.n	8003ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	3b10      	subs	r3, #16
 8003a92:	4a1e      	ldr	r2, [pc, #120]	@ (8003b0c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a94:	fba2 2303 	umull	r2, r3, r2, r3
 8003a98:	091b      	lsrs	r3, r3, #4
 8003a9a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	@ (8003b10 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d806      	bhi.n	8003ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4a1b      	ldr	r2, [pc, #108]	@ (8003b14 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d902      	bls.n	8003ab2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003ab6:	4413      	add	r3, r2
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	461a      	mov	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a16      	ldr	r2, [pc, #88]	@ (8003b1c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003ac4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	2201      	movs	r2, #1
 8003ace:	409a      	lsls	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	58025408 	.word	0x58025408
 8003ae4:	5802541c 	.word	0x5802541c
 8003ae8:	58025430 	.word	0x58025430
 8003aec:	58025444 	.word	0x58025444
 8003af0:	58025458 	.word	0x58025458
 8003af4:	5802546c 	.word	0x5802546c
 8003af8:	58025480 	.word	0x58025480
 8003afc:	58025494 	.word	0x58025494
 8003b00:	cccccccd 	.word	0xcccccccd
 8003b04:	16009600 	.word	0x16009600
 8003b08:	58025880 	.word	0x58025880
 8003b0c:	aaaaaaab 	.word	0xaaaaaaab
 8003b10:	400204b8 	.word	0x400204b8
 8003b14:	4002040f 	.word	0x4002040f
 8003b18:	10008200 	.word	0x10008200
 8003b1c:	40020880 	.word	0x40020880

08003b20 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d04a      	beq.n	8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d847      	bhi.n	8003bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a25      	ldr	r2, [pc, #148]	@ (8003bd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d022      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a24      	ldr	r2, [pc, #144]	@ (8003bdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d01d      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a22      	ldr	r2, [pc, #136]	@ (8003be0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d018      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a21      	ldr	r2, [pc, #132]	@ (8003be4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d013      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a1f      	ldr	r2, [pc, #124]	@ (8003be8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d00e      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a1e      	ldr	r2, [pc, #120]	@ (8003bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d009      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d004      	beq.n	8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a1b      	ldr	r2, [pc, #108]	@ (8003bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d101      	bne.n	8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b90:	2300      	movs	r3, #0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d00a      	beq.n	8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4b17      	ldr	r3, [pc, #92]	@ (8003bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a15      	ldr	r2, [pc, #84]	@ (8003bfc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003ba8:	671a      	str	r2, [r3, #112]	@ 0x70
 8003baa:	e009      	b.n	8003bc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a11      	ldr	r2, [pc, #68]	@ (8003c04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003bbe:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	409a      	lsls	r2, r3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8003bcc:	bf00      	nop
 8003bce:	3714      	adds	r7, #20
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr
 8003bd8:	58025408 	.word	0x58025408
 8003bdc:	5802541c 	.word	0x5802541c
 8003be0:	58025430 	.word	0x58025430
 8003be4:	58025444 	.word	0x58025444
 8003be8:	58025458 	.word	0x58025458
 8003bec:	5802546c 	.word	0x5802546c
 8003bf0:	58025480 	.word	0x58025480
 8003bf4:	58025494 	.word	0x58025494
 8003bf8:	1600963f 	.word	0x1600963f
 8003bfc:	58025940 	.word	0x58025940
 8003c00:	1000823f 	.word	0x1000823f
 8003c04:	40020940 	.word	0x40020940

08003c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b089      	sub	sp, #36	@ 0x24
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003c16:	4b89      	ldr	r3, [pc, #548]	@ (8003e3c <HAL_GPIO_Init+0x234>)
 8003c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003c1a:	e194      	b.n	8003f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	2101      	movs	r1, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa01 f303 	lsl.w	r3, r1, r3
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f000 8186 	beq.w	8003f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d005      	beq.n	8003c4c <HAL_GPIO_Init+0x44>
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0303 	and.w	r3, r3, #3
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d130      	bne.n	8003cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	005b      	lsls	r3, r3, #1
 8003c56:	2203      	movs	r2, #3
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c82:	2201      	movs	r2, #1
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	43db      	mvns	r3, r3
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	4013      	ands	r3, r2
 8003c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	091b      	lsrs	r3, r3, #4
 8003c98:	f003 0201 	and.w	r2, r3, #1
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca2:	69ba      	ldr	r2, [r7, #24]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69ba      	ldr	r2, [r7, #24]
 8003cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	d017      	beq.n	8003cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	005b      	lsls	r3, r3, #1
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	69ba      	ldr	r2, [r7, #24]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	fa02 f303 	lsl.w	r3, r2, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d123      	bne.n	8003d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	08da      	lsrs	r2, r3, #3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	3208      	adds	r2, #8
 8003cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	08da      	lsrs	r2, r3, #3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	3208      	adds	r2, #8
 8003d38:	69b9      	ldr	r1, [r7, #24]
 8003d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d44:	69fb      	ldr	r3, [r7, #28]
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	2203      	movs	r2, #3
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f003 0203 	and.w	r2, r3, #3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	005b      	lsls	r3, r3, #1
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	f000 80e0 	beq.w	8003f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d80:	4b2f      	ldr	r3, [pc, #188]	@ (8003e40 <HAL_GPIO_Init+0x238>)
 8003d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d86:	4a2e      	ldr	r2, [pc, #184]	@ (8003e40 <HAL_GPIO_Init+0x238>)
 8003d88:	f043 0302 	orr.w	r3, r3, #2
 8003d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8003d90:	4b2b      	ldr	r3, [pc, #172]	@ (8003e40 <HAL_GPIO_Init+0x238>)
 8003d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	60fb      	str	r3, [r7, #12]
 8003d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d9e:	4a29      	ldr	r2, [pc, #164]	@ (8003e44 <HAL_GPIO_Init+0x23c>)
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	089b      	lsrs	r3, r3, #2
 8003da4:	3302      	adds	r3, #2
 8003da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	220f      	movs	r2, #15
 8003db6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dba:	43db      	mvns	r3, r3
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a20      	ldr	r2, [pc, #128]	@ (8003e48 <HAL_GPIO_Init+0x240>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d052      	beq.n	8003e70 <HAL_GPIO_Init+0x268>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8003e4c <HAL_GPIO_Init+0x244>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d031      	beq.n	8003e36 <HAL_GPIO_Init+0x22e>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8003e50 <HAL_GPIO_Init+0x248>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d02b      	beq.n	8003e32 <HAL_GPIO_Init+0x22a>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8003e54 <HAL_GPIO_Init+0x24c>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d025      	beq.n	8003e2e <HAL_GPIO_Init+0x226>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <HAL_GPIO_Init+0x250>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d01f      	beq.n	8003e2a <HAL_GPIO_Init+0x222>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a1b      	ldr	r2, [pc, #108]	@ (8003e5c <HAL_GPIO_Init+0x254>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d019      	beq.n	8003e26 <HAL_GPIO_Init+0x21e>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <HAL_GPIO_Init+0x258>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d013      	beq.n	8003e22 <HAL_GPIO_Init+0x21a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a19      	ldr	r2, [pc, #100]	@ (8003e64 <HAL_GPIO_Init+0x25c>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d00d      	beq.n	8003e1e <HAL_GPIO_Init+0x216>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	4a18      	ldr	r2, [pc, #96]	@ (8003e68 <HAL_GPIO_Init+0x260>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d007      	beq.n	8003e1a <HAL_GPIO_Init+0x212>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4a17      	ldr	r2, [pc, #92]	@ (8003e6c <HAL_GPIO_Init+0x264>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d101      	bne.n	8003e16 <HAL_GPIO_Init+0x20e>
 8003e12:	2309      	movs	r3, #9
 8003e14:	e02d      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e16:	230a      	movs	r3, #10
 8003e18:	e02b      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e1a:	2308      	movs	r3, #8
 8003e1c:	e029      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e1e:	2307      	movs	r3, #7
 8003e20:	e027      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e22:	2306      	movs	r3, #6
 8003e24:	e025      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e26:	2305      	movs	r3, #5
 8003e28:	e023      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e2a:	2304      	movs	r3, #4
 8003e2c:	e021      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e01f      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e32:	2302      	movs	r3, #2
 8003e34:	e01d      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e01b      	b.n	8003e72 <HAL_GPIO_Init+0x26a>
 8003e3a:	bf00      	nop
 8003e3c:	58000080 	.word	0x58000080
 8003e40:	58024400 	.word	0x58024400
 8003e44:	58000400 	.word	0x58000400
 8003e48:	58020000 	.word	0x58020000
 8003e4c:	58020400 	.word	0x58020400
 8003e50:	58020800 	.word	0x58020800
 8003e54:	58020c00 	.word	0x58020c00
 8003e58:	58021000 	.word	0x58021000
 8003e5c:	58021400 	.word	0x58021400
 8003e60:	58021800 	.word	0x58021800
 8003e64:	58021c00 	.word	0x58021c00
 8003e68:	58022000 	.word	0x58022000
 8003e6c:	58022400 	.word	0x58022400
 8003e70:	2300      	movs	r3, #0
 8003e72:	69fa      	ldr	r2, [r7, #28]
 8003e74:	f002 0203 	and.w	r2, r2, #3
 8003e78:	0092      	lsls	r2, r2, #2
 8003e7a:	4093      	lsls	r3, r2
 8003e7c:	69ba      	ldr	r2, [r7, #24]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e82:	4938      	ldr	r1, [pc, #224]	@ (8003f64 <HAL_GPIO_Init+0x35c>)
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	43db      	mvns	r3, r3
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	43db      	mvns	r3, r3
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	43db      	mvns	r3, r3
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	4013      	ands	r3, r2
 8003efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	43db      	mvns	r3, r3
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	4013      	ands	r3, r2
 8003f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	3301      	adds	r3, #1
 8003f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	f47f ae63 	bne.w	8003c1c <HAL_GPIO_Init+0x14>
  }
}
 8003f56:	bf00      	nop
 8003f58:	bf00      	nop
 8003f5a:	3724      	adds	r7, #36	@ 0x24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	58000400 	.word	0x58000400

08003f68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	807b      	strh	r3, [r7, #2]
 8003f74:	4613      	mov	r3, r2
 8003f76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f78:	787b      	ldrb	r3, [r7, #1]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f7e:	887a      	ldrh	r2, [r7, #2]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003f84:	e003      	b.n	8003f8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003f86:	887b      	ldrh	r3, [r7, #2]
 8003f88:	041a      	lsls	r2, r3, #16
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	619a      	str	r2, [r3, #24]
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b082      	sub	sp, #8
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8003fa4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8003fa8:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	4013      	ands	r3, r2
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d008      	beq.n	8003fc6 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fb4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8003fb8:	88fb      	ldrh	r3, [r7, #6]
 8003fba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fbe:	88fb      	ldrh	r3, [r7, #6]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fc fbf4 	bl	80007ae <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8003fd8:	4b19      	ldr	r3, [pc, #100]	@ (8004040 <HAL_PWREx_ConfigSupply+0x70>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b04      	cmp	r3, #4
 8003fe2:	d00a      	beq.n	8003ffa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8003fe4:	4b16      	ldr	r3, [pc, #88]	@ (8004040 <HAL_PWREx_ConfigSupply+0x70>)
 8003fe6:	68db      	ldr	r3, [r3, #12]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d001      	beq.n	8003ff6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e01f      	b.n	8004036 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	e01d      	b.n	8004036 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8003ffa:	4b11      	ldr	r3, [pc, #68]	@ (8004040 <HAL_PWREx_ConfigSupply+0x70>)
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f023 0207 	bic.w	r2, r3, #7
 8004002:	490f      	ldr	r1, [pc, #60]	@ (8004040 <HAL_PWREx_ConfigSupply+0x70>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4313      	orrs	r3, r2
 8004008:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800400a:	f7fd f881 	bl	8001110 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004010:	e009      	b.n	8004026 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004012:	f7fd f87d 	bl	8001110 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004020:	d901      	bls.n	8004026 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e007      	b.n	8004036 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004026:	4b06      	ldr	r3, [pc, #24]	@ (8004040 <HAL_PWREx_ConfigSupply+0x70>)
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800402e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004032:	d1ee      	bne.n	8004012 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	58024800 	.word	0x58024800

08004044 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b08c      	sub	sp, #48	@ 0x30
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d102      	bne.n	8004058 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f000 bc48 	b.w	80048e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 8088 	beq.w	8004176 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004066:	4b99      	ldr	r3, [pc, #612]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800406e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004070:	4b96      	ldr	r3, [pc, #600]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004074:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004078:	2b10      	cmp	r3, #16
 800407a:	d007      	beq.n	800408c <HAL_RCC_OscConfig+0x48>
 800407c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407e:	2b18      	cmp	r3, #24
 8004080:	d111      	bne.n	80040a6 <HAL_RCC_OscConfig+0x62>
 8004082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004084:	f003 0303 	and.w	r3, r3, #3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d10c      	bne.n	80040a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800408c:	4b8f      	ldr	r3, [pc, #572]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004094:	2b00      	cmp	r3, #0
 8004096:	d06d      	beq.n	8004174 <HAL_RCC_OscConfig+0x130>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d169      	bne.n	8004174 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80040a0:	2301      	movs	r3, #1
 80040a2:	f000 bc21 	b.w	80048e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040ae:	d106      	bne.n	80040be <HAL_RCC_OscConfig+0x7a>
 80040b0:	4b86      	ldr	r3, [pc, #536]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a85      	ldr	r2, [pc, #532]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e02e      	b.n	800411c <HAL_RCC_OscConfig+0xd8>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x9c>
 80040c6:	4b81      	ldr	r3, [pc, #516]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a80      	ldr	r2, [pc, #512]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	4b7e      	ldr	r3, [pc, #504]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7d      	ldr	r2, [pc, #500]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040dc:	6013      	str	r3, [r2, #0]
 80040de:	e01d      	b.n	800411c <HAL_RCC_OscConfig+0xd8>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040e8:	d10c      	bne.n	8004104 <HAL_RCC_OscConfig+0xc0>
 80040ea:	4b78      	ldr	r3, [pc, #480]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a77      	ldr	r2, [pc, #476]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040f4:	6013      	str	r3, [r2, #0]
 80040f6:	4b75      	ldr	r3, [pc, #468]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a74      	ldr	r2, [pc, #464]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80040fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004100:	6013      	str	r3, [r2, #0]
 8004102:	e00b      	b.n	800411c <HAL_RCC_OscConfig+0xd8>
 8004104:	4b71      	ldr	r3, [pc, #452]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a70      	ldr	r2, [pc, #448]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 800410a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800410e:	6013      	str	r3, [r2, #0]
 8004110:	4b6e      	ldr	r3, [pc, #440]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a6d      	ldr	r2, [pc, #436]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800411a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d013      	beq.n	800414c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fc fff4 	bl	8001110 <HAL_GetTick>
 8004128:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800412c:	f7fc fff0 	bl	8001110 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	@ 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e3d4      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800413e:	4b63      	ldr	r3, [pc, #396]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCC_OscConfig+0xe8>
 800414a:	e014      	b.n	8004176 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414c:	f7fc ffe0 	bl	8001110 <HAL_GetTick>
 8004150:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004154:	f7fc ffdc 	bl	8001110 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b64      	cmp	r3, #100	@ 0x64
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e3c0      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004166:	4b59      	ldr	r3, [pc, #356]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f0      	bne.n	8004154 <HAL_RCC_OscConfig+0x110>
 8004172:	e000      	b.n	8004176 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	f000 80ca 	beq.w	8004318 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004184:	4b51      	ldr	r3, [pc, #324]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800418c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800418e:	4b4f      	ldr	r3, [pc, #316]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004192:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004194:	6a3b      	ldr	r3, [r7, #32]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d007      	beq.n	80041aa <HAL_RCC_OscConfig+0x166>
 800419a:	6a3b      	ldr	r3, [r7, #32]
 800419c:	2b18      	cmp	r3, #24
 800419e:	d156      	bne.n	800424e <HAL_RCC_OscConfig+0x20a>
 80041a0:	69fb      	ldr	r3, [r7, #28]
 80041a2:	f003 0303 	and.w	r3, r3, #3
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d151      	bne.n	800424e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041aa:	4b48      	ldr	r3, [pc, #288]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f003 0304 	and.w	r3, r3, #4
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d005      	beq.n	80041c2 <HAL_RCC_OscConfig+0x17e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d101      	bne.n	80041c2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e392      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80041c2:	4b42      	ldr	r3, [pc, #264]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0219 	bic.w	r2, r3, #25
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	493f      	ldr	r1, [pc, #252]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80041d0:	4313      	orrs	r3, r2
 80041d2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fc ff9c 	bl	8001110 <HAL_GetTick>
 80041d8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041dc:	f7fc ff98 	bl	8001110 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e37c      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80041ee:	4b37      	ldr	r3, [pc, #220]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0304 	and.w	r3, r3, #4
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041fa:	f7fc ff95 	bl	8001128 <HAL_GetREVID>
 80041fe:	4603      	mov	r3, r0
 8004200:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004204:	4293      	cmp	r3, r2
 8004206:	d817      	bhi.n	8004238 <HAL_RCC_OscConfig+0x1f4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	2b40      	cmp	r3, #64	@ 0x40
 800420e:	d108      	bne.n	8004222 <HAL_RCC_OscConfig+0x1de>
 8004210:	4b2e      	ldr	r3, [pc, #184]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8004218:	4a2c      	ldr	r2, [pc, #176]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 800421a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800421e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004220:	e07a      	b.n	8004318 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004222:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	031b      	lsls	r3, r3, #12
 8004230:	4926      	ldr	r1, [pc, #152]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004232:	4313      	orrs	r3, r2
 8004234:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004236:	e06f      	b.n	8004318 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004238:	4b24      	ldr	r3, [pc, #144]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	061b      	lsls	r3, r3, #24
 8004246:	4921      	ldr	r1, [pc, #132]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800424c:	e064      	b.n	8004318 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d047      	beq.n	80042e6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004256:	4b1d      	ldr	r3, [pc, #116]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f023 0219 	bic.w	r2, r3, #25
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	491a      	ldr	r1, [pc, #104]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fc ff52 	bl	8001110 <HAL_GetTick>
 800426c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004270:	f7fc ff4e 	bl	8001110 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e332      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004282:	4b12      	ldr	r3, [pc, #72]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d0f0      	beq.n	8004270 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	f7fc ff4b 	bl	8001128 <HAL_GetREVID>
 8004292:	4603      	mov	r3, r0
 8004294:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004298:	4293      	cmp	r3, r2
 800429a:	d819      	bhi.n	80042d0 <HAL_RCC_OscConfig+0x28c>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	2b40      	cmp	r3, #64	@ 0x40
 80042a2:	d108      	bne.n	80042b6 <HAL_RCC_OscConfig+0x272>
 80042a4:	4b09      	ldr	r3, [pc, #36]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80042ac:	4a07      	ldr	r2, [pc, #28]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80042ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042b2:	6053      	str	r3, [r2, #4]
 80042b4:	e030      	b.n	8004318 <HAL_RCC_OscConfig+0x2d4>
 80042b6:	4b05      	ldr	r3, [pc, #20]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	031b      	lsls	r3, r3, #12
 80042c4:	4901      	ldr	r1, [pc, #4]	@ (80042cc <HAL_RCC_OscConfig+0x288>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	604b      	str	r3, [r1, #4]
 80042ca:	e025      	b.n	8004318 <HAL_RCC_OscConfig+0x2d4>
 80042cc:	58024400 	.word	0x58024400
 80042d0:	4b9a      	ldr	r3, [pc, #616]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	691b      	ldr	r3, [r3, #16]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	4997      	ldr	r1, [pc, #604]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80042e0:	4313      	orrs	r3, r2
 80042e2:	604b      	str	r3, [r1, #4]
 80042e4:	e018      	b.n	8004318 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042e6:	4b95      	ldr	r3, [pc, #596]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a94      	ldr	r2, [pc, #592]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80042ec:	f023 0301 	bic.w	r3, r3, #1
 80042f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f2:	f7fc ff0d 	bl	8001110 <HAL_GetTick>
 80042f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80042f8:	e008      	b.n	800430c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042fa:	f7fc ff09 	bl	8001110 <HAL_GetTick>
 80042fe:	4602      	mov	r2, r0
 8004300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004302:	1ad3      	subs	r3, r2, r3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d901      	bls.n	800430c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e2ed      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800430c:	4b8b      	ldr	r3, [pc, #556]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0304 	and.w	r3, r3, #4
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1f0      	bne.n	80042fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0310 	and.w	r3, r3, #16
 8004320:	2b00      	cmp	r3, #0
 8004322:	f000 80a9 	beq.w	8004478 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004326:	4b85      	ldr	r3, [pc, #532]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004328:	691b      	ldr	r3, [r3, #16]
 800432a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800432e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004330:	4b82      	ldr	r3, [pc, #520]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004332:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004334:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b08      	cmp	r3, #8
 800433a:	d007      	beq.n	800434c <HAL_RCC_OscConfig+0x308>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b18      	cmp	r3, #24
 8004340:	d13a      	bne.n	80043b8 <HAL_RCC_OscConfig+0x374>
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f003 0303 	and.w	r3, r3, #3
 8004348:	2b01      	cmp	r3, #1
 800434a:	d135      	bne.n	80043b8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800434c:	4b7b      	ldr	r3, [pc, #492]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d005      	beq.n	8004364 <HAL_RCC_OscConfig+0x320>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	69db      	ldr	r3, [r3, #28]
 800435c:	2b80      	cmp	r3, #128	@ 0x80
 800435e:	d001      	beq.n	8004364 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e2c1      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004364:	f7fc fee0 	bl	8001128 <HAL_GetREVID>
 8004368:	4603      	mov	r3, r0
 800436a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800436e:	4293      	cmp	r3, r2
 8004370:	d817      	bhi.n	80043a2 <HAL_RCC_OscConfig+0x35e>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6a1b      	ldr	r3, [r3, #32]
 8004376:	2b20      	cmp	r3, #32
 8004378:	d108      	bne.n	800438c <HAL_RCC_OscConfig+0x348>
 800437a:	4b70      	ldr	r3, [pc, #448]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004382:	4a6e      	ldr	r2, [pc, #440]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004388:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800438a:	e075      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800438c:	4b6b      	ldr	r3, [pc, #428]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a1b      	ldr	r3, [r3, #32]
 8004398:	069b      	lsls	r3, r3, #26
 800439a:	4968      	ldr	r1, [pc, #416]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800439c:	4313      	orrs	r3, r2
 800439e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043a0:	e06a      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043a2:	4b66      	ldr	r3, [pc, #408]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80043a4:	68db      	ldr	r3, [r3, #12]
 80043a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	4962      	ldr	r1, [pc, #392]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80043b6:	e05f      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	69db      	ldr	r3, [r3, #28]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d042      	beq.n	8004446 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80043c0:	4b5e      	ldr	r3, [pc, #376]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5d      	ldr	r2, [pc, #372]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80043c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80043ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043cc:	f7fc fea0 	bl	8001110 <HAL_GetTick>
 80043d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80043d4:	f7fc fe9c 	bl	8001110 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e280      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80043e6:	4b55      	ldr	r3, [pc, #340]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80043f2:	f7fc fe99 	bl	8001128 <HAL_GetREVID>
 80043f6:	4603      	mov	r3, r0
 80043f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d817      	bhi.n	8004430 <HAL_RCC_OscConfig+0x3ec>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a1b      	ldr	r3, [r3, #32]
 8004404:	2b20      	cmp	r3, #32
 8004406:	d108      	bne.n	800441a <HAL_RCC_OscConfig+0x3d6>
 8004408:	4b4c      	ldr	r3, [pc, #304]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8004410:	4a4a      	ldr	r2, [pc, #296]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004412:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004416:	6053      	str	r3, [r2, #4]
 8004418:	e02e      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
 800441a:	4b48      	ldr	r3, [pc, #288]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6a1b      	ldr	r3, [r3, #32]
 8004426:	069b      	lsls	r3, r3, #26
 8004428:	4944      	ldr	r1, [pc, #272]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
 800442e:	e023      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
 8004430:	4b42      	ldr	r3, [pc, #264]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	493f      	ldr	r1, [pc, #252]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004440:	4313      	orrs	r3, r2
 8004442:	60cb      	str	r3, [r1, #12]
 8004444:	e018      	b.n	8004478 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004446:	4b3d      	ldr	r3, [pc, #244]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a3c      	ldr	r2, [pc, #240]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800444c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004450:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004452:	f7fc fe5d 	bl	8001110 <HAL_GetTick>
 8004456:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004458:	e008      	b.n	800446c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800445a:	f7fc fe59 	bl	8001110 <HAL_GetTick>
 800445e:	4602      	mov	r2, r0
 8004460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004462:	1ad3      	subs	r3, r2, r3
 8004464:	2b02      	cmp	r3, #2
 8004466:	d901      	bls.n	800446c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e23d      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800446c:	4b33      	ldr	r3, [pc, #204]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1f0      	bne.n	800445a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d036      	beq.n	80044f2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d019      	beq.n	80044c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800448c:	4b2b      	ldr	r3, [pc, #172]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800448e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004490:	4a2a      	ldr	r2, [pc, #168]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004498:	f7fc fe3a 	bl	8001110 <HAL_GetTick>
 800449c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800449e:	e008      	b.n	80044b2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a0:	f7fc fe36 	bl	8001110 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e21a      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044b2:	4b22      	ldr	r3, [pc, #136]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80044b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d0f0      	beq.n	80044a0 <HAL_RCC_OscConfig+0x45c>
 80044be:	e018      	b.n	80044f2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044c0:	4b1e      	ldr	r3, [pc, #120]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80044c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044c4:	4a1d      	ldr	r2, [pc, #116]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fc fe20 	bl	8001110 <HAL_GetTick>
 80044d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d4:	f7fc fe1c 	bl	8001110 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e200      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044e6:	4b15      	ldr	r3, [pc, #84]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 80044e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0320 	and.w	r3, r3, #32
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d039      	beq.n	8004572 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d01c      	beq.n	8004540 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a0c      	ldr	r2, [pc, #48]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800450c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004510:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004512:	f7fc fdfd 	bl	8001110 <HAL_GetTick>
 8004516:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004518:	e008      	b.n	800452c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800451a:	f7fc fdf9 	bl	8001110 <HAL_GetTick>
 800451e:	4602      	mov	r2, r0
 8004520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004522:	1ad3      	subs	r3, r2, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d901      	bls.n	800452c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8004528:	2303      	movs	r3, #3
 800452a:	e1dd      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800452c:	4b03      	ldr	r3, [pc, #12]	@ (800453c <HAL_RCC_OscConfig+0x4f8>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d0f0      	beq.n	800451a <HAL_RCC_OscConfig+0x4d6>
 8004538:	e01b      	b.n	8004572 <HAL_RCC_OscConfig+0x52e>
 800453a:	bf00      	nop
 800453c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004540:	4b9b      	ldr	r3, [pc, #620]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a9a      	ldr	r2, [pc, #616]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800454a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800454c:	f7fc fde0 	bl	8001110 <HAL_GetTick>
 8004550:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004554:	f7fc fddc 	bl	8001110 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b02      	cmp	r3, #2
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e1c0      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004566:	4b92      	ldr	r3, [pc, #584]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0304 	and.w	r3, r3, #4
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 8081 	beq.w	8004682 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004580:	4b8c      	ldr	r3, [pc, #560]	@ (80047b4 <HAL_RCC_OscConfig+0x770>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a8b      	ldr	r2, [pc, #556]	@ (80047b4 <HAL_RCC_OscConfig+0x770>)
 8004586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800458a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800458c:	f7fc fdc0 	bl	8001110 <HAL_GetTick>
 8004590:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004592:	e008      	b.n	80045a6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004594:	f7fc fdbc 	bl	8001110 <HAL_GetTick>
 8004598:	4602      	mov	r2, r0
 800459a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	2b64      	cmp	r3, #100	@ 0x64
 80045a0:	d901      	bls.n	80045a6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80045a2:	2303      	movs	r3, #3
 80045a4:	e1a0      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045a6:	4b83      	ldr	r3, [pc, #524]	@ (80047b4 <HAL_RCC_OscConfig+0x770>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d0f0      	beq.n	8004594 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d106      	bne.n	80045c8 <HAL_RCC_OscConfig+0x584>
 80045ba:	4b7d      	ldr	r3, [pc, #500]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045be:	4a7c      	ldr	r2, [pc, #496]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045c0:	f043 0301 	orr.w	r3, r3, #1
 80045c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045c6:	e02d      	b.n	8004624 <HAL_RCC_OscConfig+0x5e0>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	689b      	ldr	r3, [r3, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d10c      	bne.n	80045ea <HAL_RCC_OscConfig+0x5a6>
 80045d0:	4b77      	ldr	r3, [pc, #476]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045d4:	4a76      	ldr	r2, [pc, #472]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	6713      	str	r3, [r2, #112]	@ 0x70
 80045dc:	4b74      	ldr	r3, [pc, #464]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045e0:	4a73      	ldr	r2, [pc, #460]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045e2:	f023 0304 	bic.w	r3, r3, #4
 80045e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045e8:	e01c      	b.n	8004624 <HAL_RCC_OscConfig+0x5e0>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b05      	cmp	r3, #5
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0x5c8>
 80045f2:	4b6f      	ldr	r3, [pc, #444]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f6:	4a6e      	ldr	r2, [pc, #440]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80045f8:	f043 0304 	orr.w	r3, r3, #4
 80045fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80045fe:	4b6c      	ldr	r3, [pc, #432]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004600:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004602:	4a6b      	ldr	r2, [pc, #428]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004604:	f043 0301 	orr.w	r3, r3, #1
 8004608:	6713      	str	r3, [r2, #112]	@ 0x70
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0x5e0>
 800460c:	4b68      	ldr	r3, [pc, #416]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800460e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004610:	4a67      	ldr	r2, [pc, #412]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	6713      	str	r3, [r2, #112]	@ 0x70
 8004618:	4b65      	ldr	r3, [pc, #404]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800461a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800461c:	4a64      	ldr	r2, [pc, #400]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800461e:	f023 0304 	bic.w	r3, r3, #4
 8004622:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d015      	beq.n	8004658 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800462c:	f7fc fd70 	bl	8001110 <HAL_GetTick>
 8004630:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004632:	e00a      	b.n	800464a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004634:	f7fc fd6c 	bl	8001110 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	4293      	cmp	r3, r2
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e14e      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800464a:	4b59      	ldr	r3, [pc, #356]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800464c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800464e:	f003 0302 	and.w	r3, r3, #2
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0ee      	beq.n	8004634 <HAL_RCC_OscConfig+0x5f0>
 8004656:	e014      	b.n	8004682 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004658:	f7fc fd5a 	bl	8001110 <HAL_GetTick>
 800465c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800465e:	e00a      	b.n	8004676 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004660:	f7fc fd56 	bl	8001110 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e138      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004676:	4b4e      	ldr	r3, [pc, #312]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ee      	bne.n	8004660 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004686:	2b00      	cmp	r3, #0
 8004688:	f000 812d 	beq.w	80048e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800468c:	4b48      	ldr	r3, [pc, #288]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004694:	2b18      	cmp	r3, #24
 8004696:	f000 80bd 	beq.w	8004814 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800469e:	2b02      	cmp	r3, #2
 80046a0:	f040 809e 	bne.w	80047e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046a4:	4b42      	ldr	r3, [pc, #264]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a41      	ldr	r2, [pc, #260]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80046aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046b0:	f7fc fd2e 	bl	8001110 <HAL_GetTick>
 80046b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b8:	f7fc fd2a 	bl	8001110 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e10e      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80046ca:	4b39      	ldr	r3, [pc, #228]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1f0      	bne.n	80046b8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046d6:	4b36      	ldr	r3, [pc, #216]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80046d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046da:	4b37      	ldr	r3, [pc, #220]	@ (80047b8 <HAL_RCC_OscConfig+0x774>)
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80046e6:	0112      	lsls	r2, r2, #4
 80046e8:	430a      	orrs	r2, r1
 80046ea:	4931      	ldr	r1, [pc, #196]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	628b      	str	r3, [r1, #40]	@ 0x28
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f4:	3b01      	subs	r3, #1
 80046f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fe:	3b01      	subs	r3, #1
 8004700:	025b      	lsls	r3, r3, #9
 8004702:	b29b      	uxth	r3, r3
 8004704:	431a      	orrs	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800470a:	3b01      	subs	r3, #1
 800470c:	041b      	lsls	r3, r3, #16
 800470e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004718:	3b01      	subs	r3, #1
 800471a:	061b      	lsls	r3, r3, #24
 800471c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004720:	4923      	ldr	r1, [pc, #140]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004722:	4313      	orrs	r3, r2
 8004724:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004726:	4b22      	ldr	r3, [pc, #136]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	4a21      	ldr	r2, [pc, #132]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800472c:	f023 0301 	bic.w	r3, r3, #1
 8004730:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004732:	4b1f      	ldr	r3, [pc, #124]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004734:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004736:	4b21      	ldr	r3, [pc, #132]	@ (80047bc <HAL_RCC_OscConfig+0x778>)
 8004738:	4013      	ands	r3, r2
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800473e:	00d2      	lsls	r2, r2, #3
 8004740:	491b      	ldr	r1, [pc, #108]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004742:	4313      	orrs	r3, r2
 8004744:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004746:	4b1a      	ldr	r3, [pc, #104]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800474a:	f023 020c 	bic.w	r2, r3, #12
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004752:	4917      	ldr	r1, [pc, #92]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004754:	4313      	orrs	r3, r2
 8004756:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004758:	4b15      	ldr	r3, [pc, #84]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800475a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800475c:	f023 0202 	bic.w	r2, r3, #2
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004764:	4912      	ldr	r1, [pc, #72]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004766:	4313      	orrs	r3, r2
 8004768:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800476a:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800476c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800476e:	4a10      	ldr	r2, [pc, #64]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004770:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004774:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004776:	4b0e      	ldr	r3, [pc, #56]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800477c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004780:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004786:	4a0a      	ldr	r2, [pc, #40]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004788:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800478c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800478e:	4b08      	ldr	r3, [pc, #32]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004792:	4a07      	ldr	r2, [pc, #28]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 8004794:	f043 0301 	orr.w	r3, r3, #1
 8004798:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800479a:	4b05      	ldr	r3, [pc, #20]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a04      	ldr	r2, [pc, #16]	@ (80047b0 <HAL_RCC_OscConfig+0x76c>)
 80047a0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80047a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a6:	f7fc fcb3 	bl	8001110 <HAL_GetTick>
 80047aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047ac:	e011      	b.n	80047d2 <HAL_RCC_OscConfig+0x78e>
 80047ae:	bf00      	nop
 80047b0:	58024400 	.word	0x58024400
 80047b4:	58024800 	.word	0x58024800
 80047b8:	fffffc0c 	.word	0xfffffc0c
 80047bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c0:	f7fc fca6 	bl	8001110 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e08a      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80047d2:	4b47      	ldr	r3, [pc, #284]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d0f0      	beq.n	80047c0 <HAL_RCC_OscConfig+0x77c>
 80047de:	e082      	b.n	80048e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e0:	4b43      	ldr	r3, [pc, #268]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a42      	ldr	r2, [pc, #264]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80047e6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80047ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fc fc90 	bl	8001110 <HAL_GetTick>
 80047f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fc fc8c 	bl	8001110 <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e070      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004806:	4b3a      	ldr	r3, [pc, #232]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x7b0>
 8004812:	e068      	b.n	80048e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004814:	4b36      	ldr	r3, [pc, #216]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 8004816:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004818:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800481a:	4b35      	ldr	r3, [pc, #212]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 800481c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800481e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	2b01      	cmp	r3, #1
 8004826:	d031      	beq.n	800488c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	f003 0203 	and.w	r2, r3, #3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	429a      	cmp	r2, r3
 8004834:	d12a      	bne.n	800488c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	091b      	lsrs	r3, r3, #4
 800483a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004842:	429a      	cmp	r2, r3
 8004844:	d122      	bne.n	800488c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004850:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d11a      	bne.n	800488c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	0a5b      	lsrs	r3, r3, #9
 800485a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004862:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d111      	bne.n	800488c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	0c1b      	lsrs	r3, r3, #16
 800486c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004874:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004876:	429a      	cmp	r2, r3
 8004878:	d108      	bne.n	800488c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	0e1b      	lsrs	r3, r3, #24
 800487e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004886:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d001      	beq.n	8004890 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e02b      	b.n	80048e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004890:	4b17      	ldr	r3, [pc, #92]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 8004892:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004894:	08db      	lsrs	r3, r3, #3
 8004896:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800489a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d01f      	beq.n	80048e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80048a6:	4b12      	ldr	r3, [pc, #72]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80048a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048aa:	4a11      	ldr	r2, [pc, #68]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80048b2:	f7fc fc2d 	bl	8001110 <HAL_GetTick>
 80048b6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80048b8:	bf00      	nop
 80048ba:	f7fc fc29 	bl	8001110 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d0f9      	beq.n	80048ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80048c6:	4b0a      	ldr	r3, [pc, #40]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80048c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048ca:	4b0a      	ldr	r3, [pc, #40]	@ (80048f4 <HAL_RCC_OscConfig+0x8b0>)
 80048cc:	4013      	ands	r3, r2
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80048d2:	00d2      	lsls	r2, r2, #3
 80048d4:	4906      	ldr	r1, [pc, #24]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80048d6:	4313      	orrs	r3, r2
 80048d8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80048da:	4b05      	ldr	r3, [pc, #20]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80048dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048de:	4a04      	ldr	r2, [pc, #16]	@ (80048f0 <HAL_RCC_OscConfig+0x8ac>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3730      	adds	r7, #48	@ 0x30
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	58024400 	.word	0x58024400
 80048f4:	ffff0007 	.word	0xffff0007

080048f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e19c      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800490c:	4b8a      	ldr	r3, [pc, #552]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d910      	bls.n	800493c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800491a:	4b87      	ldr	r3, [pc, #540]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f023 020f 	bic.w	r2, r3, #15
 8004922:	4985      	ldr	r1, [pc, #532]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	4313      	orrs	r3, r2
 8004928:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800492a:	4b83      	ldr	r3, [pc, #524]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d001      	beq.n	800493c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e184      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	d010      	beq.n	800496a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	4b7b      	ldr	r3, [pc, #492]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004954:	429a      	cmp	r2, r3
 8004956:	d908      	bls.n	800496a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004958:	4b78      	ldr	r3, [pc, #480]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	691b      	ldr	r3, [r3, #16]
 8004964:	4975      	ldr	r1, [pc, #468]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004966:	4313      	orrs	r3, r2
 8004968:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d010      	beq.n	8004998 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	695a      	ldr	r2, [r3, #20]
 800497a:	4b70      	ldr	r3, [pc, #448]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004982:	429a      	cmp	r2, r3
 8004984:	d908      	bls.n	8004998 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004986:	4b6d      	ldr	r3, [pc, #436]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004988:	69db      	ldr	r3, [r3, #28]
 800498a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	496a      	ldr	r1, [pc, #424]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004994:	4313      	orrs	r3, r2
 8004996:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0310 	and.w	r3, r3, #16
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d010      	beq.n	80049c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	699a      	ldr	r2, [r3, #24]
 80049a8:	4b64      	ldr	r3, [pc, #400]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 80049aa:	69db      	ldr	r3, [r3, #28]
 80049ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d908      	bls.n	80049c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80049b4:	4b61      	ldr	r3, [pc, #388]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	495e      	ldr	r1, [pc, #376]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0320 	and.w	r3, r3, #32
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d010      	beq.n	80049f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	69da      	ldr	r2, [r3, #28]
 80049d6:	4b59      	ldr	r3, [pc, #356]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80049de:	429a      	cmp	r2, r3
 80049e0:	d908      	bls.n	80049f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80049e2:	4b56      	ldr	r3, [pc, #344]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 80049e4:	6a1b      	ldr	r3, [r3, #32]
 80049e6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	4953      	ldr	r1, [pc, #332]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 80049f0:	4313      	orrs	r3, r2
 80049f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d010      	beq.n	8004a22 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	4b4d      	ldr	r3, [pc, #308]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a06:	699b      	ldr	r3, [r3, #24]
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d908      	bls.n	8004a22 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a10:	4b4a      	ldr	r3, [pc, #296]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a12:	699b      	ldr	r3, [r3, #24]
 8004a14:	f023 020f 	bic.w	r2, r3, #15
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	4947      	ldr	r1, [pc, #284]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d055      	beq.n	8004ada <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004a2e:	4b43      	ldr	r3, [pc, #268]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	4940      	ldr	r1, [pc, #256]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004a48:	4b3c      	ldr	r3, [pc, #240]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d121      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e0f6      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004a60:	4b36      	ldr	r3, [pc, #216]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d115      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e0ea      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a78:	4b30      	ldr	r3, [pc, #192]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e0de      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a88:	4b2c      	ldr	r3, [pc, #176]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0d6      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a98:	4b28      	ldr	r3, [pc, #160]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	f023 0207 	bic.w	r2, r3, #7
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	4925      	ldr	r1, [pc, #148]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fc fb31 	bl	8001110 <HAL_GetTick>
 8004aae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab2:	f7fc fb2d 	bl	8001110 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e0be      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d1eb      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d010      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	68da      	ldr	r2, [r3, #12]
 8004aea:	4b14      	ldr	r3, [pc, #80]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 030f 	and.w	r3, r3, #15
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d208      	bcs.n	8004b08 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004af6:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	f023 020f 	bic.w	r2, r3, #15
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	490e      	ldr	r1, [pc, #56]	@ (8004b3c <HAL_RCC_ClockConfig+0x244>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b08:	4b0b      	ldr	r3, [pc, #44]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 030f 	and.w	r3, r3, #15
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d214      	bcs.n	8004b40 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b16:	4b08      	ldr	r3, [pc, #32]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 020f 	bic.w	r2, r3, #15
 8004b1e:	4906      	ldr	r1, [pc, #24]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b26:	4b04      	ldr	r3, [pc, #16]	@ (8004b38 <HAL_RCC_ClockConfig+0x240>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f003 030f 	and.w	r3, r3, #15
 8004b2e:	683a      	ldr	r2, [r7, #0]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d005      	beq.n	8004b40 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e086      	b.n	8004c46 <HAL_RCC_ClockConfig+0x34e>
 8004b38:	52002000 	.word	0x52002000
 8004b3c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0304 	and.w	r3, r3, #4
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d010      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	4b3f      	ldr	r3, [pc, #252]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004b52:	699b      	ldr	r3, [r3, #24]
 8004b54:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d208      	bcs.n	8004b6e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004b5c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004b5e:	699b      	ldr	r3, [r3, #24]
 8004b60:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	4939      	ldr	r1, [pc, #228]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d010      	beq.n	8004b9c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695a      	ldr	r2, [r3, #20]
 8004b7e:	4b34      	ldr	r3, [pc, #208]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004b80:	69db      	ldr	r3, [r3, #28]
 8004b82:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d208      	bcs.n	8004b9c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004b8a:	4b31      	ldr	r3, [pc, #196]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004b8c:	69db      	ldr	r3, [r3, #28]
 8004b8e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	492e      	ldr	r1, [pc, #184]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0310 	and.w	r3, r3, #16
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d010      	beq.n	8004bca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	4b28      	ldr	r3, [pc, #160]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d208      	bcs.n	8004bca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004bb8:	4b25      	ldr	r3, [pc, #148]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004bba:	69db      	ldr	r3, [r3, #28]
 8004bbc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	699b      	ldr	r3, [r3, #24]
 8004bc4:	4922      	ldr	r1, [pc, #136]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0320 	and.w	r3, r3, #32
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	69da      	ldr	r2, [r3, #28]
 8004bda:	4b1d      	ldr	r3, [pc, #116]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004bdc:	6a1b      	ldr	r3, [r3, #32]
 8004bde:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d208      	bcs.n	8004bf8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004be6:	4b1a      	ldr	r3, [pc, #104]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4917      	ldr	r1, [pc, #92]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004bf8:	f000 f834 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	4b14      	ldr	r3, [pc, #80]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	f003 030f 	and.w	r3, r3, #15
 8004c08:	4912      	ldr	r1, [pc, #72]	@ (8004c54 <HAL_RCC_ClockConfig+0x35c>)
 8004c0a:	5ccb      	ldrb	r3, [r1, r3]
 8004c0c:	f003 031f 	and.w	r3, r3, #31
 8004c10:	fa22 f303 	lsr.w	r3, r2, r3
 8004c14:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004c16:	4b0e      	ldr	r3, [pc, #56]	@ (8004c50 <HAL_RCC_ClockConfig+0x358>)
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	f003 030f 	and.w	r3, r3, #15
 8004c1e:	4a0d      	ldr	r2, [pc, #52]	@ (8004c54 <HAL_RCC_ClockConfig+0x35c>)
 8004c20:	5cd3      	ldrb	r3, [r2, r3]
 8004c22:	f003 031f 	and.w	r3, r3, #31
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	fa22 f303 	lsr.w	r3, r2, r3
 8004c2c:	4a0a      	ldr	r2, [pc, #40]	@ (8004c58 <HAL_RCC_ClockConfig+0x360>)
 8004c2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004c30:	4a0a      	ldr	r2, [pc, #40]	@ (8004c5c <HAL_RCC_ClockConfig+0x364>)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004c36:	4b0a      	ldr	r3, [pc, #40]	@ (8004c60 <HAL_RCC_ClockConfig+0x368>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f7fc fa1e 	bl	800107c <HAL_InitTick>
 8004c40:	4603      	mov	r3, r0
 8004c42:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	58024400 	.word	0x58024400
 8004c54:	0800886c 	.word	0x0800886c
 8004c58:	24000004 	.word	0x24000004
 8004c5c:	24000000 	.word	0x24000000
 8004c60:	24000008 	.word	0x24000008

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	@ 0x24
 8004c68:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c6a:	4bb3      	ldr	r3, [pc, #716]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c72:	2b18      	cmp	r3, #24
 8004c74:	f200 8155 	bhi.w	8004f22 <HAL_RCC_GetSysClockFreq+0x2be>
 8004c78:	a201      	add	r2, pc, #4	@ (adr r2, 8004c80 <HAL_RCC_GetSysClockFreq+0x1c>)
 8004c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7e:	bf00      	nop
 8004c80:	08004ce5 	.word	0x08004ce5
 8004c84:	08004f23 	.word	0x08004f23
 8004c88:	08004f23 	.word	0x08004f23
 8004c8c:	08004f23 	.word	0x08004f23
 8004c90:	08004f23 	.word	0x08004f23
 8004c94:	08004f23 	.word	0x08004f23
 8004c98:	08004f23 	.word	0x08004f23
 8004c9c:	08004f23 	.word	0x08004f23
 8004ca0:	08004d0b 	.word	0x08004d0b
 8004ca4:	08004f23 	.word	0x08004f23
 8004ca8:	08004f23 	.word	0x08004f23
 8004cac:	08004f23 	.word	0x08004f23
 8004cb0:	08004f23 	.word	0x08004f23
 8004cb4:	08004f23 	.word	0x08004f23
 8004cb8:	08004f23 	.word	0x08004f23
 8004cbc:	08004f23 	.word	0x08004f23
 8004cc0:	08004d11 	.word	0x08004d11
 8004cc4:	08004f23 	.word	0x08004f23
 8004cc8:	08004f23 	.word	0x08004f23
 8004ccc:	08004f23 	.word	0x08004f23
 8004cd0:	08004f23 	.word	0x08004f23
 8004cd4:	08004f23 	.word	0x08004f23
 8004cd8:	08004f23 	.word	0x08004f23
 8004cdc:	08004f23 	.word	0x08004f23
 8004ce0:	08004d17 	.word	0x08004d17
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ce4:	4b94      	ldr	r3, [pc, #592]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0320 	and.w	r3, r3, #32
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004cf0:	4b91      	ldr	r3, [pc, #580]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	08db      	lsrs	r3, r3, #3
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	4a90      	ldr	r2, [pc, #576]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004d00:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004d02:	e111      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004d04:	4b8d      	ldr	r3, [pc, #564]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d06:	61bb      	str	r3, [r7, #24]
      break;
 8004d08:	e10e      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8004d0a:	4b8d      	ldr	r3, [pc, #564]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004d0c:	61bb      	str	r3, [r7, #24]
      break;
 8004d0e:	e10b      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004d10:	4b8c      	ldr	r3, [pc, #560]	@ (8004f44 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004d12:	61bb      	str	r3, [r7, #24]
      break;
 8004d14:	e108      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d16:	4b88      	ldr	r3, [pc, #544]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004d20:	4b85      	ldr	r3, [pc, #532]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d2a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004d2c:	4b82      	ldr	r3, [pc, #520]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004d36:	4b80      	ldr	r3, [pc, #512]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d3a:	08db      	lsrs	r3, r3, #3
 8004d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	fb02 f303 	mul.w	r3, r2, r3
 8004d46:	ee07 3a90 	vmov	s15, r3
 8004d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d4e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 80e1 	beq.w	8004f1c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	f000 8083 	beq.w	8004e68 <HAL_RCC_GetSysClockFreq+0x204>
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	f200 80a1 	bhi.w	8004eac <HAL_RCC_GetSysClockFreq+0x248>
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d003      	beq.n	8004d78 <HAL_RCC_GetSysClockFreq+0x114>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d056      	beq.n	8004e24 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004d76:	e099      	b.n	8004eac <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d78:	4b6f      	ldr	r3, [pc, #444]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d02d      	beq.n	8004de0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004d84:	4b6c      	ldr	r3, [pc, #432]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	08db      	lsrs	r3, r3, #3
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	4a6b      	ldr	r2, [pc, #428]	@ (8004f3c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004d90:	fa22 f303 	lsr.w	r3, r2, r3
 8004d94:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	ee07 3a90 	vmov	s15, r3
 8004d9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	ee07 3a90 	vmov	s15, r3
 8004da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004dae:	4b62      	ldr	r3, [pc, #392]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db6:	ee07 3a90 	vmov	s15, r3
 8004dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8004dc2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004dce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004dda:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8004dde:	e087      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	ee07 3a90 	vmov	s15, r3
 8004de6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dea:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004f4c <HAL_RCC_GetSysClockFreq+0x2e8>
 8004dee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df2:	4b51      	ldr	r3, [pc, #324]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfa:	ee07 3a90 	vmov	s15, r3
 8004dfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e02:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e06:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e22:	e065      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	ee07 3a90 	vmov	s15, r3
 8004e2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e2e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004e32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e36:	4b40      	ldr	r3, [pc, #256]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e3e:	ee07 3a90 	vmov	s15, r3
 8004e42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e46:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e4a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e62:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004e66:	e043      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	ee07 3a90 	vmov	s15, r3
 8004e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e72:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004f54 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7a:	4b2f      	ldr	r3, [pc, #188]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e82:	ee07 3a90 	vmov	s15, r3
 8004e86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8004e8e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004e92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ea6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eaa:	e021      	b.n	8004ef0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	ee07 3a90 	vmov	s15, r3
 8004eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eb6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004f50 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004eba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ec2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec6:	ee07 3a90 	vmov	s15, r3
 8004eca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ece:	ed97 6a02 	vldr	s12, [r7, #8]
 8004ed2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004f48 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004ed6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004eda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ede:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004eee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004ef0:	4b11      	ldr	r3, [pc, #68]	@ (8004f38 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef4:	0a5b      	lsrs	r3, r3, #9
 8004ef6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004efa:	3301      	adds	r3, #1
 8004efc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	ee07 3a90 	vmov	s15, r3
 8004f04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004f08:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f14:	ee17 3a90 	vmov	r3, s15
 8004f18:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004f1a:	e005      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	61bb      	str	r3, [r7, #24]
      break;
 8004f20:	e002      	b.n	8004f28 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004f22:	4b07      	ldr	r3, [pc, #28]	@ (8004f40 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004f24:	61bb      	str	r3, [r7, #24]
      break;
 8004f26:	bf00      	nop
  }

  return sysclockfreq;
 8004f28:	69bb      	ldr	r3, [r7, #24]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3724      	adds	r7, #36	@ 0x24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr
 8004f36:	bf00      	nop
 8004f38:	58024400 	.word	0x58024400
 8004f3c:	03d09000 	.word	0x03d09000
 8004f40:	003d0900 	.word	0x003d0900
 8004f44:	007a1200 	.word	0x007a1200
 8004f48:	46000000 	.word	0x46000000
 8004f4c:	4c742400 	.word	0x4c742400
 8004f50:	4a742400 	.word	0x4a742400
 8004f54:	4af42400 	.word	0x4af42400

08004f58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b082      	sub	sp, #8
 8004f5c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8004f5e:	f7ff fe81 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004f62:	4602      	mov	r2, r0
 8004f64:	4b10      	ldr	r3, [pc, #64]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f66:	699b      	ldr	r3, [r3, #24]
 8004f68:	0a1b      	lsrs	r3, r3, #8
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	490f      	ldr	r1, [pc, #60]	@ (8004fac <HAL_RCC_GetHCLKFreq+0x54>)
 8004f70:	5ccb      	ldrb	r3, [r1, r3]
 8004f72:	f003 031f 	and.w	r3, r3, #31
 8004f76:	fa22 f303 	lsr.w	r3, r2, r3
 8004f7a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa8 <HAL_RCC_GetHCLKFreq+0x50>)
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f003 030f 	and.w	r3, r3, #15
 8004f84:	4a09      	ldr	r2, [pc, #36]	@ (8004fac <HAL_RCC_GetHCLKFreq+0x54>)
 8004f86:	5cd3      	ldrb	r3, [r2, r3]
 8004f88:	f003 031f 	and.w	r3, r3, #31
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004f92:	4a07      	ldr	r2, [pc, #28]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f94:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004f96:	4a07      	ldr	r2, [pc, #28]	@ (8004fb4 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004f9c:	4b04      	ldr	r3, [pc, #16]	@ (8004fb0 <HAL_RCC_GetHCLKFreq+0x58>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	58024400 	.word	0x58024400
 8004fac:	0800886c 	.word	0x0800886c
 8004fb0:	24000004 	.word	0x24000004
 8004fb4:	24000000 	.word	0x24000000

08004fb8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8004fbc:	f7ff ffcc 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	4b06      	ldr	r3, [pc, #24]	@ (8004fdc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	091b      	lsrs	r3, r3, #4
 8004fc8:	f003 0307 	and.w	r3, r3, #7
 8004fcc:	4904      	ldr	r1, [pc, #16]	@ (8004fe0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004fce:	5ccb      	ldrb	r3, [r1, r3]
 8004fd0:	f003 031f 	and.w	r3, r3, #31
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	58024400 	.word	0x58024400
 8004fe0:	0800886c 	.word	0x0800886c

08004fe4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004fe8:	f7ff ffb6 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 8004fec:	4602      	mov	r2, r0
 8004fee:	4b06      	ldr	r3, [pc, #24]	@ (8005008 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	0a1b      	lsrs	r3, r3, #8
 8004ff4:	f003 0307 	and.w	r3, r3, #7
 8004ff8:	4904      	ldr	r1, [pc, #16]	@ (800500c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ffa:	5ccb      	ldrb	r3, [r1, r3]
 8004ffc:	f003 031f 	and.w	r3, r3, #31
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	58024400 	.word	0x58024400
 800500c:	0800886c 	.word	0x0800886c

08005010 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005014:	b0ca      	sub	sp, #296	@ 0x128
 8005016:	af00      	add	r7, sp, #0
 8005018:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800501c:	2300      	movs	r3, #0
 800501e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005022:	2300      	movs	r3, #0
 8005024:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005028:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800502c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005030:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005034:	2500      	movs	r5, #0
 8005036:	ea54 0305 	orrs.w	r3, r4, r5
 800503a:	d049      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800503c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005040:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005042:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005046:	d02f      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005048:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800504c:	d828      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800504e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005052:	d01a      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005054:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005058:	d822      	bhi.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800505e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005062:	d007      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005064:	e01c      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005066:	4bb8      	ldr	r3, [pc, #736]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800506a:	4ab7      	ldr	r2, [pc, #732]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800506c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005070:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005072:	e01a      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005074:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005078:	3308      	adds	r3, #8
 800507a:	2102      	movs	r1, #2
 800507c:	4618      	mov	r0, r3
 800507e:	f001 fc8f 	bl	80069a0 <RCCEx_PLL2_Config>
 8005082:	4603      	mov	r3, r0
 8005084:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005088:	e00f      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800508a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800508e:	3328      	adds	r3, #40	@ 0x28
 8005090:	2102      	movs	r1, #2
 8005092:	4618      	mov	r0, r3
 8005094:	f001 fd36 	bl	8006b04 <RCCEx_PLL3_Config>
 8005098:	4603      	mov	r3, r0
 800509a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800509e:	e004      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80050a6:	e000      	b.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80050a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80050aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d10a      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80050b2:	4ba5      	ldr	r3, [pc, #660]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050b6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80050ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80050c0:	4aa1      	ldr	r2, [pc, #644]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80050c2:	430b      	orrs	r3, r1
 80050c4:	6513      	str	r3, [r2, #80]	@ 0x50
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80050cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80050d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80050dc:	f04f 0900 	mov.w	r9, #0
 80050e0:	ea58 0309 	orrs.w	r3, r8, r9
 80050e4:	d047      	beq.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80050e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80050ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d82a      	bhi.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80050f0:	a201      	add	r2, pc, #4	@ (adr r2, 80050f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80050f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f6:	bf00      	nop
 80050f8:	0800510d 	.word	0x0800510d
 80050fc:	0800511b 	.word	0x0800511b
 8005100:	08005131 	.word	0x08005131
 8005104:	0800514f 	.word	0x0800514f
 8005108:	0800514f 	.word	0x0800514f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800510c:	4b8e      	ldr	r3, [pc, #568]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800510e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005110:	4a8d      	ldr	r2, [pc, #564]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005118:	e01a      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800511e:	3308      	adds	r3, #8
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fc3c 	bl	80069a0 <RCCEx_PLL2_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800512e:	e00f      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005134:	3328      	adds	r3, #40	@ 0x28
 8005136:	2100      	movs	r1, #0
 8005138:	4618      	mov	r0, r3
 800513a:	f001 fce3 	bl	8006b04 <RCCEx_PLL3_Config>
 800513e:	4603      	mov	r3, r0
 8005140:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005144:	e004      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800514c:	e000      	b.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800514e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005158:	4b7b      	ldr	r3, [pc, #492]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800515a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800515c:	f023 0107 	bic.w	r1, r3, #7
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005164:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005166:	4a78      	ldr	r2, [pc, #480]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005168:	430b      	orrs	r3, r1
 800516a:	6513      	str	r3, [r2, #80]	@ 0x50
 800516c:	e003      	b.n	8005176 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005172:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800517a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8005182:	f04f 0b00 	mov.w	fp, #0
 8005186:	ea5a 030b 	orrs.w	r3, sl, fp
 800518a:	d04c      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800518c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005192:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005196:	d030      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8005198:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800519c:	d829      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800519e:	2bc0      	cmp	r3, #192	@ 0xc0
 80051a0:	d02d      	beq.n	80051fe <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80051a2:	2bc0      	cmp	r3, #192	@ 0xc0
 80051a4:	d825      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051a6:	2b80      	cmp	r3, #128	@ 0x80
 80051a8:	d018      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80051aa:	2b80      	cmp	r3, #128	@ 0x80
 80051ac:	d821      	bhi.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80051b2:	2b40      	cmp	r3, #64	@ 0x40
 80051b4:	d007      	beq.n	80051c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80051b6:	e01c      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80051b8:	4b63      	ldr	r3, [pc, #396]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051bc:	4a62      	ldr	r2, [pc, #392]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80051be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80051c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051c4:	e01c      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80051c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051ca:	3308      	adds	r3, #8
 80051cc:	2100      	movs	r1, #0
 80051ce:	4618      	mov	r0, r3
 80051d0:	f001 fbe6 	bl	80069a0 <RCCEx_PLL2_Config>
 80051d4:	4603      	mov	r3, r0
 80051d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051da:	e011      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80051dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80051e0:	3328      	adds	r3, #40	@ 0x28
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f001 fc8d 	bl	8006b04 <RCCEx_PLL3_Config>
 80051ea:	4603      	mov	r3, r0
 80051ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80051f0:	e006      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80051f8:	e002      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80051fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005200:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005208:	4b4f      	ldr	r3, [pc, #316]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800520a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800520c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8005210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005216:	4a4c      	ldr	r2, [pc, #304]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005218:	430b      	orrs	r3, r1
 800521a:	6513      	str	r3, [r2, #80]	@ 0x50
 800521c:	e003      	b.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800521e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005222:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005226:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800522a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800522e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005232:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005236:	2300      	movs	r3, #0
 8005238:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800523c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005240:	460b      	mov	r3, r1
 8005242:	4313      	orrs	r3, r2
 8005244:	d053      	beq.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005246:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800524a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800524e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005252:	d035      	beq.n	80052c0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8005254:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005258:	d82e      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800525a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800525e:	d031      	beq.n	80052c4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8005260:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005264:	d828      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005266:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800526a:	d01a      	beq.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800526c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005270:	d822      	bhi.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8005276:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800527a:	d007      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800527c:	e01c      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800527e:	4b32      	ldr	r3, [pc, #200]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005282:	4a31      	ldr	r2, [pc, #196]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8005284:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005288:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800528a:	e01c      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800528c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005290:	3308      	adds	r3, #8
 8005292:	2100      	movs	r1, #0
 8005294:	4618      	mov	r0, r3
 8005296:	f001 fb83 	bl	80069a0 <RCCEx_PLL2_Config>
 800529a:	4603      	mov	r3, r0
 800529c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80052a0:	e011      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80052a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052a6:	3328      	adds	r3, #40	@ 0x28
 80052a8:	2100      	movs	r1, #0
 80052aa:	4618      	mov	r0, r3
 80052ac:	f001 fc2a 	bl	8006b04 <RCCEx_PLL3_Config>
 80052b0:	4603      	mov	r3, r0
 80052b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80052b6:	e006      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80052be:	e002      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052c0:	bf00      	nop
 80052c2:	e000      	b.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80052c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80052ce:	4b1e      	ldr	r3, [pc, #120]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80052d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052da:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80052de:	4a1a      	ldr	r2, [pc, #104]	@ (8005348 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80052e0:	430b      	orrs	r3, r1
 80052e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80052e4:	e003      	b.n	80052ee <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80052ea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80052ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80052f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052f6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80052fa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80052fe:	2300      	movs	r3, #0
 8005300:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005304:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8005308:	460b      	mov	r3, r1
 800530a:	4313      	orrs	r3, r2
 800530c:	d056      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800530e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005312:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005316:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800531a:	d038      	beq.n	800538e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800531c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005320:	d831      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005322:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005326:	d034      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8005328:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800532c:	d82b      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800532e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005332:	d01d      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8005334:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005338:	d825      	bhi.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800533a:	2b00      	cmp	r3, #0
 800533c:	d006      	beq.n	800534c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800533e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005342:	d00a      	beq.n	800535a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005344:	e01f      	b.n	8005386 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800534c:	4ba2      	ldr	r3, [pc, #648]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800534e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005350:	4aa1      	ldr	r2, [pc, #644]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005352:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005356:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005358:	e01c      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800535a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800535e:	3308      	adds	r3, #8
 8005360:	2100      	movs	r1, #0
 8005362:	4618      	mov	r0, r3
 8005364:	f001 fb1c 	bl	80069a0 <RCCEx_PLL2_Config>
 8005368:	4603      	mov	r3, r0
 800536a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800536e:	e011      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005374:	3328      	adds	r3, #40	@ 0x28
 8005376:	2100      	movs	r1, #0
 8005378:	4618      	mov	r0, r3
 800537a:	f001 fbc3 	bl	8006b04 <RCCEx_PLL3_Config>
 800537e:	4603      	mov	r3, r0
 8005380:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005384:	e006      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800538c:	e002      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800538e:	bf00      	nop
 8005390:	e000      	b.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8005392:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10b      	bne.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800539c:	4b8e      	ldr	r3, [pc, #568]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800539e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053a0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80053a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053a8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80053ac:	4a8a      	ldr	r2, [pc, #552]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053ae:	430b      	orrs	r3, r1
 80053b0:	6593      	str	r3, [r2, #88]	@ 0x58
 80053b2:	e003      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80053b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80053bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80053c8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80053d2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80053d6:	460b      	mov	r3, r1
 80053d8:	4313      	orrs	r3, r2
 80053da:	d03a      	beq.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80053dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80053e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053e2:	2b30      	cmp	r3, #48	@ 0x30
 80053e4:	d01f      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80053e6:	2b30      	cmp	r3, #48	@ 0x30
 80053e8:	d819      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053ea:	2b20      	cmp	r3, #32
 80053ec:	d00c      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80053ee:	2b20      	cmp	r3, #32
 80053f0:	d815      	bhi.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d019      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80053f6:	2b10      	cmp	r3, #16
 80053f8:	d111      	bne.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80053fa:	4b77      	ldr	r3, [pc, #476]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80053fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053fe:	4a76      	ldr	r2, [pc, #472]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005400:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005404:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8005406:	e011      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005408:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800540c:	3308      	adds	r3, #8
 800540e:	2102      	movs	r1, #2
 8005410:	4618      	mov	r0, r3
 8005412:	f001 fac5 	bl	80069a0 <RCCEx_PLL2_Config>
 8005416:	4603      	mov	r3, r0
 8005418:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800541c:	e006      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005424:	e002      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8005426:	bf00      	nop
 8005428:	e000      	b.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800542a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800542c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10a      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005434:	4b68      	ldr	r3, [pc, #416]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005438:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800543c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005442:	4a65      	ldr	r2, [pc, #404]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005444:	430b      	orrs	r3, r1
 8005446:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005448:	e003      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800544a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800544e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005452:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800545e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005462:	2300      	movs	r3, #0
 8005464:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005468:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800546c:	460b      	mov	r3, r1
 800546e:	4313      	orrs	r3, r2
 8005470:	d051      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005476:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005478:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800547c:	d035      	beq.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800547e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005482:	d82e      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005484:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005488:	d031      	beq.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800548a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800548e:	d828      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8005490:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005494:	d01a      	beq.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8005496:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800549a:	d822      	bhi.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d003      	beq.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80054a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054a4:	d007      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80054a6:	e01c      	b.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80054a8:	4b4b      	ldr	r3, [pc, #300]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ac:	4a4a      	ldr	r2, [pc, #296]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80054b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054b4:	e01c      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80054b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054ba:	3308      	adds	r3, #8
 80054bc:	2100      	movs	r1, #0
 80054be:	4618      	mov	r0, r3
 80054c0:	f001 fa6e 	bl	80069a0 <RCCEx_PLL2_Config>
 80054c4:	4603      	mov	r3, r0
 80054c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054ca:	e011      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80054cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80054d0:	3328      	adds	r3, #40	@ 0x28
 80054d2:	2100      	movs	r1, #0
 80054d4:	4618      	mov	r0, r3
 80054d6:	f001 fb15 	bl	8006b04 <RCCEx_PLL3_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80054e0:	e006      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80054e8:	e002      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054ea:	bf00      	nop
 80054ec:	e000      	b.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80054ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80054f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80054f8:	4b37      	ldr	r3, [pc, #220]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80054fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054fc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005500:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005504:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005506:	4a34      	ldr	r2, [pc, #208]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8005508:	430b      	orrs	r3, r1
 800550a:	6513      	str	r3, [r2, #80]	@ 0x50
 800550c:	e003      	b.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005512:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005522:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005526:	2300      	movs	r3, #0
 8005528:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800552c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005530:	460b      	mov	r3, r1
 8005532:	4313      	orrs	r3, r2
 8005534:	d056      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005536:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800553a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800553c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005540:	d033      	beq.n	80055aa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8005542:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005546:	d82c      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005548:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800554c:	d02f      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800554e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005552:	d826      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005554:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005558:	d02b      	beq.n	80055b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800555a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800555e:	d820      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8005560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005564:	d012      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8005566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800556a:	d81a      	bhi.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d022      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8005570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005574:	d115      	bne.n	80055a2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005576:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800557a:	3308      	adds	r3, #8
 800557c:	2101      	movs	r1, #1
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fa0e 	bl	80069a0 <RCCEx_PLL2_Config>
 8005584:	4603      	mov	r3, r0
 8005586:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800558a:	e015      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800558c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005590:	3328      	adds	r3, #40	@ 0x28
 8005592:	2101      	movs	r1, #1
 8005594:	4618      	mov	r0, r3
 8005596:	f001 fab5 	bl	8006b04 <RCCEx_PLL3_Config>
 800559a:	4603      	mov	r3, r0
 800559c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80055a0:	e00a      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80055a8:	e006      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055aa:	bf00      	nop
 80055ac:	e004      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055ae:	bf00      	nop
 80055b0:	e002      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055b2:	bf00      	nop
 80055b4:	e000      	b.n	80055b8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80055b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80055b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80055c0:	4b05      	ldr	r3, [pc, #20]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055c4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80055c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055cc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055ce:	4a02      	ldr	r2, [pc, #8]	@ (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80055d0:	430b      	orrs	r3, r1
 80055d2:	6513      	str	r3, [r2, #80]	@ 0x50
 80055d4:	e006      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80055d6:	bf00      	nop
 80055d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80055e0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80055e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80055e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ec:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80055f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80055f4:	2300      	movs	r3, #0
 80055f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80055fa:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80055fe:	460b      	mov	r3, r1
 8005600:	4313      	orrs	r3, r2
 8005602:	d055      	beq.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005604:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005608:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800560c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005610:	d033      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8005612:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005616:	d82c      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561c:	d02f      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800561e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005622:	d826      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005624:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005628:	d02b      	beq.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800562a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800562e:	d820      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8005630:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005634:	d012      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005636:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800563a:	d81a      	bhi.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800563c:	2b00      	cmp	r3, #0
 800563e:	d022      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8005640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005644:	d115      	bne.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800564a:	3308      	adds	r3, #8
 800564c:	2101      	movs	r1, #1
 800564e:	4618      	mov	r0, r3
 8005650:	f001 f9a6 	bl	80069a0 <RCCEx_PLL2_Config>
 8005654:	4603      	mov	r3, r0
 8005656:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800565a:	e015      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800565c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	2101      	movs	r1, #1
 8005664:	4618      	mov	r0, r3
 8005666:	f001 fa4d 	bl	8006b04 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005670:	e00a      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005678:	e006      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800567a:	bf00      	nop
 800567c:	e004      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800567e:	bf00      	nop
 8005680:	e002      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005682:	bf00      	nop
 8005684:	e000      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8005686:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005688:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10b      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005690:	4ba3      	ldr	r3, [pc, #652]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005692:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005694:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800569c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80056a0:	4a9f      	ldr	r2, [pc, #636]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056a2:	430b      	orrs	r3, r1
 80056a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80056a6:	e003      	b.n	80056b0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80056ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80056b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80056bc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056c0:	2300      	movs	r3, #0
 80056c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80056c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056ca:	460b      	mov	r3, r1
 80056cc:	4313      	orrs	r3, r2
 80056ce:	d037      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80056d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056da:	d00e      	beq.n	80056fa <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80056dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80056e0:	d816      	bhi.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80056e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80056ea:	d111      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056f0:	4a8b      	ldr	r2, [pc, #556]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80056f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056f6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80056f8:	e00f      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80056fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80056fe:	3308      	adds	r3, #8
 8005700:	2101      	movs	r1, #1
 8005702:	4618      	mov	r0, r3
 8005704:	f001 f94c 	bl	80069a0 <RCCEx_PLL2_Config>
 8005708:	4603      	mov	r3, r0
 800570a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800570e:	e004      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005716:	e000      	b.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8005718:	bf00      	nop
    }

    if (ret == HAL_OK)
 800571a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005722:	4b7f      	ldr	r3, [pc, #508]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005724:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005726:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800572a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800572e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005730:	4a7b      	ldr	r2, [pc, #492]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005732:	430b      	orrs	r3, r1
 8005734:	6513      	str	r3, [r2, #80]	@ 0x50
 8005736:	e003      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005738:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800573c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005740:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800574c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005750:	2300      	movs	r3, #0
 8005752:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005756:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800575a:	460b      	mov	r3, r1
 800575c:	4313      	orrs	r3, r2
 800575e:	d039      	beq.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005766:	2b03      	cmp	r3, #3
 8005768:	d81c      	bhi.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800576a:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	080057ad 	.word	0x080057ad
 8005774:	08005781 	.word	0x08005781
 8005778:	0800578f 	.word	0x0800578f
 800577c:	080057ad 	.word	0x080057ad
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005780:	4b67      	ldr	r3, [pc, #412]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005784:	4a66      	ldr	r2, [pc, #408]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800578a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800578c:	e00f      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800578e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005792:	3308      	adds	r3, #8
 8005794:	2102      	movs	r1, #2
 8005796:	4618      	mov	r0, r3
 8005798:	f001 f902 	bl	80069a0 <RCCEx_PLL2_Config>
 800579c:	4603      	mov	r3, r0
 800579e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80057a2:	e004      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80057aa:	e000      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80057ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80057b6:	4b5a      	ldr	r3, [pc, #360]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80057ba:	f023 0103 	bic.w	r1, r3, #3
 80057be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057c4:	4a56      	ldr	r2, [pc, #344]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80057c6:	430b      	orrs	r3, r1
 80057c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80057ca:	e003      	b.n	80057d4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80057d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80057d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057dc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80057e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057e4:	2300      	movs	r3, #0
 80057e6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057ea:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80057ee:	460b      	mov	r3, r1
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f000 809f 	beq.w	8005934 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a4a      	ldr	r2, [pc, #296]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80057fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005800:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005802:	f7fb fc85 	bl	8001110 <HAL_GetTick>
 8005806:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800580a:	e00b      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580c:	f7fb fc80 	bl	8001110 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8005816:	1ad3      	subs	r3, r2, r3
 8005818:	2b64      	cmp	r3, #100	@ 0x64
 800581a:	d903      	bls.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800581c:	2303      	movs	r3, #3
 800581e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005822:	e005      	b.n	8005830 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005824:	4b3f      	ldr	r3, [pc, #252]	@ (8005924 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0ed      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8005830:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005834:	2b00      	cmp	r3, #0
 8005836:	d179      	bne.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005838:	4b39      	ldr	r3, [pc, #228]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800583a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800583c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005840:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005844:	4053      	eors	r3, r2
 8005846:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800584a:	2b00      	cmp	r3, #0
 800584c:	d015      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800584e:	4b34      	ldr	r3, [pc, #208]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005856:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800585a:	4b31      	ldr	r3, [pc, #196]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800585c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800585e:	4a30      	ldr	r2, [pc, #192]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005864:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005866:	4b2e      	ldr	r3, [pc, #184]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800586a:	4a2d      	ldr	r2, [pc, #180]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800586c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005870:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005872:	4a2b      	ldr	r2, [pc, #172]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005874:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8005878:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800587a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800587e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005882:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005886:	d118      	bne.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005888:	f7fb fc42 	bl	8001110 <HAL_GetTick>
 800588c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005890:	e00d      	b.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005892:	f7fb fc3d 	bl	8001110 <HAL_GetTick>
 8005896:	4602      	mov	r2, r0
 8005898:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800589c:	1ad2      	subs	r2, r2, r3
 800589e:	f241 3388 	movw	r3, #5000	@ 0x1388
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d903      	bls.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80058a6:	2303      	movs	r3, #3
 80058a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80058ac:	e005      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80058ae:	4b1c      	ldr	r3, [pc, #112]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d0eb      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80058ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d129      	bne.n	8005916 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80058d2:	d10e      	bne.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80058d4:	4b12      	ldr	r3, [pc, #72]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80058dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80058e0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80058e4:	091a      	lsrs	r2, r3, #4
 80058e6:	4b10      	ldr	r3, [pc, #64]	@ (8005928 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80058e8:	4013      	ands	r3, r2
 80058ea:	4a0d      	ldr	r2, [pc, #52]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058ec:	430b      	orrs	r3, r1
 80058ee:	6113      	str	r3, [r2, #16]
 80058f0:	e005      	b.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80058f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80058f8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80058fc:	6113      	str	r3, [r2, #16]
 80058fe:	4b08      	ldr	r3, [pc, #32]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005900:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005906:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800590a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800590e:	4a04      	ldr	r2, [pc, #16]	@ (8005920 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8005910:	430b      	orrs	r3, r1
 8005912:	6713      	str	r3, [r2, #112]	@ 0x70
 8005914:	e00e      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800591a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800591e:	e009      	b.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8005920:	58024400 	.word	0x58024400
 8005924:	58024800 	.word	0x58024800
 8005928:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800592c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005930:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005934:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f002 0301 	and.w	r3, r2, #1
 8005940:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005944:	2300      	movs	r3, #0
 8005946:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800594a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800594e:	460b      	mov	r3, r1
 8005950:	4313      	orrs	r3, r2
 8005952:	f000 8089 	beq.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005956:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800595a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800595c:	2b28      	cmp	r3, #40	@ 0x28
 800595e:	d86b      	bhi.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8005960:	a201      	add	r2, pc, #4	@ (adr r2, 8005968 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005966:	bf00      	nop
 8005968:	08005a41 	.word	0x08005a41
 800596c:	08005a39 	.word	0x08005a39
 8005970:	08005a39 	.word	0x08005a39
 8005974:	08005a39 	.word	0x08005a39
 8005978:	08005a39 	.word	0x08005a39
 800597c:	08005a39 	.word	0x08005a39
 8005980:	08005a39 	.word	0x08005a39
 8005984:	08005a39 	.word	0x08005a39
 8005988:	08005a0d 	.word	0x08005a0d
 800598c:	08005a39 	.word	0x08005a39
 8005990:	08005a39 	.word	0x08005a39
 8005994:	08005a39 	.word	0x08005a39
 8005998:	08005a39 	.word	0x08005a39
 800599c:	08005a39 	.word	0x08005a39
 80059a0:	08005a39 	.word	0x08005a39
 80059a4:	08005a39 	.word	0x08005a39
 80059a8:	08005a23 	.word	0x08005a23
 80059ac:	08005a39 	.word	0x08005a39
 80059b0:	08005a39 	.word	0x08005a39
 80059b4:	08005a39 	.word	0x08005a39
 80059b8:	08005a39 	.word	0x08005a39
 80059bc:	08005a39 	.word	0x08005a39
 80059c0:	08005a39 	.word	0x08005a39
 80059c4:	08005a39 	.word	0x08005a39
 80059c8:	08005a41 	.word	0x08005a41
 80059cc:	08005a39 	.word	0x08005a39
 80059d0:	08005a39 	.word	0x08005a39
 80059d4:	08005a39 	.word	0x08005a39
 80059d8:	08005a39 	.word	0x08005a39
 80059dc:	08005a39 	.word	0x08005a39
 80059e0:	08005a39 	.word	0x08005a39
 80059e4:	08005a39 	.word	0x08005a39
 80059e8:	08005a41 	.word	0x08005a41
 80059ec:	08005a39 	.word	0x08005a39
 80059f0:	08005a39 	.word	0x08005a39
 80059f4:	08005a39 	.word	0x08005a39
 80059f8:	08005a39 	.word	0x08005a39
 80059fc:	08005a39 	.word	0x08005a39
 8005a00:	08005a39 	.word	0x08005a39
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005a41 	.word	0x08005a41
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a10:	3308      	adds	r3, #8
 8005a12:	2101      	movs	r1, #1
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 ffc3 	bl	80069a0 <RCCEx_PLL2_Config>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a20:	e00f      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a26:	3328      	adds	r3, #40	@ 0x28
 8005a28:	2101      	movs	r1, #1
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f001 f86a 	bl	8006b04 <RCCEx_PLL3_Config>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005a36:	e004      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8005a40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10a      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005a4a:	4bbf      	ldr	r3, [pc, #764]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a4e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a56:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a58:	4abb      	ldr	r2, [pc, #748]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005a5a:	430b      	orrs	r3, r1
 8005a5c:	6553      	str	r3, [r2, #84]	@ 0x54
 8005a5e:	e003      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005a64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f002 0302 	and.w	r3, r2, #2
 8005a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a78:	2300      	movs	r3, #0
 8005a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a7e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a82:	460b      	mov	r3, r1
 8005a84:	4313      	orrs	r3, r2
 8005a86:	d041      	beq.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005a8c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005a8e:	2b05      	cmp	r3, #5
 8005a90:	d824      	bhi.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8005a92:	a201      	add	r2, pc, #4	@ (adr r2, 8005a98 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8005a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a98:	08005ae5 	.word	0x08005ae5
 8005a9c:	08005ab1 	.word	0x08005ab1
 8005aa0:	08005ac7 	.word	0x08005ac7
 8005aa4:	08005ae5 	.word	0x08005ae5
 8005aa8:	08005ae5 	.word	0x08005ae5
 8005aac:	08005ae5 	.word	0x08005ae5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ab4:	3308      	adds	r3, #8
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 ff71 	bl	80069a0 <RCCEx_PLL2_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e00f      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005aca:	3328      	adds	r3, #40	@ 0x28
 8005acc:	2101      	movs	r1, #1
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f001 f818 	bl	8006b04 <RCCEx_PLL3_Config>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ada:	e004      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005ae2:	e000      	b.n	8005ae6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8005ae4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ae6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d10a      	bne.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8005aee:	4b96      	ldr	r3, [pc, #600]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005af2:	f023 0107 	bic.w	r1, r3, #7
 8005af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005afa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005afc:	4a92      	ldr	r2, [pc, #584]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005afe:	430b      	orrs	r3, r1
 8005b00:	6553      	str	r3, [r2, #84]	@ 0x54
 8005b02:	e003      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b14:	f002 0304 	and.w	r3, r2, #4
 8005b18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b22:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005b26:	460b      	mov	r3, r1
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	d044      	beq.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8005b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b30:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	d825      	bhi.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8005b38:	a201      	add	r2, pc, #4	@ (adr r2, 8005b40 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8005b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3e:	bf00      	nop
 8005b40:	08005b8d 	.word	0x08005b8d
 8005b44:	08005b59 	.word	0x08005b59
 8005b48:	08005b6f 	.word	0x08005b6f
 8005b4c:	08005b8d 	.word	0x08005b8d
 8005b50:	08005b8d 	.word	0x08005b8d
 8005b54:	08005b8d 	.word	0x08005b8d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b5c:	3308      	adds	r3, #8
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4618      	mov	r0, r3
 8005b62:	f000 ff1d 	bl	80069a0 <RCCEx_PLL2_Config>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b6c:	e00f      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005b72:	3328      	adds	r3, #40	@ 0x28
 8005b74:	2101      	movs	r1, #1
 8005b76:	4618      	mov	r0, r3
 8005b78:	f000 ffc4 	bl	8006b04 <RCCEx_PLL3_Config>
 8005b7c:	4603      	mov	r3, r0
 8005b7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8005b82:	e004      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b84:	2301      	movs	r3, #1
 8005b86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005b8a:	e000      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8005b8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10b      	bne.n	8005bae <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b96:	4b6c      	ldr	r3, [pc, #432]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b9a:	f023 0107 	bic.w	r1, r3, #7
 8005b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ba2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ba6:	4a68      	ldr	r2, [pc, #416]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005ba8:	430b      	orrs	r3, r1
 8005baa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bac:	e003      	b.n	8005bb6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005bb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bbe:	f002 0320 	and.w	r3, r2, #32
 8005bc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bcc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	d055      	beq.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8005bd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005be2:	d033      	beq.n	8005c4c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8005be4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005be8:	d82c      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bee:	d02f      	beq.n	8005c50 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8005bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bf4:	d826      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005bf6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bfa:	d02b      	beq.n	8005c54 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8005bfc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c00:	d820      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c06:	d012      	beq.n	8005c2e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8005c08:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c0c:	d81a      	bhi.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d022      	beq.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8005c12:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c16:	d115      	bne.n	8005c44 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005c18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c1c:	3308      	adds	r3, #8
 8005c1e:	2100      	movs	r1, #0
 8005c20:	4618      	mov	r0, r3
 8005c22:	f000 febd 	bl	80069a0 <RCCEx_PLL2_Config>
 8005c26:	4603      	mov	r3, r0
 8005c28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c2c:	e015      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c32:	3328      	adds	r3, #40	@ 0x28
 8005c34:	2102      	movs	r1, #2
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 ff64 	bl	8006b04 <RCCEx_PLL3_Config>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8005c42:	e00a      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c44:	2301      	movs	r3, #1
 8005c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005c4a:	e006      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c4c:	bf00      	nop
 8005c4e:	e004      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c50:	bf00      	nop
 8005c52:	e002      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c54:	bf00      	nop
 8005c56:	e000      	b.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8005c58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c62:	4b39      	ldr	r3, [pc, #228]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c66:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c72:	4a35      	ldr	r2, [pc, #212]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005c74:	430b      	orrs	r3, r1
 8005c76:	6553      	str	r3, [r2, #84]	@ 0x54
 8005c78:	e003      	b.n	8005c82 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005c7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8005c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c92:	2300      	movs	r3, #0
 8005c94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005c98:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	d058      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8005ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ca6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005caa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005cae:	d033      	beq.n	8005d18 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8005cb0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005cb4:	d82c      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cba:	d02f      	beq.n	8005d1c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005cc0:	d826      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cc2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005cc6:	d02b      	beq.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8005cc8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005ccc:	d820      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd2:	d012      	beq.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8005cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005cd8:	d81a      	bhi.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d022      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8005cde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce2:	d115      	bne.n	8005d10 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ce8:	3308      	adds	r3, #8
 8005cea:	2100      	movs	r1, #0
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fe57 	bl	80069a0 <RCCEx_PLL2_Config>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005cf8:	e015      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005cfe:	3328      	adds	r3, #40	@ 0x28
 8005d00:	2102      	movs	r1, #2
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fefe 	bl	8006b04 <RCCEx_PLL3_Config>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005d0e:	e00a      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005d16:	e006      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d18:	bf00      	nop
 8005d1a:	e004      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d1c:	bf00      	nop
 8005d1e:	e002      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d20:	bf00      	nop
 8005d22:	e000      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8005d24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d10e      	bne.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d2e:	4b06      	ldr	r3, [pc, #24]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d32:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8005d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005d3e:	4a02      	ldr	r2, [pc, #8]	@ (8005d48 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8005d40:	430b      	orrs	r3, r1
 8005d42:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d44:	e006      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8005d46:	bf00      	nop
 8005d48:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005d50:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005d60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005d64:	2300      	movs	r3, #0
 8005d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005d6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4313      	orrs	r3, r2
 8005d72:	d055      	beq.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8005d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005d78:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005d7c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d80:	d033      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8005d82:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8005d86:	d82c      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d8c:	d02f      	beq.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8005d8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d92:	d826      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005d94:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d98:	d02b      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8005d9a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8005d9e:	d820      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005da0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005da4:	d012      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8005da6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005daa:	d81a      	bhi.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d022      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8005db0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005db4:	d115      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dba:	3308      	adds	r3, #8
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f000 fdee 	bl	80069a0 <RCCEx_PLL2_Config>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005dca:	e015      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005dd0:	3328      	adds	r3, #40	@ 0x28
 8005dd2:	2102      	movs	r1, #2
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f000 fe95 	bl	8006b04 <RCCEx_PLL3_Config>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005de0:	e00a      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005de8:	e006      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005dea:	bf00      	nop
 8005dec:	e004      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005dee:	bf00      	nop
 8005df0:	e002      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8005df6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10b      	bne.n	8005e18 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005e00:	4ba1      	ldr	r3, [pc, #644]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e04:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8005e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005e10:	4a9d      	ldr	r2, [pc, #628]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e12:	430b      	orrs	r3, r1
 8005e14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005e16:	e003      	b.n	8005e20 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005e1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8005e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e28:	f002 0308 	and.w	r3, r2, #8
 8005e2c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e30:	2300      	movs	r3, #0
 8005e32:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005e36:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	d01e      	beq.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8005e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e4c:	d10c      	bne.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e52:	3328      	adds	r3, #40	@ 0x28
 8005e54:	2102      	movs	r1, #2
 8005e56:	4618      	mov	r0, r3
 8005e58:	f000 fe54 	bl	8006b04 <RCCEx_PLL3_Config>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d002      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005e68:	4b87      	ldr	r3, [pc, #540]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e6c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e78:	4a83      	ldr	r2, [pc, #524]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005e7a:	430b      	orrs	r3, r1
 8005e7c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	f002 0310 	and.w	r3, r2, #16
 8005e8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e8e:	2300      	movs	r3, #0
 8005e90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005e94:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005e98:	460b      	mov	r3, r1
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	d01e      	beq.n	8005edc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8005e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ea2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ea6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005eaa:	d10c      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005eb0:	3328      	adds	r3, #40	@ 0x28
 8005eb2:	2102      	movs	r1, #2
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 fe25 	bl	8006b04 <RCCEx_PLL3_Config>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8005ec0:	2301      	movs	r3, #1
 8005ec2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005ec6:	4b70      	ldr	r3, [pc, #448]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ed2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005ed6:	4a6c      	ldr	r2, [pc, #432]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ed8:	430b      	orrs	r3, r1
 8005eda:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005ee8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005ef2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005ef6:	460b      	mov	r3, r1
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	d03e      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f04:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f08:	d022      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8005f0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f0e:	d81b      	bhi.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d003      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8005f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f18:	d00b      	beq.n	8005f32 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8005f1a:	e015      	b.n	8005f48 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f20:	3308      	adds	r3, #8
 8005f22:	2100      	movs	r1, #0
 8005f24:	4618      	mov	r0, r3
 8005f26:	f000 fd3b 	bl	80069a0 <RCCEx_PLL2_Config>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f30:	e00f      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f36:	3328      	adds	r3, #40	@ 0x28
 8005f38:	2102      	movs	r1, #2
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f000 fde2 	bl	8006b04 <RCCEx_PLL3_Config>
 8005f40:	4603      	mov	r3, r0
 8005f42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005f46:	e004      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005f4e:	e000      	b.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8005f50:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d10b      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f5a:	4b4b      	ldr	r3, [pc, #300]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005f5e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005f62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005f6a:	4a47      	ldr	r2, [pc, #284]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005f70:	e003      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005f86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f88:	2300      	movs	r3, #0
 8005f8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f8c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005f90:	460b      	mov	r3, r1
 8005f92:	4313      	orrs	r3, r2
 8005f94:	d03b      	beq.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f9e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fa2:	d01f      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8005fa4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005fa8:	d818      	bhi.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8005faa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005fae:	d003      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8005fb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005fb4:	d007      	beq.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8005fb6:	e011      	b.n	8005fdc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005fb8:	4b33      	ldr	r3, [pc, #204]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	4a32      	ldr	r2, [pc, #200]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005fbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005fc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005fc4:	e00f      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005fca:	3328      	adds	r3, #40	@ 0x28
 8005fcc:	2101      	movs	r1, #1
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f000 fd98 	bl	8006b04 <RCCEx_PLL3_Config>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8005fda:	e004      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8005fe2:	e000      	b.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8005fe4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fe6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005fee:	4b26      	ldr	r3, [pc, #152]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ff2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ffe:	4a22      	ldr	r2, [pc, #136]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006000:	430b      	orrs	r3, r1
 8006002:	6553      	str	r3, [r2, #84]	@ 0x54
 8006004:	e003      	b.n	800600e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006006:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800600a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800600e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006016:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800601a:	673b      	str	r3, [r7, #112]	@ 0x70
 800601c:	2300      	movs	r3, #0
 800601e:	677b      	str	r3, [r7, #116]	@ 0x74
 8006020:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8006024:	460b      	mov	r3, r1
 8006026:	4313      	orrs	r3, r2
 8006028:	d034      	beq.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800602e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006038:	d007      	beq.n	800604a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800603a:	e011      	b.n	8006060 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800603c:	4b12      	ldr	r3, [pc, #72]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800603e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006040:	4a11      	ldr	r2, [pc, #68]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006042:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006046:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006048:	e00e      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800604a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800604e:	3308      	adds	r3, #8
 8006050:	2102      	movs	r1, #2
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fca4 	bl	80069a0 <RCCEx_PLL2_Config>
 8006058:	4603      	mov	r3, r0
 800605a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800605e:	e003      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006066:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006068:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800606c:	2b00      	cmp	r3, #0
 800606e:	d10d      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006070:	4b05      	ldr	r3, [pc, #20]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006072:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006074:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800607c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800607e:	4a02      	ldr	r2, [pc, #8]	@ (8006088 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8006080:	430b      	orrs	r3, r1
 8006082:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006084:	e006      	b.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8006086:	bf00      	nop
 8006088:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800608c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006090:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800609c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80060a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060a2:	2300      	movs	r3, #0
 80060a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060a6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80060aa:	460b      	mov	r3, r1
 80060ac:	4313      	orrs	r3, r2
 80060ae:	d00c      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80060b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060b4:	3328      	adds	r3, #40	@ 0x28
 80060b6:	2102      	movs	r1, #2
 80060b8:	4618      	mov	r0, r3
 80060ba:	f000 fd23 	bl	8006b04 <RCCEx_PLL3_Config>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80060ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80060d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80060d8:	2300      	movs	r3, #0
 80060da:	667b      	str	r3, [r7, #100]	@ 0x64
 80060dc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80060e0:	460b      	mov	r3, r1
 80060e2:	4313      	orrs	r3, r2
 80060e4:	d038      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80060e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80060ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80060ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060f2:	d018      	beq.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80060f4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80060f8:	d811      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80060fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80060fe:	d014      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8006100:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006104:	d80b      	bhi.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8006106:	2b00      	cmp	r3, #0
 8006108:	d011      	beq.n	800612e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800610a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800610e:	d106      	bne.n	800611e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006110:	4bc3      	ldr	r3, [pc, #780]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006112:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006114:	4ac2      	ldr	r2, [pc, #776]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006116:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800611a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800611c:	e008      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006124:	e004      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8006126:	bf00      	nop
 8006128:	e002      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800612a:	bf00      	nop
 800612c:	e000      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800612e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006130:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10b      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006138:	4bb9      	ldr	r3, [pc, #740]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800613a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800613c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006140:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006148:	4ab5      	ldr	r2, [pc, #724]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800614a:	430b      	orrs	r3, r1
 800614c:	6553      	str	r3, [r2, #84]	@ 0x54
 800614e:	e003      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006154:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006158:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800615c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006160:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006164:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006166:	2300      	movs	r3, #0
 8006168:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800616a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800616e:	460b      	mov	r3, r1
 8006170:	4313      	orrs	r3, r2
 8006172:	d009      	beq.n	8006188 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006174:	4baa      	ldr	r3, [pc, #680]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006178:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800617c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006180:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006182:	4aa7      	ldr	r2, [pc, #668]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006184:	430b      	orrs	r3, r1
 8006186:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800618c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006190:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8006194:	653b      	str	r3, [r7, #80]	@ 0x50
 8006196:	2300      	movs	r3, #0
 8006198:	657b      	str	r3, [r7, #84]	@ 0x54
 800619a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800619e:	460b      	mov	r3, r1
 80061a0:	4313      	orrs	r3, r2
 80061a2:	d00a      	beq.n	80061ba <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80061a4:	4b9e      	ldr	r3, [pc, #632]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80061ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061b0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80061b4:	4a9a      	ldr	r2, [pc, #616]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061b6:	430b      	orrs	r3, r1
 80061b8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80061ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80061c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80061c8:	2300      	movs	r3, #0
 80061ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061cc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80061d0:	460b      	mov	r3, r1
 80061d2:	4313      	orrs	r3, r2
 80061d4:	d009      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80061d6:	4b92      	ldr	r3, [pc, #584]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061da:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80061de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80061e4:	4a8e      	ldr	r2, [pc, #568]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80061e6:	430b      	orrs	r3, r1
 80061e8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80061ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80061ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80061f6:	643b      	str	r3, [r7, #64]	@ 0x40
 80061f8:	2300      	movs	r3, #0
 80061fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80061fc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006200:	460b      	mov	r3, r1
 8006202:	4313      	orrs	r3, r2
 8006204:	d00e      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006206:	4b86      	ldr	r3, [pc, #536]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	4a85      	ldr	r2, [pc, #532]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800620c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006210:	6113      	str	r3, [r2, #16]
 8006212:	4b83      	ldr	r3, [pc, #524]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006214:	6919      	ldr	r1, [r3, #16]
 8006216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800621a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800621e:	4a80      	ldr	r2, [pc, #512]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006220:	430b      	orrs	r3, r1
 8006222:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006224:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006232:	2300      	movs	r3, #0
 8006234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006236:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800623a:	460b      	mov	r3, r1
 800623c:	4313      	orrs	r3, r2
 800623e:	d009      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006240:	4b77      	ldr	r3, [pc, #476]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006244:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006248:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800624c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800624e:	4a74      	ldr	r2, [pc, #464]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006250:	430b      	orrs	r3, r1
 8006252:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006260:	633b      	str	r3, [r7, #48]	@ 0x30
 8006262:	2300      	movs	r3, #0
 8006264:	637b      	str	r3, [r7, #52]	@ 0x34
 8006266:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800626a:	460b      	mov	r3, r1
 800626c:	4313      	orrs	r3, r2
 800626e:	d00a      	beq.n	8006286 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006270:	4b6b      	ldr	r3, [pc, #428]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006274:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006278:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800627c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006280:	4a67      	ldr	r2, [pc, #412]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8006282:	430b      	orrs	r3, r1
 8006284:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006286:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800628a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800628e:	2100      	movs	r1, #0
 8006290:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006292:	f003 0301 	and.w	r3, r3, #1
 8006296:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006298:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800629c:	460b      	mov	r3, r1
 800629e:	4313      	orrs	r3, r2
 80062a0:	d011      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062a6:	3308      	adds	r3, #8
 80062a8:	2100      	movs	r1, #0
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fb78 	bl	80069a0 <RCCEx_PLL2_Config>
 80062b0:	4603      	mov	r3, r0
 80062b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d003      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80062c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ce:	2100      	movs	r1, #0
 80062d0:	6239      	str	r1, [r7, #32]
 80062d2:	f003 0302 	and.w	r3, r3, #2
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80062d8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80062dc:	460b      	mov	r3, r1
 80062de:	4313      	orrs	r3, r2
 80062e0:	d011      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80062e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80062e6:	3308      	adds	r3, #8
 80062e8:	2101      	movs	r1, #1
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 fb58 	bl	80069a0 <RCCEx_PLL2_Config>
 80062f0:	4603      	mov	r3, r0
 80062f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80062f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006302:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800630a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630e:	2100      	movs	r1, #0
 8006310:	61b9      	str	r1, [r7, #24]
 8006312:	f003 0304 	and.w	r3, r3, #4
 8006316:	61fb      	str	r3, [r7, #28]
 8006318:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800631c:	460b      	mov	r3, r1
 800631e:	4313      	orrs	r3, r2
 8006320:	d011      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006326:	3308      	adds	r3, #8
 8006328:	2102      	movs	r1, #2
 800632a:	4618      	mov	r0, r3
 800632c:	f000 fb38 	bl	80069a0 <RCCEx_PLL2_Config>
 8006330:	4603      	mov	r3, r0
 8006332:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8006336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800634a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634e:	2100      	movs	r1, #0
 8006350:	6139      	str	r1, [r7, #16]
 8006352:	f003 0308 	and.w	r3, r3, #8
 8006356:	617b      	str	r3, [r7, #20]
 8006358:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800635c:	460b      	mov	r3, r1
 800635e:	4313      	orrs	r3, r2
 8006360:	d011      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006362:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006366:	3328      	adds	r3, #40	@ 0x28
 8006368:	2100      	movs	r1, #0
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fbca 	bl	8006b04 <RCCEx_PLL3_Config>
 8006370:	4603      	mov	r3, r0
 8006372:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8006376:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800637a:	2b00      	cmp	r3, #0
 800637c:	d003      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800637e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006382:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006386:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	2100      	movs	r1, #0
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	60fb      	str	r3, [r7, #12]
 8006398:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800639c:	460b      	mov	r3, r1
 800639e:	4313      	orrs	r3, r2
 80063a0:	d011      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80063a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063a6:	3328      	adds	r3, #40	@ 0x28
 80063a8:	2101      	movs	r1, #1
 80063aa:	4618      	mov	r0, r3
 80063ac:	f000 fbaa 	bl	8006b04 <RCCEx_PLL3_Config>
 80063b0:	4603      	mov	r3, r0
 80063b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80063b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80063c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063ce:	2100      	movs	r1, #0
 80063d0:	6039      	str	r1, [r7, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	607b      	str	r3, [r7, #4]
 80063d8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80063dc:	460b      	mov	r3, r1
 80063de:	4313      	orrs	r3, r2
 80063e0:	d011      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80063e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80063e6:	3328      	adds	r3, #40	@ 0x28
 80063e8:	2102      	movs	r1, #2
 80063ea:	4618      	mov	r0, r3
 80063ec:	f000 fb8a 	bl	8006b04 <RCCEx_PLL3_Config>
 80063f0:	4603      	mov	r3, r0
 80063f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80063f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006402:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8006406:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800640a:	2b00      	cmp	r3, #0
 800640c:	d101      	bne.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800640e:	2300      	movs	r3, #0
 8006410:	e000      	b.n	8006414 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
}
 8006414:	4618      	mov	r0, r3
 8006416:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800641a:	46bd      	mov	sp, r7
 800641c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006420:	58024400 	.word	0x58024400

08006424 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006428:	f7fe fd96 	bl	8004f58 <HAL_RCC_GetHCLKFreq>
 800642c:	4602      	mov	r2, r0
 800642e:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006430:	6a1b      	ldr	r3, [r3, #32]
 8006432:	091b      	lsrs	r3, r3, #4
 8006434:	f003 0307 	and.w	r3, r3, #7
 8006438:	4904      	ldr	r1, [pc, #16]	@ (800644c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800643a:	5ccb      	ldrb	r3, [r1, r3]
 800643c:	f003 031f 	and.w	r3, r3, #31
 8006440:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	58024400 	.word	0x58024400
 800644c:	0800886c 	.word	0x0800886c

08006450 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006450:	b480      	push	{r7}
 8006452:	b089      	sub	sp, #36	@ 0x24
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006458:	4ba1      	ldr	r3, [pc, #644]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800645a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800645c:	f003 0303 	and.w	r3, r3, #3
 8006460:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006462:	4b9f      	ldr	r3, [pc, #636]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006466:	0b1b      	lsrs	r3, r3, #12
 8006468:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800646c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800646e:	4b9c      	ldr	r3, [pc, #624]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006472:	091b      	lsrs	r3, r3, #4
 8006474:	f003 0301 	and.w	r3, r3, #1
 8006478:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800647a:	4b99      	ldr	r3, [pc, #612]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	08db      	lsrs	r3, r3, #3
 8006480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	fb02 f303 	mul.w	r3, r2, r3
 800648a:	ee07 3a90 	vmov	s15, r3
 800648e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006492:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2b00      	cmp	r3, #0
 800649a:	f000 8111 	beq.w	80066c0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	f000 8083 	beq.w	80065ac <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	f200 80a1 	bhi.w	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80064ae:	69bb      	ldr	r3, [r7, #24]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d003      	beq.n	80064bc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d056      	beq.n	8006568 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80064ba:	e099      	b.n	80065f0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064bc:	4b88      	ldr	r3, [pc, #544]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0320 	and.w	r3, r3, #32
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d02d      	beq.n	8006524 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80064c8:	4b85      	ldr	r3, [pc, #532]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	08db      	lsrs	r3, r3, #3
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	4a84      	ldr	r2, [pc, #528]	@ (80066e4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80064d4:	fa22 f303 	lsr.w	r3, r2, r3
 80064d8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	ee07 3a90 	vmov	s15, r3
 80064e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	4b7b      	ldr	r3, [pc, #492]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80064f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006502:	ed97 6a03 	vldr	s12, [r7, #12]
 8006506:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006512:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006522:	e087      	b.n	8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80066ec <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	4b6a      	ldr	r3, [pc, #424]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006546:	ed97 6a03 	vldr	s12, [r7, #12]
 800654a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006566:	e065      	b.n	8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80066f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657a:	4b59      	ldr	r3, [pc, #356]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800657c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658a:	ed97 6a03 	vldr	s12, [r7, #12]
 800658e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065aa:	e043      	b.n	8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	ee07 3a90 	vmov	s15, r3
 80065b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065b6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80066f4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80065ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80065be:	4b48      	ldr	r3, [pc, #288]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80065c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065c6:	ee07 3a90 	vmov	s15, r3
 80065ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80065ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80065d2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80065d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80065da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80065de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80065e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065ee:	e021      	b.n	8006634 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	ee07 3a90 	vmov	s15, r3
 80065f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80066f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80065fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006602:	4b37      	ldr	r3, [pc, #220]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800660a:	ee07 3a90 	vmov	s15, r3
 800660e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006612:	ed97 6a03 	vldr	s12, [r7, #12]
 8006616:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80066e8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800661a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800661e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006622:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006626:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800662a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800662e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006632:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006634:	4b2a      	ldr	r3, [pc, #168]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	0a5b      	lsrs	r3, r3, #9
 800663a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800663e:	ee07 3a90 	vmov	s15, r3
 8006642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006646:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800664a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800664e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800665a:	ee17 2a90 	vmov	r2, s15
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006662:	4b1f      	ldr	r3, [pc, #124]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006666:	0c1b      	lsrs	r3, r3, #16
 8006668:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800666c:	ee07 3a90 	vmov	s15, r3
 8006670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006674:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006678:	ee37 7a87 	vadd.f32	s14, s15, s14
 800667c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006688:	ee17 2a90 	vmov	r2, s15
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006690:	4b13      	ldr	r3, [pc, #76]	@ (80066e0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006692:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006694:	0e1b      	lsrs	r3, r3, #24
 8006696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800669a:	ee07 3a90 	vmov	s15, r3
 800669e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80066a6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80066aa:	edd7 6a07 	vldr	s13, [r7, #28]
 80066ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80066b6:	ee17 2a90 	vmov	r2, s15
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80066be:	e008      	b.n	80066d2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	609a      	str	r2, [r3, #8]
}
 80066d2:	bf00      	nop
 80066d4:	3724      	adds	r7, #36	@ 0x24
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr
 80066de:	bf00      	nop
 80066e0:	58024400 	.word	0x58024400
 80066e4:	03d09000 	.word	0x03d09000
 80066e8:	46000000 	.word	0x46000000
 80066ec:	4c742400 	.word	0x4c742400
 80066f0:	4a742400 	.word	0x4a742400
 80066f4:	4af42400 	.word	0x4af42400

080066f8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b089      	sub	sp, #36	@ 0x24
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006700:	4ba1      	ldr	r3, [pc, #644]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006704:	f003 0303 	and.w	r3, r3, #3
 8006708:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800670a:	4b9f      	ldr	r3, [pc, #636]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800670c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670e:	0d1b      	lsrs	r3, r3, #20
 8006710:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006714:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006716:	4b9c      	ldr	r3, [pc, #624]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006722:	4b99      	ldr	r3, [pc, #612]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006726:	08db      	lsrs	r3, r3, #3
 8006728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	fb02 f303 	mul.w	r3, r2, r3
 8006732:	ee07 3a90 	vmov	s15, r3
 8006736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800673a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f000 8111 	beq.w	8006968 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b02      	cmp	r3, #2
 800674a:	f000 8083 	beq.w	8006854 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	2b02      	cmp	r3, #2
 8006752:	f200 80a1 	bhi.w	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d003      	beq.n	8006764 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b01      	cmp	r3, #1
 8006760:	d056      	beq.n	8006810 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006762:	e099      	b.n	8006898 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006764:	4b88      	ldr	r3, [pc, #544]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b00      	cmp	r3, #0
 800676e:	d02d      	beq.n	80067cc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006770:	4b85      	ldr	r3, [pc, #532]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	08db      	lsrs	r3, r3, #3
 8006776:	f003 0303 	and.w	r3, r3, #3
 800677a:	4a84      	ldr	r2, [pc, #528]	@ (800698c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800677c:	fa22 f303 	lsr.w	r3, r2, r3
 8006780:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	ee07 3a90 	vmov	s15, r3
 8006788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	ee07 3a90 	vmov	s15, r3
 8006792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800679a:	4b7b      	ldr	r3, [pc, #492]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800679c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800679e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a2:	ee07 3a90 	vmov	s15, r3
 80067a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ae:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80067be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80067ca:	e087      	b.n	80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006994 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80067da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067de:	4b6a      	ldr	r3, [pc, #424]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80067e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e6:	ee07 3a90 	vmov	s15, r3
 80067ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80067f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800680a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800680e:	e065      	b.n	80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	ee07 3a90 	vmov	s15, r3
 8006816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800681a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006998 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800681e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006822:	4b59      	ldr	r3, [pc, #356]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800682a:	ee07 3a90 	vmov	s15, r3
 800682e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006832:	ed97 6a03 	vldr	s12, [r7, #12]
 8006836:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800683a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006842:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800684a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006852:	e043      	b.n	80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	ee07 3a90 	vmov	s15, r3
 800685a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800685e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800699c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006866:	4b48      	ldr	r3, [pc, #288]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800686e:	ee07 3a90 	vmov	s15, r3
 8006872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006876:	ed97 6a03 	vldr	s12, [r7, #12]
 800687a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800687e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006886:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800688a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800688e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006892:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006896:	e021      	b.n	80068dc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	ee07 3a90 	vmov	s15, r3
 800689e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068a2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006998 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80068a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068aa:	4b37      	ldr	r3, [pc, #220]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068b2:	ee07 3a90 	vmov	s15, r3
 80068b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80068ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80068be:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006990 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80068c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80068c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80068ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80068ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80068d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80068da:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80068dc:	4b2a      	ldr	r3, [pc, #168]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80068de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e0:	0a5b      	lsrs	r3, r3, #9
 80068e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068e6:	ee07 3a90 	vmov	s15, r3
 80068ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80068f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80068fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006902:	ee17 2a90 	vmov	r2, s15
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800690a:	4b1f      	ldr	r3, [pc, #124]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800690c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800690e:	0c1b      	lsrs	r3, r3, #16
 8006910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006914:	ee07 3a90 	vmov	s15, r3
 8006918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800691c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006924:	edd7 6a07 	vldr	s13, [r7, #28]
 8006928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800692c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006930:	ee17 2a90 	vmov	r2, s15
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006938:	4b13      	ldr	r3, [pc, #76]	@ (8006988 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	0e1b      	lsrs	r3, r3, #24
 800693e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006942:	ee07 3a90 	vmov	s15, r3
 8006946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800694e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006952:	edd7 6a07 	vldr	s13, [r7, #28]
 8006956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800695a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800695e:	ee17 2a90 	vmov	r2, s15
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006966:	e008      	b.n	800697a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2200      	movs	r2, #0
 8006972:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	609a      	str	r2, [r3, #8]
}
 800697a:	bf00      	nop
 800697c:	3724      	adds	r7, #36	@ 0x24
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	58024400 	.word	0x58024400
 800698c:	03d09000 	.word	0x03d09000
 8006990:	46000000 	.word	0x46000000
 8006994:	4c742400 	.word	0x4c742400
 8006998:	4a742400 	.word	0x4a742400
 800699c:	4af42400 	.word	0x4af42400

080069a0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80069ae:	4b53      	ldr	r3, [pc, #332]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	f003 0303 	and.w	r3, r3, #3
 80069b6:	2b03      	cmp	r3, #3
 80069b8:	d101      	bne.n	80069be <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80069ba:	2301      	movs	r3, #1
 80069bc:	e099      	b.n	8006af2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80069be:	4b4f      	ldr	r3, [pc, #316]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4e      	ldr	r2, [pc, #312]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 80069c4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80069c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80069ca:	f7fa fba1 	bl	8001110 <HAL_GetTick>
 80069ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069d0:	e008      	b.n	80069e4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80069d2:	f7fa fb9d 	bl	8001110 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e086      	b.n	8006af2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80069e4:	4b45      	ldr	r3, [pc, #276]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80069f0:	4b42      	ldr	r3, [pc, #264]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 80069f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069f4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	031b      	lsls	r3, r3, #12
 80069fe:	493f      	ldr	r1, [pc, #252]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a00:	4313      	orrs	r3, r2
 8006a02:	628b      	str	r3, [r1, #40]	@ 0x28
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	689b      	ldr	r3, [r3, #8]
 8006a12:	3b01      	subs	r3, #1
 8006a14:	025b      	lsls	r3, r3, #9
 8006a16:	b29b      	uxth	r3, r3
 8006a18:	431a      	orrs	r2, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68db      	ldr	r3, [r3, #12]
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	041b      	lsls	r3, r3, #16
 8006a22:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006a26:	431a      	orrs	r2, r3
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	691b      	ldr	r3, [r3, #16]
 8006a2c:	3b01      	subs	r3, #1
 8006a2e:	061b      	lsls	r3, r3, #24
 8006a30:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006a34:	4931      	ldr	r1, [pc, #196]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006a3a:	4b30      	ldr	r3, [pc, #192]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a3e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695b      	ldr	r3, [r3, #20]
 8006a46:	492d      	ldr	r1, [pc, #180]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006a4c:	4b2b      	ldr	r3, [pc, #172]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a50:	f023 0220 	bic.w	r2, r3, #32
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	4928      	ldr	r1, [pc, #160]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006a5e:	4b27      	ldr	r3, [pc, #156]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a62:	4a26      	ldr	r2, [pc, #152]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a64:	f023 0310 	bic.w	r3, r3, #16
 8006a68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006a6a:	4b24      	ldr	r3, [pc, #144]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a6c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a6e:	4b24      	ldr	r3, [pc, #144]	@ (8006b00 <RCCEx_PLL2_Config+0x160>)
 8006a70:	4013      	ands	r3, r2
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	69d2      	ldr	r2, [r2, #28]
 8006a76:	00d2      	lsls	r2, r2, #3
 8006a78:	4920      	ldr	r1, [pc, #128]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a82:	4a1e      	ldr	r2, [pc, #120]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a84:	f043 0310 	orr.w	r3, r3, #16
 8006a88:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d106      	bne.n	8006a9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a90:	4b1a      	ldr	r3, [pc, #104]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a94:	4a19      	ldr	r2, [pc, #100]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006a96:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006a9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006a9c:	e00f      	b.n	8006abe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d106      	bne.n	8006ab2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006aa4:	4b15      	ldr	r3, [pc, #84]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa8:	4a14      	ldr	r2, [pc, #80]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006aae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006ab0:	e005      	b.n	8006abe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006ab2:	4b12      	ldr	r3, [pc, #72]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ab6:	4a11      	ldr	r2, [pc, #68]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006ab8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006abc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006abe:	4b0f      	ldr	r3, [pc, #60]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006ac4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006ac8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aca:	f7fa fb21 	bl	8001110 <HAL_GetTick>
 8006ace:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ad0:	e008      	b.n	8006ae4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ad2:	f7fa fb1d 	bl	8001110 <HAL_GetTick>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	1ad3      	subs	r3, r2, r3
 8006adc:	2b02      	cmp	r3, #2
 8006ade:	d901      	bls.n	8006ae4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e006      	b.n	8006af2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006ae4:	4b05      	ldr	r3, [pc, #20]	@ (8006afc <RCCEx_PLL2_Config+0x15c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d0f0      	beq.n	8006ad2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	58024400 	.word	0x58024400
 8006b00:	ffff0007 	.word	0xffff0007

08006b04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006b12:	4b53      	ldr	r3, [pc, #332]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b16:	f003 0303 	and.w	r3, r3, #3
 8006b1a:	2b03      	cmp	r3, #3
 8006b1c:	d101      	bne.n	8006b22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e099      	b.n	8006c56 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006b22:	4b4f      	ldr	r3, [pc, #316]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a4e      	ldr	r2, [pc, #312]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2e:	f7fa faef 	bl	8001110 <HAL_GetTick>
 8006b32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b34:	e008      	b.n	8006b48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006b36:	f7fa faeb 	bl	8001110 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d901      	bls.n	8006b48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006b44:	2303      	movs	r3, #3
 8006b46:	e086      	b.n	8006c56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006b48:	4b45      	ldr	r3, [pc, #276]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d1f0      	bne.n	8006b36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006b54:	4b42      	ldr	r3, [pc, #264]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b58:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	051b      	lsls	r3, r3, #20
 8006b62:	493f      	ldr	r1, [pc, #252]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	628b      	str	r3, [r1, #40]	@ 0x28
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	3b01      	subs	r3, #1
 8006b6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	689b      	ldr	r3, [r3, #8]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	025b      	lsls	r3, r3, #9
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	3b01      	subs	r3, #1
 8006b84:	041b      	lsls	r3, r3, #16
 8006b86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006b8a:	431a      	orrs	r2, r3
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	3b01      	subs	r3, #1
 8006b92:	061b      	lsls	r3, r3, #24
 8006b94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006b98:	4931      	ldr	r1, [pc, #196]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b9e:	4b30      	ldr	r3, [pc, #192]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ba2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	695b      	ldr	r3, [r3, #20]
 8006baa:	492d      	ldr	r1, [pc, #180]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bb4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	4928      	ldr	r1, [pc, #160]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006bc2:	4b27      	ldr	r3, [pc, #156]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bc6:	4a26      	ldr	r2, [pc, #152]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006bcc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006bce:	4b24      	ldr	r3, [pc, #144]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bd0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006bd2:	4b24      	ldr	r3, [pc, #144]	@ (8006c64 <RCCEx_PLL3_Config+0x160>)
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	69d2      	ldr	r2, [r2, #28]
 8006bda:	00d2      	lsls	r2, r2, #3
 8006bdc:	4920      	ldr	r1, [pc, #128]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bde:	4313      	orrs	r3, r2
 8006be0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006be2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006be6:	4a1e      	ldr	r2, [pc, #120]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006be8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d106      	bne.n	8006c02 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006bf4:	4b1a      	ldr	r3, [pc, #104]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bf8:	4a19      	ldr	r2, [pc, #100]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006bfa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006bfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c00:	e00f      	b.n	8006c22 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d106      	bne.n	8006c16 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006c08:	4b15      	ldr	r3, [pc, #84]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c0c:	4a14      	ldr	r2, [pc, #80]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c0e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8006c12:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006c14:	e005      	b.n	8006c22 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006c16:	4b12      	ldr	r3, [pc, #72]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c1a:	4a11      	ldr	r2, [pc, #68]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006c20:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006c22:	4b0f      	ldr	r3, [pc, #60]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a0e      	ldr	r2, [pc, #56]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006c2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c2e:	f7fa fa6f 	bl	8001110 <HAL_GetTick>
 8006c32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c34:	e008      	b.n	8006c48 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006c36:	f7fa fa6b 	bl	8001110 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e006      	b.n	8006c56 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006c48:	4b05      	ldr	r3, [pc, #20]	@ (8006c60 <RCCEx_PLL3_Config+0x15c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3710      	adds	r7, #16
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	58024400 	.word	0x58024400
 8006c64:	ffff0007 	.word	0xffff0007

08006c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e042      	b.n	8006d00 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d106      	bne.n	8006c92 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7fa f923 	bl	8000ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2224      	movs	r2, #36	@ 0x24
 8006c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f022 0201 	bic.w	r2, r2, #1
 8006ca8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f001 fa0a 	bl	80080cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fc9f 	bl	80075fc <UART_SetConfig>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d101      	bne.n	8006cc8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	e01b      	b.n	8006d00 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	689a      	ldr	r2, [r3, #8]
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ce6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f042 0201 	orr.w	r2, r2, #1
 8006cf6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 fa89 	bl	8008210 <UART_CheckIdleState>
 8006cfe:	4603      	mov	r3, r0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b08a      	sub	sp, #40	@ 0x28
 8006d0c:	af02      	add	r7, sp, #8
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	60b9      	str	r1, [r7, #8]
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	4613      	mov	r3, r2
 8006d16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d1e:	2b20      	cmp	r3, #32
 8006d20:	d17b      	bne.n	8006e1a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d002      	beq.n	8006d2e <HAL_UART_Transmit+0x26>
 8006d28:	88fb      	ldrh	r3, [r7, #6]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e074      	b.n	8006e1c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2221      	movs	r2, #33	@ 0x21
 8006d3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d42:	f7fa f9e5 	bl	8001110 <HAL_GetTick>
 8006d46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	88fa      	ldrh	r2, [r7, #6]
 8006d4c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	88fa      	ldrh	r2, [r7, #6]
 8006d54:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d60:	d108      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	61bb      	str	r3, [r7, #24]
 8006d72:	e003      	b.n	8006d7c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d7c:	e030      	b.n	8006de0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	9300      	str	r3, [sp, #0]
 8006d82:	697b      	ldr	r3, [r7, #20]
 8006d84:	2200      	movs	r2, #0
 8006d86:	2180      	movs	r1, #128	@ 0x80
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	f001 faeb 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d005      	beq.n	8006da0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2220      	movs	r2, #32
 8006d98:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d9c:	2303      	movs	r3, #3
 8006d9e:	e03d      	b.n	8006e1c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10b      	bne.n	8006dbe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	881b      	ldrh	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006db4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006db6:	69bb      	ldr	r3, [r7, #24]
 8006db8:	3302      	adds	r3, #2
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e007      	b.n	8006dce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dbe:	69fb      	ldr	r3, [r7, #28]
 8006dc0:	781a      	ldrb	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	3b01      	subs	r3, #1
 8006dd8:	b29a      	uxth	r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1c8      	bne.n	8006d7e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	9300      	str	r3, [sp, #0]
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2200      	movs	r2, #0
 8006df4:	2140      	movs	r1, #64	@ 0x40
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	f001 fab4 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d005      	beq.n	8006e0e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e006      	b.n	8006e1c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	e000      	b.n	8006e1c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006e1a:	2302      	movs	r3, #2
  }
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3720      	adds	r7, #32
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b0ba      	sub	sp, #232	@ 0xe8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	69db      	ldr	r3, [r3, #28]
 8006e32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e4e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e52:	4013      	ands	r3, r2
 8006e54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d11b      	bne.n	8006e98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e64:	f003 0320 	and.w	r3, r3, #32
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d015      	beq.n	8006e98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e70:	f003 0320 	and.w	r3, r3, #32
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d105      	bne.n	8006e84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d009      	beq.n	8006e98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 8393 	beq.w	80075b4 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	4798      	blx	r3
      }
      return;
 8006e96:	e38d      	b.n	80075b4 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8123 	beq.w	80070e8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ea2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006ea6:	4b8d      	ldr	r3, [pc, #564]	@ (80070dc <HAL_UART_IRQHandler+0x2b8>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d106      	bne.n	8006ebc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006eae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006eb2:	4b8b      	ldr	r3, [pc, #556]	@ (80070e0 <HAL_UART_IRQHandler+0x2bc>)
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8116 	beq.w	80070e8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d011      	beq.n	8006eec <HAL_UART_IRQHandler+0xc8>
 8006ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00b      	beq.n	8006eec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ee2:	f043 0201 	orr.w	r2, r3, #1
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ef0:	f003 0302 	and.w	r3, r3, #2
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d011      	beq.n	8006f1c <HAL_UART_IRQHandler+0xf8>
 8006ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006efc:	f003 0301 	and.w	r3, r3, #1
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00b      	beq.n	8006f1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	2202      	movs	r2, #2
 8006f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f12:	f043 0204 	orr.w	r2, r3, #4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f20:	f003 0304 	and.w	r3, r3, #4
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d011      	beq.n	8006f4c <HAL_UART_IRQHandler+0x128>
 8006f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00b      	beq.n	8006f4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2204      	movs	r2, #4
 8006f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f42:	f043 0202 	orr.w	r2, r3, #2
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f50:	f003 0308 	and.w	r3, r3, #8
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d017      	beq.n	8006f88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f5c:	f003 0320 	and.w	r3, r3, #32
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d105      	bne.n	8006f70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f68:	4b5c      	ldr	r3, [pc, #368]	@ (80070dc <HAL_UART_IRQHandler+0x2b8>)
 8006f6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2208      	movs	r2, #8
 8006f76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f7e:	f043 0208 	orr.w	r2, r3, #8
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d012      	beq.n	8006fba <HAL_UART_IRQHandler+0x196>
 8006f94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f98:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fa8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fb0:	f043 0220 	orr.w	r2, r3, #32
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	f000 82f9 	beq.w	80075b8 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006fc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006fca:	f003 0320 	and.w	r3, r3, #32
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d013      	beq.n	8006ffa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006fd6:	f003 0320 	and.w	r3, r3, #32
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d105      	bne.n	8006fea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006fe2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d007      	beq.n	8006ffa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d003      	beq.n	8006ffa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006ff6:	6878      	ldr	r0, [r7, #4]
 8006ff8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007000:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b40      	cmp	r3, #64	@ 0x40
 8007010:	d005      	beq.n	800701e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007016:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800701a:	2b00      	cmp	r3, #0
 800701c:	d054      	beq.n	80070c8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f001 fa0e 	bl	8008440 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702e:	2b40      	cmp	r3, #64	@ 0x40
 8007030:	d146      	bne.n	80070c0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	3308      	adds	r3, #8
 8007038:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800703c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007040:	e853 3f00 	ldrex	r3, [r3]
 8007044:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007048:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800704c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007050:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800705e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007062:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007066:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800706a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007076:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d9      	bne.n	8007032 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007084:	2b00      	cmp	r3, #0
 8007086:	d017      	beq.n	80070b8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800708e:	4a15      	ldr	r2, [pc, #84]	@ (80070e4 <HAL_UART_IRQHandler+0x2c0>)
 8007090:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007098:	4618      	mov	r0, r3
 800709a:	f7fb fa09 	bl	80024b0 <HAL_DMA_Abort_IT>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d019      	beq.n	80070d8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80070b2:	4610      	mov	r0, r2
 80070b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b6:	e00f      	b.n	80070d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fa89 	bl	80075d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070be:	e00b      	b.n	80070d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070c0:	6878      	ldr	r0, [r7, #4]
 80070c2:	f000 fa85 	bl	80075d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070c6:	e007      	b.n	80070d8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f000 fa81 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80070d6:	e26f      	b.n	80075b8 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070d8:	bf00      	nop
    return;
 80070da:	e26d      	b.n	80075b8 <HAL_UART_IRQHandler+0x794>
 80070dc:	10000001 	.word	0x10000001
 80070e0:	04000120 	.word	0x04000120
 80070e4:	0800850d 	.word	0x0800850d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	f040 8203 	bne.w	80074f8 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070f6:	f003 0310 	and.w	r3, r3, #16
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 81fc 	beq.w	80074f8 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007104:	f003 0310 	and.w	r3, r3, #16
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 81f5 	beq.w	80074f8 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2210      	movs	r2, #16
 8007114:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007120:	2b40      	cmp	r3, #64	@ 0x40
 8007122:	f040 816d 	bne.w	8007400 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4aa4      	ldr	r2, [pc, #656]	@ (80073c0 <HAL_UART_IRQHandler+0x59c>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d068      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4aa1      	ldr	r2, [pc, #644]	@ (80073c4 <HAL_UART_IRQHandler+0x5a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d061      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a9f      	ldr	r2, [pc, #636]	@ (80073c8 <HAL_UART_IRQHandler+0x5a4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d05a      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a9c      	ldr	r2, [pc, #624]	@ (80073cc <HAL_UART_IRQHandler+0x5a8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d053      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a9a      	ldr	r2, [pc, #616]	@ (80073d0 <HAL_UART_IRQHandler+0x5ac>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d04c      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a97      	ldr	r2, [pc, #604]	@ (80073d4 <HAL_UART_IRQHandler+0x5b0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d045      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a95      	ldr	r2, [pc, #596]	@ (80073d8 <HAL_UART_IRQHandler+0x5b4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d03e      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a92      	ldr	r2, [pc, #584]	@ (80073dc <HAL_UART_IRQHandler+0x5b8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d037      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a90      	ldr	r2, [pc, #576]	@ (80073e0 <HAL_UART_IRQHandler+0x5bc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d030      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a8d      	ldr	r2, [pc, #564]	@ (80073e4 <HAL_UART_IRQHandler+0x5c0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d029      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a8b      	ldr	r2, [pc, #556]	@ (80073e8 <HAL_UART_IRQHandler+0x5c4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d022      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a88      	ldr	r2, [pc, #544]	@ (80073ec <HAL_UART_IRQHandler+0x5c8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d01b      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a86      	ldr	r2, [pc, #536]	@ (80073f0 <HAL_UART_IRQHandler+0x5cc>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d014      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a83      	ldr	r2, [pc, #524]	@ (80073f4 <HAL_UART_IRQHandler+0x5d0>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00d      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a81      	ldr	r2, [pc, #516]	@ (80073f8 <HAL_UART_IRQHandler+0x5d4>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d006      	beq.n	8007206 <HAL_UART_IRQHandler+0x3e2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a7e      	ldr	r2, [pc, #504]	@ (80073fc <HAL_UART_IRQHandler+0x5d8>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d106      	bne.n	8007214 <HAL_UART_IRQHandler+0x3f0>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	b29b      	uxth	r3, r3
 8007212:	e005      	b.n	8007220 <HAL_UART_IRQHandler+0x3fc>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	685b      	ldr	r3, [r3, #4]
 800721e:	b29b      	uxth	r3, r3
 8007220:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80ad 	beq.w	8007388 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007234:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007238:	429a      	cmp	r2, r3
 800723a:	f080 80a5 	bcs.w	8007388 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007244:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800724e:	69db      	ldr	r3, [r3, #28]
 8007250:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007254:	f000 8087 	beq.w	8007366 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007260:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800726c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007270:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007274:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	461a      	mov	r2, r3
 800727e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007282:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007286:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800728e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007292:	e841 2300 	strex	r3, r2, [r1]
 8007296:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800729a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d1da      	bne.n	8007258 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072aa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072ac:	e853 3f00 	ldrex	r3, [r3]
 80072b0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80072b2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80072b4:	f023 0301 	bic.w	r3, r3, #1
 80072b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3308      	adds	r3, #8
 80072c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80072c6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80072ca:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072cc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80072ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e1      	bne.n	80072a2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	3308      	adds	r3, #8
 80072e4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072e8:	e853 3f00 	ldrex	r3, [r3]
 80072ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072f0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072f4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	3308      	adds	r3, #8
 80072fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007302:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007304:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007306:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007308:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800730a:	e841 2300 	strex	r3, r2, [r1]
 800730e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007310:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007312:	2b00      	cmp	r3, #0
 8007314:	d1e3      	bne.n	80072de <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2220      	movs	r2, #32
 800731a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2200      	movs	r2, #0
 8007322:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800732a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800732c:	e853 3f00 	ldrex	r3, [r3]
 8007330:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007332:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007334:	f023 0310 	bic.w	r3, r3, #16
 8007338:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	461a      	mov	r2, r3
 8007342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007346:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007348:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800734c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800734e:	e841 2300 	strex	r3, r2, [r1]
 8007352:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007354:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007356:	2b00      	cmp	r3, #0
 8007358:	d1e4      	bne.n	8007324 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007360:	4618      	mov	r0, r3
 8007362:	f7fa fd87 	bl	8001e74 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2202      	movs	r2, #2
 800736a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007378:	b29b      	uxth	r3, r3
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	b29b      	uxth	r3, r3
 800737e:	4619      	mov	r1, r3
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f000 f92f 	bl	80075e4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007386:	e119      	b.n	80075bc <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800738e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007392:	429a      	cmp	r2, r3
 8007394:	f040 8112 	bne.w	80075bc <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800739e:	69db      	ldr	r3, [r3, #28]
 80073a0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073a4:	f040 810a 	bne.w	80075bc <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2202      	movs	r2, #2
 80073ac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073b4:	4619      	mov	r1, r3
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f914 	bl	80075e4 <HAL_UARTEx_RxEventCallback>
      return;
 80073bc:	e0fe      	b.n	80075bc <HAL_UART_IRQHandler+0x798>
 80073be:	bf00      	nop
 80073c0:	40020010 	.word	0x40020010
 80073c4:	40020028 	.word	0x40020028
 80073c8:	40020040 	.word	0x40020040
 80073cc:	40020058 	.word	0x40020058
 80073d0:	40020070 	.word	0x40020070
 80073d4:	40020088 	.word	0x40020088
 80073d8:	400200a0 	.word	0x400200a0
 80073dc:	400200b8 	.word	0x400200b8
 80073e0:	40020410 	.word	0x40020410
 80073e4:	40020428 	.word	0x40020428
 80073e8:	40020440 	.word	0x40020440
 80073ec:	40020458 	.word	0x40020458
 80073f0:	40020470 	.word	0x40020470
 80073f4:	40020488 	.word	0x40020488
 80073f8:	400204a0 	.word	0x400204a0
 80073fc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800740c:	b29b      	uxth	r3, r3
 800740e:	1ad3      	subs	r3, r2, r3
 8007410:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800741a:	b29b      	uxth	r3, r3
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 80cf 	beq.w	80075c0 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007422:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007426:	2b00      	cmp	r3, #0
 8007428:	f000 80ca 	beq.w	80075c0 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800743a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800743c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007440:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	461a      	mov	r2, r3
 800744a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800744e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007450:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007454:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800745c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e4      	bne.n	800742c <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	3308      	adds	r3, #8
 8007468:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800746a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	623b      	str	r3, [r7, #32]
   return(result);
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	4b55      	ldr	r3, [pc, #340]	@ (80075cc <HAL_UART_IRQHandler+0x7a8>)
 8007476:	4013      	ands	r3, r2
 8007478:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007486:	633a      	str	r2, [r7, #48]	@ 0x30
 8007488:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800748c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800748e:	e841 2300 	strex	r3, r2, [r1]
 8007492:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1e3      	bne.n	8007462 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2220      	movs	r2, #32
 800749e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	e853 3f00 	ldrex	r3, [r3]
 80074ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f023 0310 	bic.w	r3, r3, #16
 80074c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	461a      	mov	r2, r3
 80074cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80074d0:	61fb      	str	r3, [r7, #28]
 80074d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d4:	69b9      	ldr	r1, [r7, #24]
 80074d6:	69fa      	ldr	r2, [r7, #28]
 80074d8:	e841 2300 	strex	r3, r2, [r1]
 80074dc:	617b      	str	r3, [r7, #20]
   return(result);
 80074de:	697b      	ldr	r3, [r7, #20]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1e4      	bne.n	80074ae <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074ee:	4619      	mov	r1, r3
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 f877 	bl	80075e4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074f6:	e063      	b.n	80075c0 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00e      	beq.n	8007522 <HAL_UART_IRQHandler+0x6fe>
 8007504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007508:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d008      	beq.n	8007522 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007518:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f001 f833 	bl	8008586 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007520:	e051      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007526:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752a:	2b00      	cmp	r3, #0
 800752c:	d014      	beq.n	8007558 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800752e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007536:	2b00      	cmp	r3, #0
 8007538:	d105      	bne.n	8007546 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800753a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800753e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007542:	2b00      	cmp	r3, #0
 8007544:	d008      	beq.n	8007558 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800754a:	2b00      	cmp	r3, #0
 800754c:	d03a      	beq.n	80075c4 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
    }
    return;
 8007556:	e035      	b.n	80075c4 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800755c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007560:	2b00      	cmp	r3, #0
 8007562:	d009      	beq.n	8007578 <HAL_UART_IRQHandler+0x754>
 8007564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800756c:	2b00      	cmp	r3, #0
 800756e:	d003      	beq.n	8007578 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 ffdd 	bl	8008530 <UART_EndTransmit_IT>
    return;
 8007576:	e026      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800757c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007580:	2b00      	cmp	r3, #0
 8007582:	d009      	beq.n	8007598 <HAL_UART_IRQHandler+0x774>
 8007584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007588:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800758c:	2b00      	cmp	r3, #0
 800758e:	d003      	beq.n	8007598 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 f80c 	bl	80085ae <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007596:	e016      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800759c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d010      	beq.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
 80075a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	da0c      	bge.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80075ac:	6878      	ldr	r0, [r7, #4]
 80075ae:	f000 fff4 	bl	800859a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80075b2:	e008      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80075b4:	bf00      	nop
 80075b6:	e006      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80075b8:	bf00      	nop
 80075ba:	e004      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80075bc:	bf00      	nop
 80075be:	e002      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
      return;
 80075c0:	bf00      	nop
 80075c2:	e000      	b.n	80075c6 <HAL_UART_IRQHandler+0x7a2>
    return;
 80075c4:	bf00      	nop
  }
}
 80075c6:	37e8      	adds	r7, #232	@ 0xe8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	effffffe 	.word	0xeffffffe

080075d0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075e4:	b480      	push	{r7}
 80075e6:	b083      	sub	sp, #12
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
 80075ec:	460b      	mov	r3, r1
 80075ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007600:	b092      	sub	sp, #72	@ 0x48
 8007602:	af00      	add	r7, sp, #0
 8007604:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007606:	2300      	movs	r3, #0
 8007608:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	689a      	ldr	r2, [r3, #8]
 8007610:	697b      	ldr	r3, [r7, #20]
 8007612:	691b      	ldr	r3, [r3, #16]
 8007614:	431a      	orrs	r2, r3
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	431a      	orrs	r2, r3
 800761c:	697b      	ldr	r3, [r7, #20]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	4313      	orrs	r3, r2
 8007622:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	4bbe      	ldr	r3, [pc, #760]	@ (8007924 <UART_SetConfig+0x328>)
 800762c:	4013      	ands	r3, r2
 800762e:	697a      	ldr	r2, [r7, #20]
 8007630:	6812      	ldr	r2, [r2, #0]
 8007632:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007634:	430b      	orrs	r3, r1
 8007636:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	68da      	ldr	r2, [r3, #12]
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	699b      	ldr	r3, [r3, #24]
 8007652:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4ab3      	ldr	r2, [pc, #716]	@ (8007928 <UART_SetConfig+0x32c>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007664:	4313      	orrs	r3, r2
 8007666:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	689a      	ldr	r2, [r3, #8]
 800766e:	4baf      	ldr	r3, [pc, #700]	@ (800792c <UART_SetConfig+0x330>)
 8007670:	4013      	ands	r3, r2
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	6812      	ldr	r2, [r2, #0]
 8007676:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007678:	430b      	orrs	r3, r1
 800767a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800767c:	697b      	ldr	r3, [r7, #20]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007682:	f023 010f 	bic.w	r1, r3, #15
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4aa6      	ldr	r2, [pc, #664]	@ (8007930 <UART_SetConfig+0x334>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d177      	bne.n	800778c <UART_SetConfig+0x190>
 800769c:	4ba5      	ldr	r3, [pc, #660]	@ (8007934 <UART_SetConfig+0x338>)
 800769e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076a4:	2b28      	cmp	r3, #40	@ 0x28
 80076a6:	d86d      	bhi.n	8007784 <UART_SetConfig+0x188>
 80076a8:	a201      	add	r2, pc, #4	@ (adr r2, 80076b0 <UART_SetConfig+0xb4>)
 80076aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ae:	bf00      	nop
 80076b0:	08007755 	.word	0x08007755
 80076b4:	08007785 	.word	0x08007785
 80076b8:	08007785 	.word	0x08007785
 80076bc:	08007785 	.word	0x08007785
 80076c0:	08007785 	.word	0x08007785
 80076c4:	08007785 	.word	0x08007785
 80076c8:	08007785 	.word	0x08007785
 80076cc:	08007785 	.word	0x08007785
 80076d0:	0800775d 	.word	0x0800775d
 80076d4:	08007785 	.word	0x08007785
 80076d8:	08007785 	.word	0x08007785
 80076dc:	08007785 	.word	0x08007785
 80076e0:	08007785 	.word	0x08007785
 80076e4:	08007785 	.word	0x08007785
 80076e8:	08007785 	.word	0x08007785
 80076ec:	08007785 	.word	0x08007785
 80076f0:	08007765 	.word	0x08007765
 80076f4:	08007785 	.word	0x08007785
 80076f8:	08007785 	.word	0x08007785
 80076fc:	08007785 	.word	0x08007785
 8007700:	08007785 	.word	0x08007785
 8007704:	08007785 	.word	0x08007785
 8007708:	08007785 	.word	0x08007785
 800770c:	08007785 	.word	0x08007785
 8007710:	0800776d 	.word	0x0800776d
 8007714:	08007785 	.word	0x08007785
 8007718:	08007785 	.word	0x08007785
 800771c:	08007785 	.word	0x08007785
 8007720:	08007785 	.word	0x08007785
 8007724:	08007785 	.word	0x08007785
 8007728:	08007785 	.word	0x08007785
 800772c:	08007785 	.word	0x08007785
 8007730:	08007775 	.word	0x08007775
 8007734:	08007785 	.word	0x08007785
 8007738:	08007785 	.word	0x08007785
 800773c:	08007785 	.word	0x08007785
 8007740:	08007785 	.word	0x08007785
 8007744:	08007785 	.word	0x08007785
 8007748:	08007785 	.word	0x08007785
 800774c:	08007785 	.word	0x08007785
 8007750:	0800777d 	.word	0x0800777d
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775a:	e222      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800775c:	2304      	movs	r3, #4
 800775e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007762:	e21e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007764:	2308      	movs	r3, #8
 8007766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800776a:	e21a      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800776c:	2310      	movs	r3, #16
 800776e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007772:	e216      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007774:	2320      	movs	r3, #32
 8007776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800777a:	e212      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800777c:	2340      	movs	r3, #64	@ 0x40
 800777e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007782:	e20e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007784:	2380      	movs	r3, #128	@ 0x80
 8007786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800778a:	e20a      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a69      	ldr	r2, [pc, #420]	@ (8007938 <UART_SetConfig+0x33c>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d130      	bne.n	80077f8 <UART_SetConfig+0x1fc>
 8007796:	4b67      	ldr	r3, [pc, #412]	@ (8007934 <UART_SetConfig+0x338>)
 8007798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800779a:	f003 0307 	and.w	r3, r3, #7
 800779e:	2b05      	cmp	r3, #5
 80077a0:	d826      	bhi.n	80077f0 <UART_SetConfig+0x1f4>
 80077a2:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <UART_SetConfig+0x1ac>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077c1 	.word	0x080077c1
 80077ac:	080077c9 	.word	0x080077c9
 80077b0:	080077d1 	.word	0x080077d1
 80077b4:	080077d9 	.word	0x080077d9
 80077b8:	080077e1 	.word	0x080077e1
 80077bc:	080077e9 	.word	0x080077e9
 80077c0:	2300      	movs	r3, #0
 80077c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c6:	e1ec      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077c8:	2304      	movs	r3, #4
 80077ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ce:	e1e8      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077d0:	2308      	movs	r3, #8
 80077d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d6:	e1e4      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077d8:	2310      	movs	r3, #16
 80077da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077de:	e1e0      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077e0:	2320      	movs	r3, #32
 80077e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077e6:	e1dc      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077e8:	2340      	movs	r3, #64	@ 0x40
 80077ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ee:	e1d8      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077f0:	2380      	movs	r3, #128	@ 0x80
 80077f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077f6:	e1d4      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a4f      	ldr	r2, [pc, #316]	@ (800793c <UART_SetConfig+0x340>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d130      	bne.n	8007864 <UART_SetConfig+0x268>
 8007802:	4b4c      	ldr	r3, [pc, #304]	@ (8007934 <UART_SetConfig+0x338>)
 8007804:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b05      	cmp	r3, #5
 800780c:	d826      	bhi.n	800785c <UART_SetConfig+0x260>
 800780e:	a201      	add	r2, pc, #4	@ (adr r2, 8007814 <UART_SetConfig+0x218>)
 8007810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007814:	0800782d 	.word	0x0800782d
 8007818:	08007835 	.word	0x08007835
 800781c:	0800783d 	.word	0x0800783d
 8007820:	08007845 	.word	0x08007845
 8007824:	0800784d 	.word	0x0800784d
 8007828:	08007855 	.word	0x08007855
 800782c:	2300      	movs	r3, #0
 800782e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007832:	e1b6      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007834:	2304      	movs	r3, #4
 8007836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783a:	e1b2      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800783c:	2308      	movs	r3, #8
 800783e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007842:	e1ae      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007844:	2310      	movs	r3, #16
 8007846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800784a:	e1aa      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800784c:	2320      	movs	r3, #32
 800784e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007852:	e1a6      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007854:	2340      	movs	r3, #64	@ 0x40
 8007856:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800785a:	e1a2      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800785c:	2380      	movs	r3, #128	@ 0x80
 800785e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007862:	e19e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a35      	ldr	r2, [pc, #212]	@ (8007940 <UART_SetConfig+0x344>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d130      	bne.n	80078d0 <UART_SetConfig+0x2d4>
 800786e:	4b31      	ldr	r3, [pc, #196]	@ (8007934 <UART_SetConfig+0x338>)
 8007870:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	2b05      	cmp	r3, #5
 8007878:	d826      	bhi.n	80078c8 <UART_SetConfig+0x2cc>
 800787a:	a201      	add	r2, pc, #4	@ (adr r2, 8007880 <UART_SetConfig+0x284>)
 800787c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007880:	08007899 	.word	0x08007899
 8007884:	080078a1 	.word	0x080078a1
 8007888:	080078a9 	.word	0x080078a9
 800788c:	080078b1 	.word	0x080078b1
 8007890:	080078b9 	.word	0x080078b9
 8007894:	080078c1 	.word	0x080078c1
 8007898:	2300      	movs	r3, #0
 800789a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789e:	e180      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078a0:	2304      	movs	r3, #4
 80078a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a6:	e17c      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078a8:	2308      	movs	r3, #8
 80078aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ae:	e178      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078b0:	2310      	movs	r3, #16
 80078b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078b6:	e174      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078b8:	2320      	movs	r3, #32
 80078ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078be:	e170      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078c0:	2340      	movs	r3, #64	@ 0x40
 80078c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078c6:	e16c      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078c8:	2380      	movs	r3, #128	@ 0x80
 80078ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ce:	e168      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 80078d0:	697b      	ldr	r3, [r7, #20]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a1b      	ldr	r2, [pc, #108]	@ (8007944 <UART_SetConfig+0x348>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d142      	bne.n	8007960 <UART_SetConfig+0x364>
 80078da:	4b16      	ldr	r3, [pc, #88]	@ (8007934 <UART_SetConfig+0x338>)
 80078dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	d838      	bhi.n	8007958 <UART_SetConfig+0x35c>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <UART_SetConfig+0x2f0>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007905 	.word	0x08007905
 80078f0:	0800790d 	.word	0x0800790d
 80078f4:	08007915 	.word	0x08007915
 80078f8:	0800791d 	.word	0x0800791d
 80078fc:	08007949 	.word	0x08007949
 8007900:	08007951 	.word	0x08007951
 8007904:	2300      	movs	r3, #0
 8007906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800790a:	e14a      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800790c:	2304      	movs	r3, #4
 800790e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007912:	e146      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007914:	2308      	movs	r3, #8
 8007916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800791a:	e142      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 800791c:	2310      	movs	r3, #16
 800791e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007922:	e13e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007924:	cfff69f3 	.word	0xcfff69f3
 8007928:	58000c00 	.word	0x58000c00
 800792c:	11fff4ff 	.word	0x11fff4ff
 8007930:	40011000 	.word	0x40011000
 8007934:	58024400 	.word	0x58024400
 8007938:	40004400 	.word	0x40004400
 800793c:	40004800 	.word	0x40004800
 8007940:	40004c00 	.word	0x40004c00
 8007944:	40005000 	.word	0x40005000
 8007948:	2320      	movs	r3, #32
 800794a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800794e:	e128      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007950:	2340      	movs	r3, #64	@ 0x40
 8007952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007956:	e124      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007958:	2380      	movs	r3, #128	@ 0x80
 800795a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800795e:	e120      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4acb      	ldr	r2, [pc, #812]	@ (8007c94 <UART_SetConfig+0x698>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d176      	bne.n	8007a58 <UART_SetConfig+0x45c>
 800796a:	4bcb      	ldr	r3, [pc, #812]	@ (8007c98 <UART_SetConfig+0x69c>)
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007972:	2b28      	cmp	r3, #40	@ 0x28
 8007974:	d86c      	bhi.n	8007a50 <UART_SetConfig+0x454>
 8007976:	a201      	add	r2, pc, #4	@ (adr r2, 800797c <UART_SetConfig+0x380>)
 8007978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800797c:	08007a21 	.word	0x08007a21
 8007980:	08007a51 	.word	0x08007a51
 8007984:	08007a51 	.word	0x08007a51
 8007988:	08007a51 	.word	0x08007a51
 800798c:	08007a51 	.word	0x08007a51
 8007990:	08007a51 	.word	0x08007a51
 8007994:	08007a51 	.word	0x08007a51
 8007998:	08007a51 	.word	0x08007a51
 800799c:	08007a29 	.word	0x08007a29
 80079a0:	08007a51 	.word	0x08007a51
 80079a4:	08007a51 	.word	0x08007a51
 80079a8:	08007a51 	.word	0x08007a51
 80079ac:	08007a51 	.word	0x08007a51
 80079b0:	08007a51 	.word	0x08007a51
 80079b4:	08007a51 	.word	0x08007a51
 80079b8:	08007a51 	.word	0x08007a51
 80079bc:	08007a31 	.word	0x08007a31
 80079c0:	08007a51 	.word	0x08007a51
 80079c4:	08007a51 	.word	0x08007a51
 80079c8:	08007a51 	.word	0x08007a51
 80079cc:	08007a51 	.word	0x08007a51
 80079d0:	08007a51 	.word	0x08007a51
 80079d4:	08007a51 	.word	0x08007a51
 80079d8:	08007a51 	.word	0x08007a51
 80079dc:	08007a39 	.word	0x08007a39
 80079e0:	08007a51 	.word	0x08007a51
 80079e4:	08007a51 	.word	0x08007a51
 80079e8:	08007a51 	.word	0x08007a51
 80079ec:	08007a51 	.word	0x08007a51
 80079f0:	08007a51 	.word	0x08007a51
 80079f4:	08007a51 	.word	0x08007a51
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a41 	.word	0x08007a41
 8007a00:	08007a51 	.word	0x08007a51
 8007a04:	08007a51 	.word	0x08007a51
 8007a08:	08007a51 	.word	0x08007a51
 8007a0c:	08007a51 	.word	0x08007a51
 8007a10:	08007a51 	.word	0x08007a51
 8007a14:	08007a51 	.word	0x08007a51
 8007a18:	08007a51 	.word	0x08007a51
 8007a1c:	08007a49 	.word	0x08007a49
 8007a20:	2301      	movs	r3, #1
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e0bc      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e0b8      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a30:	2308      	movs	r3, #8
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e0b4      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a38:	2310      	movs	r3, #16
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e0b0      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a40:	2320      	movs	r3, #32
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e0ac      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a48:	2340      	movs	r3, #64	@ 0x40
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e0a8      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a50:	2380      	movs	r3, #128	@ 0x80
 8007a52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a56:	e0a4      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a8f      	ldr	r2, [pc, #572]	@ (8007c9c <UART_SetConfig+0x6a0>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d130      	bne.n	8007ac4 <UART_SetConfig+0x4c8>
 8007a62:	4b8d      	ldr	r3, [pc, #564]	@ (8007c98 <UART_SetConfig+0x69c>)
 8007a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b05      	cmp	r3, #5
 8007a6c:	d826      	bhi.n	8007abc <UART_SetConfig+0x4c0>
 8007a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8007a74 <UART_SetConfig+0x478>)
 8007a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a74:	08007a8d 	.word	0x08007a8d
 8007a78:	08007a95 	.word	0x08007a95
 8007a7c:	08007a9d 	.word	0x08007a9d
 8007a80:	08007aa5 	.word	0x08007aa5
 8007a84:	08007aad 	.word	0x08007aad
 8007a88:	08007ab5 	.word	0x08007ab5
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e086      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a94:	2304      	movs	r3, #4
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e082      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007a9c:	2308      	movs	r3, #8
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e07e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e07a      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007aac:	2320      	movs	r3, #32
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e076      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007ab4:	2340      	movs	r3, #64	@ 0x40
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e072      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007abc:	2380      	movs	r3, #128	@ 0x80
 8007abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ac2:	e06e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	4a75      	ldr	r2, [pc, #468]	@ (8007ca0 <UART_SetConfig+0x6a4>)
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d130      	bne.n	8007b30 <UART_SetConfig+0x534>
 8007ace:	4b72      	ldr	r3, [pc, #456]	@ (8007c98 <UART_SetConfig+0x69c>)
 8007ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ad2:	f003 0307 	and.w	r3, r3, #7
 8007ad6:	2b05      	cmp	r3, #5
 8007ad8:	d826      	bhi.n	8007b28 <UART_SetConfig+0x52c>
 8007ada:	a201      	add	r2, pc, #4	@ (adr r2, 8007ae0 <UART_SetConfig+0x4e4>)
 8007adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae0:	08007af9 	.word	0x08007af9
 8007ae4:	08007b01 	.word	0x08007b01
 8007ae8:	08007b09 	.word	0x08007b09
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b19 	.word	0x08007b19
 8007af4:	08007b21 	.word	0x08007b21
 8007af8:	2300      	movs	r3, #0
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e050      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b00:	2304      	movs	r3, #4
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e04c      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b08:	2308      	movs	r3, #8
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e048      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b10:	2310      	movs	r3, #16
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e044      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b18:	2320      	movs	r3, #32
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e040      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b20:	2340      	movs	r3, #64	@ 0x40
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e03c      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b28:	2380      	movs	r3, #128	@ 0x80
 8007b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b2e:	e038      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a5b      	ldr	r2, [pc, #364]	@ (8007ca4 <UART_SetConfig+0x6a8>)
 8007b36:	4293      	cmp	r3, r2
 8007b38:	d130      	bne.n	8007b9c <UART_SetConfig+0x5a0>
 8007b3a:	4b57      	ldr	r3, [pc, #348]	@ (8007c98 <UART_SetConfig+0x69c>)
 8007b3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b3e:	f003 0307 	and.w	r3, r3, #7
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	d826      	bhi.n	8007b94 <UART_SetConfig+0x598>
 8007b46:	a201      	add	r2, pc, #4	@ (adr r2, 8007b4c <UART_SetConfig+0x550>)
 8007b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b4c:	08007b65 	.word	0x08007b65
 8007b50:	08007b6d 	.word	0x08007b6d
 8007b54:	08007b75 	.word	0x08007b75
 8007b58:	08007b7d 	.word	0x08007b7d
 8007b5c:	08007b85 	.word	0x08007b85
 8007b60:	08007b8d 	.word	0x08007b8d
 8007b64:	2302      	movs	r3, #2
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e01a      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b6c:	2304      	movs	r3, #4
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e016      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b74:	2308      	movs	r3, #8
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e012      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b82:	e00e      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b84:	2320      	movs	r3, #32
 8007b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b8a:	e00a      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b8c:	2340      	movs	r3, #64	@ 0x40
 8007b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b92:	e006      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b94:	2380      	movs	r3, #128	@ 0x80
 8007b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b9a:	e002      	b.n	8007ba2 <UART_SetConfig+0x5a6>
 8007b9c:	2380      	movs	r3, #128	@ 0x80
 8007b9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007ba2:	697b      	ldr	r3, [r7, #20]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8007ca4 <UART_SetConfig+0x6a8>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	f040 80f8 	bne.w	8007d9e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007bae:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	dc46      	bgt.n	8007c44 <UART_SetConfig+0x648>
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	f2c0 8082 	blt.w	8007cc0 <UART_SetConfig+0x6c4>
 8007bbc:	3b02      	subs	r3, #2
 8007bbe:	2b1e      	cmp	r3, #30
 8007bc0:	d87e      	bhi.n	8007cc0 <UART_SetConfig+0x6c4>
 8007bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8007bc8 <UART_SetConfig+0x5cc>)
 8007bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bc8:	08007c4b 	.word	0x08007c4b
 8007bcc:	08007cc1 	.word	0x08007cc1
 8007bd0:	08007c53 	.word	0x08007c53
 8007bd4:	08007cc1 	.word	0x08007cc1
 8007bd8:	08007cc1 	.word	0x08007cc1
 8007bdc:	08007cc1 	.word	0x08007cc1
 8007be0:	08007c63 	.word	0x08007c63
 8007be4:	08007cc1 	.word	0x08007cc1
 8007be8:	08007cc1 	.word	0x08007cc1
 8007bec:	08007cc1 	.word	0x08007cc1
 8007bf0:	08007cc1 	.word	0x08007cc1
 8007bf4:	08007cc1 	.word	0x08007cc1
 8007bf8:	08007cc1 	.word	0x08007cc1
 8007bfc:	08007cc1 	.word	0x08007cc1
 8007c00:	08007c73 	.word	0x08007c73
 8007c04:	08007cc1 	.word	0x08007cc1
 8007c08:	08007cc1 	.word	0x08007cc1
 8007c0c:	08007cc1 	.word	0x08007cc1
 8007c10:	08007cc1 	.word	0x08007cc1
 8007c14:	08007cc1 	.word	0x08007cc1
 8007c18:	08007cc1 	.word	0x08007cc1
 8007c1c:	08007cc1 	.word	0x08007cc1
 8007c20:	08007cc1 	.word	0x08007cc1
 8007c24:	08007cc1 	.word	0x08007cc1
 8007c28:	08007cc1 	.word	0x08007cc1
 8007c2c:	08007cc1 	.word	0x08007cc1
 8007c30:	08007cc1 	.word	0x08007cc1
 8007c34:	08007cc1 	.word	0x08007cc1
 8007c38:	08007cc1 	.word	0x08007cc1
 8007c3c:	08007cc1 	.word	0x08007cc1
 8007c40:	08007cb3 	.word	0x08007cb3
 8007c44:	2b40      	cmp	r3, #64	@ 0x40
 8007c46:	d037      	beq.n	8007cb8 <UART_SetConfig+0x6bc>
 8007c48:	e03a      	b.n	8007cc0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007c4a:	f7fe fbeb 	bl	8006424 <HAL_RCCEx_GetD3PCLK1Freq>
 8007c4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007c50:	e03c      	b.n	8007ccc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007c52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe fbfa 	bl	8006450 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c60:	e034      	b.n	8007ccc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007c62:	f107 0318 	add.w	r3, r7, #24
 8007c66:	4618      	mov	r0, r3
 8007c68:	f7fe fd46 	bl	80066f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007c6c:	69fb      	ldr	r3, [r7, #28]
 8007c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007c70:	e02c      	b.n	8007ccc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c72:	4b09      	ldr	r3, [pc, #36]	@ (8007c98 <UART_SetConfig+0x69c>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d016      	beq.n	8007cac <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007c7e:	4b06      	ldr	r3, [pc, #24]	@ (8007c98 <UART_SetConfig+0x69c>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	08db      	lsrs	r3, r3, #3
 8007c84:	f003 0303 	and.w	r3, r3, #3
 8007c88:	4a07      	ldr	r2, [pc, #28]	@ (8007ca8 <UART_SetConfig+0x6ac>)
 8007c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8007c8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007c90:	e01c      	b.n	8007ccc <UART_SetConfig+0x6d0>
 8007c92:	bf00      	nop
 8007c94:	40011400 	.word	0x40011400
 8007c98:	58024400 	.word	0x58024400
 8007c9c:	40007800 	.word	0x40007800
 8007ca0:	40007c00 	.word	0x40007c00
 8007ca4:	58000c00 	.word	0x58000c00
 8007ca8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007cac:	4b9d      	ldr	r3, [pc, #628]	@ (8007f24 <UART_SetConfig+0x928>)
 8007cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb0:	e00c      	b.n	8007ccc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007cb2:	4b9d      	ldr	r3, [pc, #628]	@ (8007f28 <UART_SetConfig+0x92c>)
 8007cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cb6:	e009      	b.n	8007ccc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cb8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007cbe:	e005      	b.n	8007ccc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007cca:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ccc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 81de 	beq.w	8008090 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cd8:	4a94      	ldr	r2, [pc, #592]	@ (8007f2c <UART_SetConfig+0x930>)
 8007cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ce2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ce6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	005b      	lsls	r3, r3, #1
 8007cf0:	4413      	add	r3, r2
 8007cf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d305      	bcc.n	8007d04 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007cfe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d903      	bls.n	8007d0c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007d04:	2301      	movs	r3, #1
 8007d06:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d0a:	e1c1      	b.n	8008090 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007d0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007d0e:	2200      	movs	r2, #0
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	60fa      	str	r2, [r7, #12]
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d18:	4a84      	ldr	r2, [pc, #528]	@ (8007f2c <UART_SetConfig+0x930>)
 8007d1a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007d1e:	b29b      	uxth	r3, r3
 8007d20:	2200      	movs	r2, #0
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	607a      	str	r2, [r7, #4]
 8007d26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007d2a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007d2e:	f7f8 fadb 	bl	80002e8 <__aeabi_uldivmod>
 8007d32:	4602      	mov	r2, r0
 8007d34:	460b      	mov	r3, r1
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	020b      	lsls	r3, r1, #8
 8007d44:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d48:	0202      	lsls	r2, r0, #8
 8007d4a:	6979      	ldr	r1, [r7, #20]
 8007d4c:	6849      	ldr	r1, [r1, #4]
 8007d4e:	0849      	lsrs	r1, r1, #1
 8007d50:	2000      	movs	r0, #0
 8007d52:	460c      	mov	r4, r1
 8007d54:	4605      	mov	r5, r0
 8007d56:	eb12 0804 	adds.w	r8, r2, r4
 8007d5a:	eb43 0905 	adc.w	r9, r3, r5
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	685b      	ldr	r3, [r3, #4]
 8007d62:	2200      	movs	r2, #0
 8007d64:	469a      	mov	sl, r3
 8007d66:	4693      	mov	fp, r2
 8007d68:	4652      	mov	r2, sl
 8007d6a:	465b      	mov	r3, fp
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	4649      	mov	r1, r9
 8007d70:	f7f8 faba 	bl	80002e8 <__aeabi_uldivmod>
 8007d74:	4602      	mov	r2, r0
 8007d76:	460b      	mov	r3, r1
 8007d78:	4613      	mov	r3, r2
 8007d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007d82:	d308      	bcc.n	8007d96 <UART_SetConfig+0x79a>
 8007d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d86:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007d8a:	d204      	bcs.n	8007d96 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d92:	60da      	str	r2, [r3, #12]
 8007d94:	e17c      	b.n	8008090 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007d9c:	e178      	b.n	8008090 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007da6:	f040 80c5 	bne.w	8007f34 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007daa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007dae:	2b20      	cmp	r3, #32
 8007db0:	dc48      	bgt.n	8007e44 <UART_SetConfig+0x848>
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	db7b      	blt.n	8007eae <UART_SetConfig+0x8b2>
 8007db6:	2b20      	cmp	r3, #32
 8007db8:	d879      	bhi.n	8007eae <UART_SetConfig+0x8b2>
 8007dba:	a201      	add	r2, pc, #4	@ (adr r2, 8007dc0 <UART_SetConfig+0x7c4>)
 8007dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc0:	08007e4b 	.word	0x08007e4b
 8007dc4:	08007e53 	.word	0x08007e53
 8007dc8:	08007eaf 	.word	0x08007eaf
 8007dcc:	08007eaf 	.word	0x08007eaf
 8007dd0:	08007e5b 	.word	0x08007e5b
 8007dd4:	08007eaf 	.word	0x08007eaf
 8007dd8:	08007eaf 	.word	0x08007eaf
 8007ddc:	08007eaf 	.word	0x08007eaf
 8007de0:	08007e6b 	.word	0x08007e6b
 8007de4:	08007eaf 	.word	0x08007eaf
 8007de8:	08007eaf 	.word	0x08007eaf
 8007dec:	08007eaf 	.word	0x08007eaf
 8007df0:	08007eaf 	.word	0x08007eaf
 8007df4:	08007eaf 	.word	0x08007eaf
 8007df8:	08007eaf 	.word	0x08007eaf
 8007dfc:	08007eaf 	.word	0x08007eaf
 8007e00:	08007e7b 	.word	0x08007e7b
 8007e04:	08007eaf 	.word	0x08007eaf
 8007e08:	08007eaf 	.word	0x08007eaf
 8007e0c:	08007eaf 	.word	0x08007eaf
 8007e10:	08007eaf 	.word	0x08007eaf
 8007e14:	08007eaf 	.word	0x08007eaf
 8007e18:	08007eaf 	.word	0x08007eaf
 8007e1c:	08007eaf 	.word	0x08007eaf
 8007e20:	08007eaf 	.word	0x08007eaf
 8007e24:	08007eaf 	.word	0x08007eaf
 8007e28:	08007eaf 	.word	0x08007eaf
 8007e2c:	08007eaf 	.word	0x08007eaf
 8007e30:	08007eaf 	.word	0x08007eaf
 8007e34:	08007eaf 	.word	0x08007eaf
 8007e38:	08007eaf 	.word	0x08007eaf
 8007e3c:	08007eaf 	.word	0x08007eaf
 8007e40:	08007ea1 	.word	0x08007ea1
 8007e44:	2b40      	cmp	r3, #64	@ 0x40
 8007e46:	d02e      	beq.n	8007ea6 <UART_SetConfig+0x8aa>
 8007e48:	e031      	b.n	8007eae <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e4a:	f7fd f8b5 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8007e4e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e50:	e033      	b.n	8007eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e52:	f7fd f8c7 	bl	8004fe4 <HAL_RCC_GetPCLK2Freq>
 8007e56:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e58:	e02f      	b.n	8007eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fe faf6 	bl	8006450 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e68:	e027      	b.n	8007eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e6a:	f107 0318 	add.w	r3, r7, #24
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f7fe fc42 	bl	80066f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e78:	e01f      	b.n	8007eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8007f30 <UART_SetConfig+0x934>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d009      	beq.n	8007e9a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e86:	4b2a      	ldr	r3, [pc, #168]	@ (8007f30 <UART_SetConfig+0x934>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	08db      	lsrs	r3, r3, #3
 8007e8c:	f003 0303 	and.w	r3, r3, #3
 8007e90:	4a24      	ldr	r2, [pc, #144]	@ (8007f24 <UART_SetConfig+0x928>)
 8007e92:	fa22 f303 	lsr.w	r3, r2, r3
 8007e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e98:	e00f      	b.n	8007eba <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e9a:	4b22      	ldr	r3, [pc, #136]	@ (8007f24 <UART_SetConfig+0x928>)
 8007e9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e9e:	e00c      	b.n	8007eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007ea0:	4b21      	ldr	r3, [pc, #132]	@ (8007f28 <UART_SetConfig+0x92c>)
 8007ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ea4:	e009      	b.n	8007eba <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ea6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007eac:	e005      	b.n	8007eba <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007eb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007eba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 80e7 	beq.w	8008090 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ec6:	4a19      	ldr	r2, [pc, #100]	@ (8007f2c <UART_SetConfig+0x930>)
 8007ec8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8007ed4:	005a      	lsls	r2, r3, #1
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	441a      	add	r2, r3
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	685b      	ldr	r3, [r3, #4]
 8007ee2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eea:	2b0f      	cmp	r3, #15
 8007eec:	d916      	bls.n	8007f1c <UART_SetConfig+0x920>
 8007eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ef4:	d212      	bcs.n	8007f1c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef8:	b29b      	uxth	r3, r3
 8007efa:	f023 030f 	bic.w	r3, r3, #15
 8007efe:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	085b      	lsrs	r3, r3, #1
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8007f18:	60da      	str	r2, [r3, #12]
 8007f1a:	e0b9      	b.n	8008090 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f22:	e0b5      	b.n	8008090 <UART_SetConfig+0xa94>
 8007f24:	03d09000 	.word	0x03d09000
 8007f28:	003d0900 	.word	0x003d0900
 8007f2c:	08008884 	.word	0x08008884
 8007f30:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007f34:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f38:	2b20      	cmp	r3, #32
 8007f3a:	dc49      	bgt.n	8007fd0 <UART_SetConfig+0x9d4>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	db7c      	blt.n	800803a <UART_SetConfig+0xa3e>
 8007f40:	2b20      	cmp	r3, #32
 8007f42:	d87a      	bhi.n	800803a <UART_SetConfig+0xa3e>
 8007f44:	a201      	add	r2, pc, #4	@ (adr r2, 8007f4c <UART_SetConfig+0x950>)
 8007f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4a:	bf00      	nop
 8007f4c:	08007fd7 	.word	0x08007fd7
 8007f50:	08007fdf 	.word	0x08007fdf
 8007f54:	0800803b 	.word	0x0800803b
 8007f58:	0800803b 	.word	0x0800803b
 8007f5c:	08007fe7 	.word	0x08007fe7
 8007f60:	0800803b 	.word	0x0800803b
 8007f64:	0800803b 	.word	0x0800803b
 8007f68:	0800803b 	.word	0x0800803b
 8007f6c:	08007ff7 	.word	0x08007ff7
 8007f70:	0800803b 	.word	0x0800803b
 8007f74:	0800803b 	.word	0x0800803b
 8007f78:	0800803b 	.word	0x0800803b
 8007f7c:	0800803b 	.word	0x0800803b
 8007f80:	0800803b 	.word	0x0800803b
 8007f84:	0800803b 	.word	0x0800803b
 8007f88:	0800803b 	.word	0x0800803b
 8007f8c:	08008007 	.word	0x08008007
 8007f90:	0800803b 	.word	0x0800803b
 8007f94:	0800803b 	.word	0x0800803b
 8007f98:	0800803b 	.word	0x0800803b
 8007f9c:	0800803b 	.word	0x0800803b
 8007fa0:	0800803b 	.word	0x0800803b
 8007fa4:	0800803b 	.word	0x0800803b
 8007fa8:	0800803b 	.word	0x0800803b
 8007fac:	0800803b 	.word	0x0800803b
 8007fb0:	0800803b 	.word	0x0800803b
 8007fb4:	0800803b 	.word	0x0800803b
 8007fb8:	0800803b 	.word	0x0800803b
 8007fbc:	0800803b 	.word	0x0800803b
 8007fc0:	0800803b 	.word	0x0800803b
 8007fc4:	0800803b 	.word	0x0800803b
 8007fc8:	0800803b 	.word	0x0800803b
 8007fcc:	0800802d 	.word	0x0800802d
 8007fd0:	2b40      	cmp	r3, #64	@ 0x40
 8007fd2:	d02e      	beq.n	8008032 <UART_SetConfig+0xa36>
 8007fd4:	e031      	b.n	800803a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd6:	f7fc ffef 	bl	8004fb8 <HAL_RCC_GetPCLK1Freq>
 8007fda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fdc:	e033      	b.n	8008046 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fde:	f7fd f801 	bl	8004fe4 <HAL_RCC_GetPCLK2Freq>
 8007fe2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007fe4:	e02f      	b.n	8008046 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007fe6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fe fa30 	bl	8006450 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007ff4:	e027      	b.n	8008046 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007ff6:	f107 0318 	add.w	r3, r7, #24
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fe fb7c 	bl	80066f8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008004:	e01f      	b.n	8008046 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008006:	4b2d      	ldr	r3, [pc, #180]	@ (80080bc <UART_SetConfig+0xac0>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0320 	and.w	r3, r3, #32
 800800e:	2b00      	cmp	r3, #0
 8008010:	d009      	beq.n	8008026 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008012:	4b2a      	ldr	r3, [pc, #168]	@ (80080bc <UART_SetConfig+0xac0>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	08db      	lsrs	r3, r3, #3
 8008018:	f003 0303 	and.w	r3, r3, #3
 800801c:	4a28      	ldr	r2, [pc, #160]	@ (80080c0 <UART_SetConfig+0xac4>)
 800801e:	fa22 f303 	lsr.w	r3, r2, r3
 8008022:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008024:	e00f      	b.n	8008046 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008026:	4b26      	ldr	r3, [pc, #152]	@ (80080c0 <UART_SetConfig+0xac4>)
 8008028:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800802a:	e00c      	b.n	8008046 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800802c:	4b25      	ldr	r3, [pc, #148]	@ (80080c4 <UART_SetConfig+0xac8>)
 800802e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008030:	e009      	b.n	8008046 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008032:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008036:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008038:	e005      	b.n	8008046 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800803a:	2300      	movs	r3, #0
 800803c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800803e:	2301      	movs	r3, #1
 8008040:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008044:	bf00      	nop
    }

    if (pclk != 0U)
 8008046:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008048:	2b00      	cmp	r3, #0
 800804a:	d021      	beq.n	8008090 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008050:	4a1d      	ldr	r2, [pc, #116]	@ (80080c8 <UART_SetConfig+0xacc>)
 8008052:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008056:	461a      	mov	r2, r3
 8008058:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805a:	fbb3 f2f2 	udiv	r2, r3, r2
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	085b      	lsrs	r3, r3, #1
 8008064:	441a      	add	r2, r3
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	fbb2 f3f3 	udiv	r3, r2, r3
 800806e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008070:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008072:	2b0f      	cmp	r3, #15
 8008074:	d909      	bls.n	800808a <UART_SetConfig+0xa8e>
 8008076:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008078:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800807c:	d205      	bcs.n	800808a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800807e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008080:	b29a      	uxth	r2, r3
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	60da      	str	r2, [r3, #12]
 8008088:	e002      	b.n	8008090 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800808a:	2301      	movs	r3, #1
 800808c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	2201      	movs	r2, #1
 8008094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	2201      	movs	r2, #1
 800809c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	2200      	movs	r2, #0
 80080a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	2200      	movs	r2, #0
 80080aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80080ac:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3748      	adds	r7, #72	@ 0x48
 80080b4:	46bd      	mov	sp, r7
 80080b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080ba:	bf00      	nop
 80080bc:	58024400 	.word	0x58024400
 80080c0:	03d09000 	.word	0x03d09000
 80080c4:	003d0900 	.word	0x003d0900
 80080c8:	08008884 	.word	0x08008884

080080cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b083      	sub	sp, #12
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080d8:	f003 0308 	and.w	r3, r3, #8
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d00a      	beq.n	80080f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	430a      	orrs	r2, r1
 80080f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080fa:	f003 0301 	and.w	r3, r3, #1
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d00a      	beq.n	8008118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d00a      	beq.n	800813a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813e:	f003 0304 	and.w	r3, r3, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00a      	beq.n	800815c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	430a      	orrs	r2, r1
 800815a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008160:	f003 0310 	and.w	r3, r3, #16
 8008164:	2b00      	cmp	r3, #0
 8008166:	d00a      	beq.n	800817e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	689b      	ldr	r3, [r3, #8]
 800816e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	430a      	orrs	r2, r1
 800817c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008182:	f003 0320 	and.w	r3, r3, #32
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00a      	beq.n	80081a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	430a      	orrs	r2, r1
 800819e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d01a      	beq.n	80081e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ca:	d10a      	bne.n	80081e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	430a      	orrs	r2, r1
 80081e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d00a      	beq.n	8008204 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	430a      	orrs	r2, r1
 8008202:	605a      	str	r2, [r3, #4]
  }
}
 8008204:	bf00      	nop
 8008206:	370c      	adds	r7, #12
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr

08008210 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b098      	sub	sp, #96	@ 0x60
 8008214:	af02      	add	r7, sp, #8
 8008216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2200      	movs	r2, #0
 800821c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008220:	f7f8 ff76 	bl	8001110 <HAL_GetTick>
 8008224:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f003 0308 	and.w	r3, r3, #8
 8008230:	2b08      	cmp	r3, #8
 8008232:	d12f      	bne.n	8008294 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008234:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008238:	9300      	str	r3, [sp, #0]
 800823a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800823c:	2200      	movs	r2, #0
 800823e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f88e 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 8008248:	4603      	mov	r3, r0
 800824a:	2b00      	cmp	r3, #0
 800824c:	d022      	beq.n	8008294 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008256:	e853 3f00 	ldrex	r3, [r3]
 800825a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800825c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800825e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008262:	653b      	str	r3, [r7, #80]	@ 0x50
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	461a      	mov	r2, r3
 800826a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800826c:	647b      	str	r3, [r7, #68]	@ 0x44
 800826e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008272:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008274:	e841 2300 	strex	r3, r2, [r1]
 8008278:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1e6      	bne.n	800824e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e063      	b.n	800835c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0304 	and.w	r3, r3, #4
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d149      	bne.n	8008336 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80082a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80082a6:	9300      	str	r3, [sp, #0]
 80082a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80082aa:	2200      	movs	r2, #0
 80082ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80082b0:	6878      	ldr	r0, [r7, #4]
 80082b2:	f000 f857 	bl	8008364 <UART_WaitOnFlagUntilTimeout>
 80082b6:	4603      	mov	r3, r0
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d03c      	beq.n	8008336 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c4:	e853 3f00 	ldrex	r3, [r3]
 80082c8:	623b      	str	r3, [r7, #32]
   return(result);
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80082d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	461a      	mov	r2, r3
 80082d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80082da:	633b      	str	r3, [r7, #48]	@ 0x30
 80082dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80082e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082e2:	e841 2300 	strex	r3, r2, [r1]
 80082e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80082e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d1e6      	bne.n	80082bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	3308      	adds	r3, #8
 80082f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	e853 3f00 	ldrex	r3, [r3]
 80082fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f023 0301 	bic.w	r3, r3, #1
 8008304:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	3308      	adds	r3, #8
 800830c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800830e:	61fa      	str	r2, [r7, #28]
 8008310:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008312:	69b9      	ldr	r1, [r7, #24]
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	e841 2300 	strex	r3, r2, [r1]
 800831a:	617b      	str	r3, [r7, #20]
   return(result);
 800831c:	697b      	ldr	r3, [r7, #20]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d1e5      	bne.n	80082ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2220      	movs	r2, #32
 8008326:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e012      	b.n	800835c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2220      	movs	r2, #32
 800833a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2220      	movs	r2, #32
 8008342:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800835a:	2300      	movs	r3, #0
}
 800835c:	4618      	mov	r0, r3
 800835e:	3758      	adds	r7, #88	@ 0x58
 8008360:	46bd      	mov	sp, r7
 8008362:	bd80      	pop	{r7, pc}

08008364 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	60b9      	str	r1, [r7, #8]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	4613      	mov	r3, r2
 8008372:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008374:	e04f      	b.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	f1b3 3fff 	cmp.w	r3, #4294967295
 800837c:	d04b      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800837e:	f7f8 fec7 	bl	8001110 <HAL_GetTick>
 8008382:	4602      	mov	r2, r0
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	1ad3      	subs	r3, r2, r3
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	429a      	cmp	r2, r3
 800838c:	d302      	bcc.n	8008394 <UART_WaitOnFlagUntilTimeout+0x30>
 800838e:	69bb      	ldr	r3, [r7, #24]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008394:	2303      	movs	r3, #3
 8008396:	e04e      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f003 0304 	and.w	r3, r3, #4
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d037      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	2b80      	cmp	r3, #128	@ 0x80
 80083aa:	d034      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b40      	cmp	r3, #64	@ 0x40
 80083b0:	d031      	beq.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	69db      	ldr	r3, [r3, #28]
 80083b8:	f003 0308 	and.w	r3, r3, #8
 80083bc:	2b08      	cmp	r3, #8
 80083be:	d110      	bne.n	80083e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2208      	movs	r2, #8
 80083c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083c8:	68f8      	ldr	r0, [r7, #12]
 80083ca:	f000 f839 	bl	8008440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2208      	movs	r2, #8
 80083d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e029      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69db      	ldr	r3, [r3, #28]
 80083e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083f0:	d111      	bne.n	8008416 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80083fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f81f 	bl	8008440 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2220      	movs	r2, #32
 8008406:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2200      	movs	r2, #0
 800840e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e00f      	b.n	8008436 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	69da      	ldr	r2, [r3, #28]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	4013      	ands	r3, r2
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	429a      	cmp	r2, r3
 8008424:	bf0c      	ite	eq
 8008426:	2301      	moveq	r3, #1
 8008428:	2300      	movne	r3, #0
 800842a:	b2db      	uxtb	r3, r3
 800842c:	461a      	mov	r2, r3
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	429a      	cmp	r2, r3
 8008432:	d0a0      	beq.n	8008376 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
	...

08008440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b095      	sub	sp, #84	@ 0x54
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800844e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008450:	e853 3f00 	ldrex	r3, [r3]
 8008454:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008458:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800845c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	461a      	mov	r2, r3
 8008464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008466:	643b      	str	r3, [r7, #64]	@ 0x40
 8008468:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800846a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800846c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800846e:	e841 2300 	strex	r3, r2, [r1]
 8008472:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e6      	bne.n	8008448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	3308      	adds	r3, #8
 8008480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	e853 3f00 	ldrex	r3, [r3]
 8008488:	61fb      	str	r3, [r7, #28]
   return(result);
 800848a:	69fa      	ldr	r2, [r7, #28]
 800848c:	4b1e      	ldr	r3, [pc, #120]	@ (8008508 <UART_EndRxTransfer+0xc8>)
 800848e:	4013      	ands	r3, r2
 8008490:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3308      	adds	r3, #8
 8008498:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800849a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800849c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800849e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80084a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084a2:	e841 2300 	strex	r3, r2, [r1]
 80084a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e5      	bne.n	800847a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80084b2:	2b01      	cmp	r3, #1
 80084b4:	d118      	bne.n	80084e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	e853 3f00 	ldrex	r3, [r3]
 80084c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f023 0310 	bic.w	r3, r3, #16
 80084ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	461a      	mov	r2, r3
 80084d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80084d4:	61bb      	str	r3, [r7, #24]
 80084d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084d8:	6979      	ldr	r1, [r7, #20]
 80084da:	69ba      	ldr	r2, [r7, #24]
 80084dc:	e841 2300 	strex	r3, r2, [r1]
 80084e0:	613b      	str	r3, [r7, #16]
   return(result);
 80084e2:	693b      	ldr	r3, [r7, #16]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d1e6      	bne.n	80084b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2220      	movs	r2, #32
 80084ec:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2200      	movs	r2, #0
 80084fa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80084fc:	bf00      	nop
 80084fe:	3754      	adds	r7, #84	@ 0x54
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	effffffe 	.word	0xeffffffe

0800850c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b084      	sub	sp, #16
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008518:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008522:	68f8      	ldr	r0, [r7, #12]
 8008524:	f7ff f854 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008528:	bf00      	nop
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	e853 3f00 	ldrex	r3, [r3]
 8008544:	60bb      	str	r3, [r7, #8]
   return(result);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800854c:	61fb      	str	r3, [r7, #28]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	461a      	mov	r2, r3
 8008554:	69fb      	ldr	r3, [r7, #28]
 8008556:	61bb      	str	r3, [r7, #24]
 8008558:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800855a:	6979      	ldr	r1, [r7, #20]
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	e841 2300 	strex	r3, r2, [r1]
 8008562:	613b      	str	r3, [r7, #16]
   return(result);
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d1e6      	bne.n	8008538 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2220      	movs	r2, #32
 800856e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2200      	movs	r2, #0
 8008576:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f7f8 fa0b 	bl	8000994 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800857e:	bf00      	nop
 8008580:	3720      	adds	r7, #32
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800858e:	bf00      	nop
 8008590:	370c      	adds	r7, #12
 8008592:	46bd      	mov	sp, r7
 8008594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008598:	4770      	bx	lr

0800859a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800859a:	b480      	push	{r7}
 800859c:	b083      	sub	sp, #12
 800859e:	af00      	add	r7, sp, #0
 80085a0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80085a2:	bf00      	nop
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80085b6:	bf00      	nop
 80085b8:	370c      	adds	r7, #12
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr

080085c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80085c2:	b480      	push	{r7}
 80085c4:	b085      	sub	sp, #20
 80085c6:	af00      	add	r7, sp, #0
 80085c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e027      	b.n	8008628 <HAL_UARTEx_DisableFifoMode+0x66>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2224      	movs	r2, #36	@ 0x24
 80085e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	681a      	ldr	r2, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 0201 	bic.w	r2, r2, #1
 80085fe:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008606:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2220      	movs	r2, #32
 800861a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008626:	2300      	movs	r3, #0
}
 8008628:	4618      	mov	r0, r3
 800862a:	3714      	adds	r7, #20
 800862c:	46bd      	mov	sp, r7
 800862e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008632:	4770      	bx	lr

08008634 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008644:	2b01      	cmp	r3, #1
 8008646:	d101      	bne.n	800864c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008648:	2302      	movs	r3, #2
 800864a:	e02d      	b.n	80086a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2224      	movs	r2, #36	@ 0x24
 8008658:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	681a      	ldr	r2, [r3, #0]
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f022 0201 	bic.w	r2, r2, #1
 8008672:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	689b      	ldr	r3, [r3, #8]
 800867a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	683a      	ldr	r2, [r7, #0]
 8008684:	430a      	orrs	r2, r1
 8008686:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f84f 	bl	800872c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	68fa      	ldr	r2, [r7, #12]
 8008694:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2220      	movs	r2, #32
 800869a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2200      	movs	r2, #0
 80086a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086a6:	2300      	movs	r3, #0
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d101      	bne.n	80086c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80086c4:	2302      	movs	r3, #2
 80086c6:	e02d      	b.n	8008724 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2224      	movs	r2, #36	@ 0x24
 80086d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0201 	bic.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	683a      	ldr	r2, [r7, #0]
 8008700:	430a      	orrs	r2, r1
 8008702:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f000 f811 	bl	800872c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	68fa      	ldr	r2, [r7, #12]
 8008710:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2220      	movs	r2, #32
 8008716:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008722:	2300      	movs	r3, #0
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008738:	2b00      	cmp	r3, #0
 800873a:	d108      	bne.n	800874e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800874c:	e031      	b.n	80087b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800874e:	2310      	movs	r3, #16
 8008750:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008752:	2310      	movs	r3, #16
 8008754:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	689b      	ldr	r3, [r3, #8]
 800875c:	0e5b      	lsrs	r3, r3, #25
 800875e:	b2db      	uxtb	r3, r3
 8008760:	f003 0307 	and.w	r3, r3, #7
 8008764:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	689b      	ldr	r3, [r3, #8]
 800876c:	0f5b      	lsrs	r3, r3, #29
 800876e:	b2db      	uxtb	r3, r3
 8008770:	f003 0307 	and.w	r3, r3, #7
 8008774:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008776:	7bbb      	ldrb	r3, [r7, #14]
 8008778:	7b3a      	ldrb	r2, [r7, #12]
 800877a:	4911      	ldr	r1, [pc, #68]	@ (80087c0 <UARTEx_SetNbDataToProcess+0x94>)
 800877c:	5c8a      	ldrb	r2, [r1, r2]
 800877e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008782:	7b3a      	ldrb	r2, [r7, #12]
 8008784:	490f      	ldr	r1, [pc, #60]	@ (80087c4 <UARTEx_SetNbDataToProcess+0x98>)
 8008786:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008788:	fb93 f3f2 	sdiv	r3, r3, r2
 800878c:	b29a      	uxth	r2, r3
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008794:	7bfb      	ldrb	r3, [r7, #15]
 8008796:	7b7a      	ldrb	r2, [r7, #13]
 8008798:	4909      	ldr	r1, [pc, #36]	@ (80087c0 <UARTEx_SetNbDataToProcess+0x94>)
 800879a:	5c8a      	ldrb	r2, [r1, r2]
 800879c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80087a0:	7b7a      	ldrb	r2, [r7, #13]
 80087a2:	4908      	ldr	r1, [pc, #32]	@ (80087c4 <UARTEx_SetNbDataToProcess+0x98>)
 80087a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80087a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	0800889c 	.word	0x0800889c
 80087c4:	080088a4 	.word	0x080088a4

080087c8 <memset>:
 80087c8:	4402      	add	r2, r0
 80087ca:	4603      	mov	r3, r0
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d100      	bne.n	80087d2 <memset+0xa>
 80087d0:	4770      	bx	lr
 80087d2:	f803 1b01 	strb.w	r1, [r3], #1
 80087d6:	e7f9      	b.n	80087cc <memset+0x4>

080087d8 <__libc_init_array>:
 80087d8:	b570      	push	{r4, r5, r6, lr}
 80087da:	4d0d      	ldr	r5, [pc, #52]	@ (8008810 <__libc_init_array+0x38>)
 80087dc:	4c0d      	ldr	r4, [pc, #52]	@ (8008814 <__libc_init_array+0x3c>)
 80087de:	1b64      	subs	r4, r4, r5
 80087e0:	10a4      	asrs	r4, r4, #2
 80087e2:	2600      	movs	r6, #0
 80087e4:	42a6      	cmp	r6, r4
 80087e6:	d109      	bne.n	80087fc <__libc_init_array+0x24>
 80087e8:	4d0b      	ldr	r5, [pc, #44]	@ (8008818 <__libc_init_array+0x40>)
 80087ea:	4c0c      	ldr	r4, [pc, #48]	@ (800881c <__libc_init_array+0x44>)
 80087ec:	f000 f818 	bl	8008820 <_init>
 80087f0:	1b64      	subs	r4, r4, r5
 80087f2:	10a4      	asrs	r4, r4, #2
 80087f4:	2600      	movs	r6, #0
 80087f6:	42a6      	cmp	r6, r4
 80087f8:	d105      	bne.n	8008806 <__libc_init_array+0x2e>
 80087fa:	bd70      	pop	{r4, r5, r6, pc}
 80087fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008800:	4798      	blx	r3
 8008802:	3601      	adds	r6, #1
 8008804:	e7ee      	b.n	80087e4 <__libc_init_array+0xc>
 8008806:	f855 3b04 	ldr.w	r3, [r5], #4
 800880a:	4798      	blx	r3
 800880c:	3601      	adds	r6, #1
 800880e:	e7f2      	b.n	80087f6 <__libc_init_array+0x1e>
 8008810:	080088b4 	.word	0x080088b4
 8008814:	080088b4 	.word	0x080088b4
 8008818:	080088b4 	.word	0x080088b4
 800881c:	080088b8 	.word	0x080088b8

08008820 <_init>:
 8008820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008822:	bf00      	nop
 8008824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008826:	bc08      	pop	{r3}
 8008828:	469e      	mov	lr, r3
 800882a:	4770      	bx	lr

0800882c <_fini>:
 800882c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800882e:	bf00      	nop
 8008830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008832:	bc08      	pop	{r3}
 8008834:	469e      	mov	lr, r3
 8008836:	4770      	bx	lr
